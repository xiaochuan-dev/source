{"version":3,"file":"mobx.js","sources":["../src/v5/utils/utils.ts","../src/v5/core/atom.ts","../src/v5/utils/comparer.ts","../src/v5/utils/decorators.ts","../src/v5/types/modifiers.ts","../src/v5/api/observabledecorator.ts","../src/v5/api/observable.ts","../src/v5/api/computed.ts","../src/v5/core/derivation.ts","../src/v5/core/action.ts","../src/v5/types/observablevalue.ts","../src/v5/core/computedvalue.ts","../src/v5/core/globalstate.ts","../src/v5/core/observable.ts","../src/v5/core/reaction.ts","../src/v5/core/spy.ts","../src/v5/api/actiondecorator.ts","../src/v5/api/action.ts","../src/v5/api/autorun.ts","../src/v5/api/become-observed.ts","../src/v5/api/configure.ts","../src/v5/api/decorate.ts","../src/v5/api/extendobservable.ts","../src/v5/api/extras.ts","../src/v5/api/flow.ts","../src/v5/api/intercept-read.ts","../src/v5/api/intercept.ts","../src/v5/api/iscomputed.ts","../src/v5/api/isobservable.ts","../src/v5/api/object-api.ts","../src/v5/api/observe.ts","../src/v5/api/tojs.ts","../src/v5/api/trace.ts","../src/v5/api/transaction.ts","../src/v5/api/when.ts","../src/v5/types/dynamicobject.ts","../src/v5/types/intercept-utils.ts","../src/v5/types/listen-utils.ts","../src/v5/types/observablearray.ts","../src/v5/types/observablemap.ts","../src/v5/types/observableset.ts","../src/v5/types/observableobject.ts","../src/v5/types/type-utils.ts","../src/v5/utils/eq.ts","../src/v5/utils/iterable.ts","../src/v5/mobx.ts"],"sourcesContent":["import { IObservableArray, globalState, isObservableArray, isObservableMap } from \"../internal\"\n\nexport const OBFUSCATED_ERROR =\n    \"An invariant failed, however the error is obfuscated because this is a production build.\"\n\nexport const EMPTY_ARRAY = []\nObject.freeze(EMPTY_ARRAY)\n\nexport const EMPTY_OBJECT = {}\nObject.freeze(EMPTY_OBJECT)\n\nexport interface Lambda {\n    (): void\n    name?: string\n}\n\nexport function getNextId() {\n    return ++globalState.mobxGuid\n}\n\nexport function fail(message: string | boolean): never {\n    invariant(false, message)\n    throw \"X\" // unreachable\n}\n\nexport function invariant(check: false, message?: string | boolean): never\nexport function invariant(check: true, message?: string | boolean): void\nexport function invariant(check: any, message?: string | boolean): void\nexport function invariant(check: boolean, message?: string | boolean) {\n    if (!check) throw new Error(\"[mobx] \" + (message || OBFUSCATED_ERROR))\n}\n\n/**\n * Prints a deprecation message, but only one time.\n * Returns false if the deprecated message was already printed before\n */\nconst deprecatedMessages: string[] = []\n\nexport function deprecated(msg: string): boolean\nexport function deprecated(thing: string, replacement: string): boolean\nexport function deprecated(msg: string, thing?: string): boolean {\n    if (process.env.NODE_ENV === \"production\") return false\n    if (thing) {\n        return deprecated(`'${msg}', use '${thing}' instead.`)\n    }\n    if (deprecatedMessages.indexOf(msg) !== -1) return false\n    deprecatedMessages.push(msg)\n    console.error(\"[mobx] Deprecated: \" + msg)\n    return true\n}\n\n/**\n * Makes sure that the provided function is invoked at most once.\n */\nexport function once(func: Lambda): Lambda {\n    let invoked = false\n    return function() {\n        if (invoked) return\n        invoked = true\n        return (func as any).apply(this, arguments)\n    }\n}\n\nexport const noop = () => {}\n\nexport function unique<T>(list: T[]): T[] {\n    const res: T[] = []\n    list.forEach(item => {\n        if (res.indexOf(item) === -1) res.push(item)\n    })\n    return res\n}\n\nexport function isObject(value: any): boolean {\n    return value !== null && typeof value === \"object\"\n}\n\nexport function isPlainObject(value) {\n    if (value === null || typeof value !== \"object\") return false\n    const proto = Object.getPrototypeOf(value)\n    return proto === Object.prototype || proto === null\n}\n\nexport function convertToMap(dataStructure: any): Map<any, any> {\n    if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {\n        return dataStructure\n    } else if (Array.isArray(dataStructure)) {\n        return new Map(dataStructure)\n    } else if (isPlainObject(dataStructure)) {\n        const map = new Map()\n        for (const key in dataStructure) {\n            map.set(key, dataStructure[key])\n        }\n        return map\n    } else {\n        return fail(`Cannot convert to map from '${dataStructure}'`)\n    }\n}\n\nexport function makeNonEnumerable(object: any, propNames: PropertyKey[]) {\n    for (let i = 0; i < propNames.length; i++) {\n        addHiddenProp(object, propNames[i], object[propNames[i]])\n    }\n}\n\nexport function addHiddenProp(object: any, propName: PropertyKey, value: any) {\n    Object.defineProperty(object, propName, {\n        enumerable: false,\n        writable: true,\n        configurable: true,\n        value\n    })\n}\n\nexport function addHiddenFinalProp(object: any, propName: PropertyKey, value: any) {\n    Object.defineProperty(object, propName, {\n        enumerable: false,\n        writable: false,\n        configurable: true,\n        value\n    })\n}\n\nexport function isPropertyConfigurable(object: any, prop: PropertyKey): boolean {\n    const descriptor = Object.getOwnPropertyDescriptor(object, prop)\n    return !descriptor || (descriptor.configurable !== false && descriptor.writable !== false)\n}\n\nexport function assertPropertyConfigurable(object: any, prop: PropertyKey) {\n    if (process.env.NODE_ENV !== \"production\" && !isPropertyConfigurable(object, prop))\n        fail(\n            `Cannot make property '${prop.toString()}' observable, it is not configurable and writable in the target object`\n        )\n}\n\nexport function createInstanceofPredicate<T>(\n    name: string,\n    clazz: new (...args: any[]) => T\n): (x: any) => x is T {\n    const propName = \"isMobX\" + name\n    clazz.prototype[propName] = true\n    return function(x) {\n        return isObject(x) && x[propName] === true\n    } as any\n}\n\n/**\n * Returns whether the argument is an array, disregarding observability.\n */\nexport function isArrayLike(x: any): x is Array<any> | IObservableArray<any> {\n    return Array.isArray(x) || isObservableArray(x)\n}\n\nexport function isES6Map(thing): boolean {\n    return thing instanceof Map\n}\n\nexport function isES6Set(thing): thing is Set<any> {\n    return thing instanceof Set\n}\n\n/**\n * Returns the following: own keys, prototype keys & own symbol keys, if they are enumerable.\n */\nexport function getPlainObjectKeys(object) {\n    const enumerables = new Set<PropertyKey>()\n    for (let key in object) enumerables.add(key) // *all* enumerables\n    Object.getOwnPropertySymbols(object).forEach(k => {\n        if (Object.getOwnPropertyDescriptor(object, k)!.enumerable) enumerables.add(k)\n    }) // *own* symbols\n    // Note: this implementation is missing enumerable, inherited, symbolic property names! That would however pretty expensive to add,\n    // as there is no efficient iterator that returns *all* properties\n    return Array.from(enumerables)\n}\n\nexport function stringifyKey(key: any): string {\n    if (key && key.toString) return key.toString()\n    else return new String(key).toString()\n}\n\nexport function toPrimitive(value) {\n    return value === null ? null : typeof value === \"object\" ? \"\" + value : value\n}\n\nexport const ownKeys: (target: any) => PropertyKey[] =\n    typeof Reflect !== \"undefined\" && Reflect.ownKeys\n        ? Reflect.ownKeys\n        : Object.getOwnPropertySymbols\n        ? (obj) => Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj) as any)\n        : /* istanbul ignore next */ Object.getOwnPropertyNames\n","import {\n    IDerivationState,\n    IObservable,\n    IDerivation,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    noop,\n    onBecomeObserved,\n    onBecomeUnobserved,\n    propagateChanged,\n    reportObserved,\n    startBatch\n} from \"../internal\"\nimport { Lambda } from \"../utils/utils\"\n\nexport const $mobx = Symbol(\"mobx administration\")\n\nexport interface IAtom extends IObservable {\n    reportObserved()\n    reportChanged()\n}\n\nexport class Atom implements IAtom {\n    isPendingUnobservation = false // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed\n    isBeingObserved = false\n    observers = new Set<IDerivation>()\n\n    diffValue = 0\n    lastAccessedBy = 0\n    lowestObserverState = IDerivationState.NOT_TRACKING\n    /**\n     * Create a new atom. For debugging purposes it is recommended to give it a name.\n     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.\n     */\n    constructor(public name = \"Atom@\" + getNextId()) {}\n\n    public onBecomeObservedListeners: Set<Lambda> | undefined\n    public onBecomeUnobservedListeners: Set<Lambda> | undefined\n\n    public onBecomeObserved() {\n        if (this.onBecomeObservedListeners) {\n            this.onBecomeObservedListeners.forEach(listener => listener())\n        }\n    }\n\n    public onBecomeUnobserved() {\n        if (this.onBecomeUnobservedListeners) {\n            this.onBecomeUnobservedListeners.forEach(listener => listener())\n        }\n    }\n\n    /**\n     * Invoke this method to notify mobx that your atom has been used somehow.\n     * Returns true if there is currently a reactive context.\n     */\n    public reportObserved(): boolean {\n        return reportObserved(this)\n    }\n\n    /**\n     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.\n     */\n    public reportChanged() {\n        startBatch()\n        propagateChanged(this)\n        endBatch()\n    }\n\n    toString() {\n        return this.name\n    }\n}\n\nexport const isAtom = createInstanceofPredicate(\"Atom\", Atom)\n\nexport function createAtom(\n    name: string,\n    onBecomeObservedHandler: () => void = noop,\n    onBecomeUnobservedHandler: () => void = noop\n): IAtom {\n    const atom = new Atom(name)\n    // default `noop` listener will not initialize the hook Set\n    if (onBecomeObservedHandler !== noop) {\n        onBecomeObserved(atom, onBecomeObservedHandler)\n    }\n\n    if (onBecomeUnobservedHandler !== noop) {\n        onBecomeUnobserved(atom, onBecomeUnobservedHandler)\n    }\n    return atom\n}\n","import { deepEqual } from \"../internal\"\n\nexport interface IEqualsComparer<T> {\n    (a: T, b: T): boolean\n}\n\nfunction identityComparer(a: any, b: any): boolean {\n    return a === b\n}\n\nfunction structuralComparer(a: any, b: any): boolean {\n    return deepEqual(a, b)\n}\n\nfunction shallowComparer(a: any, b: any): boolean {\n    return deepEqual(a, b, 1)\n}\n\nfunction defaultComparer(a: any, b: any): boolean {\n    return Object.is(a, b)\n}\n\nexport const comparer = {\n    identity: identityComparer,\n    structural: structuralComparer,\n    default: defaultComparer,\n    shallow: shallowComparer\n}\n","import { EMPTY_ARRAY, addHiddenProp, fail } from \"../internal\"\n\nexport const mobxDidRunLazyInitializersSymbol = Symbol(\"mobx did run lazy initializers\")\nexport const mobxPendingDecorators = Symbol(\"mobx pending decorators\")\n\ntype DecoratorTarget = {\n    [mobxDidRunLazyInitializersSymbol]?: boolean\n    [mobxPendingDecorators]?: { [prop: string]: DecoratorInvocationDescription }\n}\n\nexport type BabelDescriptor = PropertyDescriptor & { initializer?: () => any }\n\nexport type PropertyCreator = (\n    instance: any,\n    propertyName: PropertyKey,\n    descriptor: BabelDescriptor | undefined,\n    decoratorTarget: any,\n    decoratorArgs: any[]\n) => void\n\ntype DecoratorInvocationDescription = {\n    prop: string\n    propertyCreator: PropertyCreator\n    descriptor: BabelDescriptor | undefined\n    decoratorTarget: any\n    decoratorArguments: any[]\n}\n\nconst enumerableDescriptorCache: { [prop: string]: PropertyDescriptor } = {}\nconst nonEnumerableDescriptorCache: { [prop: string]: PropertyDescriptor } = {}\n\nfunction createPropertyInitializerDescriptor(\n    prop: string,\n    enumerable: boolean\n): PropertyDescriptor {\n    const cache = enumerable ? enumerableDescriptorCache : nonEnumerableDescriptorCache\n    return (\n        cache[prop] ||\n        (cache[prop] = {\n            configurable: true,\n            enumerable: enumerable,\n            get() {\n                initializeInstance(this)\n                return this[prop]\n            },\n            set(value) {\n                initializeInstance(this)\n                this[prop] = value\n            }\n        })\n    )\n}\n\nexport function initializeInstance(target: any)\nexport function initializeInstance(target: DecoratorTarget) {\n    if (target[mobxDidRunLazyInitializersSymbol] === true) return\n    const decorators = target[mobxPendingDecorators]\n    if (decorators) {\n        addHiddenProp(target, mobxDidRunLazyInitializersSymbol, true)\n        // Build property key array from both strings and symbols\n        const keys = [...Object.getOwnPropertySymbols(decorators), ...Object.keys(decorators)]\n        for (const key of keys) {\n            const d = decorators[key as any]\n            d.propertyCreator(target, d.prop, d.descriptor, d.decoratorTarget, d.decoratorArguments)\n        }\n    }\n}\n\nexport function createPropDecorator(\n    propertyInitiallyEnumerable: boolean,\n    propertyCreator: PropertyCreator\n) {\n    return function decoratorFactory() {\n        let decoratorArguments: any[]\n\n        const decorator = function decorate(\n            target: DecoratorTarget,\n            prop: string,\n            descriptor: BabelDescriptor | undefined,\n            applyImmediately?: any\n            // This is a special parameter to signal the direct application of a decorator, allow extendObservable to skip the entire type decoration part,\n            // as the instance to apply the decorator to equals the target\n        ) {\n            if (applyImmediately === true) {\n                propertyCreator(target, prop, descriptor, target, decoratorArguments)\n                return null\n            }\n            if (process.env.NODE_ENV !== \"production\" && !quacksLikeADecorator(arguments))\n                fail(\"This function is a decorator, but it wasn't invoked like a decorator\")\n            if (!Object.prototype.hasOwnProperty.call(target, mobxPendingDecorators)) {\n                const inheritedDecorators = target[mobxPendingDecorators]\n                addHiddenProp(target, mobxPendingDecorators, { ...inheritedDecorators })\n            }\n            target[mobxPendingDecorators]![prop] = {\n                prop,\n                propertyCreator,\n                descriptor,\n                decoratorTarget: target,\n                decoratorArguments\n            }\n            return createPropertyInitializerDescriptor(prop, propertyInitiallyEnumerable)\n        }\n\n        if (quacksLikeADecorator(arguments)) {\n            // @decorator\n            decoratorArguments = EMPTY_ARRAY\n            return decorator.apply(null, arguments as any)\n        } else {\n            // @decorator(args)\n            decoratorArguments = Array.prototype.slice.call(arguments)\n            return decorator\n        }\n    } as Function\n}\n\nexport function quacksLikeADecorator(args: IArguments): boolean {\n    return (\n        ((args.length === 2 || args.length === 3) &&\n            (typeof args[1] === \"string\" || typeof args[1] === \"symbol\")) ||\n        (args.length === 4 && args[3] === true)\n    )\n}\n","import {\n    deepEqual,\n    fail,\n    isES6Map,\n    isES6Set,\n    isObservable,\n    isObservableArray,\n    isObservableMap,\n    isObservableSet,\n    isObservableObject,\n    isPlainObject,\n    observable\n} from \"../internal\"\n\nexport interface IEnhancer<T> {\n    (newValue: T, oldValue: T | undefined, name: string): T\n}\n\nexport function deepEnhancer(v, _, name) {\n    // it is an observable already, done\n    if (isObservable(v)) return v\n\n    // something that can be converted and mutated?\n    if (Array.isArray(v)) return observable.array(v, { name })\n    if (isPlainObject(v)) return observable.object(v, undefined, { name })\n    if (isES6Map(v)) return observable.map(v, { name })\n    if (isES6Set(v)) return observable.set(v, { name })\n\n    return v\n}\n\nexport function shallowEnhancer(v, _, name): any {\n    if (v === undefined || v === null) return v\n    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v))\n        return v\n    if (Array.isArray(v)) return observable.array(v, { name, deep: false })\n    if (isPlainObject(v)) return observable.object(v, undefined, { name, deep: false })\n    if (isES6Map(v)) return observable.map(v, { name, deep: false })\n    if (isES6Set(v)) return observable.set(v, { name, deep: false })\n\n    return fail(\n        process.env.NODE_ENV !== \"production\" &&\n            \"The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets\"\n    )\n}\n\nexport function referenceEnhancer(newValue?) {\n    // never turn into an observable\n    return newValue\n}\n\nexport function refStructEnhancer(v, oldValue, name): any {\n    if (process.env.NODE_ENV !== \"production\" && isObservable(v))\n        throw `observable.struct should not be used with observable values`\n    if (deepEqual(v, oldValue)) return oldValue\n    return v\n}\n","import {\n    BabelDescriptor,\n    IEnhancer,\n    asObservableObject,\n    createPropDecorator,\n    fail,\n    invariant,\n    stringifyKey\n} from \"../internal\"\n\nexport type IObservableDecorator = {\n    (target: Object, property: string | symbol, descriptor?: PropertyDescriptor): void\n    enhancer: IEnhancer<any>\n}\n\nexport function createDecoratorForEnhancer(enhancer: IEnhancer<any>): IObservableDecorator {\n    invariant(enhancer)\n    const decorator = createPropDecorator(\n        true,\n        (\n            target: any,\n            propertyName: PropertyKey,\n            descriptor: BabelDescriptor | undefined,\n            _decoratorTarget,\n            decoratorArgs: any[]\n        ) => {\n            if (process.env.NODE_ENV !== \"production\") {\n                invariant(\n                    !descriptor || !descriptor.get,\n                    `@observable cannot be used on getter (property \"${stringifyKey(\n                        propertyName\n                    )}\"), use @computed instead.`\n                )\n            }\n            const initialValue = descriptor\n                ? descriptor.initializer\n                    ? descriptor.initializer.call(target)\n                    : descriptor.value\n                : undefined\n            asObservableObject(target).addObservableProp(propertyName, initialValue, enhancer)\n        }\n    )\n    const res: any =\n        // Extra process checks, as this happens during module initialization\n        typeof process !== \"undefined\" && process.env && process.env.NODE_ENV !== \"production\"\n            ? function observableDecorator() {\n                  // This wrapper function is just to detect illegal decorator invocations, deprecate in a next version\n                  // and simply return the created prop decorator\n                  if (arguments.length < 2)\n                      return fail(\n                          \"Incorrect decorator invocation. @observable decorator doesn't expect any arguments\"\n                      )\n                  return decorator.apply(null, arguments)\n              }\n            : decorator\n    res.enhancer = enhancer\n    return res\n}\n","import {\n    IEnhancer,\n    IEqualsComparer,\n    IObservableArray,\n    IObservableDecorator,\n    IObservableMapInitialValues,\n    IObservableSetInitialValues,\n    IObservableObject,\n    IObservableValue,\n    ObservableMap,\n    ObservableSet,\n    ObservableValue,\n    createDecoratorForEnhancer,\n    createDynamicObservableObject,\n    createObservableArray,\n    deepEnhancer,\n    extendObservable,\n    fail,\n    isES6Map,\n    isES6Set,\n    isObservable,\n    isPlainObject,\n    refStructEnhancer,\n    referenceEnhancer,\n    shallowEnhancer,\n    getDefaultDecoratorFromObjectOptions,\n    extendObservableObjectWithProperties\n} from \"../internal\"\n\nexport type CreateObservableOptions = {\n    name?: string\n    equals?: IEqualsComparer<any>\n    deep?: boolean\n    defaultDecorator?: IObservableDecorator\n    proxy?: boolean\n}\n\n// Predefined bags of create observable options, to avoid allocating temporarily option objects\n// in the majority of cases\nexport const defaultCreateObservableOptions: CreateObservableOptions = {\n    deep: true,\n    name: undefined,\n    defaultDecorator: undefined,\n    proxy: true\n}\nObject.freeze(defaultCreateObservableOptions)\n\nfunction assertValidOption(key: string) {\n    if (!/^(deep|name|equals|defaultDecorator|proxy)$/.test(key))\n        fail(`invalid option for (extend)observable: ${key}`)\n}\n\nexport function asCreateObservableOptions(thing: any): CreateObservableOptions {\n    if (thing === null || thing === undefined) return defaultCreateObservableOptions\n    if (typeof thing === \"string\") return { name: thing, deep: true, proxy: true }\n    if (process.env.NODE_ENV !== \"production\") {\n        if (typeof thing !== \"object\") return fail(\"expected options object\")\n        Object.keys(thing).forEach(assertValidOption)\n    }\n    return thing as CreateObservableOptions\n}\n\nexport const deepDecorator = createDecoratorForEnhancer(deepEnhancer)\nconst shallowDecorator = createDecoratorForEnhancer(shallowEnhancer)\nexport const refDecorator = createDecoratorForEnhancer(referenceEnhancer)\nconst refStructDecorator = createDecoratorForEnhancer(refStructEnhancer)\n\nfunction getEnhancerFromOptions(options: CreateObservableOptions): IEnhancer<any> {\n    return options.defaultDecorator\n        ? options.defaultDecorator.enhancer\n        : options.deep === false\n        ? referenceEnhancer\n        : deepEnhancer\n}\n\n/**\n * Turns an object, array or function into a reactive structure.\n * @param v the value which should become observable.\n */\nfunction createObservable(v: any, arg2?: any, arg3?: any) {\n    // @observable someProp;\n    if (typeof arguments[1] === \"string\" || typeof arguments[1] === \"symbol\") {\n        return deepDecorator.apply(null, arguments as any)\n    }\n\n    // it is an observable already, done\n    if (isObservable(v)) return v\n\n    // something that can be converted and mutated?\n    const res = isPlainObject(v)\n        ? observable.object(v, arg2, arg3)\n        : Array.isArray(v)\n        ? observable.array(v, arg2)\n        : isES6Map(v)\n        ? observable.map(v, arg2)\n        : isES6Set(v)\n        ? observable.set(v, arg2)\n        : v\n\n    // this value could be converted to a new observable data structure, return it\n    if (res !== v) return res\n\n    // otherwise, just box it\n    fail(\n        process.env.NODE_ENV !== \"production\" &&\n            `The provided value could not be converted into an observable. If you want just create an observable reference to the object use 'observable.box(value)'`\n    )\n}\n\nexport interface IObservableFactory {\n    // observable overloads\n    (value: number | string | null | undefined | boolean): never // Nope, not supported, use box\n    (target: Object, key: string | symbol, baseDescriptor?: PropertyDescriptor): any // decorator\n    <T = any>(value: T[], options?: CreateObservableOptions): IObservableArray<T>\n    <T = any>(value: Set<T>, options?: CreateObservableOptions): ObservableSet<T>\n    <K = any, V = any>(value: Map<K, V>, options?: CreateObservableOptions): ObservableMap<K, V>\n    <T extends Object>(\n        value: T,\n        decorators?: { [K in keyof T]?: Function },\n        options?: CreateObservableOptions\n    ): T & IObservableObject\n}\n\nexport interface IObservableFactories {\n    box: <T = any>(value?: T, options?: CreateObservableOptions) => IObservableValue<T>\n    array: <T = any>(initialValues?: T[], options?: CreateObservableOptions) => IObservableArray<T>\n    set: <T = any>(\n        initialValues?: IObservableSetInitialValues<T>,\n        options?: CreateObservableOptions\n    ) => ObservableSet<T>\n    map: <K = any, V = any>(\n        initialValues?: IObservableMapInitialValues<K, V>,\n        options?: CreateObservableOptions\n    ) => ObservableMap<K, V>\n    object: <T = any>(\n        props: T,\n        decorators?: { [K in keyof T]?: Function },\n        options?: CreateObservableOptions\n    ) => T & IObservableObject\n\n    /**\n     * Decorator that creates an observable that only observes the references, but doesn't try to turn the assigned value into an observable.ts.\n     */\n    ref: IObservableDecorator\n    /**\n     * Decorator that creates an observable converts its value (objects, maps or arrays) into a shallow observable structure\n     */\n    shallow: IObservableDecorator\n    deep: IObservableDecorator\n    struct: IObservableDecorator\n}\n\nconst observableFactories: IObservableFactories = {\n    box<T = any>(value?: T, options?: CreateObservableOptions): IObservableValue<T> {\n        if (arguments.length > 2) incorrectlyUsedAsDecorator(\"box\")\n        const o = asCreateObservableOptions(options)\n        return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals)\n    },\n    array<T = any>(initialValues?: T[], options?: CreateObservableOptions): IObservableArray<T> {\n        if (arguments.length > 2) incorrectlyUsedAsDecorator(\"array\")\n        const o = asCreateObservableOptions(options)\n        return createObservableArray(initialValues, getEnhancerFromOptions(o), o.name) as any\n    },\n    map<K = any, V = any>(\n        initialValues?: IObservableMapInitialValues<K, V>,\n        options?: CreateObservableOptions\n    ): ObservableMap<K, V> {\n        if (arguments.length > 2) incorrectlyUsedAsDecorator(\"map\")\n        const o = asCreateObservableOptions(options)\n        return new ObservableMap<K, V>(initialValues, getEnhancerFromOptions(o), o.name)\n    },\n    set<T = any>(\n        initialValues?: IObservableSetInitialValues<T>,\n        options?: CreateObservableOptions\n    ): ObservableSet<T> {\n        if (arguments.length > 2) incorrectlyUsedAsDecorator(\"set\")\n        const o = asCreateObservableOptions(options)\n        return new ObservableSet<T>(initialValues, getEnhancerFromOptions(o), o.name)\n    },\n    object<T = any>(\n        props: T,\n        decorators?: { [K in keyof T]: Function },\n        options?: CreateObservableOptions\n    ): T & IObservableObject {\n        if (typeof arguments[1] === \"string\") incorrectlyUsedAsDecorator(\"object\")\n        const o = asCreateObservableOptions(options)\n        if (o.proxy === false) {\n            return extendObservable({}, props, decorators, o) as any\n        } else {\n            const defaultDecorator = getDefaultDecoratorFromObjectOptions(o)\n            const base = extendObservable({}, undefined, undefined, o) as any\n            const proxy = createDynamicObservableObject(base)\n            extendObservableObjectWithProperties(proxy, props, decorators, defaultDecorator)\n            return proxy\n        }\n    },\n    ref: refDecorator,\n    shallow: shallowDecorator,\n    deep: deepDecorator,\n    struct: refStructDecorator\n} as any\n\nexport const observable: IObservableFactory &\n    IObservableFactories & {\n        enhancer: IEnhancer<any>\n    } = createObservable as any\n\n// weird trick to keep our typings nicely with our funcs, and still extend the observable function\nObject.keys(observableFactories).forEach(name => (observable[name] = observableFactories[name]))\n\nfunction incorrectlyUsedAsDecorator(methodName) {\n    fail(\n        // process.env.NODE_ENV !== \"production\" &&\n        `Expected one or two arguments to observable.${methodName}. Did you accidentally try to use observable.${methodName} as decorator?`\n    )\n}\n","import {\n    ComputedValue,\n    IComputedValue,\n    IComputedValueOptions,\n    asObservableObject,\n    comparer,\n    createPropDecorator,\n    invariant,\n    stringifyKey\n} from \"../internal\"\n\nexport interface IComputed {\n    <T>(options: IComputedValueOptions<T>): any // decorator\n    <T>(func: () => T, setter: (v: T) => void): IComputedValue<T> // normal usage\n    <T>(func: () => T, options?: IComputedValueOptions<T>): IComputedValue<T> // normal usage\n    (target: Object, key: string | symbol, baseDescriptor?: PropertyDescriptor): void // decorator\n    struct: (target: Object, key: string | symbol, baseDescriptor?: PropertyDescriptor) => void // decorator\n}\n\nexport const computedDecorator = createPropDecorator(\n    false,\n    (\n        instance: any,\n        propertyName: PropertyKey,\n        descriptor: any,\n        decoratorTarget: any,\n        decoratorArgs: any[]\n    ) => {\n        if (process.env.NODE_ENV !== \"production\") {\n            invariant(\n                descriptor && descriptor.get,\n                `Trying to declare a computed value for unspecified getter '${stringifyKey(\n                    propertyName\n                )}'`\n            )\n        }\n        const { get, set } = descriptor // initialValue is the descriptor for get / set props\n        // Optimization: faster on decorator target or instance? Assuming target\n        // Optimization: find out if declaring on instance isn't just faster. (also makes the property descriptor simpler). But, more memory usage..\n        // Forcing instance now, fixes hot reloadig issues on React Native:\n        const options = decoratorArgs[0] || {}\n        asObservableObject(instance).addComputedProp(instance, propertyName, {\n            get,\n            set,\n            context: instance,\n            ...options\n        })\n    }\n)\n\nconst computedStructDecorator = computedDecorator({ equals: comparer.structural })\n\n/**\n * Decorator for class properties: @computed get value() { return expr; }.\n * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;\n */\nexport const computed: IComputed = function computed(arg1, arg2, arg3) {\n    if (typeof arg2 === \"string\") {\n        // @computed\n        return computedDecorator.apply(null, arguments)\n    }\n    if (arg1 !== null && typeof arg1 === \"object\" && arguments.length === 1) {\n        // @computed({ options })\n        return computedDecorator.apply(null, arguments)\n    }\n\n    // computed(expr, options?)\n    if (process.env.NODE_ENV !== \"production\") {\n        invariant(\n            typeof arg1 === \"function\",\n            \"First argument to `computed` should be an expression.\"\n        )\n        invariant(arguments.length < 3, \"Computed takes one or two arguments if used as function\")\n    }\n    const opts: IComputedValueOptions<any> = typeof arg2 === \"object\" ? arg2 : {}\n    opts.get = arg1\n    opts.set = typeof arg2 === \"function\" ? arg2 : opts.set\n    opts.name = opts.name || arg1.name || \"\" /* for generated name */\n\n    return new ComputedValue(opts)\n} as any\n\ncomputed.struct = computedStructDecorator\n","import {\n    IAtom,\n    IDepTreeNode,\n    IObservable,\n    addObserver,\n    fail,\n    globalState,\n    isComputedValue,\n    removeObserver\n} from \"../internal\"\n\nexport enum IDerivationState {\n    // before being run or (outside batch and not being observed)\n    // at this point derivation is not holding any data about dependency tree\n    NOT_TRACKING = -1,\n    // no shallow dependency changed since last computation\n    // won't recalculate derivation\n    // this is what makes mobx fast\n    UP_TO_DATE = 0,\n    // some deep dependency changed, but don't know if shallow dependency changed\n    // will require to check first if UP_TO_DATE or POSSIBLY_STALE\n    // currently only ComputedValue will propagate POSSIBLY_STALE\n    //\n    // having this state is second big optimization:\n    // don't have to recompute on every dependency change, but only when it's needed\n    POSSIBLY_STALE = 1,\n    // A shallow dependency has changed since last computation and the derivation\n    // will need to recompute when it's needed next.\n    STALE = 2\n}\n\nexport enum TraceMode {\n    NONE,\n    LOG,\n    BREAK\n}\n\n/**\n * A derivation is everything that can be derived from the state (all the atoms) in a pure manner.\n * See https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\n */\nexport interface IDerivation extends IDepTreeNode {\n    observing: IObservable[]\n    newObserving: null | IObservable[]\n    dependenciesState: IDerivationState\n    /**\n     * Id of the current run of a derivation. Each time the derivation is tracked\n     * this number is increased by one. This number is globally unique\n     */\n    runId: number\n    /**\n     * amount of dependencies used by the derivation in this run, which has not been bound yet.\n     */\n    unboundDepsCount: number\n    __mapid: string\n    onBecomeStale(): void\n    isTracing: TraceMode\n\n    /**\n     *  warn if the derivation has no dependencies after creation/update\n     */\n    requiresObservable?: boolean\n}\n\nexport class CaughtException {\n    constructor(public cause: any) {\n        // Empty\n    }\n}\n\nexport function isCaughtException(e: any): e is CaughtException {\n    return e instanceof CaughtException\n}\n\n/**\n * Finds out whether any dependency of the derivation has actually changed.\n * If dependenciesState is 1 then it will recalculate dependencies,\n * if any dependency changed it will propagate it by changing dependenciesState to 2.\n *\n * By iterating over the dependencies in the same order that they were reported and\n * stopping on the first change, all the recalculations are only called for ComputedValues\n * that will be tracked by derivation. That is because we assume that if the first x\n * dependencies of the derivation doesn't change then the derivation should run the same way\n * up until accessing x-th dependency.\n */\nexport function shouldCompute(derivation: IDerivation): boolean {\n    switch (derivation.dependenciesState) {\n        case IDerivationState.UP_TO_DATE:\n            return false\n        case IDerivationState.NOT_TRACKING:\n        case IDerivationState.STALE:\n            return true\n        case IDerivationState.POSSIBLY_STALE: {\n            // state propagation can occur outside of action/reactive context #2195\n            const prevAllowStateReads = allowStateReadsStart(true)\n            const prevUntracked = untrackedStart() // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.\n            const obs = derivation.observing,\n                l = obs.length\n            for (let i = 0; i < l; i++) {\n                const obj = obs[i]\n                if (isComputedValue(obj)) {\n                    if (globalState.disableErrorBoundaries) {\n                        obj.get()\n                    } else {\n                        try {\n                            obj.get()\n                        } catch (e) {\n                            // we are not interested in the value *or* exception at this moment, but if there is one, notify all\n                            untrackedEnd(prevUntracked)\n                            allowStateReadsEnd(prevAllowStateReads)\n                            return true\n                        }\n                    }\n                    // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.\n                    // and `derivation` is an observer of `obj`\n                    // invariantShouldCompute(derivation)\n                    if ((derivation.dependenciesState as any) === IDerivationState.STALE) {\n                        untrackedEnd(prevUntracked)\n                        allowStateReadsEnd(prevAllowStateReads)\n                        return true\n                    }\n                }\n            }\n            changeDependenciesStateTo0(derivation)\n            untrackedEnd(prevUntracked)\n            allowStateReadsEnd(prevAllowStateReads)\n            return false\n        }\n    }\n}\n\n// function invariantShouldCompute(derivation: IDerivation) {\n//     const newDepState = (derivation as any).dependenciesState\n\n//     if (\n//         process.env.NODE_ENV === \"production\" &&\n//         (newDepState === IDerivationState.POSSIBLY_STALE ||\n//             newDepState === IDerivationState.NOT_TRACKING)\n//     )\n//         fail(\"Illegal dependency state\")\n// }\n\nexport function isComputingDerivation() {\n    return globalState.trackingDerivation !== null // filter out actions inside computations\n}\n\nexport function checkIfStateModificationsAreAllowed(atom: IAtom) {\n    const hasObservers = atom.observers.size > 0\n    // Should never be possible to change an observed observable from inside computed, see #798\n    if (globalState.computationDepth > 0 && hasObservers)\n        fail(\n            process.env.NODE_ENV !== \"production\" &&\n                `Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: ${\n                    atom.name\n                }`\n        )\n    // Should not be possible to change observed state outside strict mode, except during initialization, see #563\n    if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === \"strict\"))\n        fail(\n            process.env.NODE_ENV !== \"production\" &&\n                (globalState.enforceActions\n                    ? \"Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: \"\n                    : \"Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: \") +\n                    atom.name\n        )\n}\n\nexport function checkIfStateReadsAreAllowed(observable: IObservable) {\n    if (\n        process.env.NODE_ENV !== \"production\" &&\n        !globalState.allowStateReads &&\n        globalState.observableRequiresReaction\n    ) {\n        console.warn(`[mobx] Observable ${observable.name} being read outside a reactive context`)\n    }\n}\n\n/**\n * Executes the provided function `f` and tracks which observables are being accessed.\n * The tracking information is stored on the `derivation` object and the derivation is registered\n * as observer of any of the accessed observables.\n */\nexport function trackDerivedFunction<T>(derivation: IDerivation, f: () => T, context: any) {\n    const prevAllowStateReads = allowStateReadsStart(true)\n    // pre allocate array allocation + room for variation in deps\n    // array will be trimmed by bindDependencies\n    changeDependenciesStateTo0(derivation)\n    derivation.newObserving = new Array(derivation.observing.length + 100)\n    derivation.unboundDepsCount = 0\n    derivation.runId = ++globalState.runId\n    const prevTracking = globalState.trackingDerivation\n    globalState.trackingDerivation = derivation\n    let result\n    if (globalState.disableErrorBoundaries === true) {\n        result = f.call(context)\n    } else {\n        try {\n            result = f.call(context)\n        } catch (e) {\n            result = new CaughtException(e)\n        }\n    }\n    globalState.trackingDerivation = prevTracking\n    bindDependencies(derivation)\n\n    warnAboutDerivationWithoutDependencies(derivation)\n\n    allowStateReadsEnd(prevAllowStateReads)\n\n    return result\n}\n\nfunction warnAboutDerivationWithoutDependencies(derivation: IDerivation) {\n    if (process.env.NODE_ENV === \"production\") return\n\n    if (derivation.observing.length !== 0) return\n\n    if (globalState.reactionRequiresObservable || derivation.requiresObservable) {\n        console.warn(\n            `[mobx] Derivation ${\n                derivation.name\n            } is created/updated without reading any observable value`\n        )\n    }\n}\n\n/**\n * diffs newObserving with observing.\n * update observing to be newObserving with unique observables\n * notify observers that become observed/unobserved\n */\nfunction bindDependencies(derivation: IDerivation) {\n    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, \"INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1\");\n    const prevObserving = derivation.observing\n    const observing = (derivation.observing = derivation.newObserving!)\n    let lowestNewObservingDerivationState = IDerivationState.UP_TO_DATE\n\n    // Go through all new observables and check diffValue: (this list can contain duplicates):\n    //   0: first occurrence, change to 1 and keep it\n    //   1: extra occurrence, drop it\n    let i0 = 0,\n        l = derivation.unboundDepsCount\n    for (let i = 0; i < l; i++) {\n        const dep = observing[i]\n        if (dep.diffValue === 0) {\n            dep.diffValue = 1\n            if (i0 !== i) observing[i0] = dep\n            i0++\n        }\n\n        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,\n        // not hitting the condition\n        if (((dep as any) as IDerivation).dependenciesState > lowestNewObservingDerivationState) {\n            lowestNewObservingDerivationState = ((dep as any) as IDerivation).dependenciesState\n        }\n    }\n    observing.length = i0\n\n    derivation.newObserving = null // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)\n\n    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)\n    //   0: it's not in new observables, unobserve it\n    //   1: it keeps being observed, don't want to notify it. change to 0\n    l = prevObserving.length\n    while (l--) {\n        const dep = prevObserving[l]\n        if (dep.diffValue === 0) {\n            removeObserver(dep, derivation)\n        }\n        dep.diffValue = 0\n    }\n\n    // Go through all new observables and check diffValue: (now it should be unique)\n    //   0: it was set to 0 in last loop. don't need to do anything.\n    //   1: it wasn't observed, let's observe it. set back to 0\n    while (i0--) {\n        const dep = observing[i0]\n        if (dep.diffValue === 1) {\n            dep.diffValue = 0\n            addObserver(dep, derivation)\n        }\n    }\n\n    // Some new observed derivations may become stale during this derivation computation\n    // so they have had no chance to propagate staleness (#916)\n    if (lowestNewObservingDerivationState !== IDerivationState.UP_TO_DATE) {\n        derivation.dependenciesState = lowestNewObservingDerivationState\n        derivation.onBecomeStale()\n    }\n}\n\nexport function clearObserving(derivation: IDerivation) {\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR clearObserving should be called only inside batch\");\n    const obs = derivation.observing\n    derivation.observing = []\n    let i = obs.length\n    while (i--) removeObserver(obs[i], derivation)\n\n    derivation.dependenciesState = IDerivationState.NOT_TRACKING\n}\n\nexport function untracked<T>(action: () => T): T {\n    const prev = untrackedStart()\n    try {\n        return action()\n    } finally {\n        untrackedEnd(prev)\n    }\n}\n\nexport function untrackedStart(): IDerivation | null {\n    const prev = globalState.trackingDerivation\n    globalState.trackingDerivation = null\n    return prev\n}\n\nexport function untrackedEnd(prev: IDerivation | null) {\n    globalState.trackingDerivation = prev\n}\n\nexport function allowStateReadsStart(allowStateReads: boolean) {\n    const prev = globalState.allowStateReads\n    globalState.allowStateReads = allowStateReads\n    return prev\n}\n\nexport function allowStateReadsEnd(prev: boolean) {\n    globalState.allowStateReads = prev\n}\n\n/**\n * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0\n *\n */\nexport function changeDependenciesStateTo0(derivation: IDerivation) {\n    if (derivation.dependenciesState === IDerivationState.UP_TO_DATE) return\n    derivation.dependenciesState = IDerivationState.UP_TO_DATE\n\n    const obs = derivation.observing\n    let i = obs.length\n    while (i--) obs[i].lowestObserverState = IDerivationState.UP_TO_DATE\n}\n","import {\n    IDerivation,\n    endBatch,\n    fail,\n    globalState,\n    invariant,\n    isSpyEnabled,\n    spyReportEnd,\n    spyReportStart,\n    startBatch,\n    untrackedEnd,\n    untrackedStart\n} from \"../internal\"\nimport { allowStateReadsStart, allowStateReadsEnd } from \"./derivation\"\n\n// we don't use globalState for these in order to avoid possible issues with multiple\n// mobx versions\nlet currentActionId = 0\nlet nextActionId = 1\nconst functionNameDescriptor = Object.getOwnPropertyDescriptor(() => {}, \"name\")\nconst isFunctionNameConfigurable = functionNameDescriptor && functionNameDescriptor.configurable\n\nexport interface IAction {\n    isMobxAction: boolean\n}\n\nexport function createAction(actionName: string, fn: Function, ref?: Object): Function & IAction {\n    if (process.env.NODE_ENV !== \"production\") {\n        invariant(typeof fn === \"function\", \"`action` can only be invoked on functions\")\n        if (typeof actionName !== \"string\" || !actionName)\n            fail(`actions should have valid names, got: '${actionName}'`)\n    }\n    const res = function() {\n        return executeAction(actionName, fn, ref || this, arguments)\n    }\n    ;(res as any).isMobxAction = true\n    if (process.env.NODE_ENV !== \"production\") {\n        if (isFunctionNameConfigurable) {\n            Object.defineProperty(res, \"name\", { value: actionName })\n        }\n    }\n    return res as any\n}\n\nexport function executeAction(actionName: string, fn: Function, scope?: any, args?: IArguments) {\n    const runInfo = _startAction(actionName, scope, args)\n    try {\n        return fn.apply(scope, args)\n    } catch (err) {\n        runInfo.error = err\n        throw err\n    } finally {\n        _endAction(runInfo)\n    }\n}\n\nexport interface IActionRunInfo {\n    prevDerivation: IDerivation | null\n    prevAllowStateChanges: boolean\n    prevAllowStateReads: boolean\n    notifySpy: boolean\n    startTime: number\n    error?: any\n    parentActionId: number\n    actionId: number\n}\n\nexport function _startAction(actionName: string, scope: any, args?: IArguments): IActionRunInfo {\n    const notifySpy = isSpyEnabled() && !!actionName\n    let startTime: number = 0\n    if (notifySpy && process.env.NODE_ENV !== \"production\") {\n        startTime = Date.now()\n        const l = (args && args.length) || 0\n        const flattendArgs = new Array(l)\n        if (l > 0) for (let i = 0; i < l; i++) flattendArgs[i] = args![i]\n        spyReportStart({\n            type: \"action\",\n            name: actionName,\n            object: scope,\n            arguments: flattendArgs\n        })\n    }\n    const prevDerivation = untrackedStart()\n    startBatch()\n    const prevAllowStateChanges = allowStateChangesStart(true)\n    const prevAllowStateReads = allowStateReadsStart(true)\n    const runInfo = {\n        prevDerivation,\n        prevAllowStateChanges,\n        prevAllowStateReads,\n        notifySpy,\n        startTime,\n        actionId: nextActionId++,\n        parentActionId: currentActionId\n    }\n    currentActionId = runInfo.actionId\n    return runInfo\n}\n\nexport function _endAction(runInfo: IActionRunInfo) {\n    if (currentActionId !== runInfo.actionId) {\n        fail(\"invalid action stack. did you forget to finish an action?\")\n    }\n    currentActionId = runInfo.parentActionId\n\n    if (runInfo.error !== undefined) {\n        globalState.suppressReactionErrors = true\n    }\n    allowStateChangesEnd(runInfo.prevAllowStateChanges)\n    allowStateReadsEnd(runInfo.prevAllowStateReads)\n    endBatch()\n    untrackedEnd(runInfo.prevDerivation)\n    if (runInfo.notifySpy && process.env.NODE_ENV !== \"production\") {\n        spyReportEnd({ time: Date.now() - runInfo.startTime })\n    }\n    globalState.suppressReactionErrors = false\n}\n\nexport function allowStateChanges<T>(allowStateChanges: boolean, func: () => T): T {\n    const prev = allowStateChangesStart(allowStateChanges)\n    let res: T\n    try {\n        res = func()\n    } finally {\n        allowStateChangesEnd(prev)\n    }\n    return res\n}\n\nexport function allowStateChangesStart(allowStateChanges: boolean) {\n    const prev = globalState.allowStateChanges\n    globalState.allowStateChanges = allowStateChanges\n    return prev\n}\n\nexport function allowStateChangesEnd(prev: boolean) {\n    globalState.allowStateChanges = prev\n}\n\nexport function allowStateChangesInsideComputed<T>(func: () => T): T {\n    const prev = globalState.computationDepth\n    globalState.computationDepth = 0\n    let res: T\n    try {\n        res = func()\n    } finally {\n        globalState.computationDepth = prev\n    }\n    return res\n}\n","import {\n    Atom,\n    IEnhancer,\n    IInterceptable,\n    IEqualsComparer,\n    IInterceptor,\n    IListenable,\n    Lambda,\n    checkIfStateModificationsAreAllowed,\n    comparer,\n    createInstanceofPredicate,\n    getNextId,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isSpyEnabled,\n    notifyListeners,\n    registerInterceptor,\n    registerListener,\n    spyReport,\n    spyReportEnd,\n    spyReportStart,\n    toPrimitive,\n    globalState,\n    IUNCHANGED\n} from \"../internal\"\n\nexport interface IValueWillChange<T> {\n    object: any\n    type: \"update\"\n    newValue: T\n}\n\nexport interface IValueDidChange<T> extends IValueWillChange<T> {\n    oldValue: T | undefined\n}\n\nexport interface IObservableValue<T> {\n    get(): T\n    set(value: T): void\n    intercept(handler: IInterceptor<IValueWillChange<T>>): Lambda\n    observe(listener: (change: IValueDidChange<T>) => void, fireImmediately?: boolean): Lambda\n}\n\nexport class ObservableValue<T> extends Atom\n    implements IObservableValue<T>, IInterceptable<IValueWillChange<T>>, IListenable {\n    hasUnreportedChange = false\n    interceptors\n    changeListeners\n    value\n    dehancer: any\n\n    constructor(\n        value: T,\n        public enhancer: IEnhancer<T>,\n        public name = \"ObservableValue@\" + getNextId(),\n        notifySpy = true,\n        private equals: IEqualsComparer<any> = comparer.default\n    ) {\n        super(name)\n        this.value = enhancer(value, undefined, name)\n        if (notifySpy && isSpyEnabled() && process.env.NODE_ENV !== \"production\") {\n            // only notify spy if this is a stand-alone observable\n            spyReport({ type: \"create\", name: this.name, newValue: \"\" + this.value })\n        }\n    }\n\n    private dehanceValue(value: T): T {\n        if (this.dehancer !== undefined) return this.dehancer(value)\n        return value\n    }\n\n    public set(newValue: T) {\n        const oldValue = this.value\n        newValue = this.prepareNewValue(newValue) as any\n        if (newValue !== globalState.UNCHANGED) {\n            const notifySpy = isSpyEnabled()\n            if (notifySpy && process.env.NODE_ENV !== \"production\") {\n                spyReportStart({\n                    type: \"update\",\n                    name: this.name,\n                    newValue,\n                    oldValue\n                })\n            }\n            this.setNewValue(newValue)\n            if (notifySpy && process.env.NODE_ENV !== \"production\") spyReportEnd()\n        }\n    }\n\n    private prepareNewValue(newValue): T | IUNCHANGED {\n        checkIfStateModificationsAreAllowed(this)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IValueWillChange<T>>(this, {\n                object: this,\n                type: \"update\",\n                newValue\n            })\n            if (!change) return globalState.UNCHANGED\n            newValue = change.newValue\n        }\n        // apply modifier\n        newValue = this.enhancer(newValue, this.value, this.name)\n        return this.equals(this.value, newValue) ? globalState.UNCHANGED : newValue\n    }\n\n    setNewValue(newValue: T) {\n        const oldValue = this.value\n        this.value = newValue\n        this.reportChanged()\n        if (hasListeners(this)) {\n            notifyListeners(this, {\n                type: \"update\",\n                object: this,\n                newValue,\n                oldValue\n            })\n        }\n    }\n\n    public get(): T {\n        this.reportObserved()\n        return this.dehanceValue(this.value)\n    }\n\n    public intercept(handler: IInterceptor<IValueWillChange<T>>): Lambda {\n        return registerInterceptor(this, handler)\n    }\n\n    public observe(\n        listener: (change: IValueDidChange<T>) => void,\n        fireImmediately?: boolean\n    ): Lambda {\n        if (fireImmediately)\n            listener({\n                object: this,\n                type: \"update\",\n                newValue: this.value,\n                oldValue: undefined\n            })\n        return registerListener(this, listener)\n    }\n\n    toJSON() {\n        return this.get()\n    }\n\n    toString() {\n        return `${this.name}[${this.value}]`\n    }\n\n    valueOf(): T {\n        return toPrimitive(this.get())\n    }\n\n    [Symbol.toPrimitive]() {\n        return this.valueOf()\n    }\n}\n\nexport const isObservableValue = createInstanceofPredicate(\"ObservableValue\", ObservableValue) as (\n    x: any\n) => x is IObservableValue<any>\n","import {\n    CaughtException,\n    IDerivation,\n    IDerivationState,\n    IEqualsComparer,\n    IObservable,\n    IValueDidChange,\n    Lambda,\n    TraceMode,\n    autorun,\n    clearObserving,\n    comparer,\n    createAction,\n    createInstanceofPredicate,\n    endBatch,\n    fail,\n    getNextId,\n    globalState,\n    invariant,\n    isCaughtException,\n    isSpyEnabled,\n    propagateChangeConfirmed,\n    propagateMaybeChanged,\n    reportObserved,\n    shouldCompute,\n    spyReport,\n    startBatch,\n    toPrimitive,\n    trackDerivedFunction,\n    untrackedEnd,\n    untrackedStart\n} from \"../internal\"\n\nexport interface IComputedValue<T> {\n    get(): T\n    set(value: T): void\n    observe(listener: (change: IValueDidChange<T>) => void, fireImmediately?: boolean): Lambda\n}\n\nexport interface IComputedValueOptions<T> {\n    get?: () => T\n    set?: (value: T) => void\n    name?: string\n    equals?: IEqualsComparer<T>\n    context?: any\n    requiresReaction?: boolean\n    keepAlive?: boolean\n}\n\n/**\n * A node in the state dependency root that observes other nodes, and can be observed itself.\n *\n * ComputedValue will remember the result of the computation for the duration of the batch, or\n * while being observed.\n *\n * During this time it will recompute only when one of its direct dependencies changed,\n * but only when it is being accessed with `ComputedValue.get()`.\n *\n * Implementation description:\n * 1. First time it's being accessed it will compute and remember result\n *    give back remembered result until 2. happens\n * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.\n * 3. When it's being accessed, recompute if any shallow dependency changed.\n *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.\n *    go to step 2. either way\n *\n * If at any point it's outside batch and it isn't observed: reset everything and go to 1.\n */\nexport class ComputedValue<T> implements IObservable, IComputedValue<T>, IDerivation {\n    dependenciesState = IDerivationState.NOT_TRACKING\n    observing: IObservable[] = [] // nodes we are looking at. Our value depends on these nodes\n    newObserving = null // during tracking it's an array with new observed observers\n    isBeingObserved = false\n    isPendingUnobservation: boolean = false\n    observers = new Set<IDerivation>()\n    diffValue = 0\n    runId = 0\n    lastAccessedBy = 0\n    lowestObserverState = IDerivationState.UP_TO_DATE\n    unboundDepsCount = 0\n    __mapid = \"#\" + getNextId()\n    protected value: T | undefined | CaughtException = new CaughtException(null)\n    name: string\n    triggeredBy?: string\n    isComputing: boolean = false // to check for cycles\n    isRunningSetter: boolean = false\n    derivation: () => T\n    setter?: (value: T) => void\n    isTracing: TraceMode = TraceMode.NONE\n    public scope: Object | undefined\n    private equals: IEqualsComparer<any>\n    private requiresReaction: boolean\n    private keepAlive: boolean\n\n    /**\n     * Create a new computed value based on a function expression.\n     *\n     * The `name` property is for debug purposes only.\n     *\n     * The `equals` property specifies the comparer function to use to determine if a newly produced\n     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`\n     * compares based on identity comparison (===), and `structualComparer` deeply compares the structure.\n     * Structural comparison can be convenient if you always produce a new aggregated object and\n     * don't want to notify observers if it is structurally the same.\n     * This is useful for working with vectors, mouse coordinates etc.\n     */\n    constructor(options: IComputedValueOptions<T>) {\n        invariant(options.get, \"missing option for computed: get\")\n        this.derivation = options.get!\n        this.name = options.name || \"ComputedValue@\" + getNextId()\n        if (options.set) this.setter = createAction(this.name + \"-setter\", options.set) as any\n        this.equals =\n            options.equals ||\n            ((options as any).compareStructural || (options as any).struct\n                ? comparer.structural\n                : comparer.default)\n        this.scope = options.context\n        this.requiresReaction = !!options.requiresReaction\n        this.keepAlive = !!options.keepAlive\n    }\n\n    onBecomeStale() {\n        propagateMaybeChanged(this)\n    }\n\n    public onBecomeObservedListeners: Set<Lambda> | undefined\n    public onBecomeUnobservedListeners: Set<Lambda> | undefined\n\n    public onBecomeObserved() {\n        if (this.onBecomeObservedListeners) {\n            this.onBecomeObservedListeners.forEach(listener => listener())\n        }\n    }\n\n    public onBecomeUnobserved() {\n        if (this.onBecomeUnobservedListeners) {\n            this.onBecomeUnobservedListeners.forEach(listener => listener())\n        }\n    }\n\n    /**\n     * Returns the current value of this computed value.\n     * Will evaluate its computation first if needed.\n     */\n    public get(): T {\n        if (this.isComputing) fail(`Cycle detected in computation ${this.name}: ${this.derivation}`)\n        if (globalState.inBatch === 0 && this.observers.size === 0 && !this.keepAlive) {\n            if (shouldCompute(this)) {\n                this.warnAboutUntrackedRead()\n                startBatch() // See perf test 'computed memoization'\n                this.value = this.computeValue(false)\n                endBatch()\n            }\n        } else {\n            reportObserved(this)\n            if (shouldCompute(this)) if (this.trackAndCompute()) propagateChangeConfirmed(this)\n        }\n        const result = this.value!\n\n        if (isCaughtException(result)) throw result.cause\n        return result\n    }\n\n    public peek(): T {\n        const res = this.computeValue(false)\n        if (isCaughtException(res)) throw res.cause\n        return res\n    }\n\n    public set(value: T) {\n        if (this.setter) {\n            invariant(\n                !this.isRunningSetter,\n                `The setter of computed value '${\n                    this.name\n                }' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?`\n            )\n            this.isRunningSetter = true\n            try {\n                this.setter.call(this.scope, value)\n            } finally {\n                this.isRunningSetter = false\n            }\n        } else\n            invariant(\n                false,\n                process.env.NODE_ENV !== \"production\" &&\n                    `[ComputedValue '${\n                        this.name\n                    }'] It is not possible to assign a new value to a computed value.`\n            )\n    }\n\n    private trackAndCompute(): boolean {\n        if (isSpyEnabled() && process.env.NODE_ENV !== \"production\") {\n            spyReport({\n                object: this.scope,\n                type: \"compute\",\n                name: this.name\n            })\n        }\n        const oldValue = this.value\n        const wasSuspended =\n            /* see #1208 */ this.dependenciesState === IDerivationState.NOT_TRACKING\n        const newValue = this.computeValue(true)\n\n        const changed =\n            wasSuspended ||\n            isCaughtException(oldValue) ||\n            isCaughtException(newValue) ||\n            !this.equals(oldValue, newValue)\n\n        if (changed) {\n            this.value = newValue\n        }\n\n        return changed\n    }\n\n    computeValue(track: boolean) {\n        this.isComputing = true\n        globalState.computationDepth++\n        let res: T | CaughtException\n        if (track) {\n            res = trackDerivedFunction(this, this.derivation, this.scope)\n        } else {\n            if (globalState.disableErrorBoundaries === true) {\n                res = this.derivation.call(this.scope)\n            } else {\n                try {\n                    res = this.derivation.call(this.scope)\n                } catch (e) {\n                    res = new CaughtException(e)\n                }\n            }\n        }\n        globalState.computationDepth--\n        this.isComputing = false\n        return res\n    }\n\n    suspend() {\n        if (!this.keepAlive) {\n            clearObserving(this)\n            this.value = undefined // don't hold on to computed value!\n        }\n    }\n\n    observe(listener: (change: IValueDidChange<T>) => void, fireImmediately?: boolean): Lambda {\n        let firstTime = true\n        let prevValue: T | undefined = undefined\n        return autorun(() => {\n            let newValue = this.get()\n            if (!firstTime || fireImmediately) {\n                const prevU = untrackedStart()\n                listener({\n                    type: \"update\",\n                    object: this,\n                    newValue,\n                    oldValue: prevValue\n                })\n                untrackedEnd(prevU)\n            }\n            firstTime = false\n            prevValue = newValue\n        })\n    }\n\n    warnAboutUntrackedRead() {\n        if (process.env.NODE_ENV === \"production\") return\n        if (this.requiresReaction === true) {\n            fail(`[mobx] Computed value ${this.name} is read outside a reactive context`)\n        }\n        if (this.isTracing !== TraceMode.NONE) {\n            console.log(\n                `[mobx.trace] '${\n                    this.name\n                }' is being read outside a reactive context. Doing a full recompute`\n            )\n        }\n        if (globalState.computedRequiresReaction) {\n            console.warn(\n                `[mobx] Computed value ${\n                    this.name\n                } is being read outside a reactive context. Doing a full recompute`\n            )\n        }\n    }\n\n    toJSON() {\n        return this.get()\n    }\n\n    toString() {\n        return `${this.name}[${this.derivation.toString()}]`\n    }\n\n    valueOf(): T {\n        return toPrimitive(this.get())\n    }\n\n    [Symbol.toPrimitive]() {\n        return this.valueOf()\n    }\n}\n\nexport const isComputedValue = createInstanceofPredicate(\"ComputedValue\", ComputedValue)\n","import { IDerivation, IObservable, Reaction, fail } from \"../internal\"\n\n/**\n * These values will persist if global state is reset\n */\nconst persistentKeys: (keyof MobXGlobals)[] = [\n    \"mobxGuid\",\n    \"spyListeners\",\n    \"enforceActions\",\n    \"computedRequiresReaction\",\n    \"reactionRequiresObservable\",\n    \"observableRequiresReaction\",\n    \"allowStateReads\",\n    \"disableErrorBoundaries\",\n    \"runId\",\n    \"UNCHANGED\"\n]\n\nexport type IUNCHANGED = {}\n\nexport class MobXGlobals {\n    /**\n     * MobXGlobals version.\n     * MobX compatiblity with other versions loaded in memory as long as this version matches.\n     * It indicates that the global state still stores similar information\n     *\n     * N.B: this version is unrelated to the package version of MobX, and is only the version of the\n     * internal state storage of MobX, and can be the same across many different package versions\n     */\n    version = 5\n\n    /**\n     * globally unique token to signal unchanged\n     */\n    UNCHANGED: IUNCHANGED = {}\n\n    /**\n     * Currently running derivation\n     */\n    trackingDerivation: IDerivation | null = null\n\n    /**\n     * Are we running a computation currently? (not a reaction)\n     */\n    computationDepth = 0\n\n    /**\n     * Each time a derivation is tracked, it is assigned a unique run-id\n     */\n    runId = 0\n\n    /**\n     * 'guid' for general purpose. Will be persisted amongst resets.\n     */\n    mobxGuid = 0\n\n    /**\n     * Are we in a batch block? (and how many of them)\n     */\n    inBatch: number = 0\n\n    /**\n     * Observables that don't have observers anymore, and are about to be\n     * suspended, unless somebody else accesses it in the same batch\n     *\n     * @type {IObservable[]}\n     */\n    pendingUnobservations: IObservable[] = []\n\n    /**\n     * List of scheduled, not yet executed, reactions.\n     */\n    pendingReactions: Reaction[] = []\n\n    /**\n     * Are we currently processing reactions?\n     */\n    isRunningReactions = false\n\n    /**\n     * Is it allowed to change observables at this point?\n     * In general, MobX doesn't allow that when running computations and React.render.\n     * To ensure that those functions stay pure.\n     */\n    allowStateChanges = true\n\n    /**\n     * Is it allowed to read observables at this point?\n     * Used to hold the state needed for `observableRequiresReaction`\n     */\n    allowStateReads = true\n\n    /**\n     * If strict mode is enabled, state changes are by default not allowed\n     */\n    enforceActions: boolean | \"strict\" = false\n\n    /**\n     * Spy callbacks\n     */\n    spyListeners: { (change: any): void }[] = []\n\n    /**\n     * Globally attached error handlers that react specifically to errors in reactions\n     */\n    globalReactionErrorHandlers: ((error: any, derivation: IDerivation) => void)[] = []\n\n    /**\n     * Warn if computed values are accessed outside a reactive context\n     */\n    computedRequiresReaction = false\n\n    /**\n     * (Experimental)\n     * Warn if you try to create to derivation / reactive context without accessing any observable.\n     */\n    reactionRequiresObservable = false\n\n    /**\n     * (Experimental)\n     * Warn if observables are accessed outside a reactive context\n     */\n    observableRequiresReaction = false\n\n    /**\n     * Allows overwriting of computed properties, useful in tests but not prod as it can cause\n     * memory leaks. See https://github.com/mobxjs/mobx/issues/1867\n     */\n    computedConfigurable = false\n\n    /*\n     * Don't catch and rethrow exceptions. This is useful for inspecting the state of\n     * the stack when an exception occurs while debugging.\n     */\n    disableErrorBoundaries = false\n\n    /*\n     * If true, we are already handling an exception in an action. Any errors in reactions should be suppressed, as\n     * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836\n     */\n    suppressReactionErrors = false\n}\n\ndeclare const window: any\ndeclare const self: any\n\nconst mockGlobal = {}\n\nexport function getGlobal() {\n    if (typeof window !== \"undefined\") {\n        return window\n    }\n    if (typeof global !== \"undefined\") {\n        return global\n    }\n    if (typeof self !== \"undefined\") {\n        return self\n    }\n    return mockGlobal\n}\n\nlet canMergeGlobalState = true\nlet isolateCalled = false\n\nexport let globalState: MobXGlobals = (function() {\n    const global = getGlobal()\n\n    if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) canMergeGlobalState = false\n    if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version)\n        canMergeGlobalState = false\n\n    if (!canMergeGlobalState) {\n        setTimeout(() => {\n            if (!isolateCalled) {\n                fail(\n                    \"There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`\"\n                )\n            }\n        }, 1)\n        return new MobXGlobals()\n    } else if (global.__mobxGlobals) {\n        global.__mobxInstanceCount += 1\n        if (!global.__mobxGlobals.UNCHANGED) global.__mobxGlobals.UNCHANGED = {} // make merge backward compatible\n        return global.__mobxGlobals\n    } else {\n        global.__mobxInstanceCount = 1\n        return (global.__mobxGlobals = new MobXGlobals())\n    }\n})()\n\nexport function isolateGlobalState() {\n    if (\n        globalState.pendingReactions.length ||\n        globalState.inBatch ||\n        globalState.isRunningReactions\n    )\n        fail(\"isolateGlobalState should be called before MobX is running any reactions\")\n    isolateCalled = true\n    if (canMergeGlobalState) {\n        if (--getGlobal().__mobxInstanceCount === 0) getGlobal().__mobxGlobals = undefined\n        globalState = new MobXGlobals()\n    }\n}\n\nexport function getGlobalState(): any {\n    return globalState\n}\n\n/**\n * For testing purposes only; this will break the internal state of existing observables,\n * but can be used to get back at a stable state after throwing errors\n */\nexport function resetGlobalState() {\n    const defaultGlobals = new MobXGlobals()\n    for (let key in defaultGlobals)\n        if (persistentKeys.indexOf(key as any) === -1) globalState[key] = defaultGlobals[key]\n    globalState.allowStateChanges = !globalState.enforceActions\n}\n","import {\n    Lambda,\n    ComputedValue,\n    IDependencyTree,\n    IDerivation,\n    IDerivationState,\n    TraceMode,\n    getDependencyTree,\n    globalState,\n    runReactions,\n    checkIfStateReadsAreAllowed\n} from \"../internal\"\n\nexport interface IDepTreeNode {\n    name: string\n    observing?: IObservable[]\n}\n\nexport interface IObservable extends IDepTreeNode {\n    diffValue: number\n    /**\n     * Id of the derivation *run* that last accessed this observable.\n     * If this id equals the *run* id of the current derivation,\n     * the dependency is already established\n     */\n    lastAccessedBy: number\n    isBeingObserved: boolean\n\n    lowestObserverState: IDerivationState // Used to avoid redundant propagations\n    isPendingUnobservation: boolean // Used to push itself to global.pendingUnobservations at most once per batch.\n\n    observers: Set<IDerivation>\n\n    onBecomeUnobserved(): void\n    onBecomeObserved(): void\n\n    onBecomeUnobservedListeners: Set<Lambda> | undefined\n    onBecomeObservedListeners: Set<Lambda> | undefined\n}\n\nexport function hasObservers(observable: IObservable): boolean {\n    return observable.observers && observable.observers.size > 0\n}\n\nexport function getObservers(observable: IObservable): Set<IDerivation> {\n    return observable.observers\n}\n\n// function invariantObservers(observable: IObservable) {\n//     const list = observable.observers\n//     const map = observable.observersIndexes\n//     const l = list.length\n//     for (let i = 0; i < l; i++) {\n//         const id = list[i].__mapid\n//         if (i) {\n//             invariant(map[id] === i, \"INTERNAL ERROR maps derivation.__mapid to index in list\") // for performance\n//         } else {\n//             invariant(!(id in map), \"INTERNAL ERROR observer on index 0 shouldn't be held in map.\") // for performance\n//         }\n//     }\n//     invariant(\n//         list.length === 0 || Object.keys(map).length === list.length - 1,\n//         \"INTERNAL ERROR there is no junk in map\"\n//     )\n// }\nexport function addObserver(observable: IObservable, node: IDerivation) {\n    // invariant(node.dependenciesState !== -1, \"INTERNAL ERROR, can add only dependenciesState !== -1\");\n    // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR add already added node\");\n    // invariantObservers(observable);\n\n    observable.observers.add(node)\n    if (observable.lowestObserverState > node.dependenciesState)\n        observable.lowestObserverState = node.dependenciesState\n\n    // invariantObservers(observable);\n    // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR didn't add node\");\n}\n\nexport function removeObserver(observable: IObservable, node: IDerivation) {\n    // invariant(globalState.inBatch > 0, \"INTERNAL ERROR, remove should be called only inside batch\");\n    // invariant(observable._observers.indexOf(node) !== -1, \"INTERNAL ERROR remove already removed node\");\n    // invariantObservers(observable);\n    observable.observers.delete(node)\n    if (observable.observers.size === 0) {\n        // deleting last observer\n        queueForUnobservation(observable)\n    }\n    // invariantObservers(observable);\n    // invariant(observable._observers.indexOf(node) === -1, \"INTERNAL ERROR remove already removed node2\");\n}\n\nexport function queueForUnobservation(observable: IObservable) {\n    if (observable.isPendingUnobservation === false) {\n        // invariant(observable._observers.length === 0, \"INTERNAL ERROR, should only queue for unobservation unobserved observables\");\n        observable.isPendingUnobservation = true\n        globalState.pendingUnobservations.push(observable)\n    }\n}\n\n/**\n * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.\n * During a batch `onBecomeUnobserved` will be called at most once per observable.\n * Avoids unnecessary recalculations.\n */\nexport function startBatch() {\n    globalState.inBatch++\n}\n\nexport function endBatch() {\n    if (--globalState.inBatch === 0) {\n        runReactions()\n        // the batch is actually about to finish, all unobserving should happen here.\n        const list = globalState.pendingUnobservations\n        for (let i = 0; i < list.length; i++) {\n            const observable = list[i]\n            observable.isPendingUnobservation = false\n            if (observable.observers.size === 0) {\n                if (observable.isBeingObserved) {\n                    // if this observable had reactive observers, trigger the hooks\n                    observable.isBeingObserved = false\n                    observable.onBecomeUnobserved()\n                }\n                if (observable instanceof ComputedValue) {\n                    // computed values are automatically teared down when the last observer leaves\n                    // this process happens recursively, this computed might be the last observable of another, etc..\n                    observable.suspend()\n                }\n            }\n        }\n        globalState.pendingUnobservations = []\n    }\n}\n\nexport function reportObserved(observable: IObservable): boolean {\n    checkIfStateReadsAreAllowed(observable)\n\n    const derivation = globalState.trackingDerivation\n    if (derivation !== null) {\n        /**\n         * Simple optimization, give each derivation run an unique id (runId)\n         * Check if last time this observable was accessed the same runId is used\n         * if this is the case, the relation is already known\n         */\n        if (derivation.runId !== observable.lastAccessedBy) {\n            observable.lastAccessedBy = derivation.runId\n            // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...\n            derivation.newObserving![derivation.unboundDepsCount++] = observable\n            if (!observable.isBeingObserved) {\n                observable.isBeingObserved = true\n                observable.onBecomeObserved()\n            }\n        }\n        return true\n    } else if (observable.observers.size === 0 && globalState.inBatch > 0) {\n        queueForUnobservation(observable)\n    }\n\n    return false\n}\n\n// function invariantLOS(observable: IObservable, msg: string) {\n//     // it's expensive so better not run it in produciton. but temporarily helpful for testing\n//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)\n//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`\n//     throw new Error(\n//         \"lowestObserverState is wrong for \" +\n//             msg +\n//             \" because \" +\n//             min +\n//             \" < \" +\n//             observable.lowestObserverState\n//     )\n// }\n\n/**\n * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly\n * It will propagate changes to observers from previous run\n * It's hard or maybe impossible (with reasonable perf) to get it right with current approach\n * Hopefully self reruning autoruns aren't a feature people should depend on\n * Also most basic use cases should be ok\n */\n\n// Called by Atom when its value changes\nexport function propagateChanged(observable: IObservable) {\n    // invariantLOS(observable, \"changed start\");\n    if (observable.lowestObserverState === IDerivationState.STALE) return\n    observable.lowestObserverState = IDerivationState.STALE\n\n    // Ideally we use for..of here, but the downcompiled version is really slow...\n    observable.observers.forEach(d => {\n        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {\n            if (d.isTracing !== TraceMode.NONE) {\n                logTraceInfo(d, observable)\n            }\n            d.onBecomeStale()\n        }\n        d.dependenciesState = IDerivationState.STALE\n    })\n    // invariantLOS(observable, \"changed end\");\n}\n\n// Called by ComputedValue when it recalculate and its value changed\nexport function propagateChangeConfirmed(observable: IObservable) {\n    // invariantLOS(observable, \"confirmed start\");\n    if (observable.lowestObserverState === IDerivationState.STALE) return\n    observable.lowestObserverState = IDerivationState.STALE\n\n    observable.observers.forEach(d => {\n        if (d.dependenciesState === IDerivationState.POSSIBLY_STALE)\n            d.dependenciesState = IDerivationState.STALE\n        else if (\n            d.dependenciesState === IDerivationState.UP_TO_DATE // this happens during computing of `d`, just keep lowestObserverState up to date.\n        )\n            observable.lowestObserverState = IDerivationState.UP_TO_DATE\n    })\n    // invariantLOS(observable, \"confirmed end\");\n}\n\n// Used by computed when its dependency changed, but we don't wan't to immediately recompute.\nexport function propagateMaybeChanged(observable: IObservable) {\n    // invariantLOS(observable, \"maybe start\");\n    if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE) return\n    observable.lowestObserverState = IDerivationState.POSSIBLY_STALE\n\n    observable.observers.forEach(d => {\n        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {\n            d.dependenciesState = IDerivationState.POSSIBLY_STALE\n            if (d.isTracing !== TraceMode.NONE) {\n                logTraceInfo(d, observable)\n            }\n            d.onBecomeStale()\n        }\n    })\n    // invariantLOS(observable, \"maybe end\");\n}\n\nfunction logTraceInfo(derivation: IDerivation, observable: IObservable) {\n    console.log(\n        `[mobx.trace] '${derivation.name}' is invalidated due to a change in: '${observable.name}'`\n    )\n    if (derivation.isTracing === TraceMode.BREAK) {\n        const lines = []\n        printDepTree(getDependencyTree(derivation), lines, 1)\n\n        // prettier-ignore\n        new Function(\n`debugger;\n/*\nTracing '${derivation.name}'\n\nYou are entering this break point because derivation '${derivation.name}' is being traced and '${observable.name}' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n${derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\\//g, \"/\") : \"\"}\n\nThe dependencies for this derivation are:\n\n${lines.join(\"\\n\")}\n*/\n    `)()\n    }\n}\n\nfunction printDepTree(tree: IDependencyTree, lines: string[], depth: number) {\n    if (lines.length >= 1000) {\n        lines.push(\"(and many more)\")\n        return\n    }\n    lines.push(`${new Array(depth).join(\"\\t\")}${tree.name}`) // MWE: not the fastest, but the easiest way :)\n    if (tree.dependencies) tree.dependencies.forEach(child => printDepTree(child, lines, depth + 1))\n}\n","import {\n    $mobx,\n    IDerivation,\n    IDerivationState,\n    IObservable,\n    Lambda,\n    TraceMode,\n    clearObserving,\n    createInstanceofPredicate,\n    endBatch,\n    getNextId,\n    globalState,\n    isCaughtException,\n    isSpyEnabled,\n    shouldCompute,\n    spyReport,\n    spyReportEnd,\n    spyReportStart,\n    startBatch,\n    trace,\n    trackDerivedFunction\n} from \"../internal\"\n\n/**\n * Reactions are a special kind of derivations. Several things distinguishes them from normal reactive computations\n *\n * 1) They will always run, whether they are used by other computations or not.\n * This means that they are very suitable for triggering side effects like logging, updating the DOM and making network requests.\n * 2) They are not observable themselves\n * 3) They will always run after any 'normal' derivations\n * 4) They are allowed to change the state and thereby triggering themselves again, as long as they make sure the state propagates to a stable state in a reasonable amount of iterations.\n *\n * The state machine of a Reaction is as follows:\n *\n * 1) after creating, the reaction should be started by calling `runReaction` or by scheduling it (see also `autorun`)\n * 2) the `onInvalidate` handler should somehow result in a call to `this.track(someFunction)`\n * 3) all observables accessed in `someFunction` will be observed by this reaction.\n * 4) as soon as some of the dependencies has changed the Reaction will be rescheduled for another run (after the current mutation or transaction). `isScheduled` will yield true once a dependency is stale and during this period\n * 5) `onInvalidate` will be called, and we are back at step 1.\n *\n */\n\nexport interface IReactionPublic {\n    dispose(): void\n    trace(enterBreakPoint?: boolean): void\n}\n\nexport interface IReactionDisposer {\n    (): void\n    $mobx: Reaction\n}\n\nexport class Reaction implements IDerivation, IReactionPublic {\n    observing: IObservable[] = [] // nodes we are looking at. Our value depends on these nodes\n    newObserving: IObservable[] = []\n    dependenciesState = IDerivationState.NOT_TRACKING\n    diffValue = 0\n    runId = 0\n    unboundDepsCount = 0\n    __mapid = \"#\" + getNextId()\n    isDisposed = false\n    _isScheduled = false\n    _isTrackPending = false\n    _isRunning = false\n    isTracing: TraceMode = TraceMode.NONE\n\n    constructor(\n        public name: string = \"Reaction@\" + getNextId(),\n        private onInvalidate: () => void,\n        private errorHandler?: (error: any, derivation: IDerivation) => void,\n        public requiresObservable = false\n    ) {}\n\n    onBecomeStale() {\n        this.schedule()\n    }\n\n    schedule() {\n        if (!this._isScheduled) {\n            this._isScheduled = true\n            globalState.pendingReactions.push(this)\n            runReactions()\n        }\n    }\n\n    isScheduled() {\n        return this._isScheduled\n    }\n\n    /**\n     * internal, use schedule() if you intend to kick off a reaction\n     */\n    runReaction() {\n        if (!this.isDisposed) {\n            startBatch()\n            this._isScheduled = false\n            if (shouldCompute(this)) {\n                this._isTrackPending = true\n\n                try {\n                    this.onInvalidate()\n                    if (\n                        this._isTrackPending &&\n                        isSpyEnabled() &&\n                        process.env.NODE_ENV !== \"production\"\n                    ) {\n                        // onInvalidate didn't trigger track right away..\n                        spyReport({\n                            name: this.name,\n                            type: \"scheduled-reaction\"\n                        })\n                    }\n                } catch (e) {\n                    this.reportExceptionInDerivation(e)\n                }\n            }\n            endBatch()\n        }\n    }\n\n    track(fn: () => void) {\n        if (this.isDisposed) {\n            return\n            // console.warn(\"Reaction already disposed\") // Note: Not a warning / error in mobx 4 either\n        }\n        startBatch()\n        const notify = isSpyEnabled()\n        let startTime\n        if (notify && process.env.NODE_ENV !== \"production\") {\n            startTime = Date.now()\n            spyReportStart({\n                name: this.name,\n                type: \"reaction\"\n            })\n        }\n        this._isRunning = true\n        const result = trackDerivedFunction(this, fn, undefined)\n        this._isRunning = false\n        this._isTrackPending = false\n        if (this.isDisposed) {\n            // disposed during last run. Clean up everything that was bound after the dispose call.\n            clearObserving(this)\n        }\n        if (isCaughtException(result)) this.reportExceptionInDerivation(result.cause)\n        if (notify && process.env.NODE_ENV !== \"production\") {\n            spyReportEnd({\n                time: Date.now() - startTime\n            })\n        }\n        endBatch()\n    }\n\n    reportExceptionInDerivation(error: any) {\n        if (this.errorHandler) {\n            this.errorHandler(error, this)\n            return\n        }\n\n        if (globalState.disableErrorBoundaries) throw error\n\n        const message = `[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '${this}'`\n        if (globalState.suppressReactionErrors) {\n            console.warn(`[mobx] (error in reaction '${this.name}' suppressed, fix error of causing action below)`) // prettier-ignore\n        } else {\n            console.error(message, error)\n            /** If debugging brought you here, please, read the above message :-). Tnx! */\n        }\n\n        if (isSpyEnabled()) {\n            spyReport({\n                type: \"error\",\n                name: this.name,\n                message,\n                error: \"\" + error\n            })\n        }\n\n        globalState.globalReactionErrorHandlers.forEach(f => f(error, this))\n    }\n\n    dispose() {\n        if (!this.isDisposed) {\n            this.isDisposed = true\n            if (!this._isRunning) {\n                // if disposed while running, clean up later. Maybe not optimal, but rare case\n                startBatch()\n                clearObserving(this)\n                endBatch()\n            }\n        }\n    }\n\n    getDisposer(): IReactionDisposer {\n        const r = this.dispose.bind(this) as IReactionDisposer\n        r[$mobx] = this\n        return r\n    }\n\n    toString() {\n        return `Reaction[${this.name}]`\n    }\n\n    trace(enterBreakPoint: boolean = false) {\n        trace(this, enterBreakPoint)\n    }\n}\n\nexport function onReactionError(handler: (error: any, derivation: IDerivation) => void): Lambda {\n    globalState.globalReactionErrorHandlers.push(handler)\n    return () => {\n        const idx = globalState.globalReactionErrorHandlers.indexOf(handler)\n        if (idx >= 0) globalState.globalReactionErrorHandlers.splice(idx, 1)\n    }\n}\n\n/**\n * Magic number alert!\n * Defines within how many times a reaction is allowed to re-trigger itself\n * until it is assumed that this is gonna be a never ending loop...\n */\nconst MAX_REACTION_ITERATIONS = 100\n\nlet reactionScheduler: (fn: () => void) => void = f => f()\n\nexport function runReactions() {\n    // Trampolining, if runReactions are already running, new reactions will be picked up\n    if (globalState.inBatch > 0 || globalState.isRunningReactions) return\n    reactionScheduler(runReactionsHelper)\n}\n\nfunction runReactionsHelper() {\n    globalState.isRunningReactions = true\n    const allReactions = globalState.pendingReactions\n    let iterations = 0\n\n    // While running reactions, new reactions might be triggered.\n    // Hence we work with two variables and check whether\n    // we converge to no remaining reactions after a while.\n    while (allReactions.length > 0) {\n        if (++iterations === MAX_REACTION_ITERATIONS) {\n            console.error(\n                `Reaction doesn't converge to a stable state after ${MAX_REACTION_ITERATIONS} iterations.` +\n                    ` Probably there is a cycle in the reactive function: ${allReactions[0]}`\n            )\n            allReactions.splice(0) // clear reactions\n        }\n        let remainingReactions = allReactions.splice(0)\n        for (let i = 0, l = remainingReactions.length; i < l; i++)\n            remainingReactions[i].runReaction()\n    }\n    globalState.isRunningReactions = false\n}\n\nexport const isReaction = createInstanceofPredicate(\"Reaction\", Reaction)\n\nexport function setReactionScheduler(fn: (f: () => void) => void) {\n    const baseScheduler = reactionScheduler\n    reactionScheduler = f => fn(() => baseScheduler(f))\n}\n","import { Lambda, globalState, once } from \"../internal\"\n\nexport function isSpyEnabled() {\n    return process.env.NODE_ENV !== \"production\" && !!globalState.spyListeners.length\n}\n\nexport function spyReport(event) {\n    if (process.env.NODE_ENV === \"production\") return // dead code elimination can do the rest\n    if (!globalState.spyListeners.length) return\n    const listeners = globalState.spyListeners\n    for (let i = 0, l = listeners.length; i < l; i++) listeners[i](event)\n}\n\nexport function spyReportStart(event) {\n    if (process.env.NODE_ENV === \"production\") return\n    const change = { ...event, spyReportStart: true }\n    spyReport(change)\n}\n\nconst END_EVENT = { spyReportEnd: true }\n\nexport function spyReportEnd(change?) {\n    if (process.env.NODE_ENV === \"production\") return\n    if (change) spyReport({ ...change, spyReportEnd: true })\n    else spyReport(END_EVENT)\n}\n\nexport function spy(listener: (change: any) => void): Lambda {\n    if (process.env.NODE_ENV === \"production\") {\n        console.warn(`[mobx.spy] Is a no-op in production builds`)\n        return function() {}\n    } else {\n        globalState.spyListeners.push(listener)\n        return once(() => {\n            globalState.spyListeners = globalState.spyListeners.filter(l => l !== listener)\n        })\n    }\n}\n","import {\n    BabelDescriptor,\n    action,\n    addHiddenProp,\n    createAction,\n    defineBoundAction,\n    fail\n} from \"../internal\"\n\nfunction dontReassignFields() {\n    fail(process.env.NODE_ENV !== \"production\" && \"@action fields are not reassignable\")\n}\n\nexport function namedActionDecorator(name: string) {\n    return function(target, prop, descriptor: BabelDescriptor) {\n        if (descriptor) {\n            if (process.env.NODE_ENV !== \"production\" && descriptor.get !== undefined) {\n                return fail(\"@action cannot be used with getters\")\n            }\n            // babel / typescript\n            // @action method() { }\n            if (descriptor.value) {\n                // typescript\n                return {\n                    value: createAction(name, descriptor.value),\n                    enumerable: false,\n                    configurable: true, // See #1477\n                    writable: true // for typescript, this must be writable, otherwise it cannot inherit :/ (see inheritable actions test)\n                }\n            }\n            // babel only: @action method = () => {}\n            const { initializer } = descriptor\n            return {\n                enumerable: false,\n                configurable: true, // See #1477\n                writable: true, // See #1398\n                initializer() {\n                    // N.B: we can't immediately invoke initializer; this would be wrong\n                    return createAction(name, initializer!.call(this))\n                }\n            }\n        }\n        // bound instance methods\n        return actionFieldDecorator(name).apply(this, arguments as any)\n    }\n}\n\nexport function actionFieldDecorator(name: string) {\n    // Simple property that writes on first invocation to the current instance\n    return function(target, prop, descriptor) {\n        Object.defineProperty(target, prop, {\n            configurable: true,\n            enumerable: false,\n            get() {\n                return undefined\n            },\n            set(value) {\n                addHiddenProp(this, prop, action(name, value))\n            }\n        })\n    }\n}\n\nexport function boundActionDecorator(target, propertyName, descriptor, applyToInstance?: boolean) {\n    if (applyToInstance === true) {\n        defineBoundAction(target, propertyName, descriptor.value)\n        return null\n    }\n    if (descriptor) {\n        // if (descriptor.value)\n        // Typescript / Babel: @action.bound method() { }\n        // also: babel @action.bound method = () => {}\n        return {\n            configurable: true,\n            enumerable: false,\n            get() {\n                defineBoundAction(\n                    this,\n                    propertyName,\n                    descriptor.value || descriptor.initializer.call(this)\n                )\n                return this[propertyName]\n            },\n            set: dontReassignFields\n        }\n    }\n    // field decorator Typescript @action.bound method = () => {}\n    return {\n        enumerable: false,\n        configurable: true,\n        set(v) {\n            defineBoundAction(this, propertyName, v)\n        },\n        get() {\n            return undefined\n        }\n    }\n}\n","import {\n    IAction,\n    addHiddenProp,\n    boundActionDecorator,\n    createAction,\n    executeAction,\n    fail,\n    invariant,\n    namedActionDecorator\n} from \"../internal\"\n\nexport interface IActionFactory {\n    // nameless actions\n    <T extends Function | null | undefined>(fn: T): T & IAction\n    // named actions\n    <T extends Function | null | undefined>(name: string, fn: T): T & IAction\n\n    // named decorator\n    (customName: string): (\n        target: Object,\n        key: string | symbol,\n        baseDescriptor?: PropertyDescriptor\n    ) => void\n\n    // unnamed decorator\n    (target: Object, propertyKey: string | symbol, descriptor?: PropertyDescriptor): void\n\n    // @action.bound decorator\n    bound: (target: Object, propertyKey: string | symbol, descriptor?: PropertyDescriptor) => void\n}\n\nexport const action: IActionFactory = function action(arg1, arg2?, arg3?, arg4?): any {\n    // action(fn() {})\n    if (arguments.length === 1 && typeof arg1 === \"function\")\n        return createAction(arg1.name || \"<unnamed action>\", arg1)\n    // action(\"name\", fn() {})\n    if (arguments.length === 2 && typeof arg2 === \"function\") return createAction(arg1, arg2)\n\n    // @action(\"name\") fn() {}\n    if (arguments.length === 1 && typeof arg1 === \"string\") return namedActionDecorator(arg1)\n\n    // @action fn() {}\n    if (arg4 === true) {\n        // apply to instance immediately\n        addHiddenProp(arg1, arg2, createAction(arg1.name || arg2, arg3.value, this))\n    } else {\n        return namedActionDecorator(arg2).apply(null, arguments as any)\n    }\n} as any\n\naction.bound = boundActionDecorator as any\n\nexport function runInAction<T>(block: () => T): T\nexport function runInAction<T>(name: string, block: () => T): T\nexport function runInAction(arg1, arg2?) {\n    const actionName = typeof arg1 === \"string\" ? arg1 : arg1.name || \"<unnamed action>\"\n    const fn = typeof arg1 === \"function\" ? arg1 : arg2\n\n    if (process.env.NODE_ENV !== \"production\") {\n        invariant(\n            typeof fn === \"function\" && fn.length === 0,\n            \"`runInAction` expects a function without arguments\"\n        )\n        if (typeof actionName !== \"string\" || !actionName)\n            fail(`actions should have valid names, got: '${actionName}'`)\n    }\n\n    return executeAction(actionName, fn, this, undefined)\n}\n\nexport function isAction(thing: any) {\n    return typeof thing === \"function\" && thing.isMobxAction === true\n}\n\nexport function defineBoundAction(target: any, propertyName: string, fn: Function) {\n    addHiddenProp(target, propertyName, createAction(propertyName, fn.bind(target)))\n}\n","import {\n    EMPTY_OBJECT,\n    IEqualsComparer,\n    IReactionDisposer,\n    IReactionPublic,\n    Lambda,\n    Reaction,\n    action,\n    comparer,\n    getNextId,\n    invariant,\n    isAction\n} from \"../internal\"\n\nexport interface IAutorunOptions {\n    delay?: number\n    name?: string\n    /**\n     * Experimental.\n     * Warns if the view doesn't track observables\n     */\n    requiresObservable?: boolean\n    scheduler?: (callback: () => void) => any\n    onError?: (error: any) => void\n}\n\n/**\n * Creates a named reactive view and keeps it alive, so that the view is always\n * updated if one of the dependencies changes, even when the view is not further used by something else.\n * @param view The reactive view\n * @returns disposer function, which can be used to stop the view from being updated in the future.\n */\nexport function autorun(\n    view: (r: IReactionPublic) => any,\n    opts: IAutorunOptions = EMPTY_OBJECT\n): IReactionDisposer {\n    if (process.env.NODE_ENV !== \"production\") {\n        invariant(typeof view === \"function\", \"Autorun expects a function as first argument\")\n        invariant(\n            isAction(view) === false,\n            \"Autorun does not accept actions since actions are untrackable\"\n        )\n    }\n\n    const name: string = (opts && opts.name) || (view as any).name || \"Autorun@\" + getNextId()\n    const runSync = !opts.scheduler && !opts.delay\n    let reaction: Reaction\n\n    if (runSync) {\n        // normal autorun\n        reaction = new Reaction(\n            name,\n            function(this: Reaction) {\n                this.track(reactionRunner)\n            },\n            opts.onError,\n            opts.requiresObservable\n        )\n    } else {\n        const scheduler = createSchedulerFromOptions(opts)\n        // debounced autorun\n        let isScheduled = false\n\n        reaction = new Reaction(\n            name,\n            () => {\n                if (!isScheduled) {\n                    isScheduled = true\n                    scheduler(() => {\n                        isScheduled = false\n                        if (!reaction.isDisposed) reaction.track(reactionRunner)\n                    })\n                }\n            },\n            opts.onError,\n            opts.requiresObservable\n        )\n    }\n\n    function reactionRunner() {\n        view(reaction)\n    }\n\n    reaction.schedule()\n    return reaction.getDisposer()\n}\n\nexport type IReactionOptions = IAutorunOptions & {\n    fireImmediately?: boolean\n    equals?: IEqualsComparer<any>\n}\n\nconst run = (f: Lambda) => f()\n\nfunction createSchedulerFromOptions(opts: IReactionOptions) {\n    return opts.scheduler\n        ? opts.scheduler\n        : opts.delay\n        ? (f: Lambda) => setTimeout(f, opts.delay!)\n        : run\n}\n\nexport function reaction<T>(\n    expression: (r: IReactionPublic) => T,\n    effect: (arg: T, r: IReactionPublic) => void,\n    opts: IReactionOptions = EMPTY_OBJECT\n): IReactionDisposer {\n    if (process.env.NODE_ENV !== \"production\") {\n        invariant(\n            typeof expression === \"function\",\n            \"First argument to reaction should be a function\"\n        )\n        invariant(typeof opts === \"object\", \"Third argument of reactions should be an object\")\n    }\n    const name = opts.name || \"Reaction@\" + getNextId()\n    const effectAction = action(\n        name,\n        opts.onError ? wrapErrorHandler(opts.onError, effect) : effect\n    )\n    const runSync = !opts.scheduler && !opts.delay\n    const scheduler = createSchedulerFromOptions(opts)\n\n    let firstTime = true\n    let isScheduled = false\n    let value: T\n\n    const equals = (opts as any).compareStructural\n        ? comparer.structural\n        : opts.equals || comparer.default\n\n    const r = new Reaction(\n        name,\n        () => {\n            if (firstTime || runSync) {\n                reactionRunner()\n            } else if (!isScheduled) {\n                isScheduled = true\n                scheduler!(reactionRunner)\n            }\n        },\n        opts.onError,\n        opts.requiresObservable\n    )\n\n    function reactionRunner() {\n        isScheduled = false // Q: move into reaction runner?\n        if (r.isDisposed) return\n        let changed = false\n        r.track(() => {\n            const nextValue = expression(r)\n            changed = firstTime || !equals(value, nextValue)\n            value = nextValue\n        })\n        if (firstTime && opts.fireImmediately!) effectAction(value, r)\n        if (!firstTime && (changed as boolean) === true) effectAction(value, r)\n        if (firstTime) firstTime = false\n    }\n\n    r.schedule()\n    return r.getDisposer()\n}\n\nfunction wrapErrorHandler(errorHandler, baseFn) {\n    return function() {\n        try {\n            return baseFn.apply(this, arguments)\n        } catch (e) {\n            errorHandler.call(this, e)\n        }\n    }\n}\n","import {\n    IComputedValue,\n    IObservable,\n    IObservableArray,\n    Lambda,\n    ObservableMap,\n    fail,\n    getAtom,\n    ObservableSet\n} from \"../internal\"\n\nexport function onBecomeObserved(\n    value:\n        | IObservable\n        | IComputedValue<any>\n        | IObservableArray<any>\n        | ObservableMap<any, any>\n        | ObservableSet<any>,\n    listener: Lambda\n): Lambda\nexport function onBecomeObserved<K, V = any>(\n    value: ObservableMap<K, V> | Object,\n    property: K,\n    listener: Lambda\n): Lambda\nexport function onBecomeObserved(thing, arg2, arg3?): Lambda {\n    return interceptHook(\"onBecomeObserved\", thing, arg2, arg3)\n}\n\nexport function onBecomeUnobserved(\n    value:\n        | IObservable\n        | IComputedValue<any>\n        | IObservableArray<any>\n        | ObservableMap<any, any>\n        | ObservableSet<any>,\n    listener: Lambda\n): Lambda\nexport function onBecomeUnobserved<K, V = any>(\n    value: ObservableMap<K, V> | Object,\n    property: K,\n    listener: Lambda\n): Lambda\nexport function onBecomeUnobserved(thing, arg2, arg3?): Lambda {\n    return interceptHook(\"onBecomeUnobserved\", thing, arg2, arg3)\n}\n\nfunction interceptHook(hook: \"onBecomeObserved\" | \"onBecomeUnobserved\", thing, arg2, arg3) {\n    const atom: IObservable =\n        typeof arg3 === \"function\" ? getAtom(thing, arg2) : (getAtom(thing) as any)\n    const cb = typeof arg3 === \"function\" ? arg3 : arg2\n    const listenersKey = `${hook}Listeners` as\n        | \"onBecomeObservedListeners\"\n        | \"onBecomeUnobservedListeners\"\n\n    if (atom[listenersKey]) {\n        atom[listenersKey]!.add(cb)\n    } else {\n        atom[listenersKey] = new Set<Lambda>([cb])\n    }\n\n    const orig = atom[hook]\n    if (typeof orig !== \"function\")\n        return fail(process.env.NODE_ENV !== \"production\" && \"Not an atom that can be (un)observed\")\n\n    return function() {\n        const hookListeners = atom[listenersKey]\n        if (hookListeners) {\n            hookListeners.delete(cb)\n            if (hookListeners.size === 0) {\n                delete atom[listenersKey]\n            }\n        }\n    }\n}\n","import {\n    globalState,\n    isolateGlobalState,\n    setReactionScheduler,\n    fail,\n    deprecated\n} from \"../internal\"\n\nexport function configure(options: {\n    enforceActions?: boolean | \"strict\" | \"never\" | \"always\" | \"observed\"\n    computedRequiresReaction?: boolean\n    /**\n     * (Experimental)\n     * Warn if you try to create to derivation / reactive context without accessing any observable.\n     */\n    reactionRequiresObservable?: boolean\n    /**\n     * (Experimental)\n     * Warn if observables are accessed outside a reactive context\n     */\n    observableRequiresReaction?: boolean\n    computedConfigurable?: boolean\n    isolateGlobalState?: boolean\n    disableErrorBoundaries?: boolean\n    reactionScheduler?: (f: () => void) => void\n}): void {\n    const {\n        enforceActions,\n        computedRequiresReaction,\n        computedConfigurable,\n        disableErrorBoundaries,\n        reactionScheduler,\n        reactionRequiresObservable,\n        observableRequiresReaction\n    } = options\n    if (options.isolateGlobalState === true) {\n        isolateGlobalState()\n    }\n    if (enforceActions !== undefined) {\n        if (typeof enforceActions === \"boolean\" || enforceActions === \"strict\")\n            deprecated(\n                `Deprecated value for 'enforceActions', use 'false' => '\"never\"', 'true' => '\"observed\"', '\"strict\"' => \"'always'\" instead`\n            )\n        let ea\n        switch (enforceActions) {\n            case true:\n            case \"observed\":\n                ea = true\n                break\n            case false:\n            case \"never\":\n                ea = false\n                break\n            case \"strict\":\n            case \"always\":\n                ea = \"strict\"\n                break\n            default:\n                fail(\n                    `Invalid value for 'enforceActions': '${enforceActions}', expected 'never', 'always' or 'observed'`\n                )\n        }\n        globalState.enforceActions = ea\n        globalState.allowStateChanges = ea === true || ea === \"strict\" ? false : true\n    }\n    if (computedRequiresReaction !== undefined) {\n        globalState.computedRequiresReaction = !!computedRequiresReaction\n    }\n    if (reactionRequiresObservable !== undefined) {\n        globalState.reactionRequiresObservable = !!reactionRequiresObservable\n    }\n    if (observableRequiresReaction !== undefined) {\n        globalState.observableRequiresReaction = !!observableRequiresReaction\n\n        globalState.allowStateReads = !globalState.observableRequiresReaction\n    }\n    if (computedConfigurable !== undefined) {\n        globalState.computedConfigurable = !!computedConfigurable\n    }\n    if (disableErrorBoundaries !== undefined) {\n        if (disableErrorBoundaries === true)\n            console.warn(\n                \"WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.\"\n            )\n        globalState.disableErrorBoundaries = !!disableErrorBoundaries\n    }\n    if (reactionScheduler) {\n        setReactionScheduler(reactionScheduler)\n    }\n}\n","import { invariant, isPlainObject } from \"../internal\"\n\nexport function decorate<T>(\n    clazz: new (...args: any[]) => T,\n    decorators: {\n        [P in keyof T]?:\n            | MethodDecorator\n            | PropertyDecorator\n            | Array<MethodDecorator>\n            | Array<PropertyDecorator>\n    }\n): void\nexport function decorate<T>(\n    object: T,\n    decorators: {\n        [P in keyof T]?:\n            | MethodDecorator\n            | PropertyDecorator\n            | Array<MethodDecorator>\n            | Array<PropertyDecorator>\n    }\n): T\nexport function decorate(thing: any, decorators: any) {\n    process.env.NODE_ENV !== \"production\" &&\n        invariant(isPlainObject(decorators), \"Decorators should be a key value map\")\n    const target = typeof thing === \"function\" ? thing.prototype : thing\n    for (let prop in decorators) {\n        let propertyDecorators = decorators[prop]\n        if (!Array.isArray(propertyDecorators)) {\n            propertyDecorators = [propertyDecorators]\n        }\n        process.env.NODE_ENV !== \"production\" &&\n            invariant(\n                propertyDecorators.every(decorator => typeof decorator === \"function\"),\n                `Decorate: expected a decorator function or array of decorator functions for '${prop}'`\n            )\n        const descriptor = Object.getOwnPropertyDescriptor(target, prop)\n        const newDescriptor = propertyDecorators.reduce(\n            (accDescriptor, decorator) => decorator(target, prop, accDescriptor),\n            descriptor\n        )\n        if (newDescriptor) Object.defineProperty(target, prop, newDescriptor)\n    }\n    return thing\n}\n","import {\n    CreateObservableOptions,\n    asCreateObservableOptions,\n    asObservableObject,\n    computedDecorator,\n    deepDecorator,\n    endBatch,\n    fail,\n    getPlainObjectKeys,\n    invariant,\n    isComputed,\n    isObservable,\n    isObservableMap,\n    refDecorator,\n    startBatch,\n    stringifyKey,\n    initializeInstance\n} from \"../internal\"\nimport { IObservableDecorator } from \"./observabledecorator\"\nimport { isPlainObject, ownKeys } from \"../utils/utils\"\n\nexport function extendObservable<A extends Object, B extends Object>(\n    target: A,\n    properties?: B,\n    decorators?: { [K in keyof B]?: Function },\n    options?: CreateObservableOptions\n): A & B {\n    if (process.env.NODE_ENV !== \"production\") {\n        invariant(\n            arguments.length >= 2 && arguments.length <= 4,\n            \"'extendObservable' expected 2-4 arguments\"\n        )\n        invariant(\n            typeof target === \"object\",\n            \"'extendObservable' expects an object as first argument\"\n        )\n        invariant(\n            !isObservableMap(target),\n            \"'extendObservable' should not be used on maps, use map.merge instead\"\n        )\n    }\n\n    options = asCreateObservableOptions(options)\n    const defaultDecorator = getDefaultDecoratorFromObjectOptions(options)\n    initializeInstance(target) // Fixes #1740\n    asObservableObject(target, options.name, defaultDecorator.enhancer) // make sure object is observable, even without initial props\n    if (properties)\n        extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator)\n    return target as any\n}\n\nexport function getDefaultDecoratorFromObjectOptions(\n    options: CreateObservableOptions\n): IObservableDecorator {\n    return options.defaultDecorator || (options.deep === false ? refDecorator : deepDecorator)\n}\n\nexport function extendObservableObjectWithProperties(\n    target,\n    properties,\n    decorators,\n    defaultDecorator\n) {\n    if (process.env.NODE_ENV !== \"production\") {\n        invariant(\n            !isObservable(properties),\n            \"Extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540\"\n        )\n        if (decorators) {\n            const keys = getPlainObjectKeys(decorators)\n            for (const key of keys) {\n                if (!(key in properties!))\n                    fail(\n                        `Trying to declare a decorator for unspecified property '${stringifyKey(\n                            key\n                        )}'`\n                    )\n            }\n        }\n    }\n    startBatch()\n    try {\n        const keys = ownKeys(properties)\n\n        for (const key of keys) {\n            const descriptor = Object.getOwnPropertyDescriptor(properties, key)!\n            if (process.env.NODE_ENV !== \"production\") {\n                if (!isPlainObject(properties))\n                    fail(`'extendObservable' only accepts plain objects as second argument`)\n                if (isComputed(descriptor.value))\n                    fail(\n                        `Passing a 'computed' as initial property value is no longer supported by extendObservable. Use a getter or decorator instead`\n                    )\n            }\n            const decorator =\n                decorators && key in decorators\n                    ? decorators[key]\n                    : descriptor.get\n                    ? computedDecorator\n                    : defaultDecorator\n            if (process.env.NODE_ENV !== \"production\" && typeof decorator !== \"function\")\n                fail(`Not a valid decorator for '${stringifyKey(key)}', got: ${decorator}`)\n\n            const resultDescriptor = decorator!(target, key, descriptor, true)\n            if (\n                resultDescriptor // otherwise, assume already applied, due to `applyToInstance`\n            )\n                Object.defineProperty(target, key, resultDescriptor)\n        }\n    } finally {\n        endBatch()\n    }\n}\n","import { IDepTreeNode, getAtom, getObservers, hasObservers, unique } from \"../internal\"\n\nexport interface IDependencyTree {\n    name: string\n    dependencies?: IDependencyTree[]\n}\n\nexport interface IObserverTree {\n    name: string\n    observers?: IObserverTree[]\n}\n\nexport function getDependencyTree(thing: any, property?: string): IDependencyTree {\n    return nodeToDependencyTree(getAtom(thing, property))\n}\n\nfunction nodeToDependencyTree(node: IDepTreeNode): IDependencyTree {\n    const result: IDependencyTree = {\n        name: node.name\n    }\n    if (node.observing && node.observing.length > 0)\n        result.dependencies = unique(node.observing).map(nodeToDependencyTree)\n    return result\n}\n\nexport function getObserverTree(thing: any, property?: string): IObserverTree {\n    return nodeToObserverTree(getAtom(thing, property))\n}\n\nfunction nodeToObserverTree(node: IDepTreeNode): IObserverTree {\n    const result: IObserverTree = {\n        name: node.name\n    }\n    if (hasObservers(node as any))\n        result.observers = Array.from(<any>getObservers(node as any)).map(<any>nodeToObserverTree)\n    return result\n}\n","import { action, fail, noop } from \"../internal\"\n\nlet generatorId = 0\n\nexport function FlowCancellationError() {\n    this.message = \"FLOW_CANCELLED\"\n}\nFlowCancellationError.prototype = Object.create(Error.prototype)\n\nexport function isFlowCancellationError(error: Error) {\n    return error instanceof FlowCancellationError\n}\n\nexport type CancellablePromise<T> = Promise<T> & { cancel(): void }\n\nexport function flow<R, Args extends any[]>(\n    generator: (...args: Args) => Generator<any, R, any> | AsyncGenerator<any, R, any>\n): (...args: Args) => CancellablePromise<R> {\n    if (arguments.length !== 1)\n        fail(!!process.env.NODE_ENV && `Flow expects 1 argument and cannot be used as decorator`)\n    const name = generator.name || \"<unnamed flow>\"\n\n    // Implementation based on https://github.com/tj/co/blob/master/index.js\n    return function() {\n        const ctx = this\n        const args = arguments\n        const runId = ++generatorId\n        const gen = action(`${name} - runid: ${runId} - init`, generator as (\n            ...args: Args\n        ) => Generator<any, R, any>).apply(ctx, (args as any) as Args)\n        let rejector: (error: any) => void\n        let pendingPromise: CancellablePromise<any> | undefined = undefined\n\n        const promise = new Promise<R>(function(resolve, reject) {\n            let stepId = 0\n            rejector = reject\n\n            function onFulfilled(res: any) {\n                pendingPromise = undefined\n                let ret\n                try {\n                    ret = action(`${name} - runid: ${runId} - yield ${stepId++}`, gen.next).call(\n                        gen,\n                        res\n                    )\n                } catch (e) {\n                    return reject(e)\n                }\n\n                next(ret)\n            }\n\n            function onRejected(err: any) {\n                pendingPromise = undefined\n                let ret\n                try {\n                    ret = action(`${name} - runid: ${runId} - yield ${stepId++}`, gen.throw!).call(\n                        gen,\n                        err\n                    )\n                } catch (e) {\n                    return reject(e)\n                }\n                next(ret)\n            }\n\n            function next(ret: any) {\n                if (ret && typeof ret.then === \"function\") {\n                    // an async iterator\n                    ret.then(next, reject)\n                    return\n                }\n                if (ret.done) return resolve(ret.value)\n                pendingPromise = Promise.resolve(ret.value) as any\n                return pendingPromise!.then(onFulfilled, onRejected)\n            }\n\n            onFulfilled(undefined) // kick off the process\n        }) as any\n\n        promise.cancel = action(`${name} - runid: ${runId} - cancel`, function() {\n            try {\n                if (pendingPromise) cancelPromise(pendingPromise)\n                // Finally block can return (or yield) stuff..\n                const res = gen.return!(undefined as any)\n                // eat anything that promise would do, it's cancelled!\n                const yieldedPromise = Promise.resolve(res.value)\n                yieldedPromise.then(noop, noop)\n                cancelPromise(yieldedPromise) // maybe it can be cancelled :)\n                // reject our original promise\n                rejector(new FlowCancellationError())\n            } catch (e) {\n                rejector(e) // there could be a throwing finally block\n            }\n        })\n        return promise as CancellablePromise<R>\n    }\n}\n\nfunction cancelPromise(promise) {\n    if (typeof promise.cancel === \"function\") promise.cancel()\n}\n","import {\n    IObservableArray,\n    IObservableValue,\n    Lambda,\n    ObservableMap,\n    fail,\n    getAdministration,\n    isObservableArray,\n    isObservableMap,\n    isObservableObject,\n    isObservableValue,\n    ObservableSet\n} from \"../internal\"\n\nexport type ReadInterceptor<T> = (value: any) => T\n\n/** Experimental feature right now, tested indirectly via Mobx-State-Tree */\nexport function interceptReads<T>(value: IObservableValue<T>, handler: ReadInterceptor<T>): Lambda\nexport function interceptReads<T>(\n    observableArray: IObservableArray<T>,\n    handler: ReadInterceptor<T>\n): Lambda\nexport function interceptReads<K, V>(\n    observableMap: ObservableMap<K, V>,\n    handler: ReadInterceptor<V>\n): Lambda\nexport function interceptReads<V>(\n    observableSet: ObservableSet<V>,\n    handler: ReadInterceptor<V>\n): Lambda\nexport function interceptReads(\n    object: Object,\n    property: string,\n    handler: ReadInterceptor<any>\n): Lambda\nexport function interceptReads(thing, propOrHandler?, handler?): Lambda {\n    let target\n    if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {\n        target = getAdministration(thing)\n    } else if (isObservableObject(thing)) {\n        if (typeof propOrHandler !== \"string\")\n            return fail(\n                process.env.NODE_ENV !== \"production\" &&\n                    `InterceptReads can only be used with a specific property, not with an object in general`\n            )\n        target = getAdministration(thing, propOrHandler)\n    } else {\n        return fail(\n            process.env.NODE_ENV !== \"production\" &&\n                `Expected observable map, object or array as first array`\n        )\n    }\n    if (target.dehancer !== undefined)\n        return fail(\n            process.env.NODE_ENV !== \"production\" && `An intercept reader was already established`\n        )\n    target.dehancer = typeof propOrHandler === \"function\" ? propOrHandler : handler\n    return () => {\n        target.dehancer = undefined\n    }\n}\n","import {\n    IArrayWillChange,\n    IArrayWillSplice,\n    IInterceptor,\n    IMapWillChange,\n    IObjectWillChange,\n    IObservableArray,\n    IObservableValue,\n    IValueWillChange,\n    Lambda,\n    ObservableMap,\n    getAdministration,\n    ObservableSet,\n    ISetWillChange\n} from \"../internal\"\n\nexport function intercept<T>(\n    value: IObservableValue<T>,\n    handler: IInterceptor<IValueWillChange<T>>\n): Lambda\nexport function intercept<T>(\n    observableArray: IObservableArray<T>,\n    handler: IInterceptor<IArrayWillChange<T> | IArrayWillSplice<T>>\n): Lambda\nexport function intercept<K, V>(\n    observableMap: ObservableMap<K, V>,\n    handler: IInterceptor<IMapWillChange<K, V>>\n): Lambda\nexport function intercept<V>(\n    observableMap: ObservableSet<V>,\n    handler: IInterceptor<ISetWillChange<V>>\n): Lambda\nexport function intercept<K, V>(\n    observableMap: ObservableMap<K, V>,\n    property: K,\n    handler: IInterceptor<IValueWillChange<V>>\n): Lambda\nexport function intercept(object: Object, handler: IInterceptor<IObjectWillChange>): Lambda\nexport function intercept<T extends Object, K extends keyof T>(\n    object: T,\n    property: K,\n    handler: IInterceptor<IValueWillChange<any>>\n): Lambda\nexport function intercept(thing, propOrHandler?, handler?): Lambda {\n    if (typeof handler === \"function\") return interceptProperty(thing, propOrHandler, handler)\n    else return interceptInterceptable(thing, propOrHandler)\n}\n\nfunction interceptInterceptable(thing, handler) {\n    return getAdministration(thing).intercept(handler)\n}\n\nfunction interceptProperty(thing, property, handler) {\n    return getAdministration(thing, property).intercept(handler)\n}\n","import { $mobx, fail, getAtom, isComputedValue, isObservableObject } from \"../internal\"\n\nexport function _isComputed(value, property?: string): boolean {\n    if (value === null || value === undefined) return false\n    if (property !== undefined) {\n        if (isObservableObject(value) === false) return false\n        if (!value[$mobx].values.has(property)) return false\n        const atom = getAtom(value, property)\n        return isComputedValue(atom)\n    }\n    return isComputedValue(value)\n}\n\nexport function isComputed(value: any): boolean {\n    if (arguments.length > 1)\n        return fail(\n            process.env.NODE_ENV !== \"production\" &&\n                `isComputed expects only 1 argument. Use isObservableProp to inspect the observability of a property`\n        )\n    return _isComputed(value)\n}\n\nexport function isComputedProp(value: any, propName: string): boolean {\n    if (typeof propName !== \"string\")\n        return fail(\n            process.env.NODE_ENV !== \"production\" &&\n                `isComputed expected a property name as second argument`\n        )\n    return _isComputed(value, propName)\n}\n","import {\n    $mobx,\n    ObservableObjectAdministration,\n    fail,\n    isAtom,\n    isComputedValue,\n    isObservableArray,\n    isObservableMap,\n    isObservableObject,\n    isReaction\n} from \"../internal\"\n\nfunction _isObservable(value, property?: string): boolean {\n    if (value === null || value === undefined) return false\n    if (property !== undefined) {\n        if (\n            process.env.NODE_ENV !== \"production\" &&\n            (isObservableMap(value) || isObservableArray(value))\n        )\n            return fail(\n                \"isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.\"\n            )\n        if (isObservableObject(value)) {\n            return (<ObservableObjectAdministration>(value as any)[$mobx]).values.has(property)\n        }\n        return false\n    }\n    // For first check, see #701\n    return (\n        isObservableObject(value) ||\n        !!value[$mobx] ||\n        isAtom(value) ||\n        isReaction(value) ||\n        isComputedValue(value)\n    )\n}\n\nexport function isObservable(value: any): boolean {\n    if (arguments.length !== 1)\n        fail(\n            process.env.NODE_ENV !== \"production\" &&\n                `isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property`\n        )\n    return _isObservable(value)\n}\n\nexport function isObservableProp(value: any, propName: string): boolean {\n    if (typeof propName !== \"string\")\n        return fail(\n            process.env.NODE_ENV !== \"production\" && `expected a property name as second argument`\n        )\n    return _isObservable(value, propName)\n}\n","import {\n    $mobx,\n    IIsObservableObject,\n    IObservableArray,\n    ObservableMap,\n    ObservableSet,\n    ObservableObjectAdministration,\n    endBatch,\n    fail,\n    getAdministration,\n    invariant,\n    isObservableArray,\n    isObservableMap,\n    isObservableSet,\n    isObservableObject,\n    startBatch\n} from \"../internal\"\n\nexport function keys<K>(map: ObservableMap<K, any>): ReadonlyArray<K>\nexport function keys<T>(ar: IObservableArray<T>): ReadonlyArray<number>\nexport function keys<T>(set: ObservableSet<T>): ReadonlyArray<T>\nexport function keys<T extends Object>(obj: T): ReadonlyArray<PropertyKey>\nexport function keys(obj: any): any {\n    if (isObservableObject(obj)) {\n        return ((obj as any) as IIsObservableObject)[$mobx].getKeys()\n    }\n    if (isObservableMap(obj)) {\n        return Array.from(obj.keys())\n    }\n    if (isObservableSet(obj)) {\n        return Array.from(obj.keys())\n    }\n    if (isObservableArray(obj)) {\n        return obj.map((_, index) => index)\n    }\n    return fail(\n        process.env.NODE_ENV !== \"production\" &&\n            \"'keys()' can only be used on observable objects, arrays, sets and maps\"\n    )\n}\n\nexport function values<K, T>(map: ObservableMap<K, T>): ReadonlyArray<T>\nexport function values<T>(set: ObservableSet<T>): ReadonlyArray<T>\nexport function values<T>(ar: IObservableArray<T>): ReadonlyArray<T>\nexport function values<T = any>(obj: T): ReadonlyArray<T extends object ? T[keyof T] : any>\nexport function values(obj: any): string[] {\n    if (isObservableObject(obj)) {\n        return keys(obj).map(key => obj[key])\n    }\n    if (isObservableMap(obj)) {\n        return keys(obj).map(key => obj.get(key))\n    }\n    if (isObservableSet(obj)) {\n        return Array.from(obj.values())\n    }\n    if (isObservableArray(obj)) {\n        return obj.slice()\n    }\n    return fail(\n        process.env.NODE_ENV !== \"production\" &&\n            \"'values()' can only be used on observable objects, arrays, sets and maps\"\n    )\n}\n\nexport function entries<K, T>(map: ObservableMap<K, T>): ReadonlyArray<[K, T]>\nexport function entries<T>(set: ObservableSet<T>): ReadonlyArray<[T, T]>\nexport function entries<T>(ar: IObservableArray<T>): ReadonlyArray<[number, T]>\nexport function entries<T = any>(\n    obj: T\n): ReadonlyArray<[string, T extends object ? T[keyof T] : any]>\nexport function entries(obj: any): any {\n    if (isObservableObject(obj)) {\n        return keys(obj).map(key => [key, obj[key]])\n    }\n    if (isObservableMap(obj)) {\n        return keys(obj).map(key => [key, obj.get(key)])\n    }\n    if (isObservableSet(obj)) {\n        return Array.from(obj.entries())\n    }\n    if (isObservableArray(obj)) {\n        return obj.map((key, index) => [index, key])\n    }\n    return fail(\n        process.env.NODE_ENV !== \"production\" &&\n            \"'entries()' can only be used on observable objects, arrays and maps\"\n    )\n}\n\nexport function set<V>(obj: ObservableMap<PropertyKey, V>, values: { [key: string]: V })\nexport function set<K, V>(obj: ObservableMap<K, V>, key: K, value: V)\nexport function set<T>(obj: ObservableSet<T>, value: T)\nexport function set<T>(obj: IObservableArray<T>, index: number, value: T)\nexport function set<T extends Object>(obj: T, values: { [key: string]: any })\nexport function set<T extends Object>(obj: T, key: PropertyKey, value: any)\nexport function set(obj: any, key: any, value?: any): void {\n    if (arguments.length === 2 && !isObservableSet(obj)) {\n        startBatch()\n        const values = key\n        try {\n            for (let key in values) set(obj, key, values[key])\n        } finally {\n            endBatch()\n        }\n        return\n    }\n    if (isObservableObject(obj)) {\n        const adm = ((obj as any) as IIsObservableObject)[$mobx]\n        const existingObservable = adm.values.get(key)\n        if (existingObservable) {\n            adm.write(key, value)\n        } else {\n            adm.addObservableProp(key, value, adm.defaultEnhancer)\n        }\n    } else if (isObservableMap(obj)) {\n        obj.set(key, value)\n    } else if (isObservableSet(obj)) {\n        obj.add(key)\n    } else if (isObservableArray(obj)) {\n        if (typeof key !== \"number\") key = parseInt(key, 10)\n        invariant(key >= 0, `Not a valid index: '${key}'`)\n        startBatch()\n        if (key >= obj.length) obj.length = key + 1\n        obj[key] = value\n        endBatch()\n    } else {\n        return fail(\n            process.env.NODE_ENV !== \"production\" &&\n                \"'set()' can only be used on observable objects, arrays and maps\"\n        )\n    }\n}\n\nexport function remove<K, V>(obj: ObservableMap<K, V>, key: K)\nexport function remove<T>(obj: ObservableSet<T>, key: T)\nexport function remove<T>(obj: IObservableArray<T>, index: number)\nexport function remove<T extends Object>(obj: T, key: string)\nexport function remove(obj: any, key: any): void {\n    if (isObservableObject(obj)) {\n        ;((obj as any) as IIsObservableObject)[$mobx].remove(key)\n    } else if (isObservableMap(obj)) {\n        obj.delete(key)\n    } else if (isObservableSet(obj)) {\n        obj.delete(key)\n    } else if (isObservableArray(obj)) {\n        if (typeof key !== \"number\") key = parseInt(key, 10)\n        invariant(key >= 0, `Not a valid index: '${key}'`)\n        obj.splice(key, 1)\n    } else {\n        return fail(\n            process.env.NODE_ENV !== \"production\" &&\n                \"'remove()' can only be used on observable objects, arrays and maps\"\n        )\n    }\n}\n\nexport function has<K>(obj: ObservableMap<K, any>, key: K): boolean\nexport function has<T>(obj: ObservableSet<T>, key: T): boolean\nexport function has<T>(obj: IObservableArray<T>, index: number): boolean\nexport function has<T extends Object>(obj: T, key: string): boolean\nexport function has(obj: any, key: any): boolean {\n    if (isObservableObject(obj)) {\n        // return keys(obj).indexOf(key) >= 0\n        const adm = getAdministration(obj) as ObservableObjectAdministration\n        return adm.has(key)\n    } else if (isObservableMap(obj)) {\n        return obj.has(key)\n    } else if (isObservableSet(obj)) {\n        return obj.has(key)\n    } else if (isObservableArray(obj)) {\n        return key >= 0 && key < obj.length\n    } else {\n        return fail(\n            process.env.NODE_ENV !== \"production\" &&\n                \"'has()' can only be used on observable objects, arrays and maps\"\n        )\n    }\n}\n\nexport function get<K, V>(obj: ObservableMap<K, V>, key: K): V | undefined\nexport function get<T>(obj: IObservableArray<T>, index: number): T | undefined\nexport function get<T extends Object>(obj: T, key: string): any\nexport function get(obj: any, key: any): any {\n    if (!has(obj, key)) return undefined\n    if (isObservableObject(obj)) {\n        return obj[key]\n    } else if (isObservableMap(obj)) {\n        return obj.get(key)\n    } else if (isObservableArray(obj)) {\n        return obj[key]\n    } else {\n        return fail(\n            process.env.NODE_ENV !== \"production\" &&\n                \"'get()' can only be used on observable objects, arrays and maps\"\n        )\n    }\n}\n","import {\n    IArrayChange,\n    IArraySplice,\n    IComputedValue,\n    IMapDidChange,\n    IObjectDidChange,\n    IObservableArray,\n    IObservableValue,\n    IValueDidChange,\n    Lambda,\n    ObservableMap,\n    getAdministration,\n    ObservableSet,\n    ISetDidChange\n} from \"../internal\"\n\nexport function observe<T>(\n    value: IObservableValue<T> | IComputedValue<T>,\n    listener: (change: IValueDidChange<T>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<T>(\n    observableArray: IObservableArray<T>,\n    listener: (change: IArrayChange<T> | IArraySplice<T>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<V>(\n    observableMap: ObservableSet<V>,\n    listener: (change: ISetDidChange<V>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<K, V>(\n    observableMap: ObservableMap<K, V>,\n    listener: (change: IMapDidChange<K, V>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<K, V>(\n    observableMap: ObservableMap<K, V>,\n    property: K,\n    listener: (change: IValueDidChange<V>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe(\n    object: Object,\n    listener: (change: IObjectDidChange) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe<T, K extends keyof T>(\n    object: T,\n    property: K,\n    listener: (change: IValueDidChange<T[K]>) => void,\n    fireImmediately?: boolean\n): Lambda\nexport function observe(thing, propOrCb?, cbOrFire?, fireImmediately?): Lambda {\n    if (typeof cbOrFire === \"function\")\n        return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately)\n    else return observeObservable(thing, propOrCb, cbOrFire)\n}\n\nfunction observeObservable(thing, listener, fireImmediately: boolean) {\n    return getAdministration(thing).observe(listener, fireImmediately)\n}\n\nfunction observeObservableProperty(thing, property, listener, fireImmediately: boolean) {\n    return getAdministration(thing, property).observe(listener, fireImmediately)\n}\n","import {\n    keys,\n    isObservable,\n    isObservableArray,\n    isObservableValue,\n    isObservableMap,\n    isObservableSet,\n    getPlainObjectKeys\n} from \"../internal\"\n\nexport type ToJSOptions = {\n    detectCycles?: boolean\n    exportMapsAsObjects?: boolean\n    recurseEverything?: boolean\n}\n\nconst defaultOptions: ToJSOptions = {\n    detectCycles: true,\n    exportMapsAsObjects: true,\n    recurseEverything: false\n}\n\nfunction cache<K, V>(map: Map<any, any>, key: K, value: V, options: ToJSOptions): V {\n    if (options.detectCycles) map.set(key, value)\n    return value\n}\n\nfunction toJSHelper(source, options: ToJSOptions, __alreadySeen: Map<any, any>) {\n    if (!options.recurseEverything && !isObservable(source)) return source\n\n    if (typeof source !== \"object\") return source\n\n    // Directly return null if source is null\n    if (source === null) return null\n\n    // Directly return the Date object itself if contained in the observable\n    if (source instanceof Date) return source\n\n    if (isObservableValue(source)) return toJSHelper(source.get(), options!, __alreadySeen)\n\n    // make sure we track the keys of the object\n    if (isObservable(source)) keys(source)\n\n    const detectCycles = options.detectCycles === true\n\n    if (detectCycles && source !== null && __alreadySeen.has(source)) {\n        return __alreadySeen.get(source)\n    }\n\n    if (isObservableArray(source) || Array.isArray(source)) {\n        const res = cache(__alreadySeen, source, [] as any, options)\n        const toAdd = source.map(value => toJSHelper(value, options!, __alreadySeen))\n        res.length = toAdd.length\n        for (let i = 0, l = toAdd.length; i < l; i++) res[i] = toAdd[i]\n        return res\n    }\n\n    if (isObservableSet(source) || Object.getPrototypeOf(source) === Set.prototype) {\n        if (options.exportMapsAsObjects === false) {\n            const res = cache(__alreadySeen, source, new Set(), options)\n            source.forEach(value => {\n                res.add(toJSHelper(value, options!, __alreadySeen))\n            })\n            return res\n        } else {\n            const res = cache(__alreadySeen, source, [] as any[], options)\n            source.forEach(value => {\n                res.push(toJSHelper(value, options!, __alreadySeen))\n            })\n            return res\n        }\n    }\n\n    if (isObservableMap(source) || Object.getPrototypeOf(source) === Map.prototype) {\n        if (options.exportMapsAsObjects === false) {\n            const res = cache(__alreadySeen, source, new Map(), options)\n            source.forEach((value, key) => {\n                res.set(key, toJSHelper(value, options!, __alreadySeen))\n            })\n            return res\n        } else {\n            const res = cache(__alreadySeen, source, {}, options)\n            source.forEach((value, key) => {\n                res[key] = toJSHelper(value, options!, __alreadySeen)\n            })\n            return res\n        }\n    }\n\n    // Fallback to the situation that source is an ObservableObject or a plain object\n    const res = cache(__alreadySeen, source, {}, options)\n    getPlainObjectKeys(source).forEach(key => {\n        res[key] = toJSHelper(source[key], options!, __alreadySeen)\n    })\n\n    return res\n}\n\n/**\n * Basically, a deep clone, so that no reactive property will exist anymore.\n */\nexport function toJS<T>(source: T, options?: ToJSOptions): T\nexport function toJS(source: any, options?: ToJSOptions): any\nexport function toJS(source, options: ToJSOptions) // internal overload\nexport function toJS(source, options?: ToJSOptions) {\n    // backward compatibility\n    if (typeof options === \"boolean\") options = { detectCycles: options }\n    if (!options) options = defaultOptions\n    options.detectCycles =\n        options.detectCycles === undefined\n            ? options.recurseEverything === true\n            : options.detectCycles === true\n\n    let __alreadySeen\n    if (options.detectCycles) __alreadySeen = new Map()\n\n    return toJSHelper(source, options, __alreadySeen)\n}\n","import { TraceMode, fail, getAtom, globalState } from \"../internal\"\n\nexport function trace(thing?: any, prop?: string, enterBreakPoint?: boolean): void\nexport function trace(thing?: any, enterBreakPoint?: boolean): void\nexport function trace(enterBreakPoint?: boolean): void\nexport function trace(...args: any[]): void {\n    let enterBreakPoint = false\n    if (typeof args[args.length - 1] === \"boolean\") enterBreakPoint = args.pop()\n    const derivation = getAtomFromArgs(args)\n    if (!derivation) {\n        return fail(\n            process.env.NODE_ENV !== \"production\" &&\n                `'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly`\n        )\n    }\n    if (derivation.isTracing === TraceMode.NONE) {\n        console.log(`[mobx.trace] '${derivation.name}' tracing enabled`)\n    }\n    derivation.isTracing = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG\n}\n\nfunction getAtomFromArgs(args): any {\n    switch (args.length) {\n        case 0:\n            return globalState.trackingDerivation\n        case 1:\n            return getAtom(args[0])\n        case 2:\n            return getAtom(args[0], args[1])\n    }\n}\n","import { endBatch, startBatch } from \"../internal\"\n\n/**\n * During a transaction no views are updated until the end of the transaction.\n * The transaction will be run synchronously nonetheless.\n *\n * @param action a function that updates some reactive state\n * @returns any value that was returned by the 'action' parameter.\n */\nexport function transaction<T>(action: () => T, thisArg = undefined): T {\n    startBatch()\n    try {\n        return action.apply(thisArg)\n    } finally {\n        endBatch()\n    }\n}\n","import {\n    $mobx,\n    IReactionDisposer,\n    Lambda,\n    autorun,\n    createAction,\n    fail,\n    getNextId\n} from \"../internal\"\n\nexport interface IWhenOptions {\n    name?: string\n    timeout?: number\n    /**\n     * Experimental.\n     * Warns if the view doesn't track observables\n     */\n    requiresObservable?: boolean\n    onError?: (error: any) => void\n}\n\nexport function when(\n    predicate: () => boolean,\n    opts?: IWhenOptions\n): Promise<void> & { cancel(): void }\nexport function when(\n    predicate: () => boolean,\n    effect: Lambda,\n    opts?: IWhenOptions\n): IReactionDisposer\nexport function when(predicate: any, arg1?: any, arg2?: any): any {\n    if (arguments.length === 1 || (arg1 && typeof arg1 === \"object\"))\n        return whenPromise(predicate, arg1)\n    return _when(predicate, arg1, arg2 || {})\n}\n\nfunction _when(predicate: () => boolean, effect: Lambda, opts: IWhenOptions): IReactionDisposer {\n    let timeoutHandle: any\n    if (typeof opts.timeout === \"number\") {\n        timeoutHandle = setTimeout(() => {\n            if (!disposer[$mobx].isDisposed) {\n                disposer()\n                const error = new Error(\"WHEN_TIMEOUT\")\n                if (opts.onError) opts.onError(error)\n                else throw error\n            }\n        }, opts.timeout)\n    }\n\n    opts.name = opts.name || \"When@\" + getNextId()\n    const effectAction = createAction(opts.name + \"-effect\", effect as Function)\n    const disposer = autorun(r => {\n        if (predicate()) {\n            r.dispose()\n            if (timeoutHandle) clearTimeout(timeoutHandle)\n            effectAction()\n        }\n    }, opts)\n    return disposer\n}\n\nfunction whenPromise(\n    predicate: () => boolean,\n    opts?: IWhenOptions\n): Promise<void> & { cancel(): void } {\n    if (process.env.NODE_ENV !== \"production\" && opts && opts.onError)\n        return fail(`the options 'onError' and 'promise' cannot be combined`)\n    let cancel\n    const res = new Promise((resolve, reject) => {\n        let disposer = _when(predicate, resolve, { ...opts, onError: reject })\n        cancel = () => {\n            disposer()\n            reject(\"WHEN_CANCELLED\")\n        }\n    })\n    ;(res as any).cancel = cancel\n    return res as any\n}\n","import {\n    $mobx,\n    Atom,\n    IIsObservableObject,\n    ObservableObjectAdministration,\n    fail,\n    mobxDidRunLazyInitializersSymbol,\n    set\n} from \"../internal\"\n\nfunction getAdm(target): ObservableObjectAdministration {\n    return target[$mobx]\n}\n\nfunction isPropertyKey(val) {\n    return typeof val === \"string\" || typeof val === \"number\" || typeof val === \"symbol\"\n}\n\n// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,\n// and skip either the internal values map, or the base object with its property descriptors!\nconst objectProxyTraps: ProxyHandler<any> = {\n    has(target: IIsObservableObject, name: PropertyKey) {\n        if (name === $mobx || name === \"constructor\" || name === mobxDidRunLazyInitializersSymbol)\n            return true\n        const adm = getAdm(target)\n        // MWE: should `in` operator be reactive? If not, below code path will be faster / more memory efficient\n        // TODO: check performance stats!\n        // if (adm.values.get(name as string)) return true\n        if (isPropertyKey(name)) return adm.has(name)\n        return (name as any) in target\n    },\n    get(target: IIsObservableObject, name: PropertyKey) {\n        if (name === $mobx || name === \"constructor\" || name === mobxDidRunLazyInitializersSymbol)\n            return target[name]\n        const adm = getAdm(target)\n        const observable = adm.values.get(name)\n        if (observable instanceof Atom) {\n            const result = (observable as any).get()\n            if (result === undefined) {\n                // This fixes #1796, because deleting a prop that has an\n                // undefined value won't retrigger a observer (no visible effect),\n                // the autorun wouldn't subscribe to future key changes (see also next comment)\n                adm.has(name as any)\n            }\n            return result\n        }\n        // make sure we start listening to future keys\n        // note that we only do this here for optimization\n        if (isPropertyKey(name)) adm.has(name)\n        return target[name]\n    },\n    set(target: IIsObservableObject, name: PropertyKey, value: any) {\n        if (!isPropertyKey(name)) return false\n        set(target, name, value)\n        return true\n    },\n    deleteProperty(target: IIsObservableObject, name: PropertyKey) {\n        if (!isPropertyKey(name)) return false\n        const adm = getAdm(target)\n        adm.remove(name)\n        return true\n    },\n    ownKeys(target: IIsObservableObject) {\n        const adm = getAdm(target)\n        adm.keysAtom.reportObserved()\n        return Reflect.ownKeys(target)\n    },\n    preventExtensions(target) {\n        fail(`Dynamic observable objects cannot be frozen`)\n        return false\n    }\n}\n\nexport function createDynamicObservableObject(base) {\n    const proxy = new Proxy(base, objectProxyTraps)\n    base[$mobx].proxy = proxy\n    return proxy\n}\n","import { Lambda, invariant, once, untrackedEnd, untrackedStart } from \"../internal\"\n\nexport type IInterceptor<T> = (change: T) => T | null\n\nexport interface IInterceptable<T> {\n    interceptors: IInterceptor<T>[] | undefined\n    intercept(handler: IInterceptor<T>): Lambda\n}\n\nexport function hasInterceptors(interceptable: IInterceptable<any>) {\n    return interceptable.interceptors !== undefined && interceptable.interceptors.length > 0\n}\n\nexport function registerInterceptor<T>(\n    interceptable: IInterceptable<T>,\n    handler: IInterceptor<T>\n): Lambda {\n    const interceptors = interceptable.interceptors || (interceptable.interceptors = [])\n    interceptors.push(handler)\n    return once(() => {\n        const idx = interceptors.indexOf(handler)\n        if (idx !== -1) interceptors.splice(idx, 1)\n    })\n}\n\nexport function interceptChange<T>(\n    interceptable: IInterceptable<T | null>,\n    change: T | null\n): T | null {\n    const prevU = untrackedStart()\n    try {\n        // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950\n        const interceptors = [...(interceptable.interceptors || [])]\n        for (let i = 0, l = interceptors.length; i < l; i++) {\n            change = interceptors[i](change)\n            invariant(\n                !change || (change as any).type,\n                \"Intercept handlers should return nothing or a change object\"\n            )\n            if (!change) break\n        }\n        return change\n    } finally {\n        untrackedEnd(prevU)\n    }\n}\n","import { Lambda, once, untrackedEnd, untrackedStart } from \"../internal\"\n\nexport interface IListenable {\n    changeListeners: Function[] | undefined\n    observe(handler: (change: any, oldValue?: any) => void, fireImmediately?: boolean): Lambda\n}\n\nexport function hasListeners(listenable: IListenable) {\n    return listenable.changeListeners !== undefined && listenable.changeListeners.length > 0\n}\n\nexport function registerListener(listenable: IListenable, handler: Function): Lambda {\n    const listeners = listenable.changeListeners || (listenable.changeListeners = [])\n    listeners.push(handler)\n    return once(() => {\n        const idx = listeners.indexOf(handler)\n        if (idx !== -1) listeners.splice(idx, 1)\n    })\n}\n\nexport function notifyListeners<T>(listenable: IListenable, change: T) {\n    const prevU = untrackedStart()\n    let listeners = listenable.changeListeners\n    if (!listeners) return\n    listeners = listeners.slice()\n    for (let i = 0, l = listeners.length; i < l; i++) {\n        listeners[i](change)\n    }\n    untrackedEnd(prevU)\n}\n","import {\n    $mobx,\n    Atom,\n    EMPTY_ARRAY,\n    IAtom,\n    IEnhancer,\n    IInterceptable,\n    IInterceptor,\n    IListenable,\n    Lambda,\n    addHiddenFinalProp,\n    checkIfStateModificationsAreAllowed,\n    createInstanceofPredicate,\n    fail,\n    getNextId,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    isObject,\n    isSpyEnabled,\n    notifyListeners,\n    registerInterceptor,\n    registerListener,\n    spyReportEnd,\n    spyReportStart,\n    allowStateChangesStart,\n    allowStateChangesEnd\n} from \"../internal\"\n\nconst MAX_SPLICE_SIZE = 10000 // See e.g. https://github.com/mobxjs/mobx/issues/859\n\nexport interface IObservableArray<T = any> extends Array<T> {\n    spliceWithArray(index: number, deleteCount?: number, newItems?: T[]): T[]\n    observe(\n        listener: (changeData: IArrayChange<T> | IArraySplice<T>) => void,\n        fireImmediately?: boolean\n    ): Lambda\n    intercept(handler: IInterceptor<IArrayWillChange<T> | IArrayWillSplice<T>>): Lambda\n    clear(): T[]\n    replace(newItems: T[]): T[]\n    remove(value: T): boolean\n    toJS(): T[]\n    toJSON(): T[]\n}\n\n// In 3.0, change to IArrayDidChange\nexport interface IArrayChange<T = any> {\n    type: \"update\"\n    object: IObservableArray<T>\n    index: number\n    newValue: T\n    oldValue: T\n}\n\n// In 3.0, change to IArrayDidSplice\nexport interface IArraySplice<T = any> {\n    type: \"splice\"\n    object: IObservableArray<T>\n    index: number\n    added: T[]\n    addedCount: number\n    removed: T[]\n    removedCount: number\n}\n\nexport interface IArrayWillChange<T = any> {\n    type: \"update\"\n    object: IObservableArray<T>\n    index: number\n    newValue: T\n}\n\nexport interface IArrayWillSplice<T = any> {\n    type: \"splice\"\n    object: IObservableArray<T>\n    index: number\n    added: T[]\n    removedCount: number\n}\n\nconst arrayTraps = {\n    get(target, name) {\n        if (name === $mobx) return target[$mobx]\n        if (name === \"length\") return target[$mobx].getArrayLength()\n        if (typeof name === \"number\") {\n            return arrayExtensions.get.call(target, name)\n        }\n        if (typeof name === \"string\" && !isNaN(name as any)) {\n            return arrayExtensions.get.call(target, parseInt(name))\n        }\n        if (arrayExtensions.hasOwnProperty(name)) {\n            return arrayExtensions[name]\n        }\n        return target[name]\n    },\n    set(target, name, value): boolean {\n        if (name === \"length\") {\n            target[$mobx].setArrayLength(value)\n        }\n        if (typeof name === \"number\") {\n            arrayExtensions.set.call(target, name, value)\n        }\n        if (typeof name === \"symbol\" || isNaN(name)) {\n            target[name] = value\n        } else {\n            // numeric string\n            arrayExtensions.set.call(target, parseInt(name), value)\n        }\n        return true\n    },\n    preventExtensions(target) {\n        fail(`Observable arrays cannot be frozen`)\n        return false\n    }\n}\n\nexport function createObservableArray<T>(\n    initialValues: any[] | undefined,\n    enhancer: IEnhancer<T>,\n    name = \"ObservableArray@\" + getNextId(),\n    owned = false\n): IObservableArray<T> {\n    const adm = new ObservableArrayAdministration(name, enhancer, owned)\n    addHiddenFinalProp(adm.values, $mobx, adm)\n    const proxy = new Proxy(adm.values, arrayTraps) as any\n    adm.proxy = proxy\n    if (initialValues && initialValues.length) {\n        const prev = allowStateChangesStart(true)\n        adm.spliceWithArray(0, 0, initialValues)\n        allowStateChangesEnd(prev)\n    }\n    return proxy\n}\n\nclass ObservableArrayAdministration\n    implements IInterceptable<IArrayWillChange<any> | IArrayWillSplice<any>>, IListenable {\n    atom: IAtom\n    values: any[] = []\n    interceptors\n    changeListeners\n    enhancer: (newV: any, oldV: any | undefined) => any\n    dehancer: any\n    proxy: any[] = undefined as any\n    lastKnownLength = 0\n\n    constructor(name, enhancer: IEnhancer<any>, public owned: boolean) {\n        this.atom = new Atom(name || \"ObservableArray@\" + getNextId())\n        this.enhancer = (newV, oldV) => enhancer(newV, oldV, name + \"[..]\")\n    }\n\n    dehanceValue(value: any): any {\n        if (this.dehancer !== undefined) return this.dehancer(value)\n        return value\n    }\n\n    dehanceValues(values: any[]): any[] {\n        if (this.dehancer !== undefined && values.length > 0)\n            return values.map(this.dehancer) as any\n        return values\n    }\n\n    intercept(handler: IInterceptor<IArrayWillChange<any> | IArrayWillSplice<any>>): Lambda {\n        return registerInterceptor<IArrayWillChange<any> | IArrayWillSplice<any>>(this, handler)\n    }\n\n    observe(\n        listener: (changeData: IArrayChange<any> | IArraySplice<any>) => void,\n        fireImmediately = false\n    ): Lambda {\n        if (fireImmediately) {\n            listener(<IArraySplice<any>>{\n                object: this.proxy as any,\n                type: \"splice\",\n                index: 0,\n                added: this.values.slice(),\n                addedCount: this.values.length,\n                removed: [],\n                removedCount: 0\n            })\n        }\n        return registerListener(this, listener)\n    }\n\n    getArrayLength(): number {\n        this.atom.reportObserved()\n        return this.values.length\n    }\n\n    setArrayLength(newLength: number) {\n        if (typeof newLength !== \"number\" || newLength < 0)\n            throw new Error(\"[mobx.array] Out of range: \" + newLength)\n        let currentLength = this.values.length\n        if (newLength === currentLength) return\n        else if (newLength > currentLength) {\n            const newItems = new Array(newLength - currentLength)\n            for (let i = 0; i < newLength - currentLength; i++) newItems[i] = undefined // No Array.fill everywhere...\n            this.spliceWithArray(currentLength, 0, newItems)\n        } else this.spliceWithArray(newLength, currentLength - newLength)\n    }\n\n    updateArrayLength(oldLength: number, delta: number) {\n        if (oldLength !== this.lastKnownLength)\n            throw new Error(\n                \"[mobx] Modification exception: the internal structure of an observable array was changed.\"\n            )\n        this.lastKnownLength += delta\n    }\n\n    spliceWithArray(index: number, deleteCount?: number, newItems?: any[]): any[] {\n        checkIfStateModificationsAreAllowed(this.atom)\n        const length = this.values.length\n\n        if (index === undefined) index = 0\n        else if (index > length) index = length\n        else if (index < 0) index = Math.max(0, length + index)\n\n        if (arguments.length === 1) deleteCount = length - index\n        else if (deleteCount === undefined || deleteCount === null) deleteCount = 0\n        else deleteCount = Math.max(0, Math.min(deleteCount, length - index))\n\n        if (newItems === undefined) newItems = EMPTY_ARRAY\n\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IArrayWillSplice<any>>(this as any, {\n                object: this.proxy as any,\n                type: \"splice\",\n                index,\n                removedCount: deleteCount,\n                added: newItems\n            })\n            if (!change) return EMPTY_ARRAY\n            deleteCount = change.removedCount\n            newItems = change.added\n        }\n\n        newItems = newItems.length === 0 ? newItems : newItems.map(v => this.enhancer(v, undefined))\n        if (process.env.NODE_ENV !== \"production\") {\n            const lengthDelta = newItems.length - deleteCount\n            this.updateArrayLength(length, lengthDelta) // checks if internal array wasn't modified\n        }\n        const res = this.spliceItemsIntoValues(index, deleteCount, newItems)\n\n        if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice(index, newItems, res)\n        return this.dehanceValues(res)\n    }\n\n    spliceItemsIntoValues(index, deleteCount, newItems: any[]): any[] {\n        if (newItems.length < MAX_SPLICE_SIZE) {\n            return this.values.splice(index, deleteCount, ...newItems)\n        } else {\n            const res = this.values.slice(index, index + deleteCount)\n            this.values = this.values\n                .slice(0, index)\n                .concat(newItems, this.values.slice(index + deleteCount))\n            return res\n        }\n    }\n\n    notifyArrayChildUpdate(index: number, newValue: any, oldValue: any) {\n        const notifySpy = !this.owned && isSpyEnabled()\n        const notify = hasListeners(this)\n        const change =\n            notify || notifySpy\n                ? {\n                      object: this.proxy,\n                      type: \"update\",\n                      index,\n                      newValue,\n                      oldValue\n                  }\n                : null\n\n        // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't\n        // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled\n        if (notifySpy && process.env.NODE_ENV !== \"production\")\n            spyReportStart({ ...change, name: this.atom.name })\n        this.atom.reportChanged()\n        if (notify) notifyListeners(this, change)\n        if (notifySpy && process.env.NODE_ENV !== \"production\") spyReportEnd()\n    }\n\n    notifyArraySplice(index: number, added: any[], removed: any[]) {\n        const notifySpy = !this.owned && isSpyEnabled()\n        const notify = hasListeners(this)\n        const change =\n            notify || notifySpy\n                ? {\n                      object: this.proxy,\n                      type: \"splice\",\n                      index,\n                      removed,\n                      added,\n                      removedCount: removed.length,\n                      addedCount: added.length\n                  }\n                : null\n\n        if (notifySpy && process.env.NODE_ENV !== \"production\")\n            spyReportStart({ ...change, name: this.atom.name })\n        this.atom.reportChanged()\n        // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe\n        if (notify) notifyListeners(this, change)\n        if (notifySpy && process.env.NODE_ENV !== \"production\") spyReportEnd()\n    }\n}\n\nconst arrayExtensions = {\n        intercept(handler: IInterceptor<IArrayWillChange<any> | IArrayWillSplice<any>>): Lambda {\n            return this[$mobx].intercept(handler)\n        },\n\n        observe(\n            listener: (changeData: IArrayChange<any> | IArraySplice<any>) => void,\n            fireImmediately = false\n        ): Lambda {\n            const adm: ObservableArrayAdministration = this[$mobx]\n            return adm.observe(listener, fireImmediately)\n        },\n\n        clear(): any[] {\n            return this.splice(0)\n        },\n\n        replace(newItems: any[]) {\n            const adm: ObservableArrayAdministration = this[$mobx]\n            return adm.spliceWithArray(0, adm.values.length, newItems)\n        },\n\n        /**\n         * Converts this array back to a (shallow) javascript structure.\n         * For a deep clone use mobx.toJS\n         */\n        toJS(): any[] {\n            return (this as any).slice()\n        },\n\n        toJSON(): any[] {\n            // Used by JSON.stringify\n            return this.toJS()\n        },\n\n        /*\n         * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)\n         * since these functions alter the inner structure of the array, the have side effects.\n         * Because the have side effects, they should not be used in computed function,\n         * and for that reason the do not call dependencyState.notifyObserved\n         */\n        splice(index: number, deleteCount?: number, ...newItems: any[]): any[] {\n            const adm: ObservableArrayAdministration = this[$mobx]\n            switch (arguments.length) {\n                case 0:\n                    return []\n                case 1:\n                    return adm.spliceWithArray(index)\n                case 2:\n                    return adm.spliceWithArray(index, deleteCount)\n            }\n            return adm.spliceWithArray(index, deleteCount, newItems)\n        },\n\n        spliceWithArray(index: number, deleteCount?: number, newItems?: any[]): any[] {\n            const adm: ObservableArrayAdministration = this[$mobx]\n            return adm.spliceWithArray(index, deleteCount, newItems)\n        },\n\n        push(...items: any[]): number {\n            const adm: ObservableArrayAdministration = this[$mobx]\n            adm.spliceWithArray(adm.values.length, 0, items)\n            return adm.values.length\n        },\n\n        pop() {\n            return this.splice(Math.max(this[$mobx].values.length - 1, 0), 1)[0]\n        },\n\n        shift() {\n            return this.splice(0, 1)[0]\n        },\n\n        unshift(...items: any[]): number {\n            const adm = this[$mobx]\n            adm.spliceWithArray(0, 0, items)\n            return adm.values.length\n        },\n\n        reverse(): any[] {\n            // reverse by default mutates in place before returning the result\n            // which makes it both a 'derivation' and a 'mutation'.\n            // so we deviate from the default and just make it an dervitation\n            if (process.env.NODE_ENV !== \"production\") {\n                console.warn(\n                    \"[mobx] `observableArray.reverse()` will not update the array in place. Use `observableArray.slice().reverse()` to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().reverse())` to reverse & update in place\"\n                )\n            }\n            const clone = (<any>this).slice()\n            return clone.reverse.apply(clone, arguments)\n        },\n\n        sort(compareFn?: (a: any, b: any) => number): any[] {\n            // sort by default mutates in place before returning the result\n            // which goes against all good practices. Let's not change the array in place!\n            if (process.env.NODE_ENV !== \"production\") {\n                console.warn(\n                    \"[mobx] `observableArray.sort()` will not update the array in place. Use `observableArray.slice().sort()` to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().sort())` to sort & update in place\"\n                )\n            }\n            const clone = (<any>this).slice()\n            return clone.sort.apply(clone, arguments)\n        },\n\n        remove(value: any): boolean {\n            const adm: ObservableArrayAdministration = this[$mobx]\n            const idx = adm.dehanceValues(adm.values).indexOf(value)\n            if (idx > -1) {\n                this.splice(idx, 1)\n                return true\n            }\n            return false\n        },\n\n        get(index: number): any | undefined {\n            const adm: ObservableArrayAdministration = this[$mobx]\n            if (adm) {\n                if (index < adm.values.length) {\n                    adm.atom.reportObserved()\n                    return adm.dehanceValue(adm.values[index])\n                }\n                console.warn(\n                    `[mobx.array] Attempt to read an array index (${index}) that is out of bounds (${adm.values.length}). Please check length first. Out of bound indices will not be tracked by MobX`\n                )\n            }\n            return undefined\n        },\n\n        set(index: number, newValue: any) {\n            const adm: ObservableArrayAdministration = this[$mobx]\n            const values = adm.values\n            if (index < values.length) {\n                // update at index in range\n                checkIfStateModificationsAreAllowed(adm.atom)\n                const oldValue = values[index]\n                if (hasInterceptors(adm)) {\n                    const change = interceptChange<IArrayWillChange<any>>(adm as any, {\n                        type: \"update\",\n                        object: adm.proxy as any, // since \"this\" is the real array we need to pass its proxy\n                        index,\n                        newValue\n                    })\n                    if (!change) return\n                    newValue = change.newValue\n                }\n                newValue = adm.enhancer(newValue, oldValue)\n                const changed = newValue !== oldValue\n                if (changed) {\n                    values[index] = newValue\n                    adm.notifyArrayChildUpdate(index, newValue, oldValue)\n                }\n            } else if (index === values.length) {\n                // add a new item\n                adm.spliceWithArray(index, 0, [newValue])\n            } else {\n                // out of bounds\n                throw new Error(\n                    `[mobx.array] Index out of bounds, ${index} is larger than ${values.length}`\n                )\n            }\n        }\n    }\n\n    /**\n     * Wrap function from prototype\n     * Without this, everything works as well, but this works\n     * faster as everything works on unproxied values\n     */\n;[\n    \"concat\",\n    \"flat\",\n    \"includes\",\n    \"indexOf\",\n    \"join\",\n    \"lastIndexOf\",\n    \"slice\",\n    \"toString\",\n    \"toLocaleString\"\n].forEach(funcName => {\n    // Feature detection (eg flat may not be available)\n    if (typeof Array.prototype[funcName] !== \"function\") {\n        return\n    }\n    arrayExtensions[funcName] = function() {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.atom.reportObserved()\n        const dehancedValues = adm.dehanceValues(adm.values)\n        return dehancedValues[funcName].apply(dehancedValues, arguments)\n    }\n})\n\n/**\n * Make sure callbacks recieve correct array arg #2326\n */\n;[\"every\", \"filter\", \"find\", \"findIndex\", \"flatMap\", \"forEach\", \"map\", \"some\"].forEach(funcName => {\n    // Feature detection (eg flatMap may not be available)\n    if (typeof Array.prototype[funcName] !== \"function\") {\n        return\n    }\n    arrayExtensions[funcName] = function(callback, thisArg) {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.atom.reportObserved()\n        const dehancedValues = adm.dehanceValues(adm.values)\n        return dehancedValues[funcName]((element, index) => {\n            return callback.call(thisArg, element, index, this)\n        }, thisArg)\n    }\n})\n;[\"reduce\", \"reduceRight\"].forEach(funcName => {\n    arrayExtensions[funcName] = function() {\n        const adm: ObservableArrayAdministration = this[$mobx]\n        adm.atom.reportObserved()\n        // #2432 - reduce behavior depends on arguments.length\n        const callback = arguments[0]\n        arguments[0] = (accumulator, currentValue, index) => {\n            currentValue = adm.dehanceValue(currentValue)\n            return callback(accumulator, currentValue, index, this)\n        }\n        return adm.values[funcName].apply(adm.values, arguments)\n    }\n})\n\nconst isObservableArrayAdministration = createInstanceofPredicate(\n    \"ObservableArrayAdministration\",\n    ObservableArrayAdministration\n)\n\nexport function isObservableArray(thing): thing is IObservableArray<any> {\n    return isObject(thing) && isObservableArrayAdministration(thing[$mobx])\n}\n","import {\n    $mobx,\n    IEnhancer,\n    IInterceptable,\n    IInterceptor,\n    IListenable,\n    Lambda,\n    ObservableValue,\n    checkIfStateModificationsAreAllowed,\n    createAtom,\n    createInstanceofPredicate,\n    deepEnhancer,\n    fail,\n    getNextId,\n    getPlainObjectKeys,\n    hasInterceptors,\n    hasListeners,\n    interceptChange,\n    invariant,\n    isES6Map,\n    isPlainObject,\n    isSpyEnabled,\n    makeIterable,\n    notifyListeners,\n    referenceEnhancer,\n    registerInterceptor,\n    registerListener,\n    spyReportEnd,\n    spyReportStart,\n    stringifyKey,\n    transaction,\n    untracked,\n    onBecomeUnobserved,\n    globalState,\n    convertToMap,\n    allowStateChangesStart,\n    allowStateChangesEnd\n} from \"../internal\"\n\nexport interface IKeyValueMap<V = any> {\n    [key: string]: V\n}\n\nexport type IMapEntry<K = any, V = any> = [K, V]\nexport type IMapEntries<K = any, V = any> = IMapEntry<K, V>[]\n\nexport type IMapDidChange<K = any, V = any> =\n    | {\n          object: ObservableMap<K, V>\n          name: K // actual the key or index, but this is based on the ancient .observe proposal for consistency\n          type: \"update\"\n          newValue: V\n          oldValue: V\n      }\n    | {\n          object: ObservableMap<K, V>\n          name: K\n          type: \"add\"\n          newValue: V\n      }\n    | {\n          object: ObservableMap<K, V>\n          name: K\n          type: \"delete\"\n          oldValue: V\n      }\n\nexport interface IMapWillChange<K = any, V = any> {\n    object: ObservableMap<K, V>\n    type: \"update\" | \"add\" | \"delete\"\n    name: K\n    newValue?: V\n}\n\nconst ObservableMapMarker = {}\n\nexport type IObservableMapInitialValues<K = any, V = any> =\n    | IMapEntries<K, V>\n    | IKeyValueMap<V>\n    | Map<K, V>\n\n// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54\n// But: https://github.com/mobxjs/mobx/issues/1556\nexport class ObservableMap<K = any, V = any>\n    implements Map<K, V>, IInterceptable<IMapWillChange<K, V>>, IListenable {\n    [$mobx] = ObservableMapMarker\n    private _data: Map<K, ObservableValue<V>>\n    private _hasMap: Map<K, ObservableValue<boolean>> // hasMap, not hashMap >-).\n    private _keysAtom = createAtom(`${this.name}.keys()`)\n    interceptors\n    changeListeners\n    dehancer: any\n\n    constructor(\n        initialData?: IObservableMapInitialValues<K, V>,\n        public enhancer: IEnhancer<V> = deepEnhancer,\n        public name = \"ObservableMap@\" + getNextId()\n    ) {\n        if (typeof Map !== \"function\") {\n            throw new Error(\n                \"mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js\"\n            )\n        }\n        this._data = new Map()\n        this._hasMap = new Map()\n        this.merge(initialData)\n    }\n\n    private _has(key: K): boolean {\n        return this._data.has(key)\n    }\n\n    has(key: K): boolean {\n        if (!globalState.trackingDerivation) return this._has(key)\n\n        let entry = this._hasMap.get(key)\n        if (!entry) {\n            // todo: replace with atom (breaking change)\n            const newEntry = (entry = new ObservableValue(\n                this._has(key),\n                referenceEnhancer,\n                `${this.name}.${stringifyKey(key)}?`,\n                false\n            ))\n            this._hasMap.set(key, newEntry)\n            onBecomeUnobserved(newEntry, () => this._hasMap.delete(key))\n        }\n\n        return entry.get()\n    }\n\n    set(key: K, value: V) {\n        const hasKey = this._has(key)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IMapWillChange<K, V>>(this, {\n                type: hasKey ? \"update\" : \"add\",\n                object: this,\n                newValue: value,\n                name: key\n            })\n            if (!change) return this\n            value = change.newValue!\n        }\n        if (hasKey) {\n            this._updateValue(key, value)\n        } else {\n            this._addValue(key, value)\n        }\n        return this\n    }\n\n    delete(key: K): boolean {\n        checkIfStateModificationsAreAllowed(this._keysAtom)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IMapWillChange<K, V>>(this, {\n                type: \"delete\",\n                object: this,\n                name: key\n            })\n            if (!change) return false\n        }\n        if (this._has(key)) {\n            const notifySpy = isSpyEnabled()\n            const notify = hasListeners(this)\n            const change =\n                notify || notifySpy\n                    ? <IMapDidChange<K, V>>{\n                          type: \"delete\",\n                          object: this,\n                          oldValue: (<any>this._data.get(key)).value,\n                          name: key\n                      }\n                    : null\n\n            if (notifySpy && process.env.NODE_ENV !== \"production\")\n                spyReportStart({ ...change, name: this.name, key })\n            transaction(() => {\n                this._keysAtom.reportChanged()\n                this._updateHasMapEntry(key, false)\n                const observable = this._data.get(key)!\n                observable.setNewValue(undefined as any)\n                this._data.delete(key)\n            })\n            if (notify) notifyListeners(this, change)\n            if (notifySpy && process.env.NODE_ENV !== \"production\") spyReportEnd()\n            return true\n        }\n        return false\n    }\n\n    private _updateHasMapEntry(key: K, value: boolean) {\n        let entry = this._hasMap.get(key)\n        if (entry) {\n            entry.setNewValue(value)\n        }\n    }\n\n    private _updateValue(key: K, newValue: V | undefined) {\n        const observable = this._data.get(key)!\n        newValue = (observable as any).prepareNewValue(newValue) as V\n        if (newValue !== globalState.UNCHANGED) {\n            const notifySpy = isSpyEnabled()\n            const notify = hasListeners(this)\n            const change =\n                notify || notifySpy\n                    ? <IMapDidChange<K, V>>{\n                          type: \"update\",\n                          object: this,\n                          oldValue: (observable as any).value,\n                          name: key,\n                          newValue\n                      }\n                    : null\n            if (notifySpy && process.env.NODE_ENV !== \"production\")\n                spyReportStart({ ...change, name: this.name, key })\n            observable.setNewValue(newValue as V)\n            if (notify) notifyListeners(this, change)\n            if (notifySpy && process.env.NODE_ENV !== \"production\") spyReportEnd()\n        }\n    }\n\n    private _addValue(key: K, newValue: V) {\n        checkIfStateModificationsAreAllowed(this._keysAtom)\n        transaction(() => {\n            const observable = new ObservableValue(\n                newValue,\n                this.enhancer,\n                `${this.name}.${stringifyKey(key)}`,\n                false\n            )\n            this._data.set(key, observable)\n            newValue = (observable as any).value // value might have been changed\n            this._updateHasMapEntry(key, true)\n            this._keysAtom.reportChanged()\n        })\n        const notifySpy = isSpyEnabled()\n        const notify = hasListeners(this)\n        const change =\n            notify || notifySpy\n                ? <IMapDidChange<K, V>>{\n                      type: \"add\",\n                      object: this,\n                      name: key,\n                      newValue\n                  }\n                : null\n        if (notifySpy && process.env.NODE_ENV !== \"production\")\n            spyReportStart({ ...change, name: this.name, key })\n        if (notify) notifyListeners(this, change)\n        if (notifySpy && process.env.NODE_ENV !== \"production\") spyReportEnd()\n    }\n\n    get(key: K): V | undefined {\n        if (this.has(key)) return this.dehanceValue(this._data.get(key)!.get())\n        return this.dehanceValue(undefined)\n    }\n\n    private dehanceValue<X extends V | undefined>(value: X): X {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    keys(): IterableIterator<K> {\n        this._keysAtom.reportObserved()\n        return this._data.keys()\n    }\n\n    values(): IterableIterator<V> {\n        const self = this\n        const keys = this.keys()\n        return makeIterable({\n            next() {\n                const { done, value } = keys.next()\n                return {\n                    done,\n                    value: done ? (undefined as any) : self.get(value)\n                }\n            }\n        })\n    }\n\n    entries(): IterableIterator<IMapEntry<K, V>> {\n        const self = this\n        const keys = this.keys()\n        return makeIterable({\n            next() {\n                const { done, value } = keys.next()\n                return {\n                    done,\n                    value: done ? (undefined as any) : ([value, self.get(value)!] as [K, V])\n                }\n            }\n        })\n    }\n\n    [Symbol.iterator]() {\n        return this.entries()\n    }\n\n    forEach(callback: (value: V, key: K, object: Map<K, V>) => void, thisArg?) {\n        for (const [key, value] of this) callback.call(thisArg, value, key, this)\n    }\n\n    /** Merge another object into this object, returns this. */\n    merge(other: ObservableMap<K, V> | IKeyValueMap<V> | any): ObservableMap<K, V> {\n        if (isObservableMap(other)) {\n            other = other.toJS()\n        }\n        transaction(() => {\n            const prev = allowStateChangesStart(true)\n            try {\n                if (isPlainObject(other))\n                    getPlainObjectKeys(other).forEach((key) =>\n                        this.set((key as any) as K, other[key])\n                    )\n                else if (Array.isArray(other)) other.forEach(([key, value]) => this.set(key, value))\n                else if (isES6Map(other)) {\n                    if (other.constructor !== Map)\n                        fail(\"Cannot initialize from classes that inherit from Map: \" + other.constructor.name) // prettier-ignore\n                    other.forEach((value, key) => this.set(key, value))\n                } else if (other !== null && other !== undefined)\n                    fail(\"Cannot initialize map from \" + other)\n            } finally {\n                allowStateChangesEnd(prev)\n            }\n        })\n        return this\n    }\n\n    clear() {\n        transaction(() => {\n            untracked(() => {\n                for (const key of this.keys()) this.delete(key)\n            })\n        })\n    }\n\n    replace(values: ObservableMap<K, V> | IKeyValueMap<V> | any): ObservableMap<K, V> {\n        // Implementation requirements:\n        // - respect ordering of replacement map\n        // - allow interceptors to run and potentially prevent individual operations\n        // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)\n        // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)\n        // - note that result map may differ from replacement map due to the interceptors\n        transaction(() => {\n            // Convert to map so we can do quick key lookups\n            const replacementMap = convertToMap(values)\n            const orderedData = new Map()\n            // Used for optimization\n            let keysReportChangedCalled = false\n            // Delete keys that don't exist in replacement map\n            // if the key deletion is prevented by interceptor\n            // add entry at the beginning of the result map\n            for (const key of this._data.keys()) {\n                // Concurrently iterating/deleting keys\n                // iterator should handle this correctly\n                if (!replacementMap.has(key)) {\n                    const deleted = this.delete(key)\n                    // Was the key removed?\n                    if (deleted) {\n                        // _keysAtom.reportChanged() was already called\n                        keysReportChangedCalled = true\n                    } else {\n                        // Delete prevented by interceptor\n                        const value = this._data.get(key)\n                        orderedData.set(key, value)\n                    }\n                }\n            }\n            // Merge entries\n            for (const [key, value] of replacementMap.entries()) {\n                // We will want to know whether a new key is added\n                const keyExisted = this._data.has(key)\n                // Add or update value\n                this.set(key, value)\n                // The addition could have been prevent by interceptor\n                if (this._data.has(key)) {\n                    // The update could have been prevented by interceptor\n                    // and also we want to preserve existing values\n                    // so use value from _data map (instead of replacement map)\n                    const value = this._data.get(key)\n                    orderedData.set(key, value)\n                    // Was a new key added?\n                    if (!keyExisted) {\n                        // _keysAtom.reportChanged() was already called\n                        keysReportChangedCalled = true\n                    }\n                }\n            }\n            // Check for possible key order change\n            if (!keysReportChangedCalled) {\n                if (this._data.size !== orderedData.size) {\n                    // If size differs, keys are definitely modified\n                    this._keysAtom.reportChanged()\n                } else {\n                    const iter1 = this._data.keys()\n                    const iter2 = orderedData.keys()\n                    let next1 = iter1.next()\n                    let next2 = iter2.next()\n                    while (!next1.done) {\n                        if (next1.value !== next2.value) {\n                            this._keysAtom.reportChanged()\n                            break\n                        }\n                        next1 = iter1.next()\n                        next2 = iter2.next()\n                    }\n                }\n            }\n            // Use correctly ordered map\n            this._data = orderedData\n        })\n        return this\n    }\n\n    get size(): number {\n        this._keysAtom.reportObserved()\n        return this._data.size\n    }\n\n    /**\n     * Returns a plain object that represents this map.\n     * Note that all the keys being stringified.\n     * If there are duplicating keys after converting them to strings, behaviour is undetermined.\n     */\n    toPOJO(): IKeyValueMap<V> {\n        const res: IKeyValueMap<V> = {}\n        for (const [key, value] of this) {\n            // We lie about symbol key types due to https://github.com/Microsoft/TypeScript/issues/1863\n            res[typeof key === \"symbol\" ? <any>key : stringifyKey(key)] = value\n        }\n        return res\n    }\n\n    /**\n     * Returns a shallow non observable object clone of this map.\n     * Note that the values migth still be observable. For a deep clone use mobx.toJS.\n     */\n    toJS(): Map<K, V> {\n        return new Map(this)\n    }\n\n    toJSON(): IKeyValueMap<V> {\n        // Used by JSON.stringify\n        return this.toPOJO()\n    }\n\n    toString(): string {\n        return (\n            this.name +\n            \"[{ \" +\n            Array.from(this.keys())\n                .map(key => `${stringifyKey(key)}: ${\"\" + this.get(key)}`)\n                .join(\", \") +\n            \" }]\"\n        )\n    }\n\n    [Symbol.toStringTag]: \"Map\" = \"Map\"\n\n    /**\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n     * for callback details\n     */\n    observe(listener: (changes: IMapDidChange<K, V>) => void, fireImmediately?: boolean): Lambda {\n        process.env.NODE_ENV !== \"production\" &&\n            invariant(\n                fireImmediately !== true,\n                \"`observe` doesn't support fireImmediately=true in combination with maps.\"\n            )\n        return registerListener(this, listener)\n    }\n\n    intercept(handler: IInterceptor<IMapWillChange<K, V>>): Lambda {\n        return registerInterceptor(this, handler)\n    }\n}\n\n/* 'var' fixes small-build issue */\nexport const isObservableMap = createInstanceofPredicate(\"ObservableMap\", ObservableMap) as (\n    thing: any\n) => thing is ObservableMap<any, any>\n","import {\n    $mobx,\n    createAtom,\n    deepEnhancer,\n    getNextId,\n    IEnhancer,\n    isSpyEnabled,\n    hasListeners,\n    IListenable,\n    invariant,\n    registerListener,\n    Lambda,\n    fail,\n    spyReportStart,\n    notifyListeners,\n    spyReportEnd,\n    createInstanceofPredicate,\n    hasInterceptors,\n    interceptChange,\n    IInterceptable,\n    IInterceptor,\n    registerInterceptor,\n    checkIfStateModificationsAreAllowed,\n    untracked,\n    makeIterable,\n    transaction,\n    isES6Set,\n    allowStateChangesStart,\n    allowStateChangesEnd\n} from \"../internal\"\n\nconst ObservableSetMarker = {}\n\nexport type IObservableSetInitialValues<T> = Set<T> | readonly T[]\n\nexport type ISetDidChange<T = any> =\n    | {\n          object: ObservableSet<T>\n          type: \"add\"\n          newValue: T\n      }\n    | {\n          object: ObservableSet<T>\n          type: \"delete\"\n          oldValue: T\n      }\n\nexport type ISetWillChange<T = any> =\n    | {\n          type: \"delete\"\n          object: ObservableSet<T>\n          oldValue: T\n      }\n    | {\n          type: \"add\"\n          object: ObservableSet<T>\n          newValue: T\n      }\n\nexport class ObservableSet<T = any> implements Set<T>, IInterceptable<ISetWillChange>, IListenable {\n    [$mobx] = ObservableSetMarker\n    private _data: Set<any> = new Set()\n    private _atom = createAtom(this.name)\n    changeListeners\n    interceptors\n    dehancer: any\n    enhancer: (newV: any, oldV: any | undefined) => any\n\n    constructor(\n        initialData?: IObservableSetInitialValues<T>,\n        enhancer: IEnhancer<T> = deepEnhancer,\n        public name = \"ObservableSet@\" + getNextId()\n    ) {\n        if (typeof Set !== \"function\") {\n            throw new Error(\n                \"mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js\"\n            )\n        }\n\n        this.enhancer = (newV, oldV) => enhancer(newV, oldV, name)\n\n        if (initialData) {\n            this.replace(initialData)\n        }\n    }\n\n    private dehanceValue<X extends T | undefined>(value: X): X {\n        if (this.dehancer !== undefined) {\n            return this.dehancer(value)\n        }\n        return value\n    }\n\n    clear() {\n        transaction(() => {\n            untracked(() => {\n                for (const value of this._data.values()) this.delete(value)\n            })\n        })\n    }\n\n    forEach(callbackFn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any) {\n        for (const value of this) {\n            callbackFn.call(thisArg, value, value, this)\n        }\n    }\n\n    get size() {\n        this._atom.reportObserved()\n        return this._data.size\n    }\n\n    add(value: T) {\n        checkIfStateModificationsAreAllowed(this._atom)\n        if (hasInterceptors(this)) {\n            const change = interceptChange<ISetWillChange<T>>(this, {\n                type: \"add\",\n                object: this,\n                newValue: value\n            })\n            if (!change) return this\n            // TODO: ideally, value = change.value would be done here, so that values can be\n            // changed by interceptor. Same applies for other Set and Map api's.\n        }\n        if (!this.has(value)) {\n            transaction(() => {\n                this._data.add(this.enhancer(value, undefined))\n                this._atom.reportChanged()\n            })\n            const notifySpy = isSpyEnabled()\n            const notify = hasListeners(this)\n            const change =\n                notify || notifySpy\n                    ? <ISetDidChange<T>>{\n                          type: \"add\",\n                          object: this,\n                          newValue: value\n                      }\n                    : null\n            if (notifySpy && process.env.NODE_ENV !== \"production\") spyReportStart(change)\n            if (notify) notifyListeners(this, change)\n            if (notifySpy && process.env.NODE_ENV !== \"production\") spyReportEnd()\n        }\n\n        return this\n    }\n\n    delete(value: any) {\n        if (hasInterceptors(this)) {\n            const change = interceptChange<ISetWillChange<T>>(this, {\n                type: \"delete\",\n                object: this,\n                oldValue: value\n            })\n            if (!change) return false\n        }\n        if (this.has(value)) {\n            const notifySpy = isSpyEnabled()\n            const notify = hasListeners(this)\n            const change =\n                notify || notifySpy\n                    ? <ISetDidChange<T>>{\n                          type: \"delete\",\n                          object: this,\n                          oldValue: value\n                      }\n                    : null\n\n            if (notifySpy && process.env.NODE_ENV !== \"production\")\n                spyReportStart({ ...change, name: this.name })\n            transaction(() => {\n                this._atom.reportChanged()\n                this._data.delete(value)\n            })\n            if (notify) notifyListeners(this, change)\n            if (notifySpy && process.env.NODE_ENV !== \"production\") spyReportEnd()\n            return true\n        }\n        return false\n    }\n\n    has(value: any) {\n        this._atom.reportObserved()\n        return this._data.has(this.dehanceValue(value))\n    }\n\n    entries() {\n        let nextIndex = 0\n        const keys = Array.from(this.keys())\n        const values = Array.from(this.values())\n        return makeIterable<[T, T]>({\n            next() {\n                const index = nextIndex\n                nextIndex += 1\n                return index < values.length\n                    ? { value: [keys[index], values[index]], done: false }\n                    : { done: true }\n            }\n        } as any)\n    }\n\n    keys(): IterableIterator<T> {\n        return this.values()\n    }\n\n    values(): IterableIterator<T> {\n        this._atom.reportObserved()\n        const self = this\n        let nextIndex = 0\n        const observableValues = Array.from(this._data.values())\n        return makeIterable<T>({\n            next() {\n                return nextIndex < observableValues.length\n                    ? { value: self.dehanceValue(observableValues[nextIndex++]), done: false }\n                    : { done: true }\n            }\n        } as any)\n    }\n\n    replace(other: ObservableSet<T> | IObservableSetInitialValues<T>): ObservableSet<T> {\n        if (isObservableSet(other)) {\n            other = other.toJS()\n        }\n\n        transaction(() => {\n            const prev = allowStateChangesStart(true)\n            try {\n                if (Array.isArray(other)) {\n                    this.clear()\n                    other.forEach(value => this.add(value))\n                } else if (isES6Set(other)) {\n                    this.clear()\n                    other.forEach(value => this.add(value))\n                } else if (other !== null && other !== undefined) {\n                    fail(\"Cannot initialize set from \" + other)\n                } \n            } finally {\n                allowStateChangesEnd(prev)\n            }\n        })\n\n        return this\n    }\n\n    observe(listener: (changes: ISetDidChange<T>) => void, fireImmediately?: boolean): Lambda {\n        // TODO 'fireImmediately' can be true?\n        process.env.NODE_ENV !== \"production\" &&\n            invariant(\n                fireImmediately !== true,\n                \"`observe` doesn't support fireImmediately=true in combination with sets.\"\n            )\n        return registerListener(this, listener)\n    }\n\n    intercept(handler: IInterceptor<ISetWillChange<T>>): Lambda {\n        return registerInterceptor(this, handler)\n    }\n\n    toJS(): Set<T> {\n        return new Set(this)\n    }\n\n    toString(): string {\n        return this.name + \"[ \" + Array.from(this).join(\", \") + \" ]\"\n    }\n\n    [Symbol.iterator]() {\n        return this.values()\n    }\n\n    [Symbol.toStringTag]: \"Set\" = \"Set\"\n}\n\nexport const isObservableSet = createInstanceofPredicate(\"ObservableSet\", ObservableSet) as (\n    thing: any\n) => thing is ObservableSet<any>\n","import {\n    $mobx,\n    Atom,\n    ComputedValue,\n    IAtom,\n    IComputedValueOptions,\n    IEnhancer,\n    IInterceptable,\n    IListenable,\n    Lambda,\n    ObservableValue,\n    addHiddenProp,\n    assertPropertyConfigurable,\n    createInstanceofPredicate,\n    deepEnhancer,\n    endBatch,\n    getNextId,\n    hasInterceptors,\n    hasListeners,\n    initializeInstance,\n    interceptChange,\n    invariant,\n    isObject,\n    isPlainObject,\n    isPropertyConfigurable,\n    isSpyEnabled,\n    notifyListeners,\n    referenceEnhancer,\n    registerInterceptor,\n    registerListener,\n    spyReportEnd,\n    spyReportStart,\n    startBatch,\n    stringifyKey,\n    globalState\n} from \"../internal\"\n\nexport interface IObservableObject {\n    \"observable-object\": IObservableObject\n}\n\nexport type IObjectDidChange<T = any> =\n    | {\n          name: PropertyKey\n          object: T\n          type: \"add\"\n          newValue: any\n      }\n    | {\n          name: PropertyKey\n          object: T\n          type: \"update\"\n          oldValue: any\n          newValue: any\n      }\n    | {\n          name: PropertyKey\n          object: T\n          type: \"remove\"\n          oldValue: any\n      }\n\nexport type IObjectWillChange<T = any> =\n    | {\n          object: T\n          type: \"update\" | \"add\"\n          name: PropertyKey\n          newValue: any\n      }\n    | {\n          object: T\n          type: \"remove\"\n          name: PropertyKey\n      }\n\nexport class ObservableObjectAdministration\n    implements IInterceptable<IObjectWillChange>, IListenable {\n    keysAtom: IAtom\n    changeListeners\n    interceptors\n    private proxy: any\n    private pendingKeys: undefined | Map<PropertyKey, ObservableValue<boolean>>\n\n    constructor(\n        public target: any,\n        public values = new Map<PropertyKey, ObservableValue<any> | ComputedValue<any>>(),\n        public name: string,\n        public defaultEnhancer: IEnhancer<any>\n    ) {\n        this.keysAtom = new Atom(name + \".keys\")\n    }\n\n    read(key: PropertyKey) {\n        return this.values.get(key)!.get()\n    }\n\n    write(key: PropertyKey, newValue) {\n        const instance = this.target\n        const observable = this.values.get(key)\n        if (observable instanceof ComputedValue) {\n            observable.set(newValue)\n            return\n        }\n\n        // intercept\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IObjectWillChange>(this, {\n                type: \"update\",\n                object: this.proxy || instance,\n                name: key,\n                newValue\n            })\n            if (!change) return\n            newValue = (change as any).newValue\n        }\n        newValue = (observable as any).prepareNewValue(newValue)\n\n        // notify spy & observers\n        if (newValue !== globalState.UNCHANGED) {\n            const notify = hasListeners(this)\n            const notifySpy = isSpyEnabled()\n            const change =\n                notify || notifySpy\n                    ? {\n                          type: \"update\",\n                          object: this.proxy || instance,\n                          oldValue: (observable as any).value,\n                          name: key,\n                          newValue\n                      }\n                    : null\n\n            if (notifySpy && process.env.NODE_ENV !== \"production\")\n                spyReportStart({ ...change, name: this.name, key })\n            ;(observable as ObservableValue<any>).setNewValue(newValue)\n            if (notify) notifyListeners(this, change)\n            if (notifySpy && process.env.NODE_ENV !== \"production\") spyReportEnd()\n        }\n    }\n\n    has(key: PropertyKey) {\n        const map = this.pendingKeys || (this.pendingKeys = new Map())\n        let entry = map.get(key)\n        if (entry) return entry.get()\n        else {\n            const exists = !!this.values.get(key)\n            // Possible optimization: Don't have a separate map for non existing keys,\n            // but store them in the values map instead, using a special symbol to denote \"not existing\"\n            entry = new ObservableValue(\n                exists,\n                referenceEnhancer,\n                `${this.name}.${stringifyKey(key)}?`,\n                false\n            )\n            map.set(key, entry)\n            return entry.get() // read to subscribe\n        }\n    }\n\n    addObservableProp(\n        propName: PropertyKey,\n        newValue,\n        enhancer: IEnhancer<any> = this.defaultEnhancer\n    ) {\n        const { target } = this\n        assertPropertyConfigurable(target, propName)\n\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IObjectWillChange>(this, {\n                object: this.proxy || target,\n                name: propName,\n                type: \"add\",\n                newValue\n            })\n            if (!change) return\n            newValue = (change as any).newValue\n        }\n        const observable = new ObservableValue(\n            newValue,\n            enhancer,\n            `${this.name}.${stringifyKey(propName)}`,\n            false\n        )\n        this.values.set(propName, observable)\n        newValue = (observable as any).value // observableValue might have changed it\n\n        Object.defineProperty(target, propName, generateObservablePropConfig(propName))\n        this.notifyPropertyAddition(propName, newValue)\n    }\n\n    addComputedProp(\n        propertyOwner: any, // where is the property declared?\n        propName: PropertyKey,\n        options: IComputedValueOptions<any>\n    ) {\n        const { target } = this\n        options.name = options.name || `${this.name}.${stringifyKey(propName)}`\n        this.values.set(propName, new ComputedValue(options))\n        if (propertyOwner === target || isPropertyConfigurable(propertyOwner, propName))\n            Object.defineProperty(propertyOwner, propName, generateComputedPropConfig(propName))\n    }\n\n    remove(key: PropertyKey) {\n        if (!this.values.has(key)) return\n        const { target } = this\n        if (hasInterceptors(this)) {\n            const change = interceptChange<IObjectWillChange>(this, {\n                object: this.proxy || target,\n                name: key,\n                type: \"remove\"\n            })\n            if (!change) return\n        }\n        try {\n            startBatch()\n            const notify = hasListeners(this)\n            const notifySpy = isSpyEnabled()\n            const oldObservable = this.values.get(key)\n            const oldValue = oldObservable && oldObservable.get()\n            oldObservable && oldObservable.set(undefined)\n            // notify key and keyset listeners\n            this.keysAtom.reportChanged()\n            this.values.delete(key)\n            if (this.pendingKeys) {\n                const entry = this.pendingKeys.get(key)\n                if (entry) entry.set(false)\n            }\n            // delete the prop\n            delete this.target[key]\n            const change =\n                notify || notifySpy\n                    ? {\n                          type: \"remove\",\n                          object: this.proxy || target,\n                          oldValue: oldValue,\n                          name: key\n                      }\n                    : null\n            if (notifySpy && process.env.NODE_ENV !== \"production\")\n                spyReportStart({ ...change, name: this.name, key })\n            if (notify) notifyListeners(this, change)\n            if (notifySpy && process.env.NODE_ENV !== \"production\") spyReportEnd()\n        } finally {\n            endBatch()\n        }\n    }\n\n    illegalAccess(owner, propName) {\n        /**\n         * This happens if a property is accessed through the prototype chain, but the property was\n         * declared directly as own property on the prototype.\n         *\n         * E.g.:\n         * class A {\n         * }\n         * extendObservable(A.prototype, { x: 1 })\n         *\n         * classB extens A {\n         * }\n         * console.log(new B().x)\n         *\n         * It is unclear whether the property should be considered 'static' or inherited.\n         * Either use `console.log(A.x)`\n         * or: decorate(A, { x: observable })\n         *\n         * When using decorate, the property will always be redeclared as own property on the actual instance\n         */\n        console.warn(\n            `Property '${propName}' of '${owner}' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner`\n        )\n    }\n\n    /**\n     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.\n     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe\n     * for callback details\n     */\n    observe(callback: (changes: IObjectDidChange) => void, fireImmediately?: boolean): Lambda {\n        process.env.NODE_ENV !== \"production\" &&\n            invariant(\n                fireImmediately !== true,\n                \"`observe` doesn't support the fire immediately property for observable objects.\"\n            )\n        return registerListener(this, callback)\n    }\n\n    intercept(handler): Lambda {\n        return registerInterceptor(this, handler)\n    }\n\n    notifyPropertyAddition(key: PropertyKey, newValue) {\n        const notify = hasListeners(this)\n        const notifySpy = isSpyEnabled()\n        const change =\n            notify || notifySpy\n                ? {\n                      type: \"add\",\n                      object: this.proxy || this.target,\n                      name: key,\n                      newValue\n                  }\n                : null\n\n        if (notifySpy && process.env.NODE_ENV !== \"production\")\n            spyReportStart({ ...change, name: this.name, key })\n        if (notify) notifyListeners(this, change)\n        if (notifySpy && process.env.NODE_ENV !== \"production\") spyReportEnd()\n        if (this.pendingKeys) {\n            const entry = this.pendingKeys.get(key)\n            if (entry) entry.set(true)\n        }\n        this.keysAtom.reportChanged()\n    }\n\n    getKeys(): PropertyKey[] {\n        this.keysAtom.reportObserved()\n        // return Reflect.ownKeys(this.values) as any\n        const res: PropertyKey[] = []\n        for (const [key, value] of this.values) if (value instanceof ObservableValue) res.push(key)\n        return res\n    }\n}\n\nexport interface IIsObservableObject {\n    $mobx: ObservableObjectAdministration\n}\n\nexport function asObservableObject(\n    target: any,\n    name: PropertyKey = \"\",\n    defaultEnhancer: IEnhancer<any> = deepEnhancer\n): ObservableObjectAdministration {\n    if (Object.prototype.hasOwnProperty.call(target, $mobx)) return target[$mobx]\n\n    process.env.NODE_ENV !== \"production\" &&\n        invariant(\n            Object.isExtensible(target),\n            \"Cannot make the designated object observable; it is not extensible\"\n        )\n    if (!isPlainObject(target))\n        name = (target.constructor.name || \"ObservableObject\") + \"@\" + getNextId()\n    if (!name) name = \"ObservableObject@\" + getNextId()\n\n    const adm = new ObservableObjectAdministration(\n        target,\n        new Map(),\n        stringifyKey(name),\n        defaultEnhancer\n    )\n    addHiddenProp(target, $mobx, adm)\n    return adm\n}\n\nconst observablePropertyConfigs = Object.create(null)\nconst computedPropertyConfigs = Object.create(null)\n\nexport function generateObservablePropConfig(propName) {\n    return (\n        observablePropertyConfigs[propName] ||\n        (observablePropertyConfigs[propName] = {\n            configurable: true,\n            enumerable: true,\n            get() {\n                return this[$mobx].read(propName)\n            },\n            set(v) {\n                this[$mobx].write(propName, v)\n            }\n        })\n    )\n}\n\nfunction getAdministrationForComputedPropOwner(owner: any): ObservableObjectAdministration {\n    const adm = owner[$mobx]\n    if (!adm) {\n        // because computed props are declared on proty,\n        // the current instance might not have been initialized yet\n        initializeInstance(owner)\n        return owner[$mobx]\n    }\n    return adm\n}\n\nexport function generateComputedPropConfig(propName) {\n    return (\n        computedPropertyConfigs[propName] ||\n        (computedPropertyConfigs[propName] = {\n            configurable: globalState.computedConfigurable,\n            enumerable: false,\n            get() {\n                return getAdministrationForComputedPropOwner(this).read(propName)\n            },\n            set(v) {\n                getAdministrationForComputedPropOwner(this).write(propName, v)\n            }\n        })\n    )\n}\n\nconst isObservableObjectAdministration = createInstanceofPredicate(\n    \"ObservableObjectAdministration\",\n    ObservableObjectAdministration\n)\n\nexport function isObservableObject(thing: any): thing is IObservableObject {\n    if (isObject(thing)) {\n        // Initializers run lazily when transpiling to babel, so make sure they are run...\n        initializeInstance(thing)\n        return isObservableObjectAdministration((thing as any)[$mobx])\n    }\n    return false\n}\n","import {\n    $mobx,\n    IDepTreeNode,\n    fail,\n    initializeInstance,\n    isAtom,\n    isComputedValue,\n    isObservableArray,\n    isObservableMap,\n    isObservableObject,\n    isReaction,\n    isObservableSet\n} from \"../internal\"\n\nexport function getAtom(thing: any, property?: string): IDepTreeNode {\n    if (typeof thing === \"object\" && thing !== null) {\n        if (isObservableArray(thing)) {\n            if (property !== undefined)\n                fail(\n                    process.env.NODE_ENV !== \"production\" &&\n                        \"It is not possible to get index atoms from arrays\"\n                )\n            return (thing as any)[$mobx].atom\n        }\n        if (isObservableSet(thing)) {\n            return (thing as any)[$mobx]\n        }\n        if (isObservableMap(thing)) {\n            const anyThing = thing as any\n            if (property === undefined) return anyThing._keysAtom\n            const observable = anyThing._data.get(property) || anyThing._hasMap.get(property)\n            if (!observable)\n                fail(\n                    process.env.NODE_ENV !== \"production\" &&\n                        `the entry '${property}' does not exist in the observable map '${getDebugName(\n                            thing\n                        )}'`\n                )\n            return observable\n        }\n        // Initializers run lazily when transpiling to babel, so make sure they are run...\n        initializeInstance(thing)\n        if (property && !thing[$mobx]) thing[property] // See #1072\n        if (isObservableObject(thing)) {\n            if (!property)\n                return fail(process.env.NODE_ENV !== \"production\" && `please specify a property`)\n            const observable = (thing as any)[$mobx].values.get(property)\n            if (!observable)\n                fail(\n                    process.env.NODE_ENV !== \"production\" &&\n                        `no observable property '${property}' found on the observable object '${getDebugName(\n                            thing\n                        )}'`\n                )\n            return observable\n        }\n        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {\n            return thing\n        }\n    } else if (typeof thing === \"function\") {\n        if (isReaction(thing[$mobx])) {\n            // disposer function\n            return thing[$mobx]\n        }\n    }\n    return fail(process.env.NODE_ENV !== \"production\" && \"Cannot obtain atom from \" + thing)\n}\n\nexport function getAdministration(thing: any, property?: string) {\n    if (!thing) fail(\"Expecting some object\")\n    if (property !== undefined) return getAdministration(getAtom(thing, property))\n    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing\n    if (isObservableMap(thing) || isObservableSet(thing)) return thing\n    // Initializers run lazily when transpiling to babel, so make sure they are run...\n    initializeInstance(thing)\n    if (thing[$mobx]) return thing[$mobx]\n    fail(process.env.NODE_ENV !== \"production\" && \"Cannot obtain administration from \" + thing)\n}\n\nexport function getDebugName(thing: any, property?: string): string {\n    let named\n    if (property !== undefined) named = getAtom(thing, property)\n    else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing))\n        named = getAdministration(thing)\n    else named = getAtom(thing) // valid for arrays as well\n    return named.name\n}\n","import {\n    isES6Map,\n    isObservableArray,\n    isObservableMap,\n    isES6Set,\n    isObservableSet\n} from \"../internal\"\n\ndeclare const Symbol\nconst toString = Object.prototype.toString\n\nexport function deepEqual(a: any, b: any, depth: number = -1): boolean {\n    return eq(a, b, depth)\n}\n\n// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289\n// Internal recursive comparison function for `isEqual`.\nfunction eq(a: any, b: any, depth: number, aStack?: any[], bStack?: any[]) {\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\n    if (a === b) return a !== 0 || 1 / a === 1 / b\n    // `null` or `undefined` only equal to itself (strict comparison).\n    if (a == null || b == null) return false\n    // `NaN`s are equivalent, but non-reflexive.\n    if (a !== a) return b !== b\n    // Exhaust primitive checks\n    const type = typeof a\n    if (type !== \"function\" && type !== \"object\" && typeof b != \"object\") return false\n\n    // Compare `[[Class]]` names.\n    const className = toString.call(a)\n    if (className !== toString.call(b)) return false\n    switch (className) {\n        // Strings, numbers, regular expressions, dates, and booleans are compared by value.\n        case \"[object RegExp]\":\n        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\n        case \"[object String]\":\n            // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\n            // equivalent to `new String(\"5\")`.\n            return \"\" + a === \"\" + b\n        case \"[object Number]\":\n            // `NaN`s are equivalent, but non-reflexive.\n            // Object(NaN) is equivalent to NaN.\n            if (+a !== +a) return +b !== +b\n            // An `egal` comparison is performed for other numeric values.\n            return +a === 0 ? 1 / +a === 1 / b : +a === +b\n        case \"[object Date]\":\n        case \"[object Boolean]\":\n            // Coerce dates and booleans to numeric primitive values. Dates are compared by their\n            // millisecond representations. Note that invalid dates with millisecond representations\n            // of `NaN` are not equivalent.\n            return +a === +b\n        case \"[object Symbol]\":\n            return (\n                typeof Symbol !== \"undefined\" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b)\n            )\n        case \"[object Map]\":\n        case \"[object Set]\":\n            // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.\n            // Hide this extra level by increasing the depth.\n            if (depth >= 0) {\n                depth++\n            }\n            break\n    }\n    // Unwrap any wrapped objects.\n    a = unwrap(a)\n    b = unwrap(b)\n\n    const areArrays = className === \"[object Array]\"\n    if (!areArrays) {\n        if (typeof a != \"object\" || typeof b != \"object\") return false\n\n        // Objects with different constructors are not equivalent, but `Object`s or `Array`s\n        // from different frames are.\n        const aCtor = a.constructor,\n            bCtor = b.constructor\n        if (\n            aCtor !== bCtor &&\n            !(\n                typeof aCtor === \"function\" &&\n                aCtor instanceof aCtor &&\n                typeof bCtor === \"function\" &&\n                bCtor instanceof bCtor\n            ) &&\n            (\"constructor\" in a && \"constructor\" in b)\n        ) {\n            return false\n        }\n    }\n\n    if (depth === 0) {\n        return false\n    } else if (depth < 0) {\n        depth = -1\n    }\n\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\n\n    // Initializing stack of traversed objects.\n    // It's done here since we only need them for objects and arrays comparison.\n    aStack = aStack || []\n    bStack = bStack || []\n    let length = aStack.length\n    while (length--) {\n        // Linear search. Performance is inversely proportional to the number of\n        // unique nested structures.\n        if (aStack[length] === a) return bStack[length] === b\n    }\n\n    // Add the first object to the stack of traversed objects.\n    aStack.push(a)\n    bStack.push(b)\n\n    // Recursively compare objects and arrays.\n    if (areArrays) {\n        // Compare array lengths to determine if a deep comparison is necessary.\n        length = a.length\n        if (length !== b.length) return false\n        // Deep compare the contents, ignoring non-numeric properties.\n        while (length--) {\n            if (!eq(a[length], b[length], depth - 1, aStack, bStack)) return false\n        }\n    } else {\n        // Deep compare objects.\n        const keys = Object.keys(a)\n        let key\n        length = keys.length\n        // Ensure that both objects contain the same number of properties before comparing deep equality.\n        if (Object.keys(b).length !== length) return false\n        while (length--) {\n            // Deep compare each member\n            key = keys[length]\n            if (!(has(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) return false\n        }\n    }\n    // Remove the first object from the stack of traversed objects.\n    aStack.pop()\n    bStack.pop()\n    return true\n}\n\nfunction unwrap(a: any) {\n    if (isObservableArray(a)) return a.slice()\n    if (isES6Map(a) || isObservableMap(a)) return Array.from(a.entries())\n    if (isES6Set(a) || isObservableSet(a)) return Array.from(a.entries())\n    return a\n}\n\nfunction has(a: any, key: string) {\n    return Object.prototype.hasOwnProperty.call(a, key)\n}\n","export function makeIterable<T>(iterator: Iterator<T>): IterableIterator<T> {\n    iterator[Symbol.iterator] = getSelf\n    return iterator as any\n}\n\nfunction getSelf() {\n    return this\n}\n","/**\n * (c) Michel Weststrate 2015 - 2018\n * MIT Licensed\n *\n * Welcome to the mobx sources! To get an global overview of how MobX internally works,\n * this is a good place to start:\n * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74\n *\n * Source folders:\n * ===============\n *\n * - api/     Most of the public static methods exposed by the module can be found here.\n * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.\n * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.\n * - utils/   Utility stuff.\n *\n */\n\nimport { getGlobal, spy, getDebugName, $mobx } from \"./internal\"\n\nif (typeof Proxy === \"undefined\" || typeof Symbol === \"undefined\") {\n    throw new Error(\n        \"[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.\"\n    )\n}\n\ntry {\n    // define process.env if needed\n    // if this is not a production build in the first place\n    // (in which case the expression below would be substituted with 'production')\n    process.env.NODE_ENV\n} catch (e) {\n    const g = getGlobal()\n    if (typeof process === \"undefined\") g.process = {}\n    g.process.env = {}\n}\n\n;(() => {\n    function testCodeMinification() {}\n    if (\n        testCodeMinification.name !== \"testCodeMinification\" &&\n        process.env.NODE_ENV !== \"production\" &&\n        typeof process !== 'undefined' && process.env.IGNORE_MOBX_MINIFY_WARNING !== \"true\"\n    ) {\n        // trick so it doesn't get replaced\n        const varName = [\"process\", \"env\", \"NODE_ENV\"].join(\".\")\n        console.warn(\n            `[mobx] you are running a minified build, but '${varName}' was not set to 'production' in your bundler. This results in an unnecessarily large and slow bundle`\n        )\n    }\n})()\n\nexport {\n    IObservable,\n    IDepTreeNode,\n    Reaction,\n    IReactionPublic,\n    IReactionDisposer,\n    IDerivation,\n    untracked,\n    IDerivationState,\n    IAtom,\n    createAtom,\n    IAction,\n    spy,\n    IComputedValue,\n    IEqualsComparer,\n    comparer,\n    IEnhancer,\n    IInterceptable,\n    IInterceptor,\n    IListenable,\n    IObjectWillChange,\n    IObjectDidChange,\n    IObservableObject,\n    isObservableObject,\n    IValueDidChange,\n    IValueWillChange,\n    IObservableValue,\n    isObservableValue as isBoxedObservable,\n    IObservableArray,\n    IArrayWillChange,\n    IArrayWillSplice,\n    IArrayChange,\n    IArraySplice,\n    isObservableArray,\n    IKeyValueMap,\n    ObservableMap,\n    IMapEntries,\n    IMapEntry,\n    IMapWillChange,\n    IMapDidChange,\n    isObservableMap,\n    IObservableMapInitialValues,\n    ObservableSet,\n    isObservableSet,\n    ISetDidChange,\n    ISetWillChange,\n    IObservableSetInitialValues,\n    transaction,\n    observable,\n    IObservableFactory,\n    IObservableFactories,\n    computed,\n    IComputed,\n    isObservable,\n    isObservableProp,\n    isComputed,\n    isComputedProp,\n    extendObservable,\n    observe,\n    intercept,\n    autorun,\n    IAutorunOptions,\n    reaction,\n    IReactionOptions,\n    when,\n    IWhenOptions,\n    action,\n    isAction,\n    runInAction,\n    IActionFactory,\n    keys,\n    values,\n    entries,\n    set,\n    remove,\n    has,\n    get,\n    decorate,\n    configure,\n    onBecomeObserved,\n    onBecomeUnobserved,\n    flow,\n    FlowCancellationError,\n    isFlowCancellationError,\n    toJS,\n    trace,\n    IObserverTree,\n    IDependencyTree,\n    getDependencyTree,\n    getObserverTree,\n    resetGlobalState as _resetGlobalState,\n    getGlobalState as _getGlobalState,\n    getDebugName,\n    getAtom,\n    getAdministration as _getAdministration,\n    allowStateChanges as _allowStateChanges,\n    allowStateChangesInsideComputed as _allowStateChangesInsideComputed,\n    Lambda,\n    isArrayLike,\n    $mobx,\n    isComputingDerivation as _isComputingDerivation,\n    onReactionError,\n    interceptReads as _interceptReads,\n    IComputedValueOptions,\n    IActionRunInfo,\n    _startAction,\n    _endAction,\n    allowStateReadsStart as _allowStateReadsStart,\n    allowStateReadsEnd as _allowStateReadsEnd\n} from \"./internal\"\n\n// Devtools support\ndeclare const __MOBX_DEVTOOLS_GLOBAL_HOOK__: { injectMobx: (any) => void }\nif (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === \"object\") {\n    // See: https://github.com/andykog/mobx-devtools/\n    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({\n        spy,\n        extras: {\n            getDebugName\n        },\n        $mobx\n    })\n}\n"],"names":["IDerivationState","has","_a"],"mappings":"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"}