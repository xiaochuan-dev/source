{"version":3,"file":"index.esm.js","sources":["../../src/core/use-swr.ts","../../src/mutation/state.ts","../../src/mutation/index.ts"],"sourcesContent":["/// <reference types=\"react/experimental\" />\nimport ReactExports, {\n  useCallback,\n  useRef,\n  useDebugValue,\n  useMemo\n} from 'react'\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js'\n\nimport {\n  defaultConfig,\n  IS_REACT_LEGACY,\n  IS_SERVER,\n  rAF,\n  useIsomorphicLayoutEffect,\n  SWRGlobalState,\n  serialize,\n  isUndefined,\n  UNDEFINED,\n  OBJECT,\n  isFunction,\n  createCacheHelper,\n  SWRConfig as ConfigProvider,\n  withArgs,\n  subscribeCallback,\n  getTimestamp,\n  internalMutate,\n  revalidateEvents,\n  mergeObjects\n} from '../_internal'\nimport type {\n  State,\n  Fetcher,\n  Key,\n  SWRResponse,\n  RevalidatorOptions,\n  FullConfiguration,\n  SWRConfiguration,\n  SWRHook,\n  RevalidateEvent,\n  StateDependencies,\n  GlobalState,\n  ReactUsePromise\n} from '../_internal'\n\nconst use =\n  ReactExports.use ||\n  (<T>(\n    promise: Promise<T> & {\n      status?: 'pending' | 'fulfilled' | 'rejected'\n      value?: T\n      reason?: unknown\n    }\n  ): T => {\n    if (promise.status === 'pending') {\n      throw promise\n    } else if (promise.status === 'fulfilled') {\n      return promise.value as T\n    } else if (promise.status === 'rejected') {\n      throw promise.reason\n    } else {\n      promise.status = 'pending'\n      promise.then(\n        v => {\n          promise.status = 'fulfilled'\n          promise.value = v\n        },\n        e => {\n          promise.status = 'rejected'\n          promise.reason = e\n        }\n      )\n      throw promise\n    }\n  })\n\nconst WITH_DEDUPE = { dedupe: true }\n\ntype DefinitelyTruthy<T> = false extends T\n  ? never\n  : 0 extends T\n  ? never\n  : '' extends T\n  ? never\n  : null extends T\n  ? never\n  : undefined extends T\n  ? never\n  : T\n\nexport const useSWRHandler = <Data = any, Error = any>(\n  _key: Key,\n  fetcher: Fetcher<Data> | null,\n  config: FullConfiguration & SWRConfiguration<Data, Error>\n) => {\n  const {\n    cache,\n    compare,\n    suspense,\n    fallbackData,\n    revalidateOnMount,\n    revalidateIfStale,\n    refreshInterval,\n    refreshWhenHidden,\n    refreshWhenOffline,\n    keepPreviousData\n  } = config\n\n  const [EVENT_REVALIDATORS, MUTATION, FETCH, PRELOAD] = SWRGlobalState.get(\n    cache\n  ) as GlobalState\n\n  // `key` is the identifier of the SWR internal state,\n  // `fnArg` is the argument/arguments parsed from the key, which will be passed\n  // to the fetcher.\n  // All of them are derived from `_key`.\n  const [key, fnArg] = serialize(_key)\n\n  // If it's the initial render of this hook.\n  const initialMountedRef = useRef(false)\n\n  // If the hook is unmounted already. This will be used to prevent some effects\n  // to be called after unmounting.\n  const unmountedRef = useRef(false)\n\n  // Refs to keep the key and config.\n  const keyRef = useRef(key)\n  const fetcherRef = useRef(fetcher)\n  const configRef = useRef(config)\n  const getConfig = () => configRef.current\n  const isActive = () => getConfig().isVisible() && getConfig().isOnline()\n\n  const [getCache, setCache, subscribeCache, getInitialCache] =\n    createCacheHelper<\n      Data,\n      State<Data, any> & {\n        // The original key arguments.\n        _k?: Key\n      }\n    >(cache, key)\n\n  const stateDependencies = useRef<StateDependencies>({}).current\n  const fallback = isUndefined(fallbackData)\n    ? config.fallback[key]\n    : fallbackData\n\n  const isEqual = (prev: State<Data, any>, current: State<Data, any>) => {\n    for (const _ in stateDependencies) {\n      const t = _ as keyof StateDependencies\n      if (t === 'data') {\n        if (!compare(prev[t], current[t])) {\n          if (!isUndefined(prev[t])) {\n            return false\n          }\n          if (!compare(returnedData, current[t])) {\n            return false\n          }\n        }\n      } else {\n        if (current[t] !== prev[t]) {\n          return false\n        }\n      }\n    }\n    return true\n  }\n\n  const getSnapshot = useMemo(() => {\n    const shouldStartRequest = (() => {\n      if (!key) return false\n      if (!fetcher) return false\n      // If `revalidateOnMount` is set, we take the value directly.\n      if (!isUndefined(revalidateOnMount)) return revalidateOnMount\n      // If it's paused, we skip revalidation.\n      if (getConfig().isPaused()) return false\n      if (suspense) return false\n      if (!isUndefined(revalidateIfStale)) return revalidateIfStale\n      return true\n    })()\n\n    // Get the cache and merge it with expected states.\n    const getSelectedCache = (state: ReturnType<typeof getCache>) => {\n      // We only select the needed fields from the state.\n      const snapshot = mergeObjects(state)\n      delete snapshot._k\n\n      if (!shouldStartRequest) {\n        return snapshot\n      }\n\n      return {\n        isValidating: true,\n        isLoading: true,\n        ...snapshot\n      }\n    }\n    const cachedData = getCache()\n    const initialData = getInitialCache()\n    const clientSnapshot = getSelectedCache(cachedData)\n    const serverSnapshot =\n      cachedData === initialData\n        ? clientSnapshot\n        : getSelectedCache(initialData)\n    // To make sure that we are returning the same object reference to avoid\n    // unnecessary re-renders, we keep the previous snapshot and use deep\n    // comparison to check if we need to return a new one.\n    let memorizedSnapshot = clientSnapshot\n\n    return [\n      () => {\n        const newSnapshot = getSelectedCache(getCache())\n        const compareResult = isEqual(newSnapshot, memorizedSnapshot)\n\n        if (compareResult) {\n          // Mentally, we should always return the `memorizedSnapshot` here\n          // as there's no change between the new and old snapshots.\n          // However, since the `isEqual` function only compares selected fields,\n          // the values of the unselected fields might be changed. That's\n          // simply because we didn't track them.\n          // To support the case in https://github.com/vercel/swr/pull/2576,\n          // we need to update these fields in the `memorizedSnapshot` too\n          // with direct mutations to ensure the snapshot is always up-to-date\n          // even for the unselected fields, but only trigger re-renders when\n          // the selected fields are changed.\n          memorizedSnapshot.data = newSnapshot.data\n          memorizedSnapshot.isLoading = newSnapshot.isLoading\n          memorizedSnapshot.isValidating = newSnapshot.isValidating\n          memorizedSnapshot.error = newSnapshot.error\n          return memorizedSnapshot\n        } else {\n          memorizedSnapshot = newSnapshot\n          return newSnapshot\n        }\n      },\n      () => serverSnapshot\n    ]\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cache, key])\n\n  // Get the current state that SWR should return.\n  const cached = useSyncExternalStore(\n    useCallback(\n      (callback: () => void) =>\n        subscribeCache(\n          key,\n          (current: State<Data, any>, prev: State<Data, any>) => {\n            if (!isEqual(prev, current)) callback()\n          }\n        ),\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [cache, key]\n    ),\n    getSnapshot[0],\n    getSnapshot[1]\n  )\n\n  const isInitialMount = !initialMountedRef.current\n\n  const hasRevalidator =\n    EVENT_REVALIDATORS[key] && EVENT_REVALIDATORS[key].length > 0\n\n  const cachedData = cached.data\n\n  const data = isUndefined(cachedData) ? fallback : cachedData\n  const error = cached.error\n\n  // Use a ref to store previously returned data. Use the initial data as its initial value.\n  const laggyDataRef = useRef(data)\n\n  const returnedData = keepPreviousData\n    ? isUndefined(cachedData)\n      ? laggyDataRef.current\n      : cachedData\n    : data\n\n  // - Suspense mode and there's stale data for the initial render.\n  // - Not suspense mode and there is no fallback data and `revalidateIfStale` is enabled.\n  // - `revalidateIfStale` is enabled but `data` is not defined.\n  const shouldDoInitialRevalidation = (() => {\n    // if a key already has revalidators and also has error, we should not trigger revalidation\n    if (hasRevalidator && !isUndefined(error)) return false\n\n    // If `revalidateOnMount` is set, we take the value directly.\n    if (isInitialMount && !isUndefined(revalidateOnMount))\n      return revalidateOnMount\n\n    // If it's paused, we skip revalidation.\n    if (getConfig().isPaused()) return false\n\n    // Under suspense mode, it will always fetch on render if there is no\n    // stale data so no need to revalidate immediately mount it again.\n    // If data exists, only revalidate if `revalidateIfStale` is true.\n    if (suspense) return isUndefined(data) ? false : revalidateIfStale\n\n    // If there is no stale data, we need to revalidate when mount;\n    // If `revalidateIfStale` is set to true, we will always revalidate.\n    return isUndefined(data) || revalidateIfStale\n  })()\n\n  // Resolve the default validating state:\n  // If it's able to validate, and it should revalidate when mount, this will be true.\n  const defaultValidatingState = !!(\n    key &&\n    fetcher &&\n    isInitialMount &&\n    shouldDoInitialRevalidation\n  )\n  const isValidating = isUndefined(cached.isValidating)\n    ? defaultValidatingState\n    : cached.isValidating\n  const isLoading = isUndefined(cached.isLoading)\n    ? defaultValidatingState\n    : cached.isLoading\n\n  // The revalidation function is a carefully crafted wrapper of the original\n  // `fetcher`, to correctly handle the many edge cases.\n  const revalidate = useCallback(\n    async (revalidateOpts?: RevalidatorOptions): Promise<boolean> => {\n      const currentFetcher = fetcherRef.current\n\n      if (\n        !key ||\n        !currentFetcher ||\n        unmountedRef.current ||\n        getConfig().isPaused()\n      ) {\n        return false\n      }\n\n      let newData: Data\n      let startAt: number\n      let loading = true\n      const opts = revalidateOpts || {}\n\n      // If there is no ongoing concurrent request, or `dedupe` is not set, a\n      // new request should be initiated.\n      const shouldStartNewRequest = !FETCH[key] || !opts.dedupe\n\n      /*\n         For React 17\n         Do unmount check for calls:\n         If key has changed during the revalidation, or the component has been\n         unmounted, old dispatch and old event callbacks should not take any\n         effect\n\n        For React 18\n        only check if key has changed\n        https://github.com/reactwg/react-18/discussions/82\n      */\n      const callbackSafeguard = () => {\n        if (IS_REACT_LEGACY) {\n          return (\n            !unmountedRef.current &&\n            key === keyRef.current &&\n            initialMountedRef.current\n          )\n        }\n        return key === keyRef.current\n      }\n\n      // The final state object when the request finishes.\n      const finalState: State<Data, Error> = {\n        isValidating: false,\n        isLoading: false\n      }\n      const finishRequestAndUpdateState = () => {\n        setCache(finalState)\n      }\n      const cleanupState = () => {\n        // Check if it's still the same request before deleting it.\n        const requestInfo = FETCH[key]\n        if (requestInfo && requestInfo[1] === startAt) {\n          delete FETCH[key]\n        }\n      }\n\n      // Start fetching. Change the `isValidating` state, update the cache.\n      const initialState: State<Data, Error> = { isValidating: true }\n      // It is in the `isLoading` state, if and only if there is no cached data.\n      // This bypasses fallback data and laggy data.\n      if (isUndefined(getCache().data)) {\n        initialState.isLoading = true\n      }\n      try {\n        if (shouldStartNewRequest) {\n          setCache(initialState)\n          // If no cache is being rendered currently (it shows a blank page),\n          // we trigger the loading slow event.\n          if (config.loadingTimeout && isUndefined(getCache().data)) {\n            setTimeout(() => {\n              if (loading && callbackSafeguard()) {\n                getConfig().onLoadingSlow(key, config)\n              }\n            }, config.loadingTimeout)\n          }\n\n          // Start the request and save the timestamp.\n          // Key must be truthy if entering here.\n          FETCH[key] = [\n            currentFetcher(fnArg as DefinitelyTruthy<Key>),\n            getTimestamp()\n          ]\n        }\n\n        // Wait until the ongoing request is done. Deduplication is also\n        // considered here.\n        ;[newData, startAt] = FETCH[key]\n        newData = await newData\n\n        if (shouldStartNewRequest) {\n          // If the request isn't interrupted, clean it up after the\n          // deduplication interval.\n          setTimeout(cleanupState, config.dedupingInterval)\n        }\n\n        // If there're other ongoing request(s), started after the current one,\n        // we need to ignore the current one to avoid possible race conditions:\n        //   req1------------------>res1        (current one)\n        //        req2---------------->res2\n        // the request that fired later will always be kept.\n        // The timestamp maybe be `undefined` or a number\n        if (!FETCH[key] || FETCH[key][1] !== startAt) {\n          if (shouldStartNewRequest) {\n            if (callbackSafeguard()) {\n              getConfig().onDiscarded(key)\n            }\n          }\n          return false\n        }\n\n        // Clear error.\n        finalState.error = UNDEFINED\n\n        // If there're other mutations(s), that overlapped with the current revalidation:\n        // case 1:\n        //   req------------------>res\n        //       mutate------>end\n        // case 2:\n        //         req------------>res\n        //   mutate------>end\n        // case 3:\n        //   req------------------>res\n        //       mutate-------...---------->\n        // we have to ignore the revalidation result (res) because it's no longer fresh.\n        // meanwhile, a new revalidation should be triggered when the mutation ends.\n        const mutationInfo = MUTATION[key]\n        if (\n          !isUndefined(mutationInfo) &&\n          // case 1\n          (startAt <= mutationInfo[0] ||\n            // case 2\n            startAt <= mutationInfo[1] ||\n            // case 3\n            mutationInfo[1] === 0)\n        ) {\n          finishRequestAndUpdateState()\n          if (shouldStartNewRequest) {\n            if (callbackSafeguard()) {\n              getConfig().onDiscarded(key)\n            }\n          }\n          return false\n        }\n        // Deep compare with the latest state to avoid extra re-renders.\n        // For local state, compare and assign.\n        const cacheData = getCache().data\n\n        // Since the compare fn could be custom fn\n        // cacheData might be different from newData even when compare fn returns True\n        finalState.data = compare(cacheData, newData) ? cacheData : newData\n\n        // Trigger the successful callback if it's the original request.\n        if (shouldStartNewRequest) {\n          if (callbackSafeguard()) {\n            getConfig().onSuccess(newData, key, config)\n          }\n        }\n      } catch (err: any) {\n        cleanupState()\n\n        const currentConfig = getConfig()\n        const { shouldRetryOnError } = currentConfig\n\n        // Not paused, we continue handling the error. Otherwise, discard it.\n        if (!currentConfig.isPaused()) {\n          // Get a new error, don't use deep comparison for errors.\n          finalState.error = err as Error\n\n          // Error event and retry logic. Only for the actual request, not\n          // deduped ones.\n          if (shouldStartNewRequest && callbackSafeguard()) {\n            currentConfig.onError(err, key, currentConfig)\n            if (\n              shouldRetryOnError === true ||\n              (isFunction(shouldRetryOnError) &&\n                shouldRetryOnError(err as Error))\n            ) {\n              if (!getConfig().revalidateOnFocus || !getConfig().revalidateOnReconnect || isActive()) {\n                // If it's inactive, stop. It will auto-revalidate when\n                // refocusing or reconnecting.\n                // When retrying, deduplication is always enabled.\n                currentConfig.onErrorRetry(\n                  err,\n                  key,\n                  currentConfig,\n                  _opts => {\n                    const revalidators = EVENT_REVALIDATORS[key]\n                    if (revalidators && revalidators[0]) {\n                      revalidators[0](\n                        revalidateEvents.ERROR_REVALIDATE_EVENT,\n                        _opts\n                      )\n                    }\n                  },\n                  {\n                    retryCount: (opts.retryCount || 0) + 1,\n                    dedupe: true\n                  }\n                )\n              }\n            }\n          }\n        }\n      }\n\n      // Mark loading as stopped.\n      loading = false\n\n      // Update the current hook's state.\n      finishRequestAndUpdateState()\n\n      return true\n    },\n    // `setState` is immutable, and `eventsCallback`, `fnArg`, and\n    // `keyValidating` are depending on `key`, so we can exclude them from\n    // the deps array.\n    //\n    // FIXME:\n    // `fn` and `config` might be changed during the lifecycle,\n    // but they might be changed every render like this.\n    // `useSWR('key', () => fetch('/api/'), { suspense: true })`\n    // So we omit the values from the deps array\n    // even though it might cause unexpected behaviors.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [key, cache]\n  )\n\n  // Similar to the global mutate but bound to the current cache and key.\n  // `cache` isn't allowed to change during the lifecycle.\n  const boundMutate: SWRResponse<Data, Error>['mutate'] = useCallback(\n    // Use callback to make sure `keyRef.current` returns latest result every time\n    (...args: any[]) => {\n      return internalMutate(cache, keyRef.current, ...args)\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n\n  // The logic for updating refs.\n  useIsomorphicLayoutEffect(() => {\n    fetcherRef.current = fetcher\n    configRef.current = config\n    // Handle laggy data updates. If there's cached data of the current key,\n    // it'll be the correct reference.\n    if (!isUndefined(cachedData)) {\n      laggyDataRef.current = cachedData\n    }\n  })\n\n  // After mounted or key changed.\n  useIsomorphicLayoutEffect(() => {\n    if (!key) return\n\n    const softRevalidate = revalidate.bind(UNDEFINED, WITH_DEDUPE)\n\n    // Expose revalidators to global event listeners. So we can trigger\n    // revalidation from the outside.\n    let nextFocusRevalidatedAt = 0\n    const onRevalidate = (\n      type: RevalidateEvent,\n      opts: {\n        retryCount?: number\n        dedupe?: boolean\n      } = {}\n    ) => {\n      if (type == revalidateEvents.FOCUS_EVENT) {\n        const now = Date.now()\n        if (\n          getConfig().revalidateOnFocus &&\n          now > nextFocusRevalidatedAt &&\n          isActive()\n        ) {\n          nextFocusRevalidatedAt = now + getConfig().focusThrottleInterval\n          softRevalidate()\n        }\n      } else if (type == revalidateEvents.RECONNECT_EVENT) {\n        if (getConfig().revalidateOnReconnect && isActive()) {\n          softRevalidate()\n        }\n      } else if (type == revalidateEvents.MUTATE_EVENT) {\n        return revalidate()\n      } else if (type == revalidateEvents.ERROR_REVALIDATE_EVENT) {\n        return revalidate(opts)\n      }\n      return\n    }\n\n    const unsubEvents = subscribeCallback(key, EVENT_REVALIDATORS, onRevalidate)\n\n    // Mark the component as mounted and update corresponding refs.\n    unmountedRef.current = false\n    keyRef.current = key\n    initialMountedRef.current = true\n\n    // Keep the original key in the cache.\n    setCache({ _k: fnArg })\n\n    // Trigger a revalidation\n    if (shouldDoInitialRevalidation) {\n      if (isUndefined(data) || IS_SERVER) {\n        // Revalidate immediately.\n        softRevalidate()\n      } else {\n        // Delay the revalidate if we have data to return so we won't block\n        // rendering.\n        rAF(softRevalidate)\n      }\n    }\n\n    return () => {\n      // Mark it as unmounted.\n      unmountedRef.current = true\n\n      unsubEvents()\n    }\n  }, [key])\n\n  // Polling\n  useIsomorphicLayoutEffect(() => {\n    let timer: any\n\n    function next() {\n      // Use the passed interval\n      // ...or invoke the function with the updated data to get the interval\n      const interval = isFunction(refreshInterval)\n        ? refreshInterval(getCache().data)\n        : refreshInterval\n\n      // We only start the next interval if `refreshInterval` is not 0, and:\n      // - `force` is true, which is the start of polling\n      // - or `timer` is not 0, which means the effect wasn't canceled\n      if (interval && timer !== -1) {\n        timer = setTimeout(execute, interval)\n      }\n    }\n\n    function execute() {\n      // Check if it's OK to execute:\n      // Only revalidate when the page is visible, online, and not errored.\n      if (\n        !getCache().error &&\n        (refreshWhenHidden || getConfig().isVisible()) &&\n        (refreshWhenOffline || getConfig().isOnline())\n      ) {\n        revalidate(WITH_DEDUPE).then(next)\n      } else {\n        // Schedule the next interval to check again.\n        next()\n      }\n    }\n\n    next()\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer)\n        timer = -1\n      }\n    }\n  }, [refreshInterval, refreshWhenHidden, refreshWhenOffline, key])\n\n  // Display debug info in React DevTools.\n  useDebugValue(returnedData)\n\n  // In Suspense mode, we can't return the empty `data` state.\n  // If there is an `error`, the `error` needs to be thrown to the error boundary.\n  // If there is no `error`, the `revalidation` promise needs to be thrown to\n  // the suspense boundary.\n  if (suspense && isUndefined(data) && key) {\n    // SWR should throw when trying to use Suspense on the server with React 18,\n    // without providing any initial data. See:\n    // https://github.com/vercel/swr/issues/1832\n    if (!IS_REACT_LEGACY && IS_SERVER) {\n      throw new Error('Fallback data is required when using suspense in SSR.')\n    }\n\n    // Always update fetcher and config refs even with the Suspense mode.\n    fetcherRef.current = fetcher\n    configRef.current = config\n    unmountedRef.current = false\n    const req = PRELOAD[key]\n    if (!isUndefined(req)) {\n      const promise = boundMutate(req)\n      use(promise)\n    }\n\n    if (isUndefined(error)) {\n      const promise: ReactUsePromise<boolean> = revalidate(WITH_DEDUPE)\n      if (!isUndefined(returnedData)) {\n        promise.status = 'fulfilled'\n        promise.value = true\n      }\n      use(promise as Promise<boolean>)\n    } else {\n      throw error\n    }\n  }\n\n  return {\n    mutate: boundMutate,\n    get data() {\n      stateDependencies.data = true\n      return returnedData\n    },\n    get error() {\n      stateDependencies.error = true\n      return error\n    },\n    get isValidating() {\n      stateDependencies.isValidating = true\n      return isValidating\n    },\n    get isLoading() {\n      stateDependencies.isLoading = true\n      return isLoading\n    }\n  } as SWRResponse<Data, Error>\n}\n\nexport const SWRConfig = OBJECT.defineProperty(ConfigProvider, 'defaultValue', {\n  value: defaultConfig\n}) as typeof ConfigProvider & {\n  defaultValue: FullConfiguration\n}\n\nexport { unstable_serialize } from './serialize'\n\n/**\n * A hook to fetch data.\n *\n * @link https://swr.vercel.app\n * @example\n * ```jsx\n * import useSWR from 'swr'\n * function Profile() {\n *   const { data, error, isLoading } = useSWR('/api/user', fetcher)\n *   if (error) return <div>failed to load</div>\n *   if (isLoading) return <div>loading...</div>\n *   return <div>hello {data.name}!</div>\n * }\n * ```\n */\nconst useSWR = withArgs<SWRHook>(useSWRHandler)\n\nexport default useSWR\n","import type { MutableRefObject, TransitionFunction } from 'react'\nimport React, { useRef, useCallback, useState } from 'react'\nimport { useIsomorphicLayoutEffect, IS_REACT_LEGACY } from '../_internal'\n\nexport const startTransition: (scope: TransitionFunction) => void =\n  IS_REACT_LEGACY\n    ? cb => {\n        cb()\n      }\n    : React.startTransition\n\n/**\n * An implementation of state with dependency-tracking.\n */\nexport const useStateWithDeps = <S = any>(\n  state: any\n): [\n  MutableRefObject<any>,\n  Record<keyof S, boolean>,\n  (payload: Partial<S>) => void\n] => {\n  const [, rerender] = useState<Record<string, unknown>>({})\n  const unmountedRef = useRef(false)\n  const stateRef = useRef(state)\n\n  // If a state property (data, error, or isValidating) is accessed by the render\n  // function, we mark the property as a dependency so if it is updated again\n  // in the future, we trigger a rerender.\n  // This is also known as dependency-tracking.\n  const stateDependenciesRef = useRef<Record<keyof S, boolean>>({\n    data: false,\n    error: false,\n    isValidating: false\n  } as any)\n\n  /**\n   * @param payload To change stateRef, pass the values explicitly to setState:\n   * @example\n   * ```js\n   * setState({\n   *   isValidating: false\n   *   data: newData // set data to newData\n   *   error: undefined // set error to undefined\n   * })\n   *\n   * setState({\n   *   isValidating: false\n   *   data: undefined // set data to undefined\n   *   error: err // set error to err\n   * })\n   * ```\n   */\n  const setState = useCallback((payload: Partial<S>) => {\n    let shouldRerender = false\n\n    const currentState = stateRef.current\n    for (const _ in payload) {\n      const k = _ as keyof S\n\n      // If the property has changed, update the state and mark rerender as\n      // needed.\n      if (currentState[k] !== payload[k]) {\n        currentState[k] = payload[k]\n\n        // If the property is accessed by the component, a rerender should be\n        // triggered.\n        if (stateDependenciesRef.current[k]) {\n          shouldRerender = true\n        }\n      }\n    }\n\n    if (shouldRerender && !unmountedRef.current) {\n      rerender({})\n    }\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    unmountedRef.current = false\n    return () => {\n      unmountedRef.current = true\n    }\n  })\n\n  return [stateRef, stateDependenciesRef.current, setState]\n}\n","import { useCallback, useRef } from 'react'\nimport useSWR, { useSWRConfig } from '../core'\nimport type { Middleware, Key } from '../_internal'\nimport { useStateWithDeps, startTransition } from './state'\nimport {\n  serialize,\n  withMiddleware,\n  useIsomorphicLayoutEffect,\n  UNDEFINED,\n  getTimestamp,\n  mergeObjects\n} from '../_internal'\nimport type {\n  SWRMutationConfiguration,\n  SWRMutationResponse,\n  SWRMutationHook,\n  MutationFetcher,\n  TriggerWithArgs,\n  TriggerWithoutArgs,\n  TriggerWithOptionsArgs\n} from './types'\n\nconst mutation = (<Data, Error>() =>\n  (\n    key: Key,\n    fetcher: MutationFetcher<Data>,\n    config: SWRMutationConfiguration<Data, Error> = {}\n  ) => {\n    const { mutate } = useSWRConfig()\n    const keyRef = useRef(key)\n    const fetcherRef = useRef(fetcher)\n    const configRef = useRef(config)\n    // Ditch all mutation results that happened earlier than this timestamp.\n    const ditchMutationsUntilRef = useRef(0)\n\n    const [stateRef, stateDependencies, setState] = useStateWithDeps({\n      data: UNDEFINED,\n      error: UNDEFINED,\n      isMutating: false\n    })\n    const currentState = stateRef.current\n\n    const trigger = useCallback(\n      async (arg: any, opts?: SWRMutationConfiguration<Data, Error>) => {\n        const [serializedKey, resolvedKey] = serialize(keyRef.current)\n\n        if (!fetcherRef.current) {\n          throw new Error('Can’t trigger the mutation: missing fetcher.')\n        }\n        if (!serializedKey) {\n          throw new Error('Can’t trigger the mutation: missing key.')\n        }\n\n        // Disable cache population by default.\n        const options = mergeObjects(\n          mergeObjects(\n            { populateCache: false, throwOnError: true },\n            configRef.current\n          ),\n          opts\n        )\n\n        // Trigger a mutation, and also track the timestamp. Any mutation that happened\n        // earlier this timestamp should be ignored.\n        const mutationStartedAt = getTimestamp()\n\n        ditchMutationsUntilRef.current = mutationStartedAt\n\n        setState({ isMutating: true })\n\n        try {\n          const data = await mutate<Data>(\n            serializedKey,\n            (fetcherRef.current as any)(resolvedKey, { arg }),\n            // We must throw the error here so we can catch and update the states.\n            mergeObjects(options, { throwOnError: true })\n          )\n\n          // If it's reset after the mutation, we don't broadcast any state change.\n          if (ditchMutationsUntilRef.current <= mutationStartedAt) {\n            startTransition(() =>\n              setState({ data, isMutating: false, error: undefined })\n            )\n            options.onSuccess?.(data as Data, serializedKey, options)\n          }\n          return data\n        } catch (error) {\n          // If it's reset after the mutation, we don't broadcast any state change\n          // or throw because it's discarded.\n          if (ditchMutationsUntilRef.current <= mutationStartedAt) {\n            startTransition(() =>\n              setState({ error: error as Error, isMutating: false })\n            )\n            options.onError?.(error as Error, serializedKey, options)\n            if (options.throwOnError) {\n              throw error as Error\n            }\n          }\n        }\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      []\n    )\n\n    const reset = useCallback(() => {\n      ditchMutationsUntilRef.current = getTimestamp()\n      setState({ data: UNDEFINED, error: UNDEFINED, isMutating: false })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useIsomorphicLayoutEffect(() => {\n      keyRef.current = key\n      fetcherRef.current = fetcher\n      configRef.current = config\n    })\n\n    // We don't return `mutate` here as it can be pretty confusing (e.g. people\n    // calling `mutate` but they actually mean `trigger`).\n    // And also, `mutate` relies on the useSWR hook to exist too.\n    return {\n      trigger,\n      reset,\n      get data() {\n        stateDependencies.data = true\n        return currentState.data\n      },\n      get error() {\n        stateDependencies.error = true\n        return currentState.error\n      },\n      get isMutating() {\n        stateDependencies.isMutating = true\n        return currentState.isMutating\n      }\n    }\n  }) as unknown as Middleware\n\n/**\n * A hook to define and manually trigger remote mutations like POST, PUT, DELETE and PATCH use cases.\n *\n * @link https://swr.vercel.app/docs/mutation\n * @example\n * ```jsx\n * import useSWRMutation from 'swr/mutation'\n *\n * const {\n *   data,\n *   error,\n *   trigger,\n *   reset,\n *   isMutating\n * } = useSWRMutation(key, fetcher, options?)\n * ```\n */\nconst useSWRMutation = withMiddleware(\n  useSWR,\n  mutation\n) as unknown as SWRMutationHook\n\nexport default useSWRMutation\n\nexport {\n  SWRMutationConfiguration,\n  SWRMutationResponse,\n  SWRMutationHook,\n  MutationFetcher,\n  TriggerWithArgs,\n  TriggerWithoutArgs,\n  TriggerWithOptionsArgs\n}\n"],"names":["use","ReactExports","promise","status","value","reason","then","v","e","WITH_DEDUPE","dedupe","useSWRHandler","_key","fetcher","config","cache","compare","suspense","fallbackData","revalidateOnMount","revalidateIfStale","refreshInterval","refreshWhenHidden","refreshWhenOffline","keepPreviousData","EVENT_REVALIDATORS","MUTATION","FETCH","PRELOAD","SWRGlobalState","get","key","fnArg","serialize","initialMountedRef","useRef","unmountedRef","keyRef","fetcherRef","configRef","getConfig","current","isActive","isVisible","isOnline","getCache","setCache","subscribeCache","getInitialCache","createCacheHelper","stateDependencies","fallback","isUndefined","isEqual","prev","_","t","returnedData","getSnapshot","useMemo","shouldStartRequest","isPaused","getSelectedCache","state","snapshot","mergeObjects","_k","isValidating","isLoading","cachedData","initialData","clientSnapshot","serverSnapshot","memorizedSnapshot","newSnapshot","compareResult","data","error","cached","useSyncExternalStore","useCallback","callback","isInitialMount","hasRevalidator","length","laggyDataRef","shouldDoInitialRevalidation","defaultValidatingState","revalidate","revalidateOpts","currentFetcher","newData","startAt","loading","opts","shouldStartNewRequest","callbackSafeguard","IS_REACT_LEGACY","finalState","finishRequestAndUpdateState","cleanupState","requestInfo","initialState","loadingTimeout","setTimeout","onLoadingSlow","getTimestamp","dedupingInterval","onDiscarded","UNDEFINED","mutationInfo","cacheData","onSuccess","err","currentConfig","shouldRetryOnError","onError","isFunction","revalidateOnFocus","revalidateOnReconnect","onErrorRetry","_opts","revalidators","revalidateEvents","ERROR_REVALIDATE_EVENT","retryCount","boundMutate","args","internalMutate","useIsomorphicLayoutEffect","softRevalidate","bind","nextFocusRevalidatedAt","onRevalidate","type","FOCUS_EVENT","now","Date","focusThrottleInterval","RECONNECT_EVENT","MUTATE_EVENT","unsubEvents","subscribeCallback","IS_SERVER","rAF","timer","next","interval","execute","clearTimeout","useDebugValue","Error","req","mutate","OBJECT","defineProperty","ConfigProvider","defaultConfig","useSWR","withArgs","startTransition","cb","React","useStateWithDeps","rerender","useState","stateRef","stateDependenciesRef","setState","payload","shouldRerender","currentState","k","mutation","useSWRConfig","ditchMutationsUntilRef","isMutating","trigger","arg","serializedKey","resolvedKey","options","populateCache","throwOnError","mutationStartedAt","undefined","reset","useSWRMutation","withMiddleware"],"mappings":"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"}