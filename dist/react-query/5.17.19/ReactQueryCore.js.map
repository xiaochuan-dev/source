{"version":3,"file":"ReactQueryCore.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;UCVA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJO,MAAM,YAAY;IAGvB;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE;QAC1B,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;IAC5C,CAAC;IAED,SAAS,CAAC,QAAmB;QAC3B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC;QAE5B,IAAI,CAAC,WAAW,EAAE;QAElB,OAAO,GAAG,EAAE;YACV,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC/B,IAAI,CAAC,aAAa,EAAE;QACtB,CAAC;IACH,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC;IAChC,CAAC;IAES,WAAW;QACnB,aAAa;IACf,CAAC;IAES,aAAa;QACrB,aAAa;IACf,CAAC;CACF;;;AC8BD,QAAQ;AAED,MAAM,QAAQ,GAAG,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,IAAI,MAAM;AAElE,SAAS,IAAI;IAClB,OAAO,SAAS;AAClB,CAAC;AAEM,SAAS,gBAAgB,CAC9B,OAAiC,EACjC,KAAa;IAEb,OAAO,OAAO,OAAO,KAAK,UAAU;QAClC,CAAC,CAAE,OAAkC,CAAC,KAAK,CAAC;QAC5C,CAAC,CAAC,OAAO;AACb,CAAC;AAEM,SAAS,cAAc,CAAC,KAAc;IAC3C,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,KAAK,QAAQ;AACtE,CAAC;AAEM,SAAS,cAAc,CAAC,SAAiB,EAAE,SAAkB;IAClE,OAAO,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,CAAC,SAAS,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AAC/D,CAAC;AAEM,SAAS,UAAU,CACxB,OAAqB,EACrB,KAAgC;IAEhC,MAAM,EACJ,IAAI,GAAG,KAAK,EACZ,KAAK,EACL,WAAW,EACX,SAAS,EACT,QAAQ,EACR,KAAK,GACN,GAAG,OAAO;IAEX,IAAI,QAAQ,EAAE;QACZ,IAAI,KAAK,EAAE;YACT,IAAI,KAAK,CAAC,SAAS,KAAK,qBAAqB,CAAC,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,EAAE;gBACtE,OAAO,KAAK;aACb;SACF;aAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE;YACrD,OAAO,KAAK;SACb;KACF;IAED,IAAI,IAAI,KAAK,KAAK,EAAE;QAClB,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,EAAE;QACjC,IAAI,IAAI,KAAK,QAAQ,IAAI,CAAC,QAAQ,EAAE;YAClC,OAAO,KAAK;SACb;QACD,IAAI,IAAI,KAAK,UAAU,IAAI,QAAQ,EAAE;YACnC,OAAO,KAAK;SACb;KACF;IAED,IAAI,OAAO,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,OAAO,EAAE,KAAK,KAAK,EAAE;QAC3D,OAAO,KAAK;KACb;IAED,IACE,OAAO,WAAW,KAAK,WAAW;QAClC,WAAW,KAAK,KAAK,CAAC,KAAK,CAAC,WAAW,EACvC;QACA,OAAO,KAAK;KACb;IAED,IAAI,SAAS,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;QAClC,OAAO,KAAK;KACb;IAED,OAAO,IAAI;AACb,CAAC;AAEM,SAAS,aAAa,CAC3B,OAAwB,EACxB,QAA4B;IAE5B,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,OAAO;IACzD,IAAI,WAAW,EAAE;QACf,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE;YACjC,OAAO,KAAK;SACb;QACD,IAAI,KAAK,EAAE;YACT,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,OAAO,CAAC,WAAW,CAAC,EAAE;gBAClE,OAAO,KAAK;aACb;SACF;aAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,WAAW,CAAC,EAAE;YACtE,OAAO,KAAK;SACb;KACF;IAED,IAAI,MAAM,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE;QAC9C,OAAO,KAAK;KACb;IAED,IAAI,SAAS,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE;QACrC,OAAO,KAAK;KACb;IAED,OAAO,IAAI;AACb,CAAC;AAEM,SAAS,qBAAqB,CACnC,QAAmB,EACnB,OAAgD;IAEhD,MAAM,MAAM,GAAG,OAAO,EAAE,cAAc,IAAI,OAAO;IACjD,OAAO,MAAM,CAAC,QAAQ,CAAC;AACzB,CAAC;AAED;;;GAGG;AACI,SAAS,OAAO,CAAC,QAAgC;IACtD,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,CACzC,aAAa,CAAC,GAAG,CAAC;QAChB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;aACb,IAAI,EAAE;aACN,MAAM,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YACtB,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;YACtB,OAAO,MAAM;QACf,CAAC,EAAE,EAAS,CAAC;QACjB,CAAC,CAAC,GAAG,CACR;AACH,CAAC;AAMM,SAAS,eAAe,CAAC,CAAM,EAAE,CAAM;IAC5C,IAAI,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,IAAI;KACZ;IAED,IAAI,OAAO,CAAC,KAAK,OAAO,CAAC,EAAE;QACzB,OAAO,KAAK;KACb;IAED,IAAI,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,QAAQ,EAAE;QAC5D,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;KACvE;IAED,OAAO,KAAK;AACd,CAAC;AAQM,SAAS,gBAAgB,CAAC,CAAM,EAAE,CAAM;IAC7C,IAAI,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,CAAC;KACT;IAED,MAAM,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC;IAEhD,IAAI,KAAK,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE;QACnD,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACzC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM;QAC3B,MAAM,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACzC,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM;QAC3B,MAAM,IAAI,GAAQ,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;QAEjC,IAAI,UAAU,GAAG,CAAC;QAElB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;YAC9B,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACjC,IACE,CAAC,KAAK;gBACN,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS;gBACpB,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS;gBACpB,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EACpB;gBACA,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS;gBACrB,UAAU,EAAE;aACb;iBAAM;gBACL,IAAI,CAAC,GAAG,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC5C,IAAI,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;oBAChD,UAAU,EAAE;iBACb;aACF;SACF;QAED,OAAO,KAAK,KAAK,KAAK,IAAI,UAAU,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;KAC1D;IAED,OAAO,CAAC;AACV,CAAC;AAED;;GAEG;AACI,SAAS,mBAAmB,CAAI,CAAI,EAAE,CAAI;IAC/C,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;QAC1B,OAAO,KAAK;KACb;IAED,KAAK,MAAM,GAAG,IAAI,CAAC,EAAE;QACnB,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE;YACrB,OAAO,KAAK;SACb;KACF;IAED,OAAO,IAAI;AACb,CAAC;AAEM,SAAS,YAAY,CAAC,KAAc;IACzC,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM;AAC3E,CAAC;AAED,gEAAgE;AACzD,SAAS,aAAa,CAAC,CAAM;IAClC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE;QAC1B,OAAO,KAAK;KACb;IAED,wBAAwB;IACxB,MAAM,IAAI,GAAG,CAAC,CAAC,WAAW;IAC1B,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;QAC/B,OAAO,IAAI;KACZ;IAED,4BAA4B;IAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS;IAC3B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE;QAC7B,OAAO,KAAK;KACb;IAED,yDAAyD;IACzD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,EAAE;QACzC,OAAO,KAAK;KACb;IAED,6BAA6B;IAC7B,OAAO,IAAI;AACb,CAAC;AAED,SAAS,kBAAkB,CAAC,CAAM;IAChC,OAAO,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,iBAAiB;AAChE,CAAC;AAEM,SAAS,KAAK,CAAC,EAAU;IAC9B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAC7B,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC;IACzB,CAAC,CAAC;AACJ,CAAC;AAEM,SAAS,WAAW,CAGzB,QAA2B,EAAE,IAAW,EAAE,OAAiB;IAC3D,IAAI,OAAO,OAAO,CAAC,iBAAiB,KAAK,UAAU,EAAE;QACnD,OAAO,OAAO,CAAC,iBAAiB,CAAC,QAAQ,EAAE,IAAI,CAAC;KACjD;SAAM,IAAI,OAAO,CAAC,iBAAiB,KAAK,KAAK,EAAE;QAC9C,8DAA8D;QAC9D,OAAO,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC;KACxC;IACD,OAAO,IAAI;AACb,CAAC;AAEM,SAAS,gBAAgB,CAC9B,YAA2B;IAE3B,OAAO,YAAY;AACrB,CAAC;AAEM,SAAS,QAAQ,CAAI,KAAe,EAAE,IAAO,EAAE,GAAG,GAAG,CAAC;IAC3D,MAAM,QAAQ,GAAG,CAAC,GAAG,KAAK,EAAE,IAAI,CAAC;IACjC,OAAO,GAAG,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ;AACpE,CAAC;AAEM,SAAS,UAAU,CAAI,KAAe,EAAE,IAAO,EAAE,GAAG,GAAG,CAAC;IAC7D,MAAM,QAAQ,GAAG,CAAC,IAAI,EAAE,GAAG,KAAK,CAAC;IACjC,OAAO,GAAG,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ;AACxE,CAAC;;;;;;;;;;;;;;;ACvV4C;AACX;AAM3B,MAAM,YAAa,SAAQ,YAAY;IAM5C;QACE,KAAK,EAAE;QANT,wCAAkB;QAClB,wCAAqB;QAErB,sCAAe;QAIb,2BAAI,uBAAU,CAAC,OAAO,EAAE,EAAE;YACxB,mEAAmE;YACnE,uEAAuE;YACvE,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,gBAAgB,EAAE;gBACxC,MAAM,QAAQ,GAAG,GAAG,EAAE,CAAC,OAAO,EAAE;gBAChC,6BAA6B;gBAC7B,MAAM,CAAC,gBAAgB,CAAC,kBAAkB,EAAE,QAAQ,EAAE,KAAK,CAAC;gBAE5D,OAAO,GAAG,EAAE;oBACV,iDAAiD;oBACjD,MAAM,CAAC,mBAAmB,CAAC,kBAAkB,EAAE,QAAQ,CAAC;gBAC1D,CAAC;aACF;YACD,OAAM;QACR,CAAC;IACH,CAAC;IAES,WAAW;QACnB,IAAI,CAAC,2BAAI,6BAAS,EAAE;YAClB,IAAI,CAAC,gBAAgB,CAAC,2BAAI,2BAAO,CAAC;SACnC;IACH,CAAC;IAES,aAAa;QACrB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE;YACxB,2BAAI,6BAAS,EAAE,KAAf,IAAI,CAAa;YACjB,2BAAI,yBAAY,SAAS;SAC1B;IACH,CAAC;IAED,gBAAgB,CAAC,KAAc;QAC7B,2BAAI,uBAAU,KAAK;QACnB,2BAAI,6BAAS,EAAE,KAAf,IAAI,CAAa;QACjB,2BAAI,yBAAY,KAAK,CAAC,CAAC,OAAO,EAAE,EAAE;YAChC,IAAI,OAAO,OAAO,KAAK,SAAS,EAAE;gBAChC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;aACzB;iBAAM;gBACL,IAAI,CAAC,OAAO,EAAE;aACf;QACH,CAAC,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,OAAiB;QAC1B,MAAM,OAAO,GAAG,2BAAI,6BAAS,KAAK,OAAO;QACzC,IAAI,OAAO,EAAE;YACX,2BAAI,yBAAY,OAAO;YACvB,IAAI,CAAC,OAAO,EAAE;SACf;IACH,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAClC,QAAQ,EAAE;QACZ,CAAC,CAAC;IACJ,CAAC;IAED,SAAS;QACP,IAAI,OAAO,2BAAI,6BAAS,KAAK,SAAS,EAAE;YACtC,OAAO,2BAAI,6BAAS;SACrB;QAED,qDAAqD;QACrD,uEAAuE;QACvE,OAAO,UAAU,CAAC,QAAQ,EAAE,eAAe,KAAK,QAAQ;IAC1D,CAAC;CACF;;AAEM,MAAM,YAAY,GAAG,IAAI,YAAY,EAAE;;;;;;;;;;;;;;;AClFD;AACX;AAK3B,MAAM,aAAc,SAAQ,YAAsB;IAMvD;QACE,KAAK,EAAE;QANT,gCAAU,IAAI;QACd,yCAAqB;QAErB,uCAAe;QAIb,uCAAI,wBAAU,CAAC,QAAQ,EAAE,EAAE;YACzB,mEAAmE;YACnE,uEAAuE;YACvE,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,gBAAgB,EAAE;gBACxC,MAAM,cAAc,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;gBAC3C,MAAM,eAAe,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAC7C,mBAAmB;gBACnB,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,cAAc,EAAE,KAAK,CAAC;gBACxD,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,eAAe,EAAE,KAAK,CAAC;gBAE1D,OAAO,GAAG,EAAE;oBACV,iDAAiD;oBACjD,MAAM,CAAC,mBAAmB,CAAC,QAAQ,EAAE,cAAc,CAAC;oBACpD,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,eAAe,CAAC;gBACxD,CAAC;aACF;YAED,OAAM;QACR,CAAC;IACH,CAAC;IAES,WAAW;QACnB,IAAI,CAAC,uCAAI,8BAAS,EAAE;YAClB,IAAI,CAAC,gBAAgB,CAAC,uCAAI,4BAAO,CAAC;SACnC;IACH,CAAC;IAES,aAAa;QACrB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE;YACxB,uCAAI,8BAAS,EAAE,KAAf,IAAI,CAAa;YACjB,uCAAI,0BAAY,SAAS;SAC1B;IACH,CAAC;IAED,gBAAgB,CAAC,KAAc;QAC7B,uCAAI,wBAAU,KAAK;QACnB,uCAAI,8BAAS,EAAE,KAAf,IAAI,CAAa;QACjB,uCAAI,0BAAY,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAED,SAAS,CAAC,MAAe;QACvB,MAAM,OAAO,GAAG,uCAAI,6BAAQ,KAAK,MAAM;QAEvC,IAAI,OAAO,EAAE;YACX,uCAAI,yBAAW,MAAM;YACrB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAClC,QAAQ,CAAC,MAAM,CAAC;YAClB,CAAC,CAAC;SACH;IACH,CAAC;IAED,QAAQ;QACN,OAAO,uCAAI,6BAAQ;IACrB,CAAC;CACF;;AAEM,MAAM,aAAa,GAAG,IAAI,aAAa,EAAE;;;ACtEH;AACE;AACN;AAwCzC,SAAS,iBAAiB,CAAC,YAAoB;IAC7C,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,YAAY,EAAE,KAAK,CAAC;AAClD,CAAC;AAEM,SAAS,QAAQ,CAAC,WAAoC;IAC3D,OAAO,CAAC,WAAW,IAAI,QAAQ,CAAC,KAAK,QAAQ;QAC3C,CAAC,CAAC,aAAa,CAAC,QAAQ,EAAE;QAC1B,CAAC,CAAC,IAAI;AACV,CAAC;AAEM,MAAM,cAAc;IAGzB,YAAY,OAAuB;QACjC,IAAI,CAAC,MAAM,GAAG,OAAO,EAAE,MAAM;QAC7B,IAAI,CAAC,MAAM,GAAG,OAAO,EAAE,MAAM;IAC/B,CAAC;CACF;AAEM,SAAS,gBAAgB,CAAC,KAAU;IACzC,OAAO,KAAK,YAAY,cAAc;AACxC,CAAC;AAEM,SAAS,aAAa,CAC3B,MAAoC;IAEpC,IAAI,gBAAgB,GAAG,KAAK;IAC5B,IAAI,YAAY,GAAG,CAAC;IACpB,IAAI,UAAU,GAAG,KAAK;IACtB,IAAI,UAAsD;IAC1D,IAAI,cAAqC;IACzC,IAAI,aAAsC;IAE1C,MAAM,OAAO,GAAG,IAAI,OAAO,CAAQ,CAAC,YAAY,EAAE,WAAW,EAAE,EAAE;QAC/D,cAAc,GAAG,YAAY;QAC7B,aAAa,GAAG,WAAW;IAC7B,CAAC,CAAC;IAEF,MAAM,MAAM,GAAG,CAAC,aAA6B,EAAQ,EAAE;QACrD,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,CAAC,IAAI,cAAc,CAAC,aAAa,CAAC,CAAC;YAEzC,MAAM,CAAC,KAAK,EAAE,EAAE;SACjB;IACH,CAAC;IACD,MAAM,WAAW,GAAG,GAAG,EAAE;QACvB,gBAAgB,GAAG,IAAI;IACzB,CAAC;IAED,MAAM,aAAa,GAAG,GAAG,EAAE;QACzB,gBAAgB,GAAG,KAAK;IAC1B,CAAC;IAED,MAAM,WAAW,GAAG,GAAG,EAAE,CACvB,CAAC,YAAY,CAAC,SAAS,EAAE;QACzB,CAAC,MAAM,CAAC,WAAW,KAAK,QAAQ,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;IAEhE,MAAM,OAAO,GAAG,CAAC,KAAU,EAAE,EAAE;QAC7B,IAAI,CAAC,UAAU,EAAE;YACf,UAAU,GAAG,IAAI;YACjB,MAAM,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC;YACzB,UAAU,EAAE,EAAE;YACd,cAAc,CAAC,KAAK,CAAC;SACtB;IACH,CAAC;IAED,MAAM,MAAM,GAAG,CAAC,KAAU,EAAE,EAAE;QAC5B,IAAI,CAAC,UAAU,EAAE;YACf,UAAU,GAAG,IAAI;YACjB,MAAM,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC;YACvB,UAAU,EAAE,EAAE;YACd,aAAa,CAAC,KAAK,CAAC;SACrB;IACH,CAAC;IAED,MAAM,KAAK,GAAG,GAAG,EAAE;QACjB,OAAO,IAAI,OAAO,CAAC,CAAC,eAAe,EAAE,EAAE;YACrC,UAAU,GAAG,CAAC,KAAK,EAAE,EAAE;gBACrB,MAAM,WAAW,GAAG,UAAU,IAAI,CAAC,WAAW,EAAE;gBAChD,IAAI,WAAW,EAAE;oBACf,eAAe,CAAC,KAAK,CAAC;iBACvB;gBACD,OAAO,WAAW;YACpB,CAAC;YACD,MAAM,CAAC,OAAO,EAAE,EAAE;QACpB,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YACX,UAAU,GAAG,SAAS;YACtB,IAAI,CAAC,UAAU,EAAE;gBACf,MAAM,CAAC,UAAU,EAAE,EAAE;aACtB;QACH,CAAC,CAAC;IACJ,CAAC;IAED,uBAAuB;IACvB,MAAM,GAAG,GAAG,GAAG,EAAE;QACf,iCAAiC;QACjC,IAAI,UAAU,EAAE;YACd,OAAM;SACP;QAED,IAAI,cAAmB;QAEvB,gBAAgB;QAChB,IAAI;YACF,cAAc,GAAG,MAAM,CAAC,EAAE,EAAE;SAC7B;QAAC,OAAO,KAAK,EAAE;YACd,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;SACvC;QAED,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC;aAC5B,IAAI,CAAC,OAAO,CAAC;aACb,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,wCAAwC;YACxC,IAAI,UAAU,EAAE;gBACd,OAAM;aACP;YAED,mCAAmC;YACnC,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,iBAAiB;YACzD,MAAM,KAAK,GACT,OAAO,UAAU,KAAK,UAAU;gBAC9B,CAAC,CAAC,UAAU,CAAC,YAAY,EAAE,KAAK,CAAC;gBACjC,CAAC,CAAC,UAAU;YAChB,MAAM,WAAW,GACf,KAAK,KAAK,IAAI;gBACd,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,YAAY,GAAG,KAAK,CAAC;gBACnD,CAAC,OAAO,KAAK,KAAK,UAAU,IAAI,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YAE7D,IAAI,gBAAgB,IAAI,CAAC,WAAW,EAAE;gBACpC,uDAAuD;gBACvD,MAAM,CAAC,KAAK,CAAC;gBACb,OAAM;aACP;YAED,YAAY,EAAE;YAEd,iBAAiB;YACjB,MAAM,CAAC,MAAM,EAAE,CAAC,YAAY,EAAE,KAAK,CAAC;YAEpC,QAAQ;YACR,KAAK,CAAC,KAAK,CAAC;gBACV,qEAAqE;iBACpE,IAAI,CAAC,GAAG,EAAE;gBACT,IAAI,WAAW,EAAE,EAAE;oBACjB,OAAO,KAAK,EAAE;iBACf;gBACD,OAAM;YACR,CAAC,CAAC;iBACD,IAAI,CAAC,GAAG,EAAE;gBACT,IAAI,gBAAgB,EAAE;oBACpB,MAAM,CAAC,KAAK,CAAC;iBACd;qBAAM;oBACL,GAAG,EAAE;iBACN;YACH,CAAC,CAAC;QACN,CAAC,CAAC;IACN,CAAC;IAED,aAAa;IACb,IAAI,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;QAChC,GAAG,EAAE;KACN;SAAM;QACL,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC;KAClB;IAED,OAAO;QACL,OAAO;QACP,MAAM;QACN,QAAQ,EAAE,GAAG,EAAE;YACb,MAAM,WAAW,GAAG,UAAU,EAAE,EAAE;YAClC,OAAO,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE;QAClD,CAAC;QACD,WAAW;QACX,aAAa;KACd;AACH,CAAC;;;AC1ND,QAAQ;AAYD,SAAS,mBAAmB;IACjC,IAAI,KAAK,GAA0B,EAAE;IACrC,IAAI,YAAY,GAAG,CAAC;IACpB,IAAI,QAAQ,GAAmB,CAAC,QAAQ,EAAE,EAAE;QAC1C,QAAQ,EAAE;IACZ,CAAC;IACD,IAAI,aAAa,GAAwB,CAAC,QAAoB,EAAE,EAAE;QAChE,QAAQ,EAAE;IACZ,CAAC;IACD,IAAI,UAAU,GAAqB,CAAC,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;IAE5D,MAAM,YAAY,GAAG,CAAC,EAAoB,EAAE,EAAE;QAC5C,UAAU,GAAG,EAAE;IACjB,CAAC;IAED,MAAM,KAAK,GAAG,CAAI,QAAiB,EAAK,EAAE;QACxC,IAAI,MAAM;QACV,YAAY,EAAE;QACd,IAAI;YACF,MAAM,GAAG,QAAQ,EAAE;SACpB;gBAAS;YACR,YAAY,EAAE;YACd,IAAI,CAAC,YAAY,EAAE;gBACjB,KAAK,EAAE;aACR;SACF;QACD,OAAO,MAAM;IACf,CAAC;IAED,MAAM,QAAQ,GAAG,CAAC,QAAwB,EAAQ,EAAE;QAClD,IAAI,YAAY,EAAE;YAChB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;SACrB;aAAM;YACL,UAAU,CAAC,GAAG,EAAE;gBACd,QAAQ,CAAC,QAAQ,CAAC;YACpB,CAAC,CAAC;SACH;IACH,CAAC;IAED;;OAEG;IACH,MAAM,UAAU,GAAG,CACjB,QAA+B,EACR,EAAE;QACzB,OAAO,CAAC,GAAG,IAAI,EAAE,EAAE;YACjB,QAAQ,CAAC,GAAG,EAAE;gBACZ,QAAQ,CAAC,GAAG,IAAI,CAAC;YACnB,CAAC,CAAC;QACJ,CAAC;IACH,CAAC;IAED,MAAM,KAAK,GAAG,GAAS,EAAE;QACvB,MAAM,aAAa,GAAG,KAAK;QAC3B,KAAK,GAAG,EAAE;QACV,IAAI,aAAa,CAAC,MAAM,EAAE;YACxB,UAAU,CAAC,GAAG,EAAE;gBACd,aAAa,CAAC,GAAG,EAAE;oBACjB,aAAa,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;wBACjC,QAAQ,CAAC,QAAQ,CAAC;oBACpB,CAAC,CAAC;gBACJ,CAAC,CAAC;YACJ,CAAC,CAAC;SACH;IACH,CAAC;IAED;;;OAGG;IACH,MAAM,iBAAiB,GAAG,CAAC,EAAkB,EAAE,EAAE;QAC/C,QAAQ,GAAG,EAAE;IACf,CAAC;IAED;;;OAGG;IACH,MAAM,sBAAsB,GAAG,CAAC,EAAuB,EAAE,EAAE;QACzD,aAAa,GAAG,EAAE;IACpB,CAAC;IAED,OAAO;QACL,KAAK;QACL,UAAU;QACV,QAAQ;QACR,iBAAiB;QACjB,sBAAsB;QACtB,YAAY;KACJ;AACZ,CAAC;AAED,YAAY;AACL,MAAM,aAAa,GAAG,mBAAmB,EAAE;;;;;;;;;;;;;;;ACzGA;AAE3C,MAAe,SAAS;IAA/B;QAEE,uCAA0C;IAgC5C,CAAC;IA9BC,OAAO;QACL,IAAI,CAAC,cAAc,EAAE;IACvB,CAAC;IAES,UAAU;QAClB,IAAI,CAAC,cAAc,EAAE;QAErB,IAAI,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC/B,mCAAI,wBAAc,UAAU,CAAC,GAAG,EAAE;gBAChC,IAAI,CAAC,cAAc,EAAE;YACvB,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC;SAChB;IACH,CAAC;IAES,YAAY,CAAC,SAA6B;QAClD,sEAAsE;QACtE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CACpB,IAAI,CAAC,MAAM,IAAI,CAAC,EAChB,SAAS,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CACnD;IACH,CAAC;IAES,cAAc;QACtB,IAAI,mCAAI,4BAAW,EAAE;YACnB,YAAY,CAAC,mCAAI,4BAAW,CAAC;YAC7B,mCAAI,wBAAc,SAAS;SAC5B;IACH,CAAC;CAGF;;;;;;;;;;;;;;;;ACpC0D;AACZ;AACsB;AAC9B;AA4IvC,QAAQ;AAED,MAAM,KAKX,SAAQ,SAAS;IAgBjB,YAAY,MAA2D;QACrE,KAAK,EAAE;;QAVT,sCAAwC;QACxC,qCAAwC;QACxC,+BAAkB;QAClB,iCAAyB;QACzB,iCAAyB;QACzB,mCAAyD;QACzD,wCAAsE;QACtE,6CAA6B;QAK3B,+BAAI,8BAAwB,KAAK;QACjC,+BAAI,yBAAmB,MAAM,CAAC,cAAc;QAC5C,+BAAI,2CAAY,MAAhB,IAAI,EAAa,MAAM,CAAC,OAAO,CAAC;QAChC,+BAAI,oBAAc,EAAE;QACpB,+BAAI,gBAAU,MAAM,CAAC,KAAK;QAC1B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ;QAC/B,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS;QACjC,+BAAI,uBAAiB,MAAM,CAAC,KAAK,IAAI,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC;QAClE,IAAI,CAAC,KAAK,GAAG,+BAAI,2BAAc;QAC/B,IAAI,CAAC,UAAU,EAAE;IACnB,CAAC;IACD,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI;IAC1B,CAAC;IAUS,cAAc;QACtB,IAAI,CAAC,+BAAI,wBAAW,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,MAAM,EAAE;YAChE,+BAAI,oBAAO,CAAC,MAAM,CAAC,IAAI,CAAC;SACzB;IACH,CAAC;IAED,OAAO,CACL,OAAc,EACd,OAA8C;QAE9C,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC;QAEhE,iCAAiC;QACjC,+BAAI,yCAAU,MAAd,IAAI,EAAW;YACb,IAAI;YACJ,IAAI,EAAE,SAAS;YACf,aAAa,EAAE,OAAO,EAAE,SAAS;YACjC,MAAM,EAAE,OAAO,EAAE,MAAM;SACxB,CAAC;QAEF,OAAO,IAAI;IACb,CAAC;IAED,QAAQ,CACN,KAAyC,EACzC,eAAiC;QAEjC,+BAAI,yCAAU,MAAd,IAAI,EAAW,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC;IAC9D,CAAC;IAED,MAAM,CAAC,OAAuB;QAC5B,MAAM,OAAO,GAAG,+BAAI,sBAAS;QAC7B,+BAAI,sBAAS,EAAE,MAAM,CAAC,OAAO,CAAC;QAC9B,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE;IACrE,CAAC;IAED,OAAO;QACL,KAAK,CAAC,OAAO,EAAE;QAEf,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;IAC/B,CAAC;IAED,KAAK;QACH,IAAI,CAAC,OAAO,EAAE;QACd,IAAI,CAAC,QAAQ,CAAC,+BAAI,2BAAc,CAAC;IACnC,CAAC;IAED,QAAQ;QACN,OAAO,+BAAI,wBAAW,CAAC,IAAI,CACzB,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK,CACjD;IACH,CAAC;IAED,UAAU;QACR,OAAO,IAAI,CAAC,iBAAiB,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;IACzD,CAAC;IAED,OAAO;QACL,OAAO,CACL,IAAI,CAAC,KAAK,CAAC,aAAa;YACxB,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa;YACzB,+BAAI,wBAAW,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,OAAO,CAAC,CACxE;IACH,CAAC;IAED,aAAa,CAAC,SAAS,GAAG,CAAC;QACzB,OAAO,CACL,IAAI,CAAC,KAAK,CAAC,aAAa;YACxB,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa;YACzB,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,SAAS,CAAC,CACrD;IACH,CAAC;IAED,OAAO;QACL,MAAM,QAAQ,GAAG,+BAAI,wBAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,wBAAwB,EAAE,CAAC;QAE1E,QAAQ,EAAE,OAAO,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;QAE3C,qCAAqC;QACrC,+BAAI,sBAAS,EAAE,QAAQ,EAAE;IAC3B,CAAC;IAED,QAAQ;QACN,MAAM,QAAQ,GAAG,+BAAI,wBAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,sBAAsB,EAAE,CAAC;QAExE,QAAQ,EAAE,OAAO,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;QAE3C,qCAAqC;QACrC,+BAAI,sBAAS,EAAE,QAAQ,EAAE;IAC3B,CAAC;IAED,WAAW,CAAC,QAAgD;QAC1D,IAAI,CAAC,+BAAI,wBAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACvC,+BAAI,wBAAW,CAAC,IAAI,CAAC,QAAQ,CAAC;YAE9B,8CAA8C;YAC9C,IAAI,CAAC,cAAc,EAAE;YAErB,+BAAI,oBAAO,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;SACrE;IACH,CAAC;IAED,cAAc,CAAC,QAAgD;QAC7D,IAAI,+BAAI,wBAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACtC,+BAAI,oBAAc,+BAAI,wBAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC;YAE/D,IAAI,CAAC,+BAAI,wBAAW,CAAC,MAAM,EAAE;gBAC3B,uDAAuD;gBACvD,2DAA2D;gBAC3D,IAAI,+BAAI,sBAAS,EAAE;oBACjB,IAAI,+BAAI,kCAAqB,EAAE;wBAC7B,+BAAI,sBAAS,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;qBACvC;yBAAM;wBACL,+BAAI,sBAAS,CAAC,WAAW,EAAE;qBAC5B;iBACF;gBAED,IAAI,CAAC,UAAU,EAAE;aAClB;YAED,+BAAI,oBAAO,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;SACvE;IACH,CAAC;IAED,iBAAiB;QACf,OAAO,+BAAI,wBAAW,CAAC,MAAM;IAC/B,CAAC;IAED,UAAU;QACR,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;YAC7B,+BAAI,yCAAU,MAAd,IAAI,EAAW,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;SACvC;IACH,CAAC;IAED,KAAK,CACH,OAA8D,EAC9D,YAA2B;QAE3B,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,MAAM,EAAE;YACrC,IAAI,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,YAAY,EAAE,aAAa,EAAE;gBAC3D,sEAAsE;gBACtE,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;aAC9B;iBAAM,IAAI,+BAAI,sBAAS,EAAE;gBACxB,sFAAsF;gBACtF,+BAAI,sBAAS,EAAE,aAAa,EAAE;gBAC9B,oDAAoD;gBACpD,OAAO,+BAAI,sBAAS;aACrB;SACF;QAED,gFAAgF;QAChF,IAAI,OAAO,EAAE;YACX,+BAAI,2CAAY,MAAhB,IAAI,EAAa,OAAO,CAAC;SAC1B;QAED,yFAAyF;QACzF,2EAA2E;QAC3E,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACzB,MAAM,QAAQ,GAAG,+BAAI,wBAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC;YAC/D,IAAI,QAAQ,EAAE;gBACZ,+BAAI,2CAAY,MAAhB,IAAI,EAAa,QAAQ,CAAC,OAAO,CAAC;aACnC;SACF;QAED,IAAI,KAAqC,EAAE,EAM1C;QAED,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE;QAE7C,gCAAgC;QAChC,MAAM,cAAc,GAAoD;YACtE,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB;QAED,wDAAwD;QACxD,yDAAyD;QACzD,WAAW;QACX,MAAM,iBAAiB,GAAG,CAAC,MAAe,EAAE,EAAE;YAC5C,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE;gBACtC,UAAU,EAAE,IAAI;gBAChB,GAAG,EAAE,GAAG,EAAE;oBACR,+BAAI,8BAAwB,IAAI;oBAChC,OAAO,eAAe,CAAC,MAAM;gBAC/B,CAAC;aACF,CAAC;QACJ,CAAC;QAED,iBAAiB,CAAC,cAAc,CAAC;QAEjC,wBAAwB;QACxB,MAAM,OAAO,GAAG,GAAG,EAAE;YACnB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gBACzB,OAAO,OAAO,CAAC,MAAM,CACnB,IAAI,KAAK,CAAC,qBAAqB,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,CAC1D;aACF;YACD,+BAAI,8BAAwB,KAAK;YACjC,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;gBAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAC3B,IAAI,CAAC,OAAO,CAAC,OAAO,EACpB,cAAiD,EACjD,IAAwB,CACzB;aACF;YAED,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CACzB,cAAiD,CAClD;QACH,CAAC;QAED,wBAAwB;QACxB,MAAM,OAAO,GAGT;YACF,YAAY;YACZ,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,OAAO;SACR;QAED,iBAAiB,CAAC,OAAO,CAAC;QAE1B,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAC5B,OAA+D,EAC/D,IAAwB,CACzB;QAED,6DAA6D;QAC7D,+BAAI,sBAAgB,IAAI,CAAC,KAAK;QAE9B,6CAA6C;QAC7C,IACE,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,MAAM;YACjC,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,OAAO,CAAC,YAAY,EAAE,IAAI,EACnD;YACA,+BAAI,yCAAU,MAAd,IAAI,EAAW,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC;SACpE;QAED,MAAM,OAAO,GAAG,CAAC,KAAoC,EAAE,EAAE;YACvD,wCAAwC;YACxC,IAAI,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,EAAE;gBAC9C,+BAAI,yCAAU,MAAd,IAAI,EAAW;oBACb,IAAI,EAAE,OAAO;oBACb,KAAK,EAAE,KAAe;iBACvB,CAAC;aACH;YAED,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE;gBAC5B,wBAAwB;gBACxB,+BAAI,oBAAO,CAAC,MAAM,CAAC,OAAO,EAAE,CAC1B,KAAY,EACZ,IAAiC,CAClC;gBACD,+BAAI,oBAAO,CAAC,MAAM,CAAC,SAAS,EAAE,CAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,EACf,KAAY,EACZ,IAAiC,CAClC;aACF;YAED,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;gBAC9B,mCAAmC;gBACnC,IAAI,CAAC,UAAU,EAAE;aAClB;YACD,IAAI,CAAC,oBAAoB,GAAG,KAAK;QACnC,CAAC;QAED,wBAAwB;QACxB,+BAAI,kBAAY,aAAa,CAAC;YAC5B,EAAE,EAAE,OAAO,CAAC,OAA+B;YAC3C,KAAK,EAAE,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC;YAClD,SAAS,EAAE,CAAC,IAAI,EAAE,EAAE;gBAClB,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;oBAC/B,IAAI,KAAqC,EAAE,EAI1C;oBACD,OAAO,CAAC,IAAI,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,oBAAoB,CAAQ,CAAC;oBAChE,OAAM;iBACP;gBAED,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;gBAElB,wBAAwB;gBACxB,+BAAI,oBAAO,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,IAAiC,CAAC;gBACvE,+BAAI,oBAAO,CAAC,MAAM,CAAC,SAAS,EAAE,CAC5B,IAAI,EACJ,IAAI,CAAC,KAAK,CAAC,KAAY,EACvB,IAAiC,CAClC;gBAED,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;oBAC9B,mCAAmC;oBACnC,IAAI,CAAC,UAAU,EAAE;iBAClB;gBACD,IAAI,CAAC,oBAAoB,GAAG,KAAK;YACnC,CAAC;YACD,OAAO;YACP,MAAM,EAAE,CAAC,YAAY,EAAE,KAAK,EAAE,EAAE;gBAC9B,+BAAI,yCAAU,MAAd,IAAI,EAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;YACzD,CAAC;YACD,OAAO,EAAE,GAAG,EAAE;gBACZ,+BAAI,yCAAU,MAAd,IAAI,EAAW,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;YACnC,CAAC;YACD,UAAU,EAAE,GAAG,EAAE;gBACf,+BAAI,yCAAU,MAAd,IAAI,EAAW,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;YACtC,CAAC;YACD,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,KAAK;YAC5B,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,UAAU;YACtC,WAAW,EAAE,OAAO,CAAC,OAAO,CAAC,WAAW;SACzC,CAAC;QAEF,+BAAI,kBAAY,+BAAI,sBAAS,CAAC,OAAO;QAErC,OAAO,+BAAI,sBAAS;IACtB,CAAC;CA4FF;6WAvaG,OAA8D;IAE9D,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,+BAAI,6BAAgB,EAAE,GAAG,OAAO,EAAE;IAEtD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AACxC,CAAC,6CAwUS,MAA6B;IACrC,MAAM,OAAO,GAAG,CACd,KAAgC,EACL,EAAE;QAC7B,QAAQ,MAAM,CAAC,IAAI,EAAE;YACnB,KAAK,QAAQ;gBACX,OAAO;oBACL,GAAG,KAAK;oBACR,iBAAiB,EAAE,MAAM,CAAC,YAAY;oBACtC,kBAAkB,EAAE,MAAM,CAAC,KAAK;iBACjC;YACH,KAAK,OAAO;gBACV,OAAO;oBACL,GAAG,KAAK;oBACR,WAAW,EAAE,QAAQ;iBACtB;YACH,KAAK,UAAU;gBACb,OAAO;oBACL,GAAG,KAAK;oBACR,WAAW,EAAE,UAAU;iBACxB;YACH,KAAK,OAAO;gBACV,OAAO;oBACL,GAAG,KAAK;oBACR,iBAAiB,EAAE,CAAC;oBACpB,kBAAkB,EAAE,IAAI;oBACxB,SAAS,EAAE,MAAM,CAAC,IAAI,IAAI,IAAI;oBAC9B,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;wBAC7C,CAAC,CAAC,UAAU;wBACZ,CAAC,CAAC,QAAQ;oBACZ,GAAG,CAAC,CAAC,KAAK,CAAC,aAAa,IAAI;wBAC1B,KAAK,EAAE,IAAI;wBACX,MAAM,EAAE,SAAS;qBAClB,CAAC;iBACH;YACH,KAAK,SAAS;gBACZ,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,eAAe,EAAE,KAAK,CAAC,eAAe,GAAG,CAAC;oBAC1C,aAAa,EAAE,MAAM,CAAC,aAAa,IAAI,IAAI,CAAC,GAAG,EAAE;oBACjD,KAAK,EAAE,IAAI;oBACX,aAAa,EAAE,KAAK;oBACpB,MAAM,EAAE,SAAS;oBACjB,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI;wBACpB,WAAW,EAAE,MAAM;wBACnB,iBAAiB,EAAE,CAAC;wBACpB,kBAAkB,EAAE,IAAI;qBACzB,CAAC;iBACH;YACH,KAAK,OAAO;gBACV,MAAM,KAAK,GAAG,MAAM,CAAC,KAAgB;gBAErC,IAAI,gBAAgB,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,+BAAI,0BAAa,EAAE;oBAChE,OAAO,EAAE,GAAG,+BAAI,0BAAa,EAAE,WAAW,EAAE,MAAM,EAAE;iBACrD;gBAED,OAAO;oBACL,GAAG,KAAK;oBACR,KAAK,EAAE,KAAe;oBACtB,gBAAgB,EAAE,KAAK,CAAC,gBAAgB,GAAG,CAAC;oBAC5C,cAAc,EAAE,IAAI,CAAC,GAAG,EAAE;oBAC1B,iBAAiB,EAAE,KAAK,CAAC,iBAAiB,GAAG,CAAC;oBAC9C,kBAAkB,EAAE,KAAe;oBACnC,WAAW,EAAE,MAAM;oBACnB,MAAM,EAAE,OAAO;iBAChB;YACH,KAAK,YAAY;gBACf,OAAO;oBACL,GAAG,KAAK;oBACR,aAAa,EAAE,IAAI;iBACpB;YACH,KAAK,UAAU;gBACb,OAAO;oBACL,GAAG,KAAK;oBACR,GAAG,MAAM,CAAC,KAAK;iBAChB;SACJ;IACH,CAAC;IAED,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;IAEhC,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;QACvB,+BAAI,wBAAW,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACnC,QAAQ,CAAC,aAAa,EAAE;QAC1B,CAAC,CAAC;QAEF,+BAAI,oBAAO,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC;IAC9D,CAAC,CAAC;AACJ,CAAC;AAGH,SAAS,eAAe,CAMtB,OAA6D;IAE7D,MAAM,IAAI,GACR,OAAO,OAAO,CAAC,WAAW,KAAK,UAAU;QACvC,CAAC,CAAE,OAAO,CAAC,WAA0C,EAAE;QACvD,CAAC,CAAC,OAAO,CAAC,WAAW;IAEzB,MAAM,OAAO,GAAG,OAAO,IAAI,KAAK,WAAW;IAE3C,MAAM,oBAAoB,GAAG,OAAO;QAClC,CAAC,CAAC,OAAO,OAAO,CAAC,oBAAoB,KAAK,UAAU;YAClD,CAAC,CAAE,OAAO,CAAC,oBAAiD,EAAE;YAC9D,CAAC,CAAC,OAAO,CAAC,oBAAoB;QAChC,CAAC,CAAC,CAAC;IAEL,OAAO;QACL,IAAI;QACJ,eAAe,EAAE,CAAC;QAClB,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC,oBAAoB,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;QAC/D,KAAK,EAAE,IAAI;QACX,gBAAgB,EAAE,CAAC;QACnB,cAAc,EAAE,CAAC;QACjB,iBAAiB,EAAE,CAAC;QACpB,kBAAkB,EAAE,IAAI;QACxB,SAAS,EAAE,IAAI;QACf,aAAa,EAAE,KAAK;QACpB,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;QACvC,WAAW,EAAE,MAAM;KACpB;AACH,CAAC;;;;;;;;;;;;;;;ACroB0D;AAC5B;AACgB;AACF;AAsF7C,QAAQ;AAED,MAAM,UAAW,SAAQ,YAAgC;IAG9D,YAAmB,SAA2B,EAAE;QAC9C,KAAK,EAAE;QADU,WAAM,GAAN,MAAM,CAAuB;QAFhD,sCAAoB;QAIlB,oCAAI,uBAAY,IAAI,GAAG,EAAiB;IAC1C,CAAC;IAED,KAAK,CACH,MAAmB,EACnB,OAA6D,EAC7D,KAAiC;QAEjC,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAS;QAClC,MAAM,SAAS,GACb,OAAO,CAAC,SAAS,IAAI,qBAAqB,CAAC,QAAQ,EAAE,OAAO,CAAC;QAC/D,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAyC,SAAS,CAAC;QAEvE,IAAI,CAAC,KAAK,EAAE;YACV,KAAK,GAAG,IAAI,KAAK,CAAC;gBAChB,KAAK,EAAE,IAAI;gBACX,QAAQ;gBACR,SAAS;gBACT,OAAO,EAAE,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC;gBAC5C,KAAK;gBACL,cAAc,EAAE,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC;aAClD,CAAC;YACF,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;SAChB;QAED,OAAO,KAAK;IACd,CAAC;IAED,GAAG,CAAC,KAAgC;QAClC,IAAI,CAAC,oCAAI,2BAAS,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;YACvC,oCAAI,2BAAS,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC;YAEzC,IAAI,CAAC,MAAM,CAAC;gBACV,IAAI,EAAE,OAAO;gBACb,KAAK;aACN,CAAC;SACH;IACH,CAAC;IAED,MAAM,CAAC,KAAgC;QACrC,MAAM,UAAU,GAAG,oCAAI,2BAAS,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC;QAErD,IAAI,UAAU,EAAE;YACd,KAAK,CAAC,OAAO,EAAE;YAEf,IAAI,UAAU,KAAK,KAAK,EAAE;gBACxB,oCAAI,2BAAS,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC;aACtC;YAED,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;SACxC;IACH,CAAC;IAED,KAAK;QACH,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;YACvB,IAAI,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC9B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACpB,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,GAAG,CAMD,SAAiB;QAEjB,OAAO,oCAAI,2BAAS,CAAC,GAAG,CAAC,SAAS,CAErB;IACf,CAAC;IAED,MAAM;QACJ,OAAO,CAAC,GAAG,oCAAI,2BAAS,CAAC,MAAM,EAAE,CAAC;IACpC,CAAC;IAED,IAAI,CACF,OAA+C;QAE/C,MAAM,gBAAgB,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;QAEpD,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAClC,UAAU,CAAC,gBAAgB,EAAE,KAAK,CAAC,CACc;IACrD,CAAC;IAED,OAAO,CAAC,UAAwB,EAAE;QAChC,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,EAAE;QAC7B,OAAO,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC;YACpC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YACvD,CAAC,CAAC,OAAO;IACb,CAAC;IAED,MAAM,CAAC,KAA4B;QACjC,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;YACvB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAClC,QAAQ,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,OAAO;QACL,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;YACvB,IAAI,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC9B,KAAK,CAAC,OAAO,EAAE;YACjB,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,QAAQ;QACN,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;YACvB,IAAI,CAAC,MAAM,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC9B,KAAK,CAAC,QAAQ,EAAE;YAClB,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;CACF;;;;;;;;;;;;;;;;ACtN8C;AACR;AACY;AA4EnD,QAAQ;AAED,MAAM,QAKX,SAAQ,SAAS;IAUjB,YAAY,MAA2D;QACrE,KAAK,EAAE;;QANT,sCAAwE;QACxE,2CAAsE;QACtE,0CAA6B;QAC7B,oCAAyB;QAKvB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU;QACnC,kCAAI,4BAAmB,MAAM,CAAC,cAAc;QAC5C,kCAAI,2BAAkB,MAAM,CAAC,aAAa;QAC1C,kCAAI,uBAAc,EAAE;QACpB,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,wBAAe,EAAE;QAE9C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,UAAU,EAAE;IACnB,CAAC;IAED,UAAU,CACR,OAA8D;QAE9D,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,kCAAI,gCAAgB,EAAE,GAAG,OAAO,EAAE;QAEtD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IACxC,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI;IAC1B,CAAC;IAED,WAAW,CAAC,QAA8C;QACxD,IAAI,CAAC,kCAAI,2BAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YACvC,kCAAI,2BAAW,CAAC,IAAI,CAAC,QAAQ,CAAC;YAE9B,iDAAiD;YACjD,IAAI,CAAC,cAAc,EAAE;YAErB,kCAAI,+BAAe,CAAC,MAAM,CAAC;gBACzB,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE,IAAI;gBACd,QAAQ;aACT,CAAC;SACH;IACH,CAAC;IAED,cAAc,CAAC,QAA8C;QAC3D,kCAAI,uBAAc,kCAAI,2BAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC;QAE/D,IAAI,CAAC,UAAU,EAAE;QAEjB,kCAAI,+BAAe,CAAC,MAAM,CAAC;YACzB,IAAI,EAAE,iBAAiB;YACvB,QAAQ,EAAE,IAAI;YACd,QAAQ;SACT,CAAC;IACJ,CAAC;IAES,cAAc;QACtB,IAAI,CAAC,kCAAI,2BAAW,CAAC,MAAM,EAAE;YAC3B,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,SAAS,EAAE;gBACnC,IAAI,CAAC,UAAU,EAAE;aAClB;iBAAM;gBACL,kCAAI,+BAAe,CAAC,MAAM,CAAC,IAAI,CAAC;aACjC;SACF;IACH,CAAC;IAED,QAAQ;QACN,OAAO,CACL,kCAAI,yBAAS,EAAE,QAAQ,EAAE;YACzB,kGAAkG;YAClG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,SAAU,CAAC,CACpC;IACH,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,SAAqB;QACjC,MAAM,eAAe,GAAG,GAAG,EAAE;YAC3B,kCAAI,qBAAY,aAAa,CAAC;gBAC5B,EAAE,EAAE,GAAG,EAAE;oBACP,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;wBAC5B,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;qBACxD;oBACD,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,SAAS,CAAC;gBAC3C,CAAC;gBACD,MAAM,EAAE,CAAC,YAAY,EAAE,KAAK,EAAE,EAAE;oBAC9B,kCAAI,+CAAU,MAAd,IAAI,EAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC;gBACzD,CAAC;gBACD,OAAO,EAAE,GAAG,EAAE;oBACZ,kCAAI,+CAAU,MAAd,IAAI,EAAW,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;gBACnC,CAAC;gBACD,UAAU,EAAE,GAAG,EAAE;oBACf,kCAAI,+CAAU,MAAd,IAAI,EAAW,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;gBACtC,CAAC;gBACD,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,CAAC;gBAC9B,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;gBACnC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;aACtC,CAAC;YAEF,OAAO,kCAAI,yBAAS,CAAC,OAAO;QAC9B,CAAC;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,SAAS;QAEhD,IAAI;YACF,IAAI,CAAC,QAAQ,EAAE;gBACb,kCAAI,+CAAU,MAAd,IAAI,EAAW,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC;gBAC9C,wBAAwB;gBACxB,MAAM,kCAAI,+BAAe,CAAC,MAAM,CAAC,QAAQ,EAAE,CACzC,SAAS,EACT,IAAoD,CACrD;gBACD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC;gBACxD,IAAI,OAAO,KAAK,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;oBAClC,kCAAI,+CAAU,MAAd,IAAI,EAAW;wBACb,IAAI,EAAE,SAAS;wBACf,OAAO;wBACP,SAAS;qBACV,CAAC;iBACH;aACF;YACD,MAAM,IAAI,GAAG,MAAM,eAAe,EAAE;YAEpC,wBAAwB;YACxB,MAAM,kCAAI,+BAAe,CAAC,MAAM,CAAC,SAAS,EAAE,CAC1C,IAAI,EACJ,SAAS,EACT,IAAI,CAAC,KAAK,CAAC,OAAO,EAClB,IAAoD,CACrD;YAED,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,OAAQ,CAAC;YAEpE,wBAAwB;YACxB,MAAM,kCAAI,+BAAe,CAAC,MAAM,CAAC,SAAS,EAAE,CAC1C,IAAI,EACJ,IAAI,EACJ,IAAI,CAAC,KAAK,CAAC,SAAS,EACpB,IAAI,CAAC,KAAK,CAAC,OAAO,EAClB,IAAoD,CACrD;YAED,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;YAEzE,kCAAI,+CAAU,MAAd,IAAI,EAAW,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;YACzC,OAAO,IAAI;SACZ;QAAC,OAAO,KAAK,EAAE;YACd,IAAI;gBACF,wBAAwB;gBACxB,MAAM,kCAAI,+BAAe,CAAC,MAAM,CAAC,OAAO,EAAE,CACxC,KAAY,EACZ,SAAS,EACT,IAAI,CAAC,KAAK,CAAC,OAAO,EAClB,IAAoD,CACrD;gBAED,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAC1B,KAAe,EACf,SAAS,EACT,IAAI,CAAC,KAAK,CAAC,OAAO,CACnB;gBAED,wBAAwB;gBACxB,MAAM,kCAAI,+BAAe,CAAC,MAAM,CAAC,SAAS,EAAE,CAC1C,SAAS,EACT,KAAY,EACZ,IAAI,CAAC,KAAK,CAAC,SAAS,EACpB,IAAI,CAAC,KAAK,CAAC,OAAO,EAClB,IAAoD,CACrD;gBAED,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAC5B,SAAS,EACT,KAAe,EACf,SAAS,EACT,IAAI,CAAC,KAAK,CAAC,OAAO,CACnB;gBACD,MAAM,KAAK;aACZ;oBAAS;gBACR,kCAAI,+CAAU,MAAd,IAAI,EAAW,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAe,EAAE,CAAC;aAC1D;SACF;IACH,CAAC;CAuEF;iPArEW,MAAmD;IAC3D,MAAM,OAAO,GAAG,CACd,KAAyD,EACL,EAAE;QACtD,QAAQ,MAAM,CAAC,IAAI,EAAE;YACnB,KAAK,QAAQ;gBACX,OAAO;oBACL,GAAG,KAAK;oBACR,YAAY,EAAE,MAAM,CAAC,YAAY;oBACjC,aAAa,EAAE,MAAM,CAAC,KAAK;iBAC5B;YACH,KAAK,OAAO;gBACV,OAAO;oBACL,GAAG,KAAK;oBACR,QAAQ,EAAE,IAAI;iBACf;YACH,KAAK,UAAU;gBACb,OAAO;oBACL,GAAG,KAAK;oBACR,QAAQ,EAAE,KAAK;iBAChB;YACH,KAAK,SAAS;gBACZ,OAAO;oBACL,GAAG,KAAK;oBACR,OAAO,EAAE,MAAM,CAAC,OAAO;oBACvB,IAAI,EAAE,SAAS;oBACf,YAAY,EAAE,CAAC;oBACf,aAAa,EAAE,IAAI;oBACnB,KAAK,EAAE,IAAI;oBACX,QAAQ,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;oBAC7C,MAAM,EAAE,SAAS;oBACjB,SAAS,EAAE,MAAM,CAAC,SAAS;oBAC3B,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;iBACxB;YACH,KAAK,SAAS;gBACZ,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,YAAY,EAAE,CAAC;oBACf,aAAa,EAAE,IAAI;oBACnB,KAAK,EAAE,IAAI;oBACX,MAAM,EAAE,SAAS;oBACjB,QAAQ,EAAE,KAAK;iBAChB;YACH,KAAK,OAAO;gBACV,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,EAAE,SAAS;oBACf,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,YAAY,EAAE,KAAK,CAAC,YAAY,GAAG,CAAC;oBACpC,aAAa,EAAE,MAAM,CAAC,KAAK;oBAC3B,QAAQ,EAAE,KAAK;oBACf,MAAM,EAAE,OAAO;iBAChB;SACJ;IACH,CAAC;IACD,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;IAEhC,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;QACvB,kCAAI,2BAAW,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACnC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC;QACnC,CAAC,CAAC;QACF,kCAAI,+BAAe,CAAC,MAAM,CAAC;YACzB,QAAQ,EAAE,IAAI;YACd,IAAI,EAAE,SAAS;YACf,MAAM;SACP,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAGI,SAAS,wBAAe;IAM7B,OAAO;QACL,OAAO,EAAE,SAAS;QAClB,IAAI,EAAE,SAAS;QACf,KAAK,EAAE,IAAI;QACX,YAAY,EAAE,CAAC;QACf,aAAa,EAAE,IAAI;QACnB,QAAQ,EAAE,KAAK;QACf,MAAM,EAAE,MAAM;QACd,SAAS,EAAE,SAAS;QACpB,WAAW,EAAE,CAAC;KACf;AACH,CAAC;;;;;;;;;;;;;;;ACzW8C;AACV;AACQ;AACA;AA8E7C,QAAQ;AAED,MAAM,aAAc,SAAQ,YAAmC;IAKpE,YAAmB,SAA8B,EAAE;QACjD,KAAK,EAAE;QADU,WAAM,GAAN,MAAM,CAA0B;QAJnD,2CAA+C;QAC/C,4CAAmB;QACnB,0CAAuC;QAIrC,uCAAI,4BAAc,EAAE;QACpB,uCAAI,6BAAe,CAAC;IACtB,CAAC;IAED,KAAK,CACH,MAAmB,EACnB,OAA6D,EAC7D,KAA0D;;QAE1D,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC;YAC5B,aAAa,EAAE,IAAI;YACnB,UAAU,EAAE,qEAAE,6EAAgB,EAAlB,IAAkB;YAC9B,OAAO,EAAE,MAAM,CAAC,sBAAsB,CAAC,OAAO,CAAC;YAC/C,KAAK;SACN,CAAC;QAEF,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;QAElB,OAAO,QAAQ;IACjB,CAAC;IAED,GAAG,CAAC,QAAsC;QACxC,uCAAI,gCAAW,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;IAC1C,CAAC;IAED,MAAM,CAAC,QAAsC;QAC3C,uCAAI,4BAAc,uCAAI,gCAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC;QAC/D,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC;IAC5C,CAAC;IAED,KAAK;QACH,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;YACvB,uCAAI,gCAAW,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACnC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;YACvB,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,OAAO,uCAAI,gCAAW;IACxB,CAAC;IAED,IAAI,CAMF,OAAwB;QAExB,MAAM,gBAAgB,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;QAEpD,OAAO,uCAAI,gCAAW,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CACvC,aAAa,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAC1C;IACH,CAAC;IAED,OAAO,CAAC,UAA2B,EAAE;QACnC,OAAO,uCAAI,gCAAW,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CACzC,aAAa,CAAC,OAAO,EAAE,QAAQ,CAAC,CACjC;IACH,CAAC;IAED,MAAM,CAAC,KAA+B;QACpC,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;YACvB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAClC,QAAQ,CAAC,KAAK,CAAC;YACjB,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,qBAAqB;QACnB,uCAAI,2BAAa,CAAC,uCAAI,+BAAU,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;aACnD,IAAI,CAAC,GAAG,EAAE;YACT,MAAM,eAAe,GAAG,uCAAI,gCAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;YACvE,OAAO,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE,CAC9B,eAAe,CAAC,MAAM,CACpB,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,CACpB,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EACrD,OAAO,CAAC,OAAO,EAAsB,CACtC,CACF;QACH,CAAC,CAAC;aACD,IAAI,CAAC,GAAG,EAAE;YACT,uCAAI,2BAAa,SAAS;QAC5B,CAAC,CAAC;QAEJ,OAAO,uCAAI,+BAAU;IACvB,CAAC;CACF;;;;ACpL6C;AASvC,SAAS,qBAAqB,CACnC,KAAc;IAEd,OAAO;QACL,OAAO,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;YAC1B,MAAM,OAAO,GAAG,KAAK,IAAI,EAAE;gBACzB,MAAM,OAAO,GAAG,OAAO,CAAC,OAAgD;gBACxE,MAAM,SAAS,GAAG,OAAO,CAAC,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS;gBAClE,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;gBAChD,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,IAAI,EAAE;gBAC1D,MAAM,KAAK,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE;gBAC3C,IAAI,SAAS,GAAG,KAAK;gBAErB,MAAM,iBAAiB,GAAG,CAAC,MAAe,EAAE,EAAE;oBAC5C,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE;wBACtC,UAAU,EAAE,IAAI;wBAChB,GAAG,EAAE,GAAG,EAAE;4BACR,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE;gCAC1B,SAAS,GAAG,IAAI;6BACjB;iCAAM;gCACL,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE;oCAC5C,SAAS,GAAG,IAAI;gCAClB,CAAC,CAAC;6BACH;4BACD,OAAO,OAAO,CAAC,MAAM;wBACvB,CAAC;qBACF,CAAC;gBACJ,CAAC;gBAED,qBAAqB;gBACrB,MAAM,OAAO,GACX,OAAO,CAAC,OAAO,CAAC,OAAO;oBACvB,CAAC,GAAG,EAAE,CACJ,OAAO,CAAC,MAAM,CACZ,IAAI,KAAK,CAAC,qBAAqB,OAAO,CAAC,OAAO,CAAC,SAAS,GAAG,CAAC,CAC7D,CAAC;gBAEN,kCAAkC;gBAClC,MAAM,SAAS,GAAG,KAAK,EACrB,IAA2B,EAC3B,KAAc,EACd,QAAkB,EACc,EAAE;oBAClC,IAAI,SAAS,EAAE;wBACb,OAAO,OAAO,CAAC,MAAM,EAAE;qBACxB;oBAED,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;wBACtC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;qBAC7B;oBAED,MAAM,cAAc,GAGhB;wBACF,QAAQ,EAAE,OAAO,CAAC,QAAQ;wBAC1B,SAAS,EAAE,KAAK;wBAChB,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS;wBAC5C,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI;qBAC3B;oBAED,iBAAiB,CAAC,cAAc,CAAC;oBAEjC,MAAM,IAAI,GAAG,MAAM,OAAO,CACxB,cAAyD,CAC1D;oBAED,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,OAAO;oBACpC,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ;oBAE9C,OAAO;wBACL,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,CAAC;wBACxC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC;qBACpD;gBACH,CAAC;gBAED,IAAI,MAA6B;gBAEjC,8BAA8B;gBAC9B,IAAI,SAAS,IAAI,QAAQ,CAAC,MAAM,EAAE;oBAChC,MAAM,QAAQ,GAAG,SAAS,KAAK,UAAU;oBACzC,MAAM,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,gBAAgB;oBACtE,MAAM,OAAO,GAAG;wBACd,KAAK,EAAE,QAAQ;wBACf,UAAU,EAAE,aAAa;qBAC1B;oBACD,MAAM,KAAK,GAAG,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC;oBAE3C,MAAM,GAAG,MAAM,SAAS,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC;iBACnD;qBAAM;oBACL,mBAAmB;oBACnB,MAAM,GAAG,MAAM,SAAS,CACtB,KAAK,EACL,aAAa,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,gBAAgB,CAC7C;oBAED,MAAM,cAAc,GAAG,KAAK,IAAI,QAAQ,CAAC,MAAM;oBAE/C,wBAAwB;oBACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;wBACvC,MAAM,KAAK,GAAG,gBAAgB,CAAC,OAAO,EAAE,MAAM,CAAC;wBAC/C,MAAM,GAAG,MAAM,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC;qBACxC;iBACF;gBAED,OAAO,MAAM;YACf,CAAC;YACD,IAAI,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE;gBAC7B,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE;oBACrB,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,CAChC,OAAc,EACd;wBACE,QAAQ,EAAE,OAAO,CAAC,QAAQ;wBAC1B,IAAI,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI;wBAC1B,MAAM,EAAE,OAAO,CAAC,MAAM;qBACvB,EACD,KAAK,CACN;gBACH,CAAC;aACF;iBAAM;gBACL,OAAO,CAAC,OAAO,GAAG,OAAO;aAC1B;QACH,CAAC;KACF;AACH,CAAC;AAED,SAAS,gBAAgB,CACvB,OAA4C,EAC5C,EAAE,KAAK,EAAE,UAAU,EAAyB;IAE5C,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC;IAClC,OAAO,OAAO,CAAC,gBAAgB,CAC7B,KAAK,CAAC,SAAS,CAAC,EAChB,KAAK,EACL,UAAU,CAAC,SAAS,CAAC,EACrB,UAAU,CACX;AACH,CAAC;AAED,SAAS,oBAAoB,CAC3B,OAA4C,EAC5C,EAAE,KAAK,EAAE,UAAU,EAAyB;IAE5C,OAAO,OAAO,CAAC,oBAAoB,EAAE,CACnC,KAAK,CAAC,CAAC,CAAC,EACR,KAAK,EACL,UAAU,CAAC,CAAC,CAAC,EACb,UAAU,CACX;AACH,CAAC;AAED;;GAEG;AACI,SAAS,WAAW,CACzB,OAAiD,EACjD,IAA4B;IAE5B,IAAI,CAAC,IAAI;QAAE,OAAO,KAAK;IACvB,OAAO,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,IAAI;AAChD,CAAC;AAED;;GAEG;AACI,SAAS,eAAe,CAC7B,OAAiD,EACjD,IAA4B;IAE5B,IAAI,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,oBAAoB;QAAE,OAAO,KAAK;IACxD,OAAO,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,IAAI;AACpD,CAAC;;;;;;;;;;;;;;;AC9Ke;AACyB;AACM;AACF;AACE;AACA;AACgB;AAuC/D,QAAQ;AAED,MAAM,WAAW;IAUtB,YAAY,SAA4B,EAAE;QAT1C,0CAAuB;QACvB,6CAA6B;QAC7B,8CAA+B;QAC/B,6CAA0C;QAC1C,gDAAgD;QAChD,0CAAmB;QACnB,gDAA8B;QAC9B,iDAA+B;QAG7B,qCAAI,2BAAe,MAAM,CAAC,UAAU,IAAI,IAAI,UAAU,EAAE;QACxD,qCAAI,8BAAkB,MAAM,CAAC,aAAa,IAAI,IAAI,aAAa,EAAE;QACjE,qCAAI,+BAAmB,MAAM,CAAC,cAAc,IAAI,EAAE;QAClD,qCAAI,8BAAkB,IAAI,GAAG,EAAE;QAC/B,qCAAI,iCAAqB,IAAI,GAAG,EAAE;QAClC,qCAAI,2BAAe,CAAC;IACtB,CAAC;IAED,KAAK;;QACH,0IAAgB,EAAhB,IAAkB;QAClB,IAAI,qCAAI,+BAAY,KAAK,CAAC;YAAE,OAAM;QAElC,qCAAI,iCAAqB,YAAY,CAAC,SAAS,CAAC,GAAG,EAAE;YACnD,IAAI,YAAY,CAAC,SAAS,EAAE,EAAE;gBAC5B,IAAI,CAAC,qBAAqB,EAAE;gBAC5B,qCAAI,+BAAY,CAAC,OAAO,EAAE;aAC3B;QACH,CAAC,CAAC;QACF,qCAAI,kCAAsB,aAAa,CAAC,SAAS,CAAC,GAAG,EAAE;YACrD,IAAI,aAAa,CAAC,QAAQ,EAAE,EAAE;gBAC5B,IAAI,CAAC,qBAAqB,EAAE;gBAC5B,qCAAI,+BAAY,CAAC,QAAQ,EAAE;aAC5B;QACH,CAAC,CAAC;IACJ,CAAC;IAED,OAAO;;QACL,0IAAgB,EAAhB,IAAkB;QAClB,IAAI,qCAAI,+BAAY,KAAK,CAAC;YAAE,OAAM;QAElC,qCAAI,qCAAkB,EAAE,KAAxB,IAAI,CAAsB;QAC1B,qCAAI,iCAAqB,SAAS;QAElC,qCAAI,sCAAmB,EAAE,KAAzB,IAAI,CAAuB;QAC3B,qCAAI,kCAAsB,SAAS;IACrC,CAAC;IAED,UAAU,CAAC,OAAsB;QAC/B,OAAO,qCAAI,+BAAY,CAAC,OAAO,CAAC,EAAE,GAAG,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC;aACrE,MAAM;IACX,CAAC;IAED,UAAU,CAAC,OAAyB;QAClC,OAAO,qCAAI,kCAAe,CAAC,OAAO,CAAC,EAAE,GAAG,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,CAAC,MAAM;IAC9E,CAAC;IAYD,YAAY,CAAC,QAAkB;QAC7B,OAAO,qCAAI,+BAAY,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK,CAAC,IAAI;IACxD,CAAC;IAED,eAAe,CAMb,OAAkE;QAElE,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAQ,OAAO,CAAC,QAAQ,CAAC;QAE7D,OAAO,UAAU,KAAK,SAAS;YAC7B,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;YAC7B,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;IAC9B,CAAC;IAED,cAAc,CACZ,OAAqB;QAErB,OAAO,IAAI,CAAC,aAAa,EAAE;aACxB,OAAO,CAAC,OAAO,CAAC;aAChB,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,EAAE;YAC3B,MAAM,IAAI,GAAG,KAAK,CAAC,IAAgC;YACnD,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;QACzB,CAAC,CAAC;IACN,CAAC;IAED,YAAY,CAUV,QAAwB,EACxB,OAGC,EACD,OAAwB;QAExB,MAAM,KAAK,GAAG,qCAAI,+BAAY,CAAC,IAAI,CAAuB,EAAE,QAAQ,EAAE,CAAC;QACvE,MAAM,QAAQ,GAAG,KAAK,EAAE,KAAK,CAAC,IAAI;QAClC,MAAM,IAAI,GAAG,gBAAgB,CAAC,OAAO,EAAE,QAAQ,CAAC;QAEhD,IAAI,OAAO,IAAI,KAAK,WAAW,EAAE;YAC/B,OAAO,SAAS;SACjB;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAM/C,EAAE,QAAQ,EAAE,CAAC;QAEf,OAAO,qCAAI,+BAAY;aACpB,KAAK,CAAC,IAAI,EAAE,gBAAgB,CAAC;aAC7B,OAAO,CAAC,IAAI,EAAE,EAAE,GAAG,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;IAChD,CAAC;IAED,cAAc,CACZ,OAAqB,EACrB,OAAoE,EACpE,OAAwB;QAExB,OAAO,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE,CAC9B,IAAI,CAAC,aAAa,EAAE;aACjB,OAAO,CAAC,OAAO,CAAC;aAChB,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;YACrB,QAAQ;YACR,IAAI,CAAC,YAAY,CAAe,QAAQ,EAAE,OAAO,EAAE,OAAO,CAAC;SAC5D,CAAC,CACL;IACH,CAAC;IAED,aAAa,CACX,QAAkB;QAElB,OAAO,qCAAI,+BAAY,CAAC,IAAI,CAAuB,EAAE,QAAQ,EAAE,CAAC,EAAE,KAAK;IACzE,CAAC;IAED,aAAa,CAAC,OAAsB;QAClC,MAAM,UAAU,GAAG,qCAAI,+BAAY;QACnC,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;YACvB,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC5C,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC;YAC1B,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;IAED,YAAY,CAAC,OAAsB,EAAE,OAAsB;QACzD,MAAM,UAAU,GAAG,qCAAI,+BAAY;QAEnC,MAAM,cAAc,GAAwB;YAC1C,IAAI,EAAE,QAAQ;YACd,GAAG,OAAO;SACX;QAED,OAAO,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;YAC9B,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC5C,KAAK,CAAC,KAAK,EAAE;YACf,CAAC,CAAC;YACF,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,OAAO,CAAC;QACrD,CAAC,CAAC;IACJ,CAAC;IAED,aAAa,CACX,UAAwB,EAAE,EAC1B,gBAA+B,EAAE;QAEjC,MAAM,sBAAsB,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,aAAa,EAAE;QAEjE,MAAM,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE,CACxC,qCAAI,+BAAY;aACb,OAAO,CAAC,OAAO,CAAC;aAChB,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,CACxD;QAED,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;IACrD,CAAC;IAED,iBAAiB,CACf,UAAkC,EAAE,EACpC,UAA6B,EAAE;QAE/B,OAAO,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;YAC9B,qCAAI,+BAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAClD,KAAK,CAAC,UAAU,EAAE;YACpB,CAAC,CAAC;YAEF,IAAI,OAAO,CAAC,WAAW,KAAK,MAAM,EAAE;gBAClC,OAAO,OAAO,CAAC,OAAO,EAAE;aACzB;YACD,MAAM,cAAc,GAAwB;gBAC1C,GAAG,OAAO;gBACV,IAAI,EAAE,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,IAAI,IAAI,QAAQ;aACtD;YACD,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,OAAO,CAAC;QACrD,CAAC,CAAC;IACJ,CAAC;IAED,cAAc,CACZ,UAA+B,EAAE,EACjC,OAAwB;QAExB,MAAM,YAAY,GAAG;YACnB,GAAG,OAAO;YACV,aAAa,EAAE,OAAO,EAAE,aAAa,IAAI,IAAI;SAC9C;QACD,MAAM,QAAQ,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE,CACxC,qCAAI,+BAAY;aACb,OAAO,CAAC,OAAO,CAAC;aAChB,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC;aACtC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;YACb,IAAI,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,YAAY,CAAC;YAClD,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE;gBAC9B,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC;aAC9B;YACD,OAAO,KAAK,CAAC,KAAK,CAAC,WAAW,KAAK,QAAQ;gBACzC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE;gBACnB,CAAC,CAAC,OAAO;QACb,CAAC,CAAC,CACL;QAED,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IACzC,CAAC;IAED,UAAU,CAOR,OAMC;QAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;QAE1D,0DAA0D;QAC1D,IAAI,OAAO,gBAAgB,CAAC,KAAK,KAAK,WAAW,EAAE;YACjD,gBAAgB,CAAC,KAAK,GAAG,KAAK;SAC/B;QAED,MAAM,KAAK,GAAG,qCAAI,+BAAY,CAAC,KAAK,CAAC,IAAI,EAAE,gBAAgB,CAAC;QAE5D,OAAO,KAAK,CAAC,aAAa,CAAC,gBAAgB,CAAC,SAAS,CAAC;YACpD,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,gBAAgB,CAAC;YAC/B,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAa,CAAC;IAChD,CAAC;IAED,aAAa,CAMX,OAAkE;QAElE,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;IACxD,CAAC;IAED,kBAAkB,CAOhB,OAMC;QAED,OAAO,CAAC,QAAQ,GAAG,qBAAqB,CAKtC,OAAO,CAAC,KAAK,CAAC;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;IACjC,CAAC;IAED,qBAAqB,CAOnB,OAMC;QAED,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;IAChE,CAAC;IAED,qBAAqB;QACnB,OAAO,qCAAI,kCAAe,CAAC,qBAAqB,EAAE;IACpD,CAAC;IAED,aAAa;QACX,OAAO,qCAAI,+BAAY;IACzB,CAAC;IAED,gBAAgB;QACd,OAAO,qCAAI,kCAAe;IAC5B,CAAC;IAED,iBAAiB;QACf,OAAO,qCAAI,mCAAgB;IAC7B,CAAC;IAED,iBAAiB,CAAC,OAAuB;QACvC,qCAAI,+BAAmB,OAAO;IAChC,CAAC;IAED,gBAAgB,CACd,QAAkB,EAClB,OAEC;QAED,qCAAI,kCAAe,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACzC,QAAQ;YACR,cAAc,EAAE,OAAO;SACxB,CAAC;IACJ,CAAC;IAED,gBAAgB,CACd,QAAkB;QAElB,MAAM,QAAQ,GAAG,CAAC,GAAG,qCAAI,kCAAe,CAAC,MAAM,EAAE,CAAC;QAElD,IAAI,MAAM,GAAkD,EAAE;QAE9D,QAAQ,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;YAChC,IAAI,eAAe,CAAC,QAAQ,EAAE,YAAY,CAAC,QAAQ,CAAC,EAAE;gBACpD,MAAM,GAAG,EAAE,GAAG,MAAM,EAAE,GAAG,YAAY,CAAC,cAAc,EAAE;aACvD;QACH,CAAC,CAAC;QACF,OAAO,MAAM;IACf,CAAC;IAED,mBAAmB,CACjB,WAAwB,EACxB,OAAyE;QAEzE,qCAAI,qCAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;YAC/C,WAAW;YACX,cAAc,EAAE,OAAO;SACxB,CAAC;IACJ,CAAC;IAED,mBAAmB,CACjB,WAAwB;QAExB,MAAM,QAAQ,GAAG,CAAC,GAAG,qCAAI,qCAAkB,CAAC,MAAM,EAAE,CAAC;QAErD,IAAI,MAAM,GAAgD,EAAE;QAE5D,QAAQ,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE;YAChC,IAAI,eAAe,CAAC,WAAW,EAAE,YAAY,CAAC,WAAW,CAAC,EAAE;gBAC1D,MAAM,GAAG,EAAE,GAAG,MAAM,EAAE,GAAG,YAAY,CAAC,cAAc,EAAE;aACvD;QACH,CAAC,CAAC;QAEF,OAAO,MAAM;IACf,CAAC;IAED,mBAAmB,CAQjB,OAeK;QAQL,IAAI,OAAO,EAAE,UAAU,EAAE;YACvB,OAAO,OAMN;SACF;QAED,MAAM,gBAAgB,GAAG;YACvB,GAAG,qCAAI,mCAAgB,CAAC,OAAO;YAC/B,GAAG,CAAC,OAAO,EAAE,QAAQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACjE,GAAG,OAAO;YACV,UAAU,EAAE,IAAI;SACjB;QAED,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE;YAC/B,gBAAgB,CAAC,SAAS,GAAG,qBAAqB,CAChD,gBAAgB,CAAC,QAAQ,EACzB,gBAAgB,CACjB;SACF;QAED,2BAA2B;QAC3B,IAAI,OAAO,gBAAgB,CAAC,kBAAkB,KAAK,WAAW,EAAE;YAC9D,gBAAgB,CAAC,kBAAkB;gBACjC,gBAAgB,CAAC,WAAW,KAAK,QAAQ;SAC5C;QACD,IAAI,OAAO,gBAAgB,CAAC,YAAY,KAAK,WAAW,EAAE;YACxD,gBAAgB,CAAC,YAAY,GAAG,CAAC,CAAC,gBAAgB,CAAC,QAAQ;SAC5D;QAED,IACE,OAAO,gBAAgB,CAAC,WAAW,KAAK,WAAW;YACnD,gBAAgB,CAAC,SAAS,EAC1B;YACA,gBAAgB,CAAC,WAAW,GAAG,cAAc;SAC9C;QAED,OAAO,gBAMN;IACH,CAAC;IAED,sBAAsB,CACpB,OAAW;QAEX,IAAI,OAAO,EAAE,UAAU,EAAE;YACvB,OAAO,OAAO;SACf;QACD,OAAO;YACL,GAAG,qCAAI,mCAAgB,CAAC,SAAS;YACjC,GAAG,CAAC,OAAO,EAAE,WAAW;gBACtB,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAChD,GAAG,OAAO;YACV,UAAU,EAAE,IAAI;SACZ;IACR,CAAC;IAED,KAAK;QACH,qCAAI,+BAAY,CAAC,KAAK,EAAE;QACxB,qCAAI,kCAAe,CAAC,KAAK,EAAE;IAC7B,CAAC;CACF;;;;;;;;;;;;;;;;AC9hBe;AAC+B;AACF;AACA;AACT;AA2B7B,MAAM,aAMX,SAAQ,YAAkD;IAwB1D,YACE,MAAmB,EACZ,OAMN;QAED,KAAK,EAAE;;QARA,YAAO,GAAP,OAAO,CAMb;QA/BH,wCAAoB;QACpB,sCAAoE,SAAU;QAC9E,kDAA4D,SAAU;QACtE,uCAAqD,SAAU;QAC/D,oDAAoD;QACpD,sDAMC;QACD,6CAA2B;QAC3B,0CAAuC;QACvC,8CAAqB;QACrB,iEAAiE;QACjE,mGAAmG;QACnG,0DAA8E;QAC9E,gDAA+C;QAC/C,mDAAmD;QACnD,wDAAwC;QACxC,sCAAgD,IAAI,GAAG,EAAE;QAcvD,uCAAI,yBAAW,MAAM;QACrB,uCAAI,8BAAgB,IAAI;QACxB,IAAI,CAAC,WAAW,EAAE;QAClB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;IAC1B,CAAC;IAES,WAAW;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;IACxC,CAAC;IAES,WAAW;QACnB,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,EAAE;YAC7B,uCAAI,mCAAc,CAAC,WAAW,CAAC,IAAI,CAAC;YAEpC,IAAI,kBAAkB,CAAC,uCAAI,mCAAc,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE;gBACxD,uCAAI,6DAAc,MAAlB,IAAI,CAAgB;aACrB;iBAAM;gBACL,IAAI,CAAC,YAAY,EAAE;aACpB;YAED,uCAAI,6DAAc,MAAlB,IAAI,CAAgB;SACrB;IACH,CAAC;IAES,aAAa;QACrB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE;YACxB,IAAI,CAAC,OAAO,EAAE;SACf;IACH,CAAC;IAED,sBAAsB;QACpB,OAAO,aAAa,CAClB,uCAAI,mCAAc,EAClB,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAChC;IACH,CAAC;IAED,wBAAwB;QACtB,OAAO,aAAa,CAClB,uCAAI,mCAAc,EAClB,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAClC;IACH,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE;QAC1B,uCAAI,kEAAmB,MAAvB,IAAI,CAAqB;QACzB,uCAAI,qEAAsB,MAA1B,IAAI,CAAwB;QAC5B,uCAAI,mCAAc,CAAC,cAAc,CAAC,IAAI,CAAC;IACzC,CAAC;IAED,UAAU,CACR,OAMC,EACD,aAA6B;QAE7B,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO;QAChC,MAAM,SAAS,GAAG,uCAAI,mCAAc;QAEpC,IAAI,CAAC,OAAO,GAAG,uCAAI,6BAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC;QAExD,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE;YACnD,uCAAI,6BAAQ,CAAC,aAAa,EAAE,CAAC,MAAM,CAAC;gBAClC,IAAI,EAAE,wBAAwB;gBAC9B,KAAK,EAAE,uCAAI,mCAAc;gBACzB,QAAQ,EAAE,IAAI;aACf,CAAC;SACH;QAED,IACE,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,WAAW;YAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,SAAS,EACzC;YACA,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC;SACpD;QAED,0DAA0D;QAC1D,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;YAC1B,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ;SAC7C;QAED,uCAAI,4DAAa,MAAjB,IAAI,CAAe;QAEnB,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,EAAE;QAEnC,iCAAiC;QACjC,IACE,OAAO;YACP,qBAAqB,CACnB,uCAAI,mCAAc,EAClB,SAAS,EACT,IAAI,CAAC,OAAO,EACZ,WAAW,CACZ,EACD;YACA,uCAAI,6DAAc,MAAlB,IAAI,CAAgB;SACrB;QAED,gBAAgB;QAChB,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC;QAEhC,kCAAkC;QAClC,IACE,OAAO;YACP,CAAC,uCAAI,mCAAc,KAAK,SAAS;gBAC/B,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,WAAW,CAAC,OAAO;gBAC5C,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,WAAW,CAAC,SAAS,CAAC,EACnD;YACA,uCAAI,mEAAoB,MAAxB,IAAI,CAAsB;SAC3B;QAED,MAAM,mBAAmB,GAAG,uCAAI,uEAAwB,MAA5B,IAAI,CAA0B;QAE1D,oCAAoC;QACpC,IACE,OAAO;YACP,CAAC,uCAAI,mCAAc,KAAK,SAAS;gBAC/B,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,WAAW,CAAC,OAAO;gBAC5C,mBAAmB,KAAK,uCAAI,6CAAwB,CAAC,EACvD;YACA,uCAAI,sEAAuB,MAA3B,IAAI,EAAwB,mBAAmB,CAAC;SACjD;IACH,CAAC;IAED,mBAAmB,CACjB,OAMC;QAED,MAAM,KAAK,GAAG,uCAAI,6BAAQ,CAAC,aAAa,EAAE,CAAC,KAAK,CAAC,uCAAI,6BAAQ,EAAE,OAAO,CAAC;QAEvE,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC;QAEhD,IAAI,qCAAqC,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE;YACvD,6DAA6D;YAC7D,qEAAqE;YACrE,wCAAwC;YACxC,mEAAmE;YACnE,yEAAyE;YACzE,6CAA6C;YAC7C,uEAAuE;YACvE,wEAAwE;YACxE,sEAAsE;YACtE,yEAAyE;YACzE,uBAAuB;YACvB,mEAAmE;YACnE,yCAAyC;YAEzC,sEAAsE;YACtE,gBAAgB;YAChB,uCAAI,gCAAkB,MAAM;YAC5B,uCAAI,uCAAyB,IAAI,CAAC,OAAO;YACzC,uCAAI,qCAAuB,uCAAI,mCAAc,CAAC,KAAK;SACpD;QACD,OAAO,MAAM;IACf,CAAC;IAED,gBAAgB;QACd,OAAO,uCAAI,oCAAe;IAC5B,CAAC;IAED,WAAW,CACT,MAA0C;QAE1C,MAAM,aAAa,GAAG,EAAwC;QAE9D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YAClC,MAAM,CAAC,cAAc,CAAC,aAAa,EAAE,GAAG,EAAE;gBACxC,YAAY,EAAE,KAAK;gBACnB,UAAU,EAAE,IAAI;gBAChB,GAAG,EAAE,GAAG,EAAE;oBACR,uCAAI,mCAAc,CAAC,GAAG,CAAC,GAAgC,CAAC;oBACxD,OAAO,MAAM,CAAC,GAAgC,CAAC;gBACjD,CAAC;aACF,CAAC;QACJ,CAAC,CAAC;QAEF,OAAO,aAAa;IACtB,CAAC;IAED,eAAe;QACb,OAAO,uCAAI,mCAAc;IAC3B,CAAC;IAED,OAAO,CAAC,EAAE,GAAG,OAAO,KAAqB,EAAE;QAGzC,OAAO,IAAI,CAAC,KAAK,CAAC;YAChB,GAAG,OAAO;SACX,CAAC;IACJ,CAAC;IAED,eAAe,CACb,OAMC;QAED,MAAM,gBAAgB,GAAG,uCAAI,6BAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC;QAElE,MAAM,KAAK,GAAG,uCAAI,6BAAQ;aACvB,aAAa,EAAE;aACf,KAAK,CAAC,uCAAI,6BAAQ,EAAE,gBAAgB,CAAC;QACxC,KAAK,CAAC,oBAAoB,GAAG,IAAI;QAEjC,OAAO,KAAK,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;IAC7E,CAAC;IAES,KAAK,CACb,YAAkC;QAElC,OAAO,uCAAI,6DAAc,MAAlB,IAAI,EAAe;YACxB,GAAG,YAAY;YACf,aAAa,EAAE,YAAY,CAAC,aAAa,IAAI,IAAI;SAClD,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YACX,IAAI,CAAC,YAAY,EAAE;YACnB,OAAO,uCAAI,oCAAe;QAC5B,CAAC,CAAC;IACJ,CAAC;IAmGS,YAAY,CACpB,KAAyD,EACzD,OAMC;QAED,MAAM,SAAS,GAAG,uCAAI,mCAAc;QACpC,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO;QAChC,MAAM,UAAU,GAAG,uCAAI,oCAEV;QACb,MAAM,eAAe,GAAG,uCAAI,yCAAoB;QAChD,MAAM,iBAAiB,GAAG,uCAAI,2CAAsB;QACpD,MAAM,WAAW,GAAG,KAAK,KAAK,SAAS;QACvC,MAAM,iBAAiB,GAAG,WAAW;YACnC,CAAC,CAAC,KAAK,CAAC,KAAK;YACb,CAAC,CAAC,uCAAI,+CAA0B;QAElC,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK;QACvB,IAAI,EAAE,KAAK,EAAE,cAAc,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,KAAK;QAC1D,IAAI,iBAAiB,GAAG,KAAK;QAC7B,IAAI,IAAuB;QAE3B,wDAAwD;QACxD,IAAI,OAAO,CAAC,kBAAkB,EAAE;YAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,EAAE;YAEnC,MAAM,YAAY,GAAG,CAAC,OAAO,IAAI,kBAAkB,CAAC,KAAK,EAAE,OAAO,CAAC;YAEnE,MAAM,eAAe,GACnB,OAAO,IAAI,qBAAqB,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,CAAC;YAE1E,IAAI,YAAY,IAAI,eAAe,EAAE;gBACnC,WAAW,GAAG,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC;oBAC/C,CAAC,CAAC,UAAU;oBACZ,CAAC,CAAC,QAAQ;gBACZ,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;oBACxB,MAAM,GAAG,SAAS;iBACnB;aACF;YACD,IAAI,OAAO,CAAC,kBAAkB,KAAK,aAAa,EAAE;gBAChD,WAAW,GAAG,MAAM;aACrB;SACF;QAED,wBAAwB;QACxB,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,WAAW,EAAE;YACvD,wBAAwB;YACxB,IACE,UAAU;gBACV,KAAK,CAAC,IAAI,KAAK,eAAe,EAAE,IAAI;gBACpC,OAAO,CAAC,MAAM,KAAK,uCAAI,+BAAU,EACjC;gBACA,IAAI,GAAG,uCAAI,mCAAc;aAC1B;iBAAM;gBACL,IAAI;oBACF,uCAAI,2BAAa,OAAO,CAAC,MAAM;oBAC/B,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC;oBACjC,IAAI,GAAG,WAAW,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC;oBACnD,uCAAI,+BAAiB,IAAI;oBACzB,uCAAI,8BAAgB,IAAI;iBACzB;gBAAC,OAAO,WAAW,EAAE;oBACpB,uCAAI,8BAAgB,WAAqB;iBAC1C;aACF;SACF;QACD,iBAAiB;aACZ;YACH,IAAI,GAAG,KAAK,CAAC,IAAwB;SACtC;QAED,kCAAkC;QAClC,IACE,OAAO,OAAO,CAAC,eAAe,KAAK,WAAW;YAC9C,OAAO,IAAI,KAAK,WAAW;YAC3B,MAAM,KAAK,SAAS,EACpB;YACA,IAAI,eAAe;YAEnB,2BAA2B;YAC3B,IACE,UAAU,EAAE,iBAAiB;gBAC7B,OAAO,CAAC,eAAe,KAAK,iBAAiB,EAAE,eAAe,EAC9D;gBACA,eAAe,GAAG,UAAU,CAAC,IAAI;aAClC;iBAAM;gBACL,eAAe;oBACb,OAAO,OAAO,CAAC,eAAe,KAAK,UAAU;wBAC3C,CAAC,CACG,OAAO,CAAC,eACT,CACC,uCAAI,+CAA0B,EAAE,KAAK,CAAC,IAAI,EAC1C,uCAAI,+CAAiC,CACtC;wBACH,CAAC,CAAC,OAAO,CAAC,eAAe;gBAC7B,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,eAAe,KAAK,WAAW,EAAE;oBAC5D,IAAI;wBACF,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC;wBACjD,uCAAI,8BAAgB,IAAI;qBACzB;oBAAC,OAAO,WAAW,EAAE;wBACpB,uCAAI,8BAAgB,WAAqB;qBAC1C;iBACF;aACF;YAED,IAAI,OAAO,eAAe,KAAK,WAAW,EAAE;gBAC1C,MAAM,GAAG,SAAS;gBAClB,IAAI,GAAG,WAAW,CAChB,UAAU,EAAE,IAAI,EAChB,eAA0B,EAC1B,OAAO,CACC;gBACV,iBAAiB,GAAG,IAAI;aACzB;SACF;QAED,IAAI,uCAAI,kCAAa,EAAE;YACrB,KAAK,GAAG,uCAAI,kCAAoB;YAChC,IAAI,GAAG,uCAAI,mCAAc;YACzB,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE;YAC3B,MAAM,GAAG,OAAO;SACjB;QAED,MAAM,UAAU,GAAG,WAAW,KAAK,UAAU;QAC7C,MAAM,SAAS,GAAG,MAAM,KAAK,SAAS;QACtC,MAAM,OAAO,GAAG,MAAM,KAAK,OAAO;QAElC,MAAM,SAAS,GAAG,SAAS,IAAI,UAAU;QAEzC,MAAM,MAAM,GAA2C;YACrD,MAAM;YACN,WAAW;YACX,SAAS;YACT,SAAS,EAAE,MAAM,KAAK,SAAS;YAC/B,OAAO;YACP,gBAAgB,EAAE,SAAS;YAC3B,SAAS;YACT,IAAI;YACJ,aAAa,EAAE,KAAK,CAAC,aAAa;YAClC,KAAK;YACL,cAAc;YACd,YAAY,EAAE,KAAK,CAAC,iBAAiB;YACrC,aAAa,EAAE,KAAK,CAAC,kBAAkB;YACvC,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;YACxC,SAAS,EAAE,KAAK,CAAC,eAAe,GAAG,CAAC,IAAI,KAAK,CAAC,gBAAgB,GAAG,CAAC;YAClE,mBAAmB,EACjB,KAAK,CAAC,eAAe,GAAG,iBAAiB,CAAC,eAAe;gBACzD,KAAK,CAAC,gBAAgB,GAAG,iBAAiB,CAAC,gBAAgB;YAC7D,UAAU;YACV,YAAY,EAAE,UAAU,IAAI,CAAC,SAAS;YACtC,cAAc,EAAE,OAAO,IAAI,KAAK,CAAC,aAAa,KAAK,CAAC;YACpD,QAAQ,EAAE,WAAW,KAAK,QAAQ;YAClC,iBAAiB;YACjB,cAAc,EAAE,OAAO,IAAI,KAAK,CAAC,aAAa,KAAK,CAAC;YACpD,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC;YAChC,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB;QAED,OAAO,MAA4C;IACrD,CAAC;IAED,YAAY,CAAC,aAA6B;QACxC,MAAM,UAAU,GAAG,uCAAI,oCAEV;QAEb,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,uCAAI,mCAAc,EAAE,IAAI,CAAC,OAAO,CAAC;QACtE,uCAAI,qCAAuB,uCAAI,mCAAc,CAAC,KAAK;QACnD,uCAAI,uCAAyB,IAAI,CAAC,OAAO;QAEzC,IAAI,uCAAI,yCAAoB,CAAC,IAAI,KAAK,SAAS,EAAE;YAC/C,uCAAI,2CAA6B,uCAAI,mCAAc;SACpD;QAED,yDAAyD;QACzD,IAAI,mBAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE;YAC/C,OAAM;SACP;QAED,uCAAI,gCAAkB,UAAU;QAEhC,uCAAuC;QACvC,MAAM,oBAAoB,GAAkB,EAAE;QAE9C,MAAM,qBAAqB,GAAG,GAAY,EAAE;YAC1C,IAAI,CAAC,UAAU,EAAE;gBACf,OAAO,IAAI;aACZ;YAED,MAAM,EAAE,mBAAmB,EAAE,GAAG,IAAI,CAAC,OAAO;YAC5C,MAAM,wBAAwB,GAC5B,OAAO,mBAAmB,KAAK,UAAU;gBACvC,CAAC,CAAC,mBAAmB,EAAE;gBACvB,CAAC,CAAC,mBAAmB;YAEzB,IACE,wBAAwB,KAAK,KAAK;gBAClC,CAAC,CAAC,wBAAwB,IAAI,CAAC,uCAAI,mCAAc,CAAC,IAAI,CAAC,EACvD;gBACA,OAAO,IAAI;aACZ;YAED,MAAM,aAAa,GAAG,IAAI,GAAG,CAC3B,wBAAwB,IAAI,uCAAI,mCAAc,CAC/C;YAED,IAAI,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE;gBAC7B,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC;aAC3B;YAED,OAAO,MAAM,CAAC,IAAI,CAAC,uCAAI,oCAAe,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;gBACnD,MAAM,QAAQ,GAAG,GAAgC;gBACjD,MAAM,OAAO,GAAG,uCAAI,oCAAe,CAAC,QAAQ,CAAC,KAAK,UAAU,CAAC,QAAQ,CAAC;gBACtE,OAAO,OAAO,IAAI,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC;YAC/C,CAAC,CAAC;QACJ,CAAC;QAED,IAAI,aAAa,EAAE,SAAS,KAAK,KAAK,IAAI,qBAAqB,EAAE,EAAE;YACjE,oBAAoB,CAAC,SAAS,GAAG,IAAI;SACtC;QAED,uCAAI,uDAAQ,MAAZ,IAAI,EAAS,EAAE,GAAG,oBAAoB,EAAE,GAAG,aAAa,EAAE,CAAC;IAC7D,CAAC;IAqBD,aAAa;QACX,IAAI,CAAC,YAAY,EAAE;QAEnB,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YACvB,uCAAI,6DAAc,MAAlB,IAAI,CAAgB;SACrB;IACH,CAAC;CAkBF;gxBA/WG,YAAmC;IAEnC,qFAAqF;IACrF,uCAAI,4DAAa,MAAjB,IAAI,CAAe;IAEnB,QAAQ;IACR,IAAI,OAAO,GAAoC,uCAAI,mCAAc,CAAC,KAAK,CACrE,IAAI,CAAC,OAAoE,EACzE,YAAY,CACb;IAED,IAAI,CAAC,YAAY,EAAE,YAAY,EAAE;QAC/B,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC;KAC9B;IAED,OAAO,OAAO;AAChB,CAAC;IAGC,uCAAI,kEAAmB,MAAvB,IAAI,CAAqB;IAEzB,IACE,QAAQ;QACR,uCAAI,oCAAe,CAAC,OAAO;QAC3B,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EACvC;QACA,OAAM;KACP;IAED,MAAM,IAAI,GAAG,cAAc,CACzB,uCAAI,oCAAe,CAAC,aAAa,EACjC,IAAI,CAAC,OAAO,CAAC,SAAS,CACvB;IAED,4EAA4E;IAC5E,4DAA4D;IAC5D,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC;IAExB,uCAAI,iCAAmB,UAAU,CAAC,GAAG,EAAE;QACrC,IAAI,CAAC,uCAAI,oCAAe,CAAC,OAAO,EAAE;YAChC,IAAI,CAAC,YAAY,EAAE;SACpB;IACH,CAAC,EAAE,OAAO,CAAC;AACb,CAAC;IAGC,OAAO,CACL,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,KAAK,UAAU;QACjD,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,uCAAI,mCAAc,CAAC;QAClD,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,KAAK,CAC3C;AACH,CAAC,uFAEsB,YAA4B;IACjD,uCAAI,qEAAsB,MAA1B,IAAI,CAAwB;IAE5B,uCAAI,yCAA2B,YAAY;IAE3C,IACE,QAAQ;QACR,IAAI,CAAC,OAAO,CAAC,OAAO,KAAK,KAAK;QAC9B,CAAC,cAAc,CAAC,uCAAI,6CAAwB,CAAC;QAC7C,uCAAI,6CAAwB,KAAK,CAAC,EAClC;QACA,OAAM;KACP;IAED,uCAAI,oCAAsB,WAAW,CAAC,GAAG,EAAE;QACzC,IACE,IAAI,CAAC,OAAO,CAAC,2BAA2B;YACxC,YAAY,CAAC,SAAS,EAAE,EACxB;YACA,uCAAI,6DAAc,MAAlB,IAAI,CAAgB;SACrB;IACH,CAAC,EAAE,uCAAI,6CAAwB,CAAC;AAClC,CAAC;IAGC,uCAAI,mEAAoB,MAAxB,IAAI,CAAsB;IAC1B,uCAAI,sEAAuB,MAA3B,IAAI,EAAwB,uCAAI,uEAAwB,MAA5B,IAAI,CAA0B,CAAC;AAC7D,CAAC;IAGC,IAAI,uCAAI,qCAAgB,EAAE;QACxB,YAAY,CAAC,uCAAI,qCAAgB,CAAC;QAClC,uCAAI,iCAAmB,SAAS;KACjC;AACH,CAAC;IAGC,IAAI,uCAAI,wCAAmB,EAAE;QAC3B,aAAa,CAAC,uCAAI,wCAAmB,CAAC;QACtC,uCAAI,oCAAsB,SAAS;KACpC;AACH,CAAC;IAuOC,MAAM,KAAK,GAAG,uCAAI,6BAAQ,CAAC,aAAa,EAAE,CAAC,KAAK,CAAC,uCAAI,6BAAQ,EAAE,IAAI,CAAC,OAAO,CAAC;IAE5E,IAAI,KAAK,KAAK,uCAAI,mCAAc,EAAE;QAChC,OAAM;KACP;IAED,MAAM,SAAS,GAAG,uCAAI,mCAET;IACb,uCAAI,+BAAiB,KAAK;IAC1B,uCAAI,2CAA6B,KAAK,CAAC,KAAK;IAE5C,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;QACvB,SAAS,EAAE,cAAc,CAAC,IAAI,CAAC;QAC/B,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC;KACxB;AACH,CAAC,yDAUO,aAA4B;IAClC,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;QACvB,+BAA+B;QAC/B,IAAI,aAAa,CAAC,SAAS,EAAE;YAC3B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAClC,QAAQ,CAAC,uCAAI,oCAAe,CAAC;YAC/B,CAAC,CAAC;SACH;QAED,2BAA2B;QAC3B,uCAAI,6BAAQ,CAAC,aAAa,EAAE,CAAC,MAAM,CAAC;YAClC,KAAK,EAAE,uCAAI,mCAAc;YACzB,IAAI,EAAE,wBAAwB;SAC/B,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAGH,SAAS,iBAAiB,CACxB,KAAgC,EAChC,OAAiD;IAEjD,OAAO,CACL,OAAO,CAAC,OAAO,KAAK,KAAK;QACzB,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa;QAC1B,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,OAAO,IAAI,OAAO,CAAC,YAAY,KAAK,KAAK,CAAC,CACpE;AACH,CAAC;AAED,SAAS,kBAAkB,CACzB,KAAgC,EAChC,OAAsD;IAEtD,OAAO,CACL,iBAAiB,CAAC,KAAK,EAAE,OAAO,CAAC;QACjC,CAAC,KAAK,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC;YAC5B,aAAa,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC,CACzD;AACH,CAAC;AAED,SAAS,aAAa,CACpB,KAAgC,EAChC,OAAsD,EACtD,KAEwC;IAExC,IAAI,OAAO,CAAC,OAAO,KAAK,KAAK,EAAE;QAC7B,MAAM,KAAK,GAAG,OAAO,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK;QAEhE,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,KAAK,KAAK,IAAI,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;KAC1E;IACD,OAAO,KAAK;AACd,CAAC;AAED,SAAS,qBAAqB,CAC5B,KAAgC,EAChC,SAAoC,EACpC,OAAsD,EACtD,WAA0D;IAE1D,OAAO,CACL,OAAO,CAAC,OAAO,KAAK,KAAK;QACzB,CAAC,KAAK,KAAK,SAAS,IAAI,WAAW,CAAC,OAAO,KAAK,KAAK,CAAC;QACtD,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,OAAO,CAAC;QACrD,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CACxB;AACH,CAAC;AAED,SAAS,OAAO,CACd,KAAgC,EAChC,OAAsD;IAEtD,OAAO,KAAK,CAAC,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC;AAC/C,CAAC;AAED,wEAAwE;AACxE,iEAAiE;AACjE,SAAS,qCAAqC,CAO5C,QAA2E,EAC3E,gBAAoD;IAEpD,6EAA6E;IAC7E,mDAAmD;IACnD,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,gBAAgB,EAAE,EAAE,gBAAgB,CAAC,EAAE;QACvE,OAAO,IAAI;KACZ;IAED,8DAA8D;IAC9D,OAAO,KAAK;AACd,CAAC;;;;;;;;;;;;;;;AC1vB8C;AACA;AACF;AACH;AAS1C,SAAS,UAAU,CAAI,MAAgB,EAAE,MAAgB;IACvD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC;AAED,SAAS,SAAS,CAAI,KAAe,EAAE,KAAa,EAAE,KAAQ;IAC5D,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3B,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK;IACnB,OAAO,IAAI;AACb,CAAC;AAcM,MAAM,eAEX,SAAQ,YAAqC;IAQ7C,YACE,MAAmB,EACnB,OAAoC,EACpC,OAAiD;QAEjD,KAAK,EAAE;;QAZT,0CAAoB;QACpB,0CAAoC;QACpC,2CAAqC;QACrC,6CAAgC;QAChC,2CAAkD;QAClD,kDAAiC;QAS/B,yCAAI,2BAAW,MAAM;QACrB,yCAAI,4BAAY,EAAE;QAClB,yCAAI,8BAAc,EAAE;QAEpB,yCAAI,8DAAW,MAAf,IAAI,EAAY,EAAE,CAAC;QACnB,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAC;IACnC,CAAC;IAOS,WAAW;QACnB,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,EAAE;YAC7B,yCAAI,kCAAW,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACnC,QAAQ,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE;oBAC5B,yCAAI,6DAAU,MAAd,IAAI,EAAW,QAAQ,EAAE,MAAM,CAAC;gBAClC,CAAC,CAAC;YACJ,CAAC,CAAC;SACH;IACH,CAAC;IAES,aAAa;QACrB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE;YACxB,IAAI,CAAC,OAAO,EAAE;SACf;IACH,CAAC;IAED,OAAO;QACL,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE;QAC1B,yCAAI,kCAAW,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACnC,QAAQ,CAAC,OAAO,EAAE;QACpB,CAAC,CAAC;IACJ,CAAC;IAED,UAAU,CACR,OAAoC,EACpC,OAAiD,EACjD,aAA6B;QAE7B,yCAAI,4BAAY,OAAO;QACvB,yCAAI,4BAAY,OAAO;QAEvB,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;YACvB,MAAM,aAAa,GAAG,yCAAI,kCAAW;YAErC,MAAM,kBAAkB,GAAG,yCAAI,0EAAuB,MAA3B,IAAI,EAAwB,yCAAI,gCAAS,CAAC;YAErE,yDAAyD;YACzD,kBAAkB,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CACnC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,qBAAqB,EAAE,aAAa,CAAC,CACtE;YAED,MAAM,YAAY,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC;YACtE,MAAM,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAC9C,QAAQ,CAAC,gBAAgB,EAAE,CAC5B;YAED,MAAM,cAAc,GAAG,YAAY,CAAC,IAAI,CACtC,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE,CAAC,QAAQ,KAAK,aAAa,CAAC,KAAK,CAAC,CACvD;YAED,IAAI,aAAa,CAAC,MAAM,KAAK,YAAY,CAAC,MAAM,IAAI,CAAC,cAAc,EAAE;gBACnE,OAAM;aACP;YAED,yCAAI,8BAAc,YAAY;YAC9B,yCAAI,8DAAW,MAAf,IAAI,EAAY,SAAS,CAAC;YAE1B,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE;gBACxB,OAAM;aACP;YAED,UAAU,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAC3D,QAAQ,CAAC,OAAO,EAAE;YACpB,CAAC,CAAC;YAEF,UAAU,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAC3D,QAAQ,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE;oBAC5B,yCAAI,6DAAU,MAAd,IAAI,EAAW,QAAQ,EAAE,MAAM,CAAC;gBAClC,CAAC,CAAC;YACJ,CAAC,CAAC;YAEF,yCAAI,2DAAQ,MAAZ,IAAI,CAAU;QAChB,CAAC,CAAC;IACJ,CAAC;IAED,gBAAgB;QACd,OAAO,yCAAI,uCAAgB;IAC7B,CAAC;IAED,UAAU;QACR,OAAO,yCAAI,kCAAW,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC;IACtE,CAAC;IAED,YAAY;QACV,OAAO,yCAAI,kCAAW;IACxB,CAAC;IAED,mBAAmB,CACjB,OAAoC,EACpC,OAA+C;QAM/C,MAAM,OAAO,GAAG,yCAAI,0EAAuB,MAA3B,IAAI,EAAwB,OAAO,CAAC;QACpD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CACnC,KAAK,CAAC,QAAQ,CAAC,mBAAmB,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAChE;QAED,OAAO;YACL,MAAM;YACN,CAAC,CAA8B,EAAE,EAAE;gBACjC,OAAO,yCAAI,kEAAe,MAAnB,IAAI,EAAgB,CAAC,IAAI,MAAM,EAAE,OAAO,CAAC;YAClD,CAAC;YACD,GAAG,EAAE;gBACH,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;oBAClC,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAE;oBACrC,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,mBAAmB;wBACrD,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,cAAc,CAAC;wBAC5C,CAAC,CAAC,cAAc;gBACpB,CAAC,CAAC;YACJ,CAAC;SACF;IACH,CAAC;CAqFF;gXA5MY,KAAiC;IAC1C,yCAAI,2BAAW,KAAK;IACpB,yCAAI,mCAAmB,yCAAI,kEAAe,MAAnB,IAAI,EAAgB,KAAK,EAAE,yCAAI,gCAAS,EAAE,OAAO,CAAC;AAC3E,CAAC,2EAuHC,KAAiC,EACjC,OAA+C;IAE/C,IAAI,OAAO,EAAE;QACX,OAAO,gBAAgB,CAAC,yCAAI,uCAAgB,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;KAC9D;IACD,OAAO,KAAY;AACrB,CAAC,2FAGC,OAAoC;IAEpC,MAAM,aAAa,GAAG,yCAAI,kCAAW;IACrC,MAAM,gBAAgB,GAAG,IAAI,GAAG,CAC9B,aAAa,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CACxE;IAED,MAAM,qBAAqB,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CACpD,yCAAI,+BAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAC1C;IAED,MAAM,iBAAiB,GACrB,qBAAqB,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,EAAE;QACjD,MAAM,KAAK,GAAG,gBAAgB,CAAC,GAAG,CAAC,gBAAgB,CAAC,SAAS,CAAC;QAC9D,IAAI,KAAK,IAAI,IAAI,EAAE;YACjB,OAAO,CAAC,EAAE,qBAAqB,EAAE,gBAAgB,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;SACtE;QACD,OAAO,EAAE;IACX,CAAC,CAAC;IAEJ,MAAM,kBAAkB,GAAG,IAAI,GAAG,CAChC,iBAAiB,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,qBAAqB,CAAC,SAAS,CAAC,CACxE;IACD,MAAM,gBAAgB,GAAG,qBAAqB,CAAC,MAAM,CACnD,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAC1E;IAED,MAAM,WAAW,GAAG,CAAC,OAA6B,EAAiB,EAAE;QACnE,MAAM,gBAAgB,GAAG,yCAAI,+BAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC;QAClE,MAAM,eAAe,GAAG,yCAAI,kCAAW,CAAC,IAAI,CAC1C,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,KAAK,gBAAgB,CAAC,SAAS,CAC1D;QACD,OAAO,CACL,eAAe,IAAI,IAAI,aAAa,CAAC,yCAAI,+BAAQ,EAAE,gBAAgB,CAAC,CACrE;IACH,CAAC;IAED,MAAM,oBAAoB,GACxB,gBAAgB,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;QAC/B,OAAO;YACL,qBAAqB,EAAE,OAAO;YAC9B,QAAQ,EAAE,WAAW,CAAC,OAAO,CAAC;SAC/B;IACH,CAAC,CAAC;IAEJ,MAAM,2BAA2B,GAAG,CAClC,CAAqB,EACrB,CAAqB,EACb,EAAE,CACV,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,qBAAqB,CAAC;QACtD,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,qBAAqB,CAAC;IAExD,OAAO,iBAAiB;SACrB,MAAM,CAAC,oBAAoB,CAAC;SAC5B,IAAI,CAAC,2BAA2B,CAAC;AACtC,CAAC,iEAES,QAAuB,EAAE,MAA2B;IAC5D,MAAM,KAAK,GAAG,yCAAI,kCAAW,CAAC,OAAO,CAAC,QAAQ,CAAC;IAC/C,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB,yCAAI,8DAAW,MAAf,IAAI,EAAY,SAAS,CAAC,yCAAI,+BAAQ,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACvD,yCAAI,2DAAQ,MAAZ,IAAI,CAAU;KACf;AACH,CAAC;IAGC,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;QACvB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAClC,QAAQ,CAAC,yCAAI,+BAAQ,CAAC;QACxB,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;;;ACtQ4C;AAKf;AAmBzB,MAAM,qBAOX,SAAQ,aAMT;IAcC,qEAAqE;IACrE,YACE,MAAmB,EACnB,OAOC;QAED,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC;IACxB,CAAC;IAES,WAAW;QACnB,KAAK,CAAC,WAAW,EAAE;QACnB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;QAClD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;IAC5D,CAAC;IAED,UAAU,CACR,OAOC,EACD,aAA6B;QAE7B,KAAK,CAAC,UAAU,CACd;YACE,GAAG,OAAO;YACV,QAAQ,EAAE,qBAAqB,EAAE;SAClC,EACD,aAAa,CACd;IACH,CAAC;IAED,mBAAmB,CACjB,OAOC;QAED,OAAO,CAAC,QAAQ,GAAG,qBAAqB,EAAE;QAC1C,OAAO,KAAK,CAAC,mBAAmB,CAAC,OAAO,CAGvC;IACH,CAAC;IAED,aAAa,CACX,OAA8B;QAE9B,OAAO,IAAI,CAAC,KAAK,CAAC;YAChB,GAAG,OAAO;YACV,IAAI,EAAE;gBACJ,SAAS,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE;aACpC;SACF,CAAC;IACJ,CAAC;IAED,iBAAiB,CACf,OAAkC;QAElC,OAAO,IAAI,CAAC,KAAK,CAAC;YAChB,GAAG,OAAO;YACV,IAAI,EAAE;gBACJ,SAAS,EAAE,EAAE,SAAS,EAAE,UAAU,EAAE;aACrC;SACF,CAAC;IACJ,CAAC;IAES,YAAY,CACpB,KAKC,EACD,OAOC;QAED,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK;QACvB,MAAM,MAAM,GAAG,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC;QAEjD,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,MAAM;QAE3C,MAAM,kBAAkB,GACtB,UAAU,IAAI,KAAK,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,KAAK,SAAS;QAEnE,MAAM,sBAAsB,GAC1B,UAAU,IAAI,KAAK,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,KAAK,UAAU;QAEpE,OAAO;YACL,GAAG,MAAM;YACT,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,WAAW,EAAE,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC;YAC7C,eAAe,EAAE,eAAe,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC;YACrD,kBAAkB;YAClB,sBAAsB;YACtB,YAAY,EACV,YAAY,IAAI,CAAC,kBAAkB,IAAI,CAAC,sBAAsB;SACjE;IACH,CAAC;CACF;;;;;;;;;;;;;;;AC1K2C;AACG;AACF;AACS;AAgBtD,QAAQ;AAED,MAAM,gBAKX,SAAQ,YAET;IASC,YACE,MAAmB,EACnB,OAAqE;QAErE,KAAK,EAAE;;QAVT,2CAAoB;QACpB,0CACE,SAAU;QACZ,oDAAgE;QAChE,kDAAmE;QAQjE,0CAAI,4BAAW,MAAM;QACrB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;QACxB,IAAI,CAAC,WAAW,EAAE;QAClB,0CAAI,mEAAc,MAAlB,IAAI,CAAgB;IACtB,CAAC;IAES,WAAW;QACnB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACpC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;IACpC,CAAC;IAED,UAAU,CACR,OAAqE;QAErE,MAAM,WAAW,GAAG,IAAI,CAAC,OAEZ;QACb,IAAI,CAAC,OAAO,GAAG,0CAAI,gCAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC;QAC3D,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE;YACnD,0CAAI,gCAAQ,CAAC,gBAAgB,EAAE,CAAC,MAAM,CAAC;gBACrC,IAAI,EAAE,wBAAwB;gBAC9B,QAAQ,EAAE,0CAAI,yCAAiB;gBAC/B,QAAQ,EAAE,IAAI;aACf,CAAC;SACH;QACD,0CAAI,yCAAiB,EAAE,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;QAE/C,IACE,WAAW,EAAE,WAAW;YACxB,IAAI,CAAC,OAAO,CAAC,WAAW;YACxB,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,EACtE;YACA,IAAI,CAAC,KAAK,EAAE;SACb;IACH,CAAC;IAES,aAAa;QACrB,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE;YACxB,0CAAI,yCAAiB,EAAE,cAAc,CAAC,IAAI,CAAC;SAC5C;IACH,CAAC;IAED,gBAAgB,CAAC,MAAmD;QAClE,0CAAI,mEAAc,MAAlB,IAAI,CAAgB;QAEpB,0CAAI,6DAAQ,MAAZ,IAAI,EAAS,MAAM,CAAC;IACtB,CAAC;IAED,gBAAgB;QAMd,OAAO,0CAAI,uCAAe;IAC5B,CAAC;IAED,KAAK;QACH,gGAAgG;QAChG,iDAAiD;QACjD,0CAAI,yCAAiB,EAAE,cAAc,CAAC,IAAI,CAAC;QAC3C,0CAAI,qCAAoB,SAAS;QACjC,0CAAI,mEAAc,MAAlB,IAAI,CAAgB;QACpB,0CAAI,6DAAQ,MAAZ,IAAI,CAAU;IAChB,CAAC;IAED,MAAM,CACJ,SAAqB,EACrB,OAA4D;QAE5D,0CAAI,mCAAkB,OAAO;QAE7B,0CAAI,yCAAiB,EAAE,cAAc,CAAC,IAAI,CAAC;QAE3C,0CAAI,qCAAoB,0CAAI,gCAAQ;aACjC,gBAAgB,EAAE;aAClB,KAAK,CAAC,0CAAI,gCAAQ,EAAE,IAAI,CAAC,OAAO,CAAC;QAEpC,0CAAI,yCAAiB,CAAC,WAAW,CAAC,IAAI,CAAC;QAEvC,OAAO,0CAAI,yCAAiB,CAAC,OAAO,CAAC,SAAS,CAAC;IACjD,CAAC;CA6CF;;IA1CG,MAAM,KAAK,GACT,0CAAI,yCAAiB,EAAE,KAAK;QAC5B,wBAAe,EAAuC;IAExD,0CAAI,mCAAkB;QACpB,GAAG,KAAK;QACR,SAAS,EAAE,KAAK,CAAC,MAAM,KAAK,SAAS;QACrC,SAAS,EAAE,KAAK,CAAC,MAAM,KAAK,SAAS;QACrC,OAAO,EAAE,KAAK,CAAC,MAAM,KAAK,OAAO;QACjC,MAAM,EAAE,KAAK,CAAC,MAAM,KAAK,MAAM;QAC/B,MAAM,EAAE,IAAI,CAAC,MAAM;QACnB,KAAK,EAAE,IAAI,CAAC,KAAK;KAC6C;AAClE,CAAC,+DAEO,MAAoD;IAC1D,aAAa,CAAC,KAAK,CAAC,GAAG,EAAE;QACvB,qCAAqC;QACrC,IAAI,0CAAI,uCAAe,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YAC9C,MAAM,SAAS,GAAG,0CAAI,uCAAe,CAAC,SAAU;YAChD,MAAM,OAAO,GAAG,0CAAI,uCAAe,CAAC,OAAO;YAE3C,IAAI,MAAM,EAAE,IAAI,KAAK,SAAS,EAAE;gBAC9B,0CAAI,uCAAe,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,EAAE,OAAQ,CAAC;gBACjE,0CAAI,uCAAe,CAAC,SAAS,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC;aACvE;iBAAM,IAAI,MAAM,EAAE,IAAI,KAAK,OAAO,EAAE;gBACnC,0CAAI,uCAAe,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,CAAC;gBAC/D,0CAAI,uCAAe,CAAC,SAAS,EAAE,CAC7B,SAAS,EACT,MAAM,CAAC,KAAK,EACZ,SAAS,EACT,OAAO,CACR;aACF;SACF;QAED,6BAA6B;QAC7B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAClC,QAAQ,CAAC,0CAAI,uCAAe,CAAC;QAC/B,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;;;AC5HH,YAAY;AAEZ,SAAS,iBAAiB,CAAC,QAAkB;IAC3C,OAAO;QACL,WAAW,EAAE,QAAQ,CAAC,OAAO,CAAC,WAAW;QACzC,KAAK,EAAE,QAAQ,CAAC,KAAK;QACrB,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC;KAC9C;AACH,CAAC;AAED,0EAA0E;AAC1E,2EAA2E;AAC3E,2EAA2E;AAC3E,iEAAiE;AACjE,SAAS,cAAc,CAAC,KAAY;IAClC,OAAO;QACL,KAAK,EAAE,KAAK,CAAC,KAAK;QAClB,QAAQ,EAAE,KAAK,CAAC,QAAQ;QACxB,SAAS,EAAE,KAAK,CAAC,SAAS;QAC1B,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC;KACxC;AACH,CAAC;AAEM,SAAS,8BAA8B,CAAC,QAAkB;IAC/D,OAAO,QAAQ,CAAC,KAAK,CAAC,QAAQ;AAChC,CAAC;AAEM,SAAS,2BAA2B,CAAC,KAAY;IACtD,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,SAAS;AACzC,CAAC;AAEM,SAAS,SAAS,CACvB,MAAmB,EACnB,UAA4B,EAAE;IAE9B,MAAM,cAAc,GAClB,OAAO,CAAC,uBAAuB,IAAI,8BAA8B;IAEnE,MAAM,SAAS,GAAG,MAAM;SACrB,gBAAgB,EAAE;SAClB,MAAM,EAAE;SACR,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CACpB,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAC9D;IAEH,MAAM,WAAW,GACf,OAAO,CAAC,oBAAoB,IAAI,2BAA2B;IAE7D,MAAM,OAAO,GAAG,MAAM;SACnB,aAAa,EAAE;SACf,MAAM,EAAE;SACR,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAE1E,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE;AAC/B,CAAC;AAEM,SAAS,OAAO,CACrB,MAAmB,EACnB,eAAwB,EACxB,OAAwB;IAExB,IAAI,OAAO,eAAe,KAAK,QAAQ,IAAI,eAAe,KAAK,IAAI,EAAE;QACnE,OAAM;KACP;IAED,MAAM,aAAa,GAAG,MAAM,CAAC,gBAAgB,EAAE;IAC/C,MAAM,UAAU,GAAG,MAAM,CAAC,aAAa,EAAE;IAEzC,uEAAuE;IACvE,MAAM,SAAS,GAAI,eAAmC,CAAC,SAAS,IAAI,EAAE;IACtE,uEAAuE;IACvE,MAAM,OAAO,GAAI,eAAmC,CAAC,OAAO,IAAI,EAAE;IAElE,SAAS,CAAC,OAAO,CAAC,CAAC,kBAAkB,EAAE,EAAE;QACvC,aAAa,CAAC,KAAK,CACjB,MAAM,EACN;YACE,GAAG,OAAO,EAAE,cAAc,EAAE,SAAS;YACrC,WAAW,EAAE,kBAAkB,CAAC,WAAW;YAC3C,IAAI,EAAE,kBAAkB,CAAC,IAAI;SAC9B,EACD,kBAAkB,CAAC,KAAK,CACzB;IACH,CAAC,CAAC;IAEF,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE;QACvD,MAAM,KAAK,GAAG,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC;QAEvC,6DAA6D;QAC7D,IAAI,KAAK,EAAE;YACT,IAAI,KAAK,CAAC,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC,aAAa,EAAE;gBACnD,yCAAyC;gBACzC,iDAAiD;gBACjD,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,GAAG,oBAAoB,EAAE,GAAG,KAAK;gBAChE,KAAK,CAAC,QAAQ,CAAC,oBAAoB,CAAC;aACrC;YACD,OAAM;SACP;QAED,gBAAgB;QAChB,UAAU,CAAC,KAAK,CACd,MAAM,EACN;YACE,GAAG,OAAO,EAAE,cAAc,EAAE,OAAO;YACnC,QAAQ;YACR,SAAS;YACT,IAAI;SACL;QACD,sCAAsC;QACtC,qDAAqD;QACrD;YACE,GAAG,KAAK;YACR,WAAW,EAAE,MAAM;SACpB,CACF;IACH,CAAC,CAAC;AACJ,CAAC;;;AChKD,0BAA0B;AAEgB;AACD;AAEE;AACI;AACI;AACY;AAChB;AAEM;AACN;AACF;AACE;AAO/B;AAE4B;AAMxB;AAEpB,QAAQ;AACe;AAEQ","sources":["webpack://ReactQueryCore/webpack/universalModuleDefinition","webpack://ReactQueryCore/webpack/bootstrap","webpack://ReactQueryCore/webpack/runtime/define property getters","webpack://ReactQueryCore/webpack/runtime/hasOwnProperty shorthand","webpack://ReactQueryCore/webpack/runtime/make namespace object","webpack://ReactQueryCore/./packages/query-core/src/subscribable.ts","webpack://ReactQueryCore/./packages/query-core/src/utils.ts","webpack://ReactQueryCore/./packages/query-core/src/focusManager.ts","webpack://ReactQueryCore/./packages/query-core/src/onlineManager.ts","webpack://ReactQueryCore/./packages/query-core/src/retryer.ts","webpack://ReactQueryCore/./packages/query-core/src/notifyManager.ts","webpack://ReactQueryCore/./packages/query-core/src/removable.ts","webpack://ReactQueryCore/./packages/query-core/src/query.ts","webpack://ReactQueryCore/./packages/query-core/src/queryCache.ts","webpack://ReactQueryCore/./packages/query-core/src/mutation.ts","webpack://ReactQueryCore/./packages/query-core/src/mutationCache.ts","webpack://ReactQueryCore/./packages/query-core/src/infiniteQueryBehavior.ts","webpack://ReactQueryCore/./packages/query-core/src/queryClient.ts","webpack://ReactQueryCore/./packages/query-core/src/queryObserver.ts","webpack://ReactQueryCore/./packages/query-core/src/queriesObserver.ts","webpack://ReactQueryCore/./packages/query-core/src/infiniteQueryObserver.ts","webpack://ReactQueryCore/./packages/query-core/src/mutationObserver.ts","webpack://ReactQueryCore/./packages/query-core/src/hydration.ts","webpack://ReactQueryCore/./packages/query-core/src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ReactQueryCore\"] = factory();\n\telse\n\t\troot[\"ReactQueryCore\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: Set<TListener>\n\n  constructor() {\n    this.listeners = new Set()\n    this.subscribe = this.subscribe.bind(this)\n  }\n\n  subscribe(listener: TListener): () => void {\n    this.listeners.add(listener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners.delete(listener)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.size > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport type {\n  FetchStatus,\n  MutationKey,\n  MutationStatus,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Filter to active queries, inactive queries or all queries\n   */\n  type?: QueryTypeFilter\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include queries matching their fetchStatus\n   */\n  fetchStatus?: FetchStatus\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Filter by mutation status\n   */\n  status?: MutationStatus\n}\n\nexport type Updater<TInput, TOutput> = TOutput | ((input: TInput) => TOutput)\n\nexport type QueryTypeFilter = 'all' | 'active' | 'inactive'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined' || 'Deno' in window\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput,\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as (_: TInput) => TOutput)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>,\n): boolean {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (queryKey) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive()\n    if (type === 'active' && !isActive) {\n      return false\n    }\n    if (type === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (\n    typeof fetchStatus !== 'undefined' &&\n    fetchStatus !== query.state.fetchStatus\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>,\n): boolean {\n  const { exact, status, predicate, mutationKey } = filters\n  if (mutationKey) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (status && mutation.state.status !== status) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>,\n): string {\n  const hashFn = options?.queryKeyHashFn || hashKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query & mutation keys hash function.\n * Hashes the value into a stable hash.\n */\nexport function hashKey(queryKey: QueryKey | MutationKey): string {\n  return JSON.stringify(queryKey, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val,\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean\nexport function partialMatchKey(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some((key) => !partialMatchKey(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aItems = array ? a : Object.keys(a)\n    const aSize = aItems.length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      if (\n        !array &&\n        a[key] === undefined &&\n        b[key] === undefined &&\n        aItems.includes(key)\n      ) {\n        copy[key] = undefined\n        equalItems++\n      } else {\n        copy[key] = replaceEqualDeep(a[key], b[key])\n        if (copy[key] === a[key] && a[key] !== undefined) {\n          equalItems++\n        }\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport function isPlainArray(value: unknown) {\n  return Array.isArray(value) && value.length === Object.keys(value).length\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has no constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms)\n  })\n}\n\nexport function replaceData<\n  TData,\n  TOptions extends QueryOptions<any, any, any, any>,\n>(prevData: TData | undefined, data: TData, options: TOptions): TData {\n  if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data)\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data)\n  }\n  return data\n}\n\nexport function keepPreviousData<T>(\n  previousData: T | undefined,\n): T | undefined {\n  return previousData\n}\n\nexport function addToEnd<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [...items, item]\n  return max && newItems.length > max ? newItems.slice(1) : newItems\n}\n\nexport function addToStart<T>(items: Array<T>, item: T, max = 0): Array<T> {\n  const newItems = [item, ...items]\n  return max && newItems.length > max ? newItems.slice(0, -1) : newItems\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void,\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  #focused?: boolean\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onFocus) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibilitychange\n        window.addEventListener('visibilitychange', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n        }\n      }\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    const changed = this.#focused !== focused\n    if (changed) {\n      this.#focused = focused\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach((listener) => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.#focused === 'boolean') {\n      return this.#focused\n    }\n\n    // document global can be unavailable in react native\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    return globalThis.document?.visibilityState !== 'hidden'\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (online: boolean) => void\ntype SetupFn = (setOnline: Listener) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable<Listener> {\n  #online = true\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true)\n        const offlineListener = () => onOnline(false)\n        // Listen to online\n        window.addEventListener('online', onlineListener, false)\n        window.addEventListener('offline', offlineListener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onlineListener)\n          window.removeEventListener('offline', offlineListener)\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup(this.setOnline.bind(this))\n  }\n\n  setOnline(online: boolean): void {\n    const changed = this.#online !== online\n\n    if (changed) {\n      this.#online = online\n      this.listeners.forEach((listener) => {\n        listener(online)\n      })\n    }\n  }\n\n  isOnline(): boolean {\n    return this.#online\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { isServer, sleep } from './utils'\nimport type { CancelOptions, DefaultError, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = DefaultError> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = DefaultError>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => boolean) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        const canContinue = isResolved || !shouldPause()\n        if (canContinue) {\n          continueResolve(value)\n        }\n        return canContinue\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? (isServer ? 0 : 3)\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n            return\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn?.()\n      return didContinue ? promise : Promise.resolve()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n","// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn: ScheduleFunction = (cb) => setTimeout(cb, 0)\n\n  const setScheduler = (fn: ScheduleFunction) => {\n    scheduleFn = fn\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Array<unknown>>(\n    callback: BatchCallsCallback<T>,\n  ): BatchCallsCallback<T> => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n    setScheduler,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n","import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  gcTime!: number\n  #gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.gcTime)) {\n      this.#gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.gcTime)\n    }\n  }\n\n  protected updateGcTime(newGcTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no gcTime is set\n    this.gcTime = Math.max(\n      this.gcTime || 0,\n      newGcTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.#gcTimeout) {\n      clearTimeout(this.#gcTimeout)\n      this.#gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n","import { noop, replaceData, timeUntilStale } from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n  isFetchingOptimistic?: boolean\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #promise?: Promise<TData>\n  #retryer?: Retryer<TData>\n  #observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.#setOptions(config.options)\n    this.#observers = []\n    this.#cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = config.state || getDefaultState(this.options)\n    this.state = this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  #setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.#observers.some(\n      (observer) => observer.options.enabled !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    return this.getObserversCount() > 0 && !this.isActive()\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.#observers.some((observer) => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.#observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.#observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.#observers.includes(observer)) {\n      this.#observers = this.#observers.filter((x) => x !== observer)\n\n      if (!this.#observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.#observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.#promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.#setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.#observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.#setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Create query function context\n    const queryFnContext: Omit<QueryFunctionContext<TQueryKey>, 'signal'> = {\n      queryKey: this.queryKey,\n      meta: this.meta,\n    }\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    addSignalProperty(queryFnContext)\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject(\n          new Error(`Missing queryFn: '${this.options.queryHash}'`),\n        )\n      }\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          this.options.queryFn,\n          queryFnContext as QueryFunctionContext<TQueryKey>,\n          this as unknown as Query,\n        )\n      }\n\n      return this.options.queryFn(\n        queryFnContext as QueryFunctionContext<TQueryKey>,\n      )\n    }\n\n    // Trigger behavior hook\n    const context: Omit<\n      FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      'signal'\n    > = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    addSignalProperty(context)\n\n    this.options.behavior?.onFetch(\n      context as FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n      this as unknown as Query,\n    )\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      }\n      this.isFetchingOptimistic = false\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (typeof data === 'undefined') {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        this.setData(data)\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc()\n        }\n        this.isFetchingOptimistic = false\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n    })\n\n    this.#promise = this.#retryer.promise\n\n    return this.#promise\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            fetchFailureCount: 0,\n            fetchFailureReason: null,\n            fetchMeta: action.meta ?? null,\n            fetchStatus: canFetch(this.options.networkMode)\n              ? 'fetching'\n              : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'pending',\n            }),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error as unknown\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error: error as TError,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error as TError,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = typeof data !== 'undefined'\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n","import { hashQueryKeyByOptions, matchQuery } from './utils'\nimport { Query } from './query'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport type { QueryFilters } from './utils'\nimport type { Action, QueryState } from './query'\nimport type {\n  DefaultError,\n  NotifyEvent,\n  QueryKey,\n  QueryOptions,\n  WithRequired,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (\n    error: DefaultError,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    query: Query<unknown, unknown, unknown>,\n  ) => void\n}\n\ninterface NotifyEventQueryAdded extends NotifyEvent {\n  type: 'added'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved extends NotifyEvent {\n  type: 'removed'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated extends NotifyEvent {\n  type: 'updated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventQueryObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverResultsUpdated extends NotifyEvent {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\nexport type QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void\n\nexport interface QueryStore {\n  has: (queryHash: string) => boolean\n  set: (queryHash: string, query: Query) => void\n  get: (queryHash: string) => Query | undefined\n  delete: (queryHash: string) => void\n  values: () => IterableIterator<Query>\n}\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  #queries: QueryStore\n\n  constructor(public config: QueryCacheConfig = {}) {\n    super()\n    this.#queries = new Map<string, Query>()\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.#queries.has(query.queryHash)) {\n      this.#queries.set(query.queryHash, query)\n\n      this.notify({\n        type: 'added',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.#queries.get(query.queryHash)\n\n    if (queryInMap) {\n      query.destroy()\n\n      if (queryInMap === query) {\n        this.#queries.delete(query.queryHash)\n      }\n\n      this.notify({ type: 'removed', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    queryHash: string,\n  ): Query<TQueryFnData, TError, TData, TQueryKey> | undefined {\n    return this.#queries.get(queryHash) as\n      | Query<TQueryFnData, TError, TData, TQueryKey>\n      | undefined\n  }\n\n  getAll(): Array<Query> {\n    return [...this.#queries.values()]\n  }\n\n  find<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData>(\n    filters: WithRequired<QueryFilters, 'queryKey'>,\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.getAll().find((query) =>\n      matchQuery(defaultedFilters, query),\n    ) as Query<TQueryFnData, TError, TData> | undefined\n  }\n\n  findAll(filters: QueryFilters = {}): Array<Query> {\n    const queries = this.getAll()\n    return Object.keys(filters).length > 0\n      ? queries.filter((query) => matchQuery(filters, query))\n      : queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.getAll().forEach((query) => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { canFetch, createRetryer } from './retryer'\nimport type {\n  DefaultError,\n  MutationMeta,\n  MutationOptions,\n  MutationStatus,\n} from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n  submittedAt: number\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface PendingAction<TVariables, TContext> {\n  type: 'pending'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | PendingAction<TVariables, TContext>\n  | PauseAction\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  readonly mutationId: number\n\n  #observers: Array<MutationObserver<TData, TError, TVariables, TContext>>\n  #defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  #mutationCache: MutationCache\n  #retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.mutationId = config.mutationId\n    this.#defaultOptions = config.defaultOptions\n    this.#mutationCache = config.mutationCache\n    this.#observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options?: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.#mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.#observers = this.#observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.#mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === 'pending') {\n        this.scheduleGc()\n      } else {\n        this.#mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return (\n      this.#retryer?.continue() ??\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables!)\n    )\n  }\n\n  async execute(variables: TVariables): Promise<TData> {\n    const executeMutation = () => {\n      this.#retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject(new Error('No mutationFn found'))\n          }\n          return this.options.mutationFn(variables)\n        },\n        onFail: (failureCount, error) => {\n          this.#dispatch({ type: 'failed', failureCount, error })\n        },\n        onPause: () => {\n          this.#dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.#dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.#retryer.promise\n    }\n\n    const restored = this.state.status === 'pending'\n\n    try {\n      if (!restored) {\n        this.#dispatch({ type: 'pending', variables })\n        // Notify cache callback\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(variables)\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: 'pending',\n            context,\n            variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(data, variables, this.state.context!)\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(data, null, variables, this.state.context)\n\n      this.#dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.#mutationCache.config.onError?.(\n          error as any,\n          variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onError?.(\n          error as TError,\n          variables,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.#mutationCache.config.onSettled?.(\n          undefined,\n          error as any,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          variables,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.#dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  #dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'pending':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'pending',\n            variables: action.variables,\n            submittedAt: Date.now(),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.#mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n    submittedAt: 0,\n  }\n}\n","import { notifyManager } from './notifyManager'\nimport { Mutation } from './mutation'\nimport { matchMutation, noop } from './utils'\nimport { Subscribable } from './subscribable'\nimport type { MutationObserver } from './mutationObserver'\nimport type { DefaultError, MutationOptions, NotifyEvent } from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Action, MutationState } from './mutation'\nimport type { MutationFilters } from './utils'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: DefaultError,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n}\n\ninterface NotifyEventMutationAdded extends NotifyEvent {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved extends NotifyEvent {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated extends NotifyEvent {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\nexport type MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  #mutations: Array<Mutation<any, any, any, any>>\n  #mutationId: number\n  #resuming: Promise<unknown> | undefined\n\n  constructor(public config: MutationCacheConfig = {}) {\n    super()\n    this.#mutations = []\n    this.#mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.#mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.#mutations = this.#mutations.filter((x) => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.#mutations.forEach((mutation) => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Array<Mutation> {\n    return this.#mutations\n  }\n\n  find<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = any,\n    TContext = unknown,\n  >(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.#mutations.find((mutation) =>\n      matchMutation(defaultedFilters, mutation),\n    )\n  }\n\n  findAll(filters: MutationFilters = {}): Array<Mutation> {\n    return this.#mutations.filter((mutation) =>\n      matchMutation(filters, mutation),\n    )\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    this.#resuming = (this.#resuming ?? Promise.resolve())\n      .then(() => {\n        const pausedMutations = this.#mutations.filter((x) => x.state.isPaused)\n        return notifyManager.batch(() =>\n          pausedMutations.reduce(\n            (promise, mutation) =>\n              promise.then(() => mutation.continue().catch(noop)),\n            Promise.resolve() as Promise<unknown>,\n          ),\n        )\n      })\n      .then(() => {\n        this.#resuming = undefined\n      })\n\n    return this.#resuming\n  }\n}\n","import { addToEnd, addToStart } from './utils'\nimport type { QueryBehavior } from './query'\nimport type {\n  InfiniteData,\n  InfiniteQueryPageParamsOptions,\n  QueryFunctionContext,\n  QueryKey,\n} from './types'\n\nexport function infiniteQueryBehavior<TQueryFnData, TError, TData, TPageParam>(\n  pages?: number,\n): QueryBehavior<TQueryFnData, TError, InfiniteData<TData, TPageParam>> {\n  return {\n    onFetch: (context, query) => {\n      const fetchFn = async () => {\n        const options = context.options as InfiniteQueryPageParamsOptions<TData>\n        const direction = context.fetchOptions?.meta?.fetchMore?.direction\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        const empty = { pages: [], pageParams: [] }\n        let cancelled = false\n\n        const addSignalProperty = (object: unknown) => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              if (context.signal.aborted) {\n                cancelled = true\n              } else {\n                context.signal.addEventListener('abort', () => {\n                  cancelled = true\n                })\n              }\n              return context.signal\n            },\n          })\n        }\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn ||\n          (() =>\n            Promise.reject(\n              new Error(`Missing queryFn: '${context.options.queryHash}'`),\n            ))\n\n        // Create function to fetch a page\n        const fetchPage = async (\n          data: InfiniteData<unknown>,\n          param: unknown,\n          previous?: boolean,\n        ): Promise<InfiniteData<unknown>> => {\n          if (cancelled) {\n            return Promise.reject()\n          }\n\n          if (param == null && data.pages.length) {\n            return Promise.resolve(data)\n          }\n\n          const queryFnContext: Omit<\n            QueryFunctionContext<QueryKey, unknown>,\n            'signal'\n          > = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            direction: previous ? 'backward' : 'forward',\n            meta: context.options.meta,\n          }\n\n          addSignalProperty(queryFnContext)\n\n          const page = await queryFn(\n            queryFnContext as QueryFunctionContext<QueryKey, unknown>,\n          )\n\n          const { maxPages } = context.options\n          const addTo = previous ? addToStart : addToEnd\n\n          return {\n            pages: addTo(data.pages, page, maxPages),\n            pageParams: addTo(data.pageParams, param, maxPages),\n          }\n        }\n\n        let result: InfiniteData<unknown>\n\n        // fetch next / previous page?\n        if (direction && oldPages.length) {\n          const previous = direction === 'backward'\n          const pageParamFn = previous ? getPreviousPageParam : getNextPageParam\n          const oldData = {\n            pages: oldPages,\n            pageParams: oldPageParams,\n          }\n          const param = pageParamFn(options, oldData)\n\n          result = await fetchPage(oldData, param, previous)\n        } else {\n          // Fetch first page\n          result = await fetchPage(\n            empty,\n            oldPageParams[0] ?? options.initialPageParam,\n          )\n\n          const remainingPages = pages ?? oldPages.length\n\n          // Fetch remaining pages\n          for (let i = 1; i < remainingPages; i++) {\n            const param = getNextPageParam(options, result)\n            result = await fetchPage(result, param)\n          }\n        }\n\n        return result\n      }\n      if (context.options.persister) {\n        context.fetchFn = () => {\n          return context.options.persister?.(\n            fetchFn as any,\n            {\n              queryKey: context.queryKey,\n              meta: context.options.meta,\n              signal: context.signal,\n            },\n            query,\n          )\n        }\n      } else {\n        context.fetchFn = fetchFn\n      }\n    },\n  }\n}\n\nfunction getNextPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  const lastIndex = pages.length - 1\n  return options.getNextPageParam(\n    pages[lastIndex],\n    pages,\n    pageParams[lastIndex],\n    pageParams,\n  )\n}\n\nfunction getPreviousPageParam(\n  options: InfiniteQueryPageParamsOptions<any>,\n  { pages, pageParams }: InfiniteData<unknown>,\n): unknown | undefined {\n  return options.getPreviousPageParam?.(\n    pages[0],\n    pages,\n    pageParams[0],\n    pageParams,\n  )\n}\n\n/**\n * Checks if there is a next page.\n */\nexport function hasNextPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data) return false\n  return getNextPageParam(options, data) != null\n}\n\n/**\n * Checks if there is a previous page.\n */\nexport function hasPreviousPage(\n  options: InfiniteQueryPageParamsOptions<any, any>,\n  data?: InfiniteData<unknown>,\n): boolean {\n  if (!data || !options.getPreviousPageParam) return false\n  return getPreviousPageParam(options, data) != null\n}\n","import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type { DataTag, NoInfer } from './types'\nimport type { QueryState } from './query'\nimport type {\n  CancelOptions,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  getQueryData<\n    TQueryFnData = unknown,\n    TaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(queryKey: TaggedQueryKey): TInferredQueryFnData | undefined\n  getQueryData(queryKey: QueryKey) {\n    return this.#queryCache.find({ queryKey })?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const cachedData = this.getQueryData<TData>(options.queryKey)\n\n    return cachedData !== undefined\n      ? Promise.resolve(cachedData)\n      : this.fetchQuery(options)\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.getQueryCache()\n      .findAll(filters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TQueryFnData | undefined\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): TInferredQueryFnData | undefined {\n    const query = this.#queryCache.find<TInferredQueryFnData>({ queryKey })\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (typeof data === 'undefined') {\n      return undefined\n    }\n\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<TQueryFnData = unknown, TError = DefaultError>(\n    queryKey: QueryKey,\n  ): QueryState<TQueryFnData, TError> | undefined {\n    return this.#queryCache.find<TQueryFnData, TError>({ queryKey })?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void> {\n    const queryCache = this.#queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(\n    filters: QueryFilters = {},\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters: InvalidateQueryFilters = {},\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters: RefetchQueryFilters = {},\n    options?: RefetchOptions,\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options?.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    return this.#mutationCache.resumePausedMutations()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: Partial<\n      Omit<QueryObserverOptions<unknown, any, any, any>, 'queryKey'>\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): QueryObserverOptions<any, any, any, any, any> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    let result: QueryObserverOptions<any, any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: Omit<MutationObserverOptions<any, any, any, any>, 'mutationKey'>,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    let result: MutationObserverOptions<any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options?:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options?._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...(options?.queryKey && this.getQueryDefaults(options.queryKey)),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (typeof defaultedOptions.throwOnError === 'undefined') {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (\n      typeof defaultedOptions.networkMode === 'undefined' &&\n      defaultedOptions.persister\n    ) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n","import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch } from './retryer'\nimport type { QueryClient } from './queryClient'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  listeners?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps: Set<keyof QueryObserverResult> = new Set()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.#updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult everytime\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.#trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.#currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.#currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let { error, errorUpdatedAt, fetchStatus, status } = state\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!state.dataUpdatedAt) {\n          status = 'pending'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Select data if needed\n    if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.#selectError = null\n          } catch (selectError) {\n            this.#selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: state.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = {}\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.#notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n","import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\ntype CombineFn<TCombinedResult> = (\n  result: Array<QueryObserverResult>,\n) => TCombinedResult\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: CombineFn<TCombinedResult>\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #observers: Array<QueryObserver>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #combinedResult!: TCombinedResult\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#queries = []\n    this.#observers = []\n\n    this.#setResult([])\n    this.setQueries(queries, options)\n  }\n\n  #setResult(value: Array<QueryObserverResult>) {\n    this.#result = value\n    this.#combinedResult = this.#combineResult(value, this.#options?.combine)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#setResult(newResult)\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): TCombinedResult {\n    return this.#combinedResult\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result, combine)\n      },\n      () => {\n        return matches.map((match, index) => {\n          const observerResult = result[index]!\n          return !match.defaultedQueryOptions.notifyOnChangeProps\n            ? match.observer.trackResult(observerResult)\n            : observerResult\n        })\n      },\n    ]\n  }\n\n  #combineResult(\n    input: Array<QueryObserverResult>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): TCombinedResult {\n    if (combine) {\n      return replaceEqualDeep(this.#combinedResult, combine(input))\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObservers = this.#observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.#client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: Array<QueryObserverMatch> =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const currentObserver = this.#observers.find(\n        (o) => o.options.queryHash === defaultedOptions.queryHash,\n      )\n      return (\n        currentObserver ?? new QueryObserver(this.#client, defaultedOptions)\n      )\n    }\n\n    const newOrReusedObservers: Array<QueryObserverMatch> =\n      unmatchedQueries.map((options) => {\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      })\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#setResult(replaceAt(this.#result, index, result))\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.#result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import { QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport type {\n  DefaultError,\n  DefaultedInfiniteQueryObserverOptions,\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n  QueryKey,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions, ObserverFetchOptions } from './queryObserver'\nimport type { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>,\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  TData,\n  InfiniteData<TQueryData, TPageParam>,\n  TQueryKey\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>,\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions: ObserverFetchOptions,\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions,\n    )\n  }\n\n  getOptimisticResult(\n    options: DefaultedInfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'forward' },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions,\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: {\n        fetchMore: { direction: 'backward' },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<\n      TQueryFnData,\n      TError,\n      InfiniteData<TQueryData, TPageParam>,\n      TQueryKey\n    >,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n\n    const { isFetching, isRefetching } = result\n\n    const isFetchingNextPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'forward'\n\n    const isFetchingPreviousPage =\n      isFetching && state.fetchMeta?.fetchMore?.direction === 'backward'\n\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data),\n      hasPreviousPage: hasPreviousPage(options, state.data),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching:\n        isRefetching && !isFetchingNextPage && !isFetchingPreviousPage,\n    }\n  }\n}\n","import { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport { Subscribable } from './subscribable'\nimport { hashKey, shallowEqualObjects } from './utils'\nimport type { QueryClient } from './queryClient'\nimport type {\n  DefaultError,\n  MutateOptions,\n  MutationObserverOptions,\n  MutationObserverResult,\n} from './types'\nimport type { Action, Mutation } from './mutation'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  #client: QueryClient\n  #currentResult: MutationObserverResult<TData, TError, TVariables, TContext> =\n    undefined!\n  #currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  #mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.#client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.#updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options as\n      | MutationObserverOptions<TData, TError, TVariables, TContext>\n      | undefined\n    this.options = this.#client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.#client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.#currentMutation,\n        observer: this,\n      })\n    }\n    this.#currentMutation?.setOptions(this.options)\n\n    if (\n      prevOptions?.mutationKey &&\n      this.options.mutationKey &&\n      hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)\n    ) {\n      this.reset()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.#currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.#updateResult()\n\n    this.#notify(action)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.#currentResult\n  }\n\n  reset(): void {\n    // reset needs to remove the observer from the mutation because there is no way to \"get it back\"\n    // another mutate call will yield a new mutation!\n    this.#currentMutation?.removeObserver(this)\n    this.#currentMutation = undefined\n    this.#updateResult()\n    this.#notify()\n  }\n\n  mutate(\n    variables: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.#mutateOptions = options\n\n    this.#currentMutation?.removeObserver(this)\n\n    this.#currentMutation = this.#client\n      .getMutationCache()\n      .build(this.#client, this.options)\n\n    this.#currentMutation.addObserver(this)\n\n    return this.#currentMutation.execute(variables)\n  }\n\n  #updateResult(): void {\n    const state =\n      this.#currentMutation?.state ??\n      getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.#currentResult = {\n      ...state,\n      isPending: state.status === 'pending',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    } as MutationObserverResult<TData, TError, TVariables, TContext>\n  }\n\n  #notify(action?: Action<TData, TError, TVariables, TContext>): void {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.#mutateOptions && this.hasListeners()) {\n        const variables = this.#currentResult.variables!\n        const context = this.#currentResult.context\n\n        if (action?.type === 'success') {\n          this.#mutateOptions.onSuccess?.(action.data, variables, context!)\n          this.#mutateOptions.onSettled?.(action.data, null, variables, context)\n        } else if (action?.type === 'error') {\n          this.#mutateOptions.onError?.(action.error, variables, context)\n          this.#mutateOptions.onSettled?.(\n            undefined,\n            action.error,\n            variables,\n            context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      this.listeners.forEach((listener) => {\n        listener(this.#currentResult)\n      })\n    })\n  }\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  meta?: QueryMeta\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ?? defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ?? defaultShouldDehydrateQuery\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) => (filterQuery(query) ? [dehydrateQuery(query)] : []))\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach((dehydratedMutation) => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n        meta: dehydratedMutation.meta,\n      },\n      dehydratedMutation.state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash, meta }) => {\n    const query = queryCache.get(queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...dehydratedQueryState } = state\n        query.setState(dehydratedQueryState)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey,\n        queryHash,\n        meta,\n      },\n      // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      {\n        ...state,\n        fetchStatus: 'idle',\n      },\n    )\n  })\n}\n","/* istanbul ignore file */\n\nexport { CancelledError } from './retryer'\nexport { QueryCache } from './queryCache'\nexport type { QueryCacheNotifyEvent } from './queryCache'\nexport { QueryClient } from './queryClient'\nexport { QueryObserver } from './queryObserver'\nexport { QueriesObserver } from './queriesObserver'\nexport { InfiniteQueryObserver } from './infiniteQueryObserver'\nexport { MutationCache } from './mutationCache'\nexport type { MutationCacheNotifyEvent } from './mutationCache'\nexport { MutationObserver } from './mutationObserver'\nexport { notifyManager } from './notifyManager'\nexport { focusManager } from './focusManager'\nexport { onlineManager } from './onlineManager'\nexport {\n  hashKey,\n  replaceEqualDeep,\n  isServer,\n  matchQuery,\n  keepPreviousData,\n} from './utils'\nexport type { MutationFilters, QueryFilters, Updater } from './utils'\nexport { isCancelledError } from './retryer'\nexport {\n  dehydrate,\n  hydrate,\n  defaultShouldDehydrateQuery,\n  defaultShouldDehydrateMutation,\n} from './hydration'\n\n// Types\nexport * from './types'\nexport type { QueryState } from './query'\nexport { Query } from './query'\nexport type { Mutation, MutationState } from './mutation'\nexport type {\n  DehydrateOptions,\n  DehydratedState,\n  HydrateOptions,\n} from './hydration'\nexport type { QueriesObserverOptions } from './queriesObserver'\n"],"names":[],"sourceRoot":""}