{"version":3,"file":"react-query.production.min.js","sources":["../src/core/subscribable.ts","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/notifyManager.ts","../src/core/logger.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts","../src/core/hydration.ts","../src/react/QueryClientProvider.tsx","../src/react/QueryErrorResetBoundary.tsx","../src/react/useIsFetching.ts","../src/react/useIsMutating.ts","../src/react/utils.ts","../src/react/useMutation.ts","../src/react/useBaseQuery.ts","../src/react/useQuery.ts","../src/react/useQueries.ts","../src/react/useInfiniteQuery.ts","../src/react/Hydrate.tsx"],"sourcesContent":["type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener?: TListener): () => void {\n    const callback = listener || (() => undefined)\n\n    this.listeners.push(callback as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== callback)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport { EnsuredQueryKey } from './types'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\nexport type QueryStatusFilter = 'all' | 'active' | 'inactive' | 'none'\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: unknown): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureQueryKeyArray<T extends QueryKey>(\n  value: T\n): EnsuredQueryKey<T> {\n  return (Array.isArray(value)\n    ? value\n    : ([value] as unknown)) as EnsuredQueryKey<T>\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function parseMutationFilterArgs(\n  arg1?: QueryKey | MutationFilters,\n  arg2?: MutationFilters\n): MutationFilters | undefined {\n  return isQueryKey(arg1) ? { ...arg2, mutationKey: arg1 } : arg1\n}\n\nexport function mapQueryStatusFilter(\n  active?: boolean,\n  inactive?: boolean\n): QueryStatusFilter {\n  if (\n    (active === true && inactive === true) ||\n    (active == null && inactive == null)\n  ) {\n    return 'all'\n  } else if (active === false && inactive === false) {\n    return 'none'\n  } else {\n    // At this point, active|inactive can only be true|false or false|true\n    // so, when only one value is provided, the missing one has to be the negated value\n    const isActive = active ?? !inactive\n    return isActive ? 'active' : 'inactive'\n  }\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  const queryStatusFilter = mapQueryStatusFilter(active, inactive)\n\n  if (queryStatusFilter === 'none') {\n    return false\n  } else if (queryStatusFilter !== 'all') {\n    const isActive = query.isActive()\n    if (queryStatusFilter === 'active' && !isActive) {\n      return false\n    }\n    if (queryStatusFilter === 'inactive' && isActive) {\n      return false\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  const asArray = ensureQueryKeyArray(queryKey)\n  return stableValueHash(asArray)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(ensureQueryKeyArray(a), ensureQueryKeyArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n\nexport function getAbortController(): AbortController | undefined {\n  if (typeof AbortController === 'function') {\n    return new AbortController()\n  }\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setFocused: (focused?: boolean) => void\n) => (() => void) | undefined\n\nexport class FocusManager extends Subscribable {\n  private focused?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = onFocus => {\n      if (!isServer && window?.addEventListener) {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void\n) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = onOnline => {\n      if (!isServer && window?.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      }\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\nimport { CancelOptions } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\n// CLASS\n\nexport class Retryer<TData = unknown, TError = unknown> {\n  cancel: (options?: CancelOptions) => void\n  cancelRetry: () => void\n  continueRetry: () => void\n  continue: () => void\n  failureCount: number\n  isPaused: boolean\n  isResolved: boolean\n  isTransportCancelable: boolean\n  promise: Promise<TData>\n\n  private abort?: () => void\n\n  constructor(config: RetryerConfig<TData, TError>) {\n    let cancelRetry = false\n    let cancelFn: ((options?: CancelOptions) => void) | undefined\n    let continueFn: ((value?: unknown) => void) | undefined\n    let promiseResolve: (data: TData) => void\n    let promiseReject: (error: TError) => void\n\n    this.abort = config.abort\n    this.cancel = cancelOptions => cancelFn?.(cancelOptions)\n    this.cancelRetry = () => {\n      cancelRetry = true\n    }\n    this.continueRetry = () => {\n      cancelRetry = false\n    }\n    this.continue = () => continueFn?.()\n    this.failureCount = 0\n    this.isPaused = false\n    this.isResolved = false\n    this.isTransportCancelable = false\n    this.promise = new Promise<TData>((outerResolve, outerReject) => {\n      promiseResolve = outerResolve\n      promiseReject = outerReject\n    })\n\n    const resolve = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onSuccess?.(value)\n        continueFn?.()\n        promiseResolve(value)\n      }\n    }\n\n    const reject = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onError?.(value)\n        continueFn?.()\n        promiseReject(value)\n      }\n    }\n\n    const pause = () => {\n      return new Promise(continueResolve => {\n        continueFn = continueResolve\n        this.isPaused = true\n        config.onPause?.()\n      }).then(() => {\n        continueFn = undefined\n        this.isPaused = false\n        config.onContinue?.()\n      })\n    }\n\n    // Create loop function\n    const run = () => {\n      // Do nothing if already resolved\n      if (this.isResolved) {\n        return\n      }\n\n      let promiseOrValue: any\n\n      // Execute query\n      try {\n        promiseOrValue = config.fn()\n      } catch (error) {\n        promiseOrValue = Promise.reject(error)\n      }\n\n      // Create callback to cancel this fetch\n      cancelFn = cancelOptions => {\n        if (!this.isResolved) {\n          reject(new CancelledError(cancelOptions))\n\n          this.abort?.()\n\n          // Cancel transport if supported\n          if (isCancelable(promiseOrValue)) {\n            try {\n              promiseOrValue.cancel()\n            } catch {}\n          }\n        }\n      }\n\n      // Check if the transport layer support cancellation\n      this.isTransportCancelable = isCancelable(promiseOrValue)\n\n      Promise.resolve(promiseOrValue)\n        .then(resolve)\n        .catch(error => {\n          // Stop if the fetch is already resolved\n          if (this.isResolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const retry = config.retry ?? 3\n          const retryDelay = config.retryDelay ?? defaultRetryDelay\n          const delay =\n            typeof retryDelay === 'function'\n              ? retryDelay(this.failureCount, error)\n              : retryDelay\n          const shouldRetry =\n            retry === true ||\n            (typeof retry === 'number' && this.failureCount < retry) ||\n            (typeof retry === 'function' && retry(this.failureCount, error))\n\n          if (cancelRetry || !shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          this.failureCount++\n\n          // Notify on fail\n          config.onFail?.(this.failureCount, error)\n\n          // Delay\n          sleep(delay)\n            // Pause if the document is not visible or when the device is offline\n            .then(() => {\n              if (!focusManager.isFocused() || !onlineManager.isOnline()) {\n                return pause()\n              }\n            })\n            .then(() => {\n              if (cancelRetry) {\n                reject(error)\n              } else {\n                run()\n              }\n            })\n        })\n    }\n\n    // Start loop\n    run()\n  }\n}\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\n// CLASS\n\nexport class NotifyManager {\n  private queue: NotifyCallback[]\n  private transactions: number\n  private notifyFn: NotifyFunction\n  private batchNotifyFn: BatchNotifyFunction\n\n  constructor() {\n    this.queue = []\n    this.transactions = 0\n\n    this.notifyFn = (callback: () => void) => {\n      callback()\n    }\n\n    this.batchNotifyFn = (callback: () => void) => {\n      callback()\n    }\n  }\n\n  batch<T>(callback: () => T): T {\n    let result\n    this.transactions++\n    try {\n      result = callback()\n    } finally {\n      this.transactions--\n      if (!this.transactions) {\n        this.flush()\n      }\n    }\n    return result\n  }\n\n  schedule(callback: NotifyCallback): void {\n    if (this.transactions) {\n      this.queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        this.notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  batchCalls<T extends Function>(callback: T): T {\n    return ((...args: any[]) => {\n      this.schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  flush(): void {\n    const queue = this.queue\n    this.queue = []\n    if (queue.length) {\n      scheduleMicrotask(() => {\n        this.batchNotifyFn(() => {\n          queue.forEach(callback => {\n            this.notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  setNotifyFunction(fn: NotifyFunction) {\n    this.notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  setBatchNotifyFunction(fn: BatchNotifyFunction) {\n    this.batchNotifyFn = fn\n  }\n}\n\n// SINGLETON\n\nexport const notifyManager = new NotifyManager()\n","// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","import {\n  getAbortController,\n  Updater,\n  functionalUpdate,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n  ensureQueryKeyArray,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n  EnsuredQueryKey,\n  QueryMeta,\n  CancelOptions,\n  SetDataOptions,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { notifyManager } from './notifyManager'\nimport { getLogger } from './logger'\nimport { Retryer, isCancelledError } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isFetching: boolean\n  isInvalidated: boolean\n  isPaused: boolean\n  status: QueryStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  queryKey: EnsuredQueryKey<TQueryKey>\n  state: QueryState<TData, TError>\n  meta: QueryMeta | undefined\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  cacheTime!: number\n  meta: QueryMeta | undefined\n\n  private cache: QueryCache\n  private promise?: Promise<TData>\n  private gcTimeout?: number\n  private retryer?: Retryer<TData, TError>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  private abortSignalConsumed: boolean\n  private hadObservers: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    this.abortSignalConsumed = false\n    this.hadObservers = false\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || this.getDefaultState(this.options)\n    this.state = this.initialState\n    this.meta = config.meta\n    this.scheduleGc()\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.meta = options?.meta\n\n    // Default to 5 minutes if not cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      this.options.cacheTime ?? 5 * 60 * 1000\n    )\n  }\n\n  setDefaultOptions(\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.defaultOptions = options\n  }\n\n  private scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  private clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  private optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.isFetching) {\n        if (this.hadObservers) {\n          this.scheduleGc()\n        }\n      } else {\n        this.cache.remove(this)\n      }\n    }\n  }\n\n  setData(\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data = functionalUpdate(updater, prevData)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isFetching(): boolean {\n    return this.state.isFetching\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n      this.hadObservers = true\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable || this.abortSignalConsumed) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc()\n        } else {\n          this.cache.remove(this)\n        }\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.isFetching) {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.retryer?.continueRetry()\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    const queryKey = ensureQueryKeyArray(this.queryKey)\n    const abortController = getAbortController()\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey,\n      pageParam: undefined,\n      meta: this.meta,\n    }\n\n    Object.defineProperty(queryFnContext, 'signal', {\n      enumerable: true,\n      get: () => {\n        if (abortController) {\n          this.abortSignalConsumed = true\n          return abortController.signal\n        }\n        return undefined\n      },\n    })\n\n    // Create fetch function\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn')\n      }\n      this.abortSignalConsumed = false\n      return this.options.queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, TQueryKey> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: queryKey,\n      state: this.state,\n      fetchFn,\n      meta: this.meta,\n    }\n\n    if (this.options.behavior?.onFetch) {\n      this.options.behavior?.onFetch(context)\n    }\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.retryer = new Retryer({\n      fn: context.fetchFn as () => TData,\n      abort: abortController?.abort?.bind(abortController),\n      onSuccess: data => {\n        this.setData(data as TData)\n\n        // Notify cache callback\n        this.cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onError: (error: TError | { silent?: boolean }) => {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: 'error',\n            error: error as TError,\n          })\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          this.cache.config.onError?.(error, this as Query<any, any, any, any>)\n\n          // Log error\n          getLogger().error(error)\n        }\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    this.state = this.reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'queryUpdated', action })\n    })\n  }\n\n  protected getDefaultState(\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): QueryState<TData, TError> {\n    const data =\n      typeof options.initialData === 'function'\n        ? (options.initialData as InitialDataFunction<TData>)()\n        : options.initialData\n\n    const hasInitialData = typeof options.initialData !== 'undefined'\n\n    const initialDataUpdatedAt = hasInitialData\n      ? typeof options.initialDataUpdatedAt === 'function'\n        ? (options.initialDataUpdatedAt as () => number | undefined)()\n        : options.initialDataUpdatedAt\n      : 0\n\n    const hasData = typeof data !== 'undefined'\n\n    return {\n      data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle',\n    }\n  }\n\n  protected reducer(\n    state: QueryState<TData, TError>,\n    action: Action<TData, TError>\n  ): QueryState<TData, TError> {\n    switch (action.type) {\n      case 'failed':\n        return {\n          ...state,\n          fetchFailureCount: state.fetchFailureCount + 1,\n        }\n      case 'pause':\n        return {\n          ...state,\n          isPaused: true,\n        }\n      case 'continue':\n        return {\n          ...state,\n          isPaused: false,\n        }\n      case 'fetch':\n        return {\n          ...state,\n          fetchFailureCount: 0,\n          fetchMeta: action.meta ?? null,\n          isFetching: true,\n          isPaused: false,\n          ...(!state.dataUpdatedAt && {\n            error: null,\n            status: 'loading',\n          }),\n        }\n      case 'success':\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success',\n        }\n      case 'error':\n        const error = action.error as unknown\n\n        if (isCancelledError(error) && error.revert && this.revertState) {\n          return { ...this.revertState }\n        }\n\n        return {\n          ...state,\n          error: error as TError,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error',\n        }\n      case 'invalidate':\n        return {\n          ...state,\n          isInvalidated: true,\n        }\n      case 'setState':\n        return {\n          ...state,\n          ...action.state,\n        }\n      default:\n        return state\n    }\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'queryAdded'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'queryRemoved'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'queryUpdated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventObserverAdded\n  | NotifyEventObserverRemoved\n  | NotifyEventObserverResultsUpdated\n\ntype QueryCacheListener = (event?: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n        meta: options.meta,\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'queryAdded',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'queryRemoved', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey\n  >(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return Object.keys(filters).length > 0\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { getLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer } from './retryer'\nimport { noop } from './utils'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n  meta: MutationMeta | undefined\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private retryer?: Retryer<TData, TError>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.observers = []\n    this.state = config.state || getDefaultState()\n    this.meta = config.meta\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n  }\n\n  cancel(): Promise<void> {\n    if (this.retryer) {\n      this.retryer.cancel()\n      return this.retryer.promise.then(noop).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  execute(): Promise<TData> {\n    let data: TData\n\n    const restored = this.state.status === 'loading'\n\n    let promise = Promise.resolve()\n\n    if (!restored) {\n      this.dispatch({ type: 'loading', variables: this.options.variables! })\n      promise = promise\n        .then(() => {\n          // Notify cache callback\n          this.mutationCache.config.onMutate?.(\n            this.state.variables,\n            this as Mutation<unknown, unknown, unknown, unknown>\n          )\n        })\n        .then(() => this.options.onMutate?.(this.state.variables!))\n        .then(context => {\n          if (context !== this.state.context) {\n            this.dispatch({\n              type: 'loading',\n              context,\n              variables: this.state.variables,\n            })\n          }\n        })\n    }\n\n    return promise\n      .then(() => this.executeMutation())\n      .then(result => {\n        data = result\n        // Notify cache callback\n        this.mutationCache.config.onSuccess?.(\n          data,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n      })\n      .then(() =>\n        this.options.onSuccess?.(\n          data,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() =>\n        this.options.onSettled?.(\n          data,\n          null,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() => {\n        this.dispatch({ type: 'success', data })\n        return data\n      })\n      .catch(error => {\n        // Notify cache callback\n        this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>\n        )\n\n        // Log error\n        getLogger().error(error)\n\n        return Promise.resolve()\n          .then(() =>\n            this.options.onError?.(\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() =>\n            this.options.onSettled?.(\n              undefined,\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() => {\n            this.dispatch({ type: 'error', error })\n            throw error\n          })\n      })\n  }\n\n  private executeMutation(): Promise<TData> {\n    this.retryer = new Retryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject('No mutationFn found')\n        }\n        return this.options.mutationFn(this.state.variables!)\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n    })\n\n    return this.retryer.promise\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    this.state = reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify(this)\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n\nfunction reducer<TData, TError, TVariables, TContext>(\n  state: MutationState<TData, TError, TVariables, TContext>,\n  action: Action<TData, TError, TVariables, TContext>\n): MutationState<TData, TError, TVariables, TContext> {\n  switch (action.type) {\n    case 'failed':\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case 'pause':\n      return {\n        ...state,\n        isPaused: true,\n      }\n    case 'continue':\n      return {\n        ...state,\n        isPaused: false,\n      }\n    case 'loading':\n      return {\n        ...state,\n        context: action.context,\n        data: undefined,\n        error: null,\n        isPaused: false,\n        status: 'loading',\n        variables: action.variables,\n      }\n    case 'success':\n      return {\n        ...state,\n        data: action.data,\n        error: null,\n        status: 'success',\n        isPaused: false,\n      }\n    case 'error':\n      return {\n        ...state,\n        data: undefined,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isPaused: false,\n        status: 'error',\n      }\n    case 'setState':\n      return {\n        ...state,\n        ...action.state,\n      }\n    default:\n      return state\n  }\n}\n","import type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Mutation, MutationState } from './mutation'\nimport { matchMutation, MutationFilters, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ntype MutationCacheListener = (mutation?: Mutation) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n      meta: options.meta,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify(mutation)\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    mutation.cancel()\n    this.notify(mutation)\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<TData = unknown, TError = unknown, TVariables = any, TContext = unknown>(\n    filters: MutationFilters\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation))\n  }\n\n  notify(mutation?: Mutation<any, any, any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(mutation)\n      })\n    })\n  }\n\n  onFocus(): void {\n    this.resumePausedMutations()\n  }\n\n  onOnline(): void {\n    this.resumePausedMutations()\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\nimport { isCancelable } from './retryer'\nimport type {\n  InfiniteData,\n  QueryFunctionContext,\n  QueryOptions,\n  RefetchQueryFilters,\n} from './types'\nimport { getAbortController } from './utils'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const refetchPage: RefetchQueryFilters['refetchPage'] | undefined =\n          context.fetchOptions?.meta?.refetchPage\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        const abortController = getAbortController()\n        const abortSignal = abortController?.signal\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        const buildNewPages = (\n          pages: unknown[],\n          param: unknown,\n          page: unknown,\n          previous?: boolean\n        ) => {\n          newPageParams = previous\n            ? [param, ...newPageParams]\n            : [...newPageParams, param]\n          return previous ? [page, ...pages] : [...pages, page]\n        }\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            signal: abortSignal,\n            pageParam: param,\n            meta: context.meta,\n          }\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then(page =>\n            buildNewPages(pages, param, page, previous)\n          )\n\n          if (isCancelable(queryFnResult)) {\n            const promiseAsAny = promise as any\n            promiseAsAny.cancel = queryFnResult.cancel\n          }\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          const shouldFetchFirstPage =\n            refetchPage && oldPages[0]\n              ? refetchPage(oldPages[0], 0, oldPages)\n              : true\n\n          // Fetch first page\n          promise = shouldFetchFirstPage\n            ? fetchPage([], manual, oldPageParams[0])\n            : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0]))\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage =\n                refetchPage && oldPages[i]\n                  ? refetchPage(oldPages[i], i, oldPages)\n                  : true\n\n              if (shouldFetchNextPage) {\n                const param = manual\n                  ? oldPageParams[i]\n                  : getNextPageParam(context.options, pages)\n                return fetchPage(pages, manual, param)\n              }\n              return Promise.resolve(\n                buildNewPages(pages, oldPageParams[i], oldPages[i])\n              )\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        const finalPromiseAsAny = finalPromise as any\n\n        finalPromiseAsAny.cancel = () => {\n          cancelled = true\n          abortController?.abort()\n          if (isCancelable(promise)) {\n            promise.cancel()\n          }\n        }\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  MutationFilters,\n} from './utils'\nimport type {\n  QueryClientConfig,\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  ResetQueryFilters,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport { CancelOptions } from './types'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onFocus()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onOnline()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetching = true\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  getQueriesData<TData = unknown>(queryKey: QueryKey): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(filters: QueryFilters): [QueryKey, TData][]\n  getQueriesData<TData = unknown>(\n    queryKeyOrFilters: QueryKey | QueryFilters\n  ): [QueryKey, TData][] {\n    return this.getQueryCache()\n      .findAll(queryKeyOrFilters)\n      .map(({ queryKey, state }) => {\n        const data = state.data as TData\n        return [queryKey, data]\n      })\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(updater, options)\n  }\n\n  setQueriesData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    filters: QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][]\n\n  setQueriesData<TData>(\n    queryKeyOrFilters: QueryKey | QueryFilters,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): [QueryKey, TData][] {\n    return notifyManager.batch(() =>\n      this.getQueryCache()\n        .findAll(queryKeyOrFilters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TData>(queryKey, updater, options),\n        ])\n    )\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TPageData = unknown>(\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: ResetQueryFilters<TPageData>,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | ResetQueryFilters,\n    arg2?: ResetQueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      ...filters,\n      active: true,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TPageData = unknown>(\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters<TPageData>,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const refetchFilters: RefetchQueryFilters = {\n      ...filters,\n      // if filters.refetchActive is not provided and filters.active is explicitly false,\n      // e.g. invalidateQueries({ active: false }), we don't want to refetch active queries\n      active: filters.refetchActive ?? filters.active ?? true,\n      inactive: filters.refetchInactive ?? false,\n    }\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries<TPageData = unknown>(\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries<TPageData = unknown>(\n    queryKey?: QueryKey,\n    filters?: RefetchQueryFilters<TPageData>,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | RefetchQueryFilters,\n    arg2?: RefetchQueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query =>\n        query.fetch(undefined, {\n          ...options,\n          meta: { refetchPage: filters?.refetchPage },\n        })\n      )\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    arg1:\n      | TQueryKey\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  cancelMutations(): Promise<void> {\n    const promises = notifyManager.batch(() =>\n      this.mutationCache.getAll().map(mutation => mutation.cancel())\n    )\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.getMutationCache().resumePausedMutations()\n  }\n\n  executeMutation<\n    TData = unknown,\n    TError = unknown,\n    TVariables = void,\n    TContext = unknown\n  >(\n    options: MutationOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    return this.mutationCache.build(this, options).execute()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    return queryKey\n      ? this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey))\n          ?.defaultOptions\n      : undefined\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return mutationKey\n      ? this.mutationDefaults.find(x =>\n          partialMatchKey(mutationKey, x.mutationKey)\n        )?.defaultOptions\n      : undefined\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> {\n    if (options?._defaulted) {\n      return options\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    } as QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      )\n    }\n\n    return defaultedOptions\n  }\n\n  defaultQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> {\n    return this.defaultQueryOptions(options)\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import { RefetchQueryFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n  ResultOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { getLogger } from './logger'\nimport { isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: Error | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Array<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = []\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearTimers()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryObserverOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    return this.createResult(query, defaultedOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    defaultedOptions: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    const trackProp = (key: keyof QueryObserverResult) => {\n      if (!this.trackedProps.includes(key)) {\n        this.trackedProps.push(key)\n      }\n    }\n\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          trackProp(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    if (defaultedOptions.useErrorBoundary || defaultedOptions.suspense) {\n      trackProp('error')\n    }\n\n    return trackedResult\n  }\n\n  getNextResult(\n    options?: ResultOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = this.subscribe(result => {\n        if (!result.isFetching) {\n          unsubscribe()\n          if (result.isError && options?.throwOnError) {\n            reject(result.error)\n          } else {\n            resolve(result)\n          }\n        }\n      })\n    })\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>(\n    options?: RefetchOptions & RefetchQueryFilters<TPageData>\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage: options?.refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch(fetchOptions).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, isFetching, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options.optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          if (options.structuralSharing !== false) {\n            data = replaceEqualDeep(prevResult?.data, data)\n          }\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          getLogger().error(selectError)\n          this.selectError = selectError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      (status === 'loading' || status === 'idle')\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(\n                prevResult?.data,\n                placeholderData\n              )\n            }\n            this.selectError = null\n          } catch (selectError) {\n            getLogger().error(selectError)\n            this.selectError = selectError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && status !== 'loading',\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  private shouldNotifyListeners(\n    result: QueryObserverResult,\n    prevResult?: QueryObserverResult\n  ): boolean {\n    if (!prevResult) {\n      return true\n    }\n\n    const { notifyOnChangeProps, notifyOnChangePropsExclusions } = this.options\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true\n    }\n\n    const includedProps =\n      notifyOnChangeProps === 'tracked'\n        ? this.trackedProps\n        : notifyOnChangeProps\n\n    return Object.keys(result).some(key => {\n      const typedKey = key as keyof QueryObserverResult\n      const changed = result[typedKey] !== prevResult[typedKey]\n      const isIncluded = includedProps?.some(x => x === key)\n      const isExcluded = notifyOnChangePropsExclusions?.some(x => x === key)\n      return changed && !isExcluded && (!includedProps || isIncluded)\n    })\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    this.currentResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify if something has changed\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return\n    }\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    if (\n      notifyOptions?.listeners !== false &&\n      this.shouldNotifyListeners(this.currentResult, prevResult)\n    ) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        this.options as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client\n          .getQueryCache()\n          .notify({ query: this.currentQuery, type: 'observerResultsUpdated' })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect']\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type { QueryObserverOptions, QueryObserverResult } from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions\n  ): void {\n    this.queries = queries\n    this.updateObservers(notifyOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map(match =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions)\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[]\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const defaultedQueryOptions = queries.map(options =>\n      this.client.defaultQueryObserverOptions(options)\n    )\n\n    const matchingObservers: QueryObserverMatch[] = defaultedQueryOptions.flatMap(\n      defaultedOptions => {\n        const match = prevObservers.find(\n          observer => observer.options.queryHash === defaultedOptions.queryHash\n        )\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      }\n    )\n\n    const matchedQueryHashes = matchingObservers.map(\n      match => match.defaultedQueryOptions.queryHash\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      defaultedOptions =>\n        !matchedQueryHashes.includes(defaultedOptions.queryHash)\n    )\n\n    const unmatchedObservers = prevObservers.filter(\n      prevObserver =>\n        !matchingObservers.some(match => match.observer === prevObserver)\n    )\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: this.getObserver(options),\n        }\n      }\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private getObserver(options: QueryObserverOptions): QueryObserver {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n    const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n    return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n  }\n\n  private updateObservers(notifyOptions?: NotifyOptions): void {\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach(match =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions)\n      )\n\n      const newObservers = newObserverMatches.map(match => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map(observer => [observer.options.queryHash, observer])\n      )\n      const newResult = newObservers.map(observer =>\n        observer.getCurrentResult()\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index]\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: QueryObserverOptions\n  observer: QueryObserver\n}\n","import type {\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport {\n  NotifyOptions,\n  ObserverFetchOptions,\n  QueryObserver,\n} from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions?: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    super.setOptions(\n      {\n        ...options,\n        behavior: infiniteQueryBehavior(),\n      },\n      notifyOptions\n    )\n  }\n\n  getOptimisticResult(\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      // TODO consider removing `?? true` in future breaking change, to be consistent with `refetch` API (see https://github.com/tannerlinsley/react-query/issues/2617)\n      cancelRefetch: options?.cancelRefetch ?? true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      // TODO consider removing `?? true` in future breaking change, to be consistent with `refetch` API (see https://github.com/tannerlinsley/react-query/issues/2617)\n      cancelRefetch: options?.cancelRefetch ?? true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.isFetching && state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.isFetching &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n","import type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from './types'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options?: DehydrateOptions\n): DehydratedState {\n  options = options || {}\n\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options?.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach(mutation => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options?.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach(query => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(dehydratedMutation => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state\n    )\n  })\n\n  queries.forEach(dehydratedQuery => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state\n    )\n  })\n}\n","import React from 'react'\n\nimport { QueryClient } from '../core'\n\ndeclare global {\n  interface Window {\n    ReactQueryClientContext?: React.Context<QueryClient | undefined>\n  }\n}\n\nconst defaultContext = React.createContext<QueryClient | undefined>(undefined)\nconst QueryClientSharingContext = React.createContext<boolean>(false)\n\n// if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(contextSharing: boolean) {\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext\n    }\n\n    return window.ReactQueryClientContext\n  }\n\n  return defaultContext\n}\n\nexport const useQueryClient = () => {\n  const queryClient = React.useContext(\n    getQueryClientContext(React.useContext(QueryClientSharingContext))\n  )\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\nexport interface QueryClientProviderProps {\n  client: QueryClient\n  contextSharing?: boolean\n  children?: React.ReactNode\n}\n\nexport const QueryClientProvider = ({\n  client,\n  contextSharing = false,\n  children,\n}: QueryClientProviderProps): JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  const Context = getQueryClientContext(contextSharing)\n\n  return (\n    <QueryClientSharingContext.Provider value={contextSharing}>\n      <Context.Provider value={client}>{children}</Context.Provider>\n    </QueryClientSharingContext.Provider>\n  )\n}\n","import React from 'react'\n\n// CONTEXT\n\ninterface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const value = React.useMemo(() => createValue(), [])\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryKey } from '../core/types'\nimport { parseFilterArgs, QueryFilters } from '../core/utils'\nimport { QueryClient } from '../core'\nimport { useQueryClient } from './QueryClientProvider'\n\nconst checkIsFetching = (\n  queryClient: QueryClient,\n  filters: QueryFilters,\n  isFetching: number,\n  setIsFetching: React.Dispatch<React.SetStateAction<number>>\n) => {\n  const newIsFetching = queryClient.isFetching(filters)\n  if (isFetching !== newIsFetching) {\n    setIsFetching(newIsFetching)\n  }\n}\n\nexport function useIsFetching(filters?: QueryFilters): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters\n): number {\n  const mountedRef = React.useRef(false)\n\n  const queryClient = useQueryClient()\n\n  const [filters] = parseFilterArgs(arg1, arg2)\n  const [isFetching, setIsFetching] = React.useState(\n    queryClient.isFetching(filters)\n  )\n\n  const filtersRef = React.useRef(filters)\n  filtersRef.current = filters\n  const isFetchingRef = React.useRef(isFetching)\n  isFetchingRef.current = isFetching\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    checkIsFetching(\n      queryClient,\n      filtersRef.current,\n      isFetchingRef.current,\n      setIsFetching\n    )\n\n    const unsubscribe = queryClient.getQueryCache().subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          checkIsFetching(\n            queryClient,\n            filtersRef.current,\n            isFetchingRef.current,\n            setIsFetching\n          )\n        }\n      })\n    )\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [queryClient])\n\n  return isFetching\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { MutationKey } from '../core/types'\nimport { MutationFilters, parseMutationFilterArgs } from '../core/utils'\nimport { useQueryClient } from './QueryClientProvider'\n\nexport function useIsMutating(filters?: MutationFilters): number\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>\n): number\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'>\n): number {\n  const mountedRef = React.useRef(false)\n  const filters = parseMutationFilterArgs(arg1, arg2)\n\n  const queryClient = useQueryClient()\n\n  const [isMutating, setIsMutating] = React.useState(\n    queryClient.isMutating(filters)\n  )\n\n  const filtersRef = React.useRef(filters)\n  filtersRef.current = filters\n  const isMutatingRef = React.useRef(isMutating)\n  isMutatingRef.current = isMutating\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = queryClient.getMutationCache().subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          const newIsMutating = queryClient.isMutating(filtersRef.current)\n          if (isMutatingRef.current !== newIsMutating) {\n            setIsMutating(newIsMutating)\n          }\n        }\n      })\n    )\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [queryClient])\n\n  return isMutating\n}\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  suspense: boolean | undefined,\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  // Allow useErrorBoundary to override suspense's throwing behavior\n  if (typeof _useErrorBoundary === 'boolean') return _useErrorBoundary\n\n  // If suspense is enabled default to throwing errors\n  return !!suspense\n}\n","import React from 'react'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { noop, parseMutationArgs } from '../core/utils'\nimport { MutationObserver } from '../core/mutationObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { MutationFunction, MutationKey } from '../core/types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const mountedRef = React.useRef(false)\n  const [, forceUpdate] = React.useState(0)\n\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient()\n\n  const obsRef = React.useRef<\n    MutationObserver<TData, TError, TVariables, TContext>\n  >()\n\n  if (!obsRef.current) {\n    obsRef.current = new MutationObserver(queryClient, options)\n  } else {\n    obsRef.current.setOptions(options)\n  }\n\n  const currentResult = obsRef.current.getCurrentResult()\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = obsRef.current!.subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          forceUpdate(x => x + 1)\n        }\n      })\n    )\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [])\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >((variables, mutateOptions) => {\n    obsRef.current!.mutate(variables, mutateOptions).catch(noop)\n  }, [])\n\n  if (\n    currentResult.error &&\n    shouldThrowError(undefined, obsRef.current.options.useErrorBoundary, [\n      currentResult.error,\n    ])\n  ) {\n    throw currentResult.error\n  }\n\n  return { ...currentResult, mutate, mutateAsync: currentResult.mutate }\n}\n","import React from 'react'\n\nimport { QueryKey } from '../core'\nimport { notifyManager } from '../core/notifyManager'\nimport { QueryObserver } from '../core/queryObserver'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseBaseQueryOptions } from './types'\nimport { shouldThrowError } from './utils'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver\n) {\n  const mountedRef = React.useRef(false)\n  const [, forceUpdate] = React.useState(0)\n\n  const queryClient = useQueryClient()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryObserverOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions.optimisticResults = true\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled\n    )\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n\n    // Set cache time to 1 if the option has been set to 0\n    // when using suspense to prevent infinite loop of fetches\n    if (defaultedOptions.cacheTime === 0) {\n      defaultedOptions.cacheTime = 1\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false\n    }\n  }\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions\n      )\n  )\n\n  let result = observer.getOptimisticResult(defaultedOptions)\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    errorResetBoundary.clearReset()\n\n    const unsubscribe = observer.subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          forceUpdate(x => x + 1)\n        }\n      })\n    )\n\n    // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n    observer.updateResult()\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [errorResetBoundary, observer])\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (defaultedOptions.suspense && result.isLoading) {\n    throw observer\n      .fetchOptimistic(defaultedOptions)\n      .then(({ data }) => {\n        defaultedOptions.onSuccess?.(data as TData)\n        defaultedOptions.onSettled?.(data, null)\n      })\n      .catch(error => {\n        errorResetBoundary.clearReset()\n        defaultedOptions.onError?.(error)\n        defaultedOptions.onSettled?.(undefined, error)\n      })\n  }\n\n  // Handle error boundary\n  if (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(\n      defaultedOptions.suspense,\n      defaultedOptions.useErrorBoundary,\n      [result.error, observer.getCurrentQuery()]\n    )\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  if (defaultedOptions.notifyOnChangeProps === 'tracked') {\n    result = observer.trackResult(result, defaultedOptions)\n  }\n\n  return result\n}\n","import { QueryObserver } from '../core'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseQueryOptions, UseQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >\n): UseQueryResult<TData, TError>\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","import React, { useMemo } from 'react'\nimport { QueryFunction } from '../core/types'\n\nimport { notifyManager } from '../core/notifyManager'\nimport { QueriesObserver } from '../core/queriesObserver'\nimport { useQueryClient } from './QueryClientProvider'\nimport { UseQueryOptions, UseQueryResult } from './types'\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T extends any> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptions<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptions<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptions<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptions<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptions<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptions<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptions<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptions<TQueryFnData, unknown, TQueryFnData, TQueryKey>\n    : // Fallback\n      UseQueryOptions\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? UseQueryResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<any, any>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? UseQueryResult<TQueryFnData>\n    : // Fallback\n      UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = []\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptions[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptions<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptions[]\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = []\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptions<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    UseQueryResult[]\n\nexport function useQueries<T extends any[]>(\n  queries: readonly [...QueriesOptions<T>]\n): QueriesResults<T> {\n  const mountedRef = React.useRef(false)\n  const [, forceUpdate] = React.useState(0)\n\n  const queryClient = useQueryClient()\n\n  const defaultedQueries = useMemo(\n    () =>\n      queries.map(options => {\n        const defaultedOptions = queryClient.defaultQueryObserverOptions(\n          options\n        )\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions.optimisticResults = true\n\n        return defaultedOptions\n      }),\n    [queries, queryClient]\n  )\n\n  const [observer] = React.useState(\n    () => new QueriesObserver(queryClient, defaultedQueries)\n  )\n\n  const result = observer.getOptimisticResult(defaultedQueries)\n\n  React.useEffect(() => {\n    mountedRef.current = true\n\n    const unsubscribe = observer.subscribe(\n      notifyManager.batchCalls(() => {\n        if (mountedRef.current) {\n          forceUpdate(x => x + 1)\n        }\n      })\n    )\n\n    return () => {\n      mountedRef.current = false\n      unsubscribe()\n    }\n  }, [observer])\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries, observer])\n\n  return result as QueriesResults<T>\n}\n","import { QueryObserver } from '../core'\nimport { InfiniteQueryObserver } from '../core/infiniteQueryObserver'\nimport { QueryFunction, QueryKey } from '../core/types'\nimport { parseQueryArgs } from '../core/utils'\nimport { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey'\n  >\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey' | 'queryFn'\n  >\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg3?: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n","import React from 'react'\n\nimport { hydrate, HydrateOptions } from '../core'\nimport { useQueryClient } from './QueryClientProvider'\n\nexport function useHydrate(state: unknown, options?: HydrateOptions) {\n  const queryClient = useQueryClient()\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current)\n    }\n  }, [queryClient, state])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n  options?: HydrateOptions\n  children?: React.ReactNode\n}\n\nexport const Hydrate = ({ children, options, state }: HydrateProps) => {\n  useHydrate(state, options)\n  return children as React.ReactElement\n}\n"],"names":["Subscribable","constructor","listeners","subscribe","listener","callback","undefined","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","functionalUpdate","updater","input","isValidTimeout","value","Infinity","ensureQueryKeyArray","Array","isArray","difference","array1","array2","indexOf","replaceAt","array","index","copy","slice","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","parseMutationFilterArgs","mapQueryStatusFilter","active","inactive","isActive","matchQuery","filters","query","exact","fetching","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","queryStatusFilter","isStale","isFetching","matchMutation","mutation","hashQueryKey","state","status","hashFn","queryKeyHashFn","asArray","stableValueHash","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","aSize","bItems","bSize","equalItems","i","shallowEqualObjects","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","isError","Error","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","then","catch","error","getAbortController","AbortController","FocusManager","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","focused","setFocused","forEach","isFocused","document","includes","visibilityState","focusManager","OnlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","min","isCancelable","cancel","CancelledError","revert","silent","isCancelledError","Retryer","config","cancelRetry","cancelFn","continueFn","promiseResolve","promiseReject","abort","cancelOptions","continueRetry","continue","isPaused","isResolved","isTransportCancelable","promise","outerResolve","outerReject","onSuccess","reject","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","retry","retryDelay","delay","shouldRetry","onFail","NotifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","notifyManager","logger","console","getLogger","setLogger","newLogger","Query","abortSignalConsumed","hadObservers","defaultOptions","setOptions","observers","cache","initialState","getDefaultState","meta","scheduleGc","cacheTime","setDefaultOptions","clearGcTimeout","gcTimeout","optionalRemove","clearTimeout","remove","setData","prevData","data","isDataEqual","structuralSharing","dispatch","type","dataUpdatedAt","setState","setStateOptions","retryer","destroy","reset","observer","enabled","isInvalidated","getCurrentResult","isStaleByTime","find","shouldFetchOnWindowFocus","refetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","getObserversCount","invalidate","fetch","fetchOptions","cancelRefetch","abortController","queryFnContext","pageParam","defineProperty","enumerable","get","signal","fetchFn","context","behavior","onFetch","revertState","fetchMeta","bind","action","reducer","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","dataUpdateCount","errorUpdateCount","errorUpdatedAt","fetchFailureCount","QueryCache","queries","queriesMap","build","client","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","execute","restored","variables","onMutate","executeMutation","onSettled","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","abortSignal","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","manual","queryFnResult","promiseAsAny","getNextPageParam","getPreviousPageParam","shouldFetchFirstPage","shouldFetchNextPage","finalPromise","finalPromiseAsAny","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","isMutating","getQueryData","getQueriesData","queryKeyOrFilters","getQueryCache","map","setQueryData","parsedOptions","defaultedOptions","setQueriesData","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","refetchActive","refetchInactive","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","cancelMutations","getMutationCache","getDefaultOptions","setQueryDefaults","setMutationDefaults","_defaulted","defaultQueryObserverOptions","QueryObserver","trackedProps","selectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearTimers","notifyOptions","prevOptions","prevQuery","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","trackProp","configurable","useErrorBoundary","suspense","getNextResult","unsubscribe","getCurrentQuery","fetchOptimistic","clearStaleTimeout","time","staleTimeoutId","refetchInterval","nextInterval","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","isLoading","isIdle","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","typedKey","changed","isIncluded","isExcluded","defaultNotifyOptions","shouldLoadOnMount","retryOnMount","refetchOnMount","field","QueriesObserver","observersMap","setQueries","onUpdate","updateObservers","findMatchingObservers","match","defaultedQueryOptions","prevObservers","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","newOrReusedObservers","previouslyUsedObserver","getObserver","sortMatchesByOrderOfQueries","concat","currentObserver","newObserverMatches","newObservers","newObserversMap","fromEntries","newResult","hasIndexChange","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","MutationObserver","mutate","currentMutation","mutateOptions","dehydrateMutation","dehydrateQuery","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","dehydrate","dehydrateMutations","shouldDehydrateMutation","dehydrateQueries","shouldDehydrateQuery","hydrate","dehydratedState","dehydratedMutation","dehydratedQuery","defaultContext","React","createContext","QueryClientSharingContext","getQueryClientContext","contextSharing","ReactQueryClientContext","useQueryClient","queryClient","useContext","QueryClientProvider","children","useEffect","Context","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","QueryErrorResetBoundary","useMemo","checkIsFetching","setIsFetching","newIsFetching","useIsFetching","mountedRef","useRef","useState","filtersRef","current","isFetchingRef","useIsMutating","setIsMutating","isMutatingRef","newIsMutating","shouldThrowError","_useErrorBoundary","params","useMutation","forceUpdate","obsRef","useCallback","mutateAsync","useBaseQuery","Observer","errorResetBoundary","useQuery","useQueries","defaultedQueries","useInfiniteQuery","useHydrate","optionsRef","Hydrate"],"mappings":";;;;;;;;EAEO,MAAMA,YAAN,CAA0D;EAG/DC,EAAAA,WAAW,GAAG;EACZ,SAAKC,SAAL,GAAiB,EAAjB;EACD;;EAEDC,EAAAA,SAAS,CAACC,QAAD,EAAmC;EAC1C,UAAMC,QAAQ,GAAGD,QAAQ,KAAK,MAAME,SAAX,CAAzB;;EAEA,SAAKJ,SAAL,CAAeK,IAAf,CAAoBF,QAApB;EAEA,SAAKG,WAAL;EAEA,WAAO,MAAM;EACX,WAAKN,SAAL,GAAiB,KAAKA,SAAL,CAAeO,MAAf,CAAsBC,CAAC,IAAIA,CAAC,KAAKL,QAAjC,CAAjB;EACA,WAAKM,aAAL;EACD,KAHD;EAID;;EAEDC,EAAAA,YAAY,GAAY;EACtB,WAAO,KAAKV,SAAL,CAAeW,MAAf,GAAwB,CAA/B;EACD;;EAESL,EAAAA,WAAV,GAA8B;EAE7B;;EAESG,EAAAA,aAAV,GAAgC;EAE/B;;EA9B8D;;ECUjE;EA4DA;EAEO,MAAMG,QAAQ,GAAG,OAAOC,MAAP,KAAkB,WAAnC;EAEA,SAASC,IAAT,GAA2B;EAChC,SAAOV,SAAP;EACD;EAEM,SAASW,gBAAT,CACLC,OADK,EAELC,KAFK,EAGI;EACT,SAAO,OAAOD,OAAP,KAAmB,UAAnB,GACFA,OAAD,CAAiDC,KAAjD,CADG,GAEHD,OAFJ;EAGD;EAEM,SAASE,cAAT,CAAwBC,KAAxB,EAAyD;EAC9D,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,IAAI,CAAtC,IAA2CA,KAAK,KAAKC,QAA5D;EACD;EAEM,SAASC,mBAAT,CACLF,KADK,EAEe;EACpB,SAAQG,KAAK,CAACC,OAAN,CAAcJ,KAAd,IACJA,KADI,GAEH,CAACA,KAAD,CAFL;EAGD;EAEM,SAASK,UAAT,CAAuBC,MAAvB,EAAoCC,MAApC,EAAsD;EAC3D,SAAOD,MAAM,CAAClB,MAAP,CAAcC,CAAC,IAAIkB,MAAM,CAACC,OAAP,CAAenB,CAAf,MAAsB,CAAC,CAA1C,CAAP;EACD;EAEM,SAASoB,SAAT,CAAsBC,KAAtB,EAAkCC,KAAlC,EAAiDX,KAAjD,EAAgE;EACrE,QAAMY,IAAI,GAAGF,KAAK,CAACG,KAAN,CAAY,CAAZ,CAAb;EACAD,EAAAA,IAAI,CAACD,KAAD,CAAJ,GAAcX,KAAd;EACA,SAAOY,IAAP;EACD;EAEM,SAASE,cAAT,CAAwBC,SAAxB,EAA2CC,SAA3C,EAAuE;EAC5E,SAAOC,IAAI,CAACC,GAAL,CAASH,SAAS,IAAIC,SAAS,IAAI,CAAjB,CAAT,GAA+BG,IAAI,CAACC,GAAL,EAAxC,EAAoD,CAApD,CAAP;EACD;EAEM,SAASC,cAAT,CAILC,IAJK,EAKLC,IALK,EAMLC,IANK,EAOK;EACV,MAAI,CAACC,UAAU,CAACH,IAAD,CAAf,EAAuB;EACrB,WAAOA,IAAP;EACD;;EAED,MAAI,OAAOC,IAAP,KAAgB,UAApB,EAAgC;EAC9B,WAAO,EAAE,GAAGC,IAAL;EAAWE,MAAAA,QAAQ,EAAEJ,IAArB;EAA2BK,MAAAA,OAAO,EAAEJ;EAApC,KAAP;EACD;;EAED,SAAO,EAAE,GAAGA,IAAL;EAAWG,IAAAA,QAAQ,EAAEJ;EAArB,GAAP;EACD;EAEM,SAASM,iBAAT,CAGLN,IAHK,EAILC,IAJK,EAKLC,IALK,EAMK;EACV,MAAIC,UAAU,CAACH,IAAD,CAAd,EAAsB;EACpB,QAAI,OAAOC,IAAP,KAAgB,UAApB,EAAgC;EAC9B,aAAO,EAAE,GAAGC,IAAL;EAAWK,QAAAA,WAAW,EAAEP,IAAxB;EAA8BQ,QAAAA,UAAU,EAAEP;EAA1C,OAAP;EACD;;EACD,WAAO,EAAE,GAAGA,IAAL;EAAWM,MAAAA,WAAW,EAAEP;EAAxB,KAAP;EACD;;EAED,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;EAC9B,WAAO,EAAE,GAAGC,IAAL;EAAWO,MAAAA,UAAU,EAAER;EAAvB,KAAP;EACD;;EAED,SAAO,EAAE,GAAGA;EAAL,GAAP;EACD;EAEM,SAASS,eAAT,CAILT,IAJK,EAKLC,IALK,EAMLC,IANK,EAO6B;EAClC,SAAQC,UAAU,CAACH,IAAD,CAAV,GACJ,CAAC,EAAE,GAAGC,IAAL;EAAWG,IAAAA,QAAQ,EAAEJ;EAArB,GAAD,EAA8BE,IAA9B,CADI,GAEJ,CAACF,IAAI,IAAI,EAAT,EAAaC,IAAb,CAFJ;EAGD;EAEM,SAASS,uBAAT,CACLV,IADK,EAELC,IAFK,EAGwB;EAC7B,SAAOE,UAAU,CAACH,IAAD,CAAV,GAAmB,EAAE,GAAGC,IAAL;EAAWM,IAAAA,WAAW,EAAEP;EAAxB,GAAnB,GAAoDA,IAA3D;EACD;EAEM,SAASW,oBAAT,CACLC,MADK,EAELC,QAFK,EAGc;EACnB,MACGD,MAAM,KAAK,IAAX,IAAmBC,QAAQ,KAAK,IAAjC,IACCD,MAAM,IAAI,IAAV,IAAkBC,QAAQ,IAAI,IAFjC,EAGE;EACA,WAAO,KAAP;EACD,GALD,MAKO,IAAID,MAAM,KAAK,KAAX,IAAoBC,QAAQ,KAAK,KAArC,EAA4C;EACjD,WAAO,MAAP;EACD,GAFM,MAEA;EACL;EACA;EACA,UAAMC,QAAQ,GAAGF,MAAM,IAAI,CAACC,QAA5B;EACA,WAAOC,QAAQ,GAAG,QAAH,GAAc,UAA7B;EACD;EACF;EAEM,SAASC,UAAT,CACLC,OADK,EAELC,KAFK,EAGI;EACT,QAAM;EACJL,IAAAA,MADI;EAEJM,IAAAA,KAFI;EAGJC,IAAAA,QAHI;EAIJN,IAAAA,QAJI;EAKJO,IAAAA,SALI;EAMJhB,IAAAA,QANI;EAOJiB,IAAAA;EAPI,MAQFL,OARJ;;EAUA,MAAIb,UAAU,CAACC,QAAD,CAAd,EAA0B;EACxB,QAAIc,KAAJ,EAAW;EACT,UAAID,KAAK,CAACK,SAAN,KAAoBC,qBAAqB,CAACnB,QAAD,EAAWa,KAAK,CAACO,OAAjB,CAA7C,EAAwE;EACtE,eAAO,KAAP;EACD;EACF,KAJD,MAIO,IAAI,CAACC,eAAe,CAACR,KAAK,CAACb,QAAP,EAAiBA,QAAjB,CAApB,EAAgD;EACrD,aAAO,KAAP;EACD;EACF;;EAED,QAAMsB,iBAAiB,GAAGf,oBAAoB,CAACC,MAAD,EAASC,QAAT,CAA9C;;EAEA,MAAIa,iBAAiB,KAAK,MAA1B,EAAkC;EAChC,WAAO,KAAP;EACD,GAFD,MAEO,IAAIA,iBAAiB,KAAK,KAA1B,EAAiC;EACtC,UAAMZ,QAAQ,GAAGG,KAAK,CAACH,QAAN,EAAjB;;EACA,QAAIY,iBAAiB,KAAK,QAAtB,IAAkC,CAACZ,QAAvC,EAAiD;EAC/C,aAAO,KAAP;EACD;;EACD,QAAIY,iBAAiB,KAAK,UAAtB,IAAoCZ,QAAxC,EAAkD;EAChD,aAAO,KAAP;EACD;EACF;;EAED,MAAI,OAAOO,KAAP,KAAiB,SAAjB,IAA8BJ,KAAK,CAACU,OAAN,OAAoBN,KAAtD,EAA6D;EAC3D,WAAO,KAAP;EACD;;EAED,MAAI,OAAOF,QAAP,KAAoB,SAApB,IAAiCF,KAAK,CAACW,UAAN,OAAuBT,QAA5D,EAAsE;EACpE,WAAO,KAAP;EACD;;EAED,MAAIC,SAAS,IAAI,CAACA,SAAS,CAACH,KAAD,CAA3B,EAAoC;EAClC,WAAO,KAAP;EACD;;EAED,SAAO,IAAP;EACD;EAEM,SAASY,aAAT,CACLb,OADK,EAELc,QAFK,EAGI;EACT,QAAM;EAAEZ,IAAAA,KAAF;EAASC,IAAAA,QAAT;EAAmBC,IAAAA,SAAnB;EAA8Bb,IAAAA;EAA9B,MAA8CS,OAApD;;EACA,MAAIb,UAAU,CAACI,WAAD,CAAd,EAA6B;EAC3B,QAAI,CAACuB,QAAQ,CAACN,OAAT,CAAiBjB,WAAtB,EAAmC;EACjC,aAAO,KAAP;EACD;;EACD,QAAIW,KAAJ,EAAW;EACT,UACEa,YAAY,CAACD,QAAQ,CAACN,OAAT,CAAiBjB,WAAlB,CAAZ,KAA+CwB,YAAY,CAACxB,WAAD,CAD7D,EAEE;EACA,eAAO,KAAP;EACD;EACF,KAND,MAMO,IAAI,CAACkB,eAAe,CAACK,QAAQ,CAACN,OAAT,CAAiBjB,WAAlB,EAA+BA,WAA/B,CAApB,EAAiE;EACtE,aAAO,KAAP;EACD;EACF;;EAED,MACE,OAAOY,QAAP,KAAoB,SAApB,IACCW,QAAQ,CAACE,KAAT,CAAeC,MAAf,KAA0B,SAA3B,KAA0Cd,QAF5C,EAGE;EACA,WAAO,KAAP;EACD;;EAED,MAAIC,SAAS,IAAI,CAACA,SAAS,CAACU,QAAD,CAA3B,EAAuC;EACrC,WAAO,KAAP;EACD;;EAED,SAAO,IAAP;EACD;EAEM,SAASP,qBAAT,CACLnB,QADK,EAELoB,OAFK,EAGG;EACR,QAAMU,MAAM,GAAGV,OAAO,EAAEW,cAAT,IAA2BJ,YAA1C;EACA,SAAOG,MAAM,CAAC9B,QAAD,CAAb;EACD;EAED;;;;EAGO,SAAS2B,YAAT,CAAsB3B,QAAtB,EAAkD;EACvD,QAAMgC,OAAO,GAAGxD,mBAAmB,CAACwB,QAAD,CAAnC;EACA,SAAOiC,eAAe,CAACD,OAAD,CAAtB;EACD;EAED;;;;EAGO,SAASC,eAAT,CAAyB3D,KAAzB,EAA6C;EAClD,SAAO4D,IAAI,CAACC,SAAL,CAAe7D,KAAf,EAAsB,CAAC8D,CAAD,EAAIC,GAAJ,KAC3BC,aAAa,CAACD,GAAD,CAAb,GACIE,MAAM,CAACC,IAAP,CAAYH,GAAZ,EACGI,IADH,GAEGC,MAFH,CAEU,CAACC,MAAD,EAASC,GAAT,KAAiB;EACvBD,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcP,GAAG,CAACO,GAAD,CAAjB;EACA,WAAOD,MAAP;EACD,GALH,EAKK,EALL,CADJ,GAOIN,GARC,CAAP;EAUD;EAED;;;;EAGO,SAAShB,eAAT,CAAyBwB,CAAzB,EAAsCC,CAAtC,EAA4D;EACjE,SAAOC,gBAAgB,CAACvE,mBAAmB,CAACqE,CAAD,CAApB,EAAyBrE,mBAAmB,CAACsE,CAAD,CAA5C,CAAvB;EACD;EAED;;;;EAGO,SAASC,gBAAT,CAA0BF,CAA1B,EAAkCC,CAAlC,EAAmD;EACxD,MAAID,CAAC,KAAKC,CAAV,EAAa;EACX,WAAO,IAAP;EACD;;EAED,MAAI,OAAOD,CAAP,KAAa,OAAOC,CAAxB,EAA2B;EACzB,WAAO,KAAP;EACD;;EAED,MAAID,CAAC,IAAIC,CAAL,IAAU,OAAOD,CAAP,KAAa,QAAvB,IAAmC,OAAOC,CAAP,KAAa,QAApD,EAA8D;EAC5D,WAAO,CAACP,MAAM,CAACC,IAAP,CAAYM,CAAZ,EAAeE,IAAf,CAAoBJ,GAAG,IAAI,CAACG,gBAAgB,CAACF,CAAC,CAACD,GAAD,CAAF,EAASE,CAAC,CAACF,GAAD,CAAV,CAA5C,CAAR;EACD;;EAED,SAAO,KAAP;EACD;EAED;;;;;;EAMO,SAASK,gBAAT,CAA0BJ,CAA1B,EAAkCC,CAAlC,EAA+C;EACpD,MAAID,CAAC,KAAKC,CAAV,EAAa;EACX,WAAOD,CAAP;EACD;;EAED,QAAM7D,KAAK,GAAGP,KAAK,CAACC,OAAN,CAAcmE,CAAd,KAAoBpE,KAAK,CAACC,OAAN,CAAcoE,CAAd,CAAlC;;EAEA,MAAI9D,KAAK,IAAKsD,aAAa,CAACO,CAAD,CAAb,IAAoBP,aAAa,CAACQ,CAAD,CAA/C,EAAqD;EACnD,UAAMI,KAAK,GAAGlE,KAAK,GAAG6D,CAAC,CAAC/E,MAAL,GAAcyE,MAAM,CAACC,IAAP,CAAYK,CAAZ,EAAe/E,MAAhD;EACA,UAAMqF,MAAM,GAAGnE,KAAK,GAAG8D,CAAH,GAAOP,MAAM,CAACC,IAAP,CAAYM,CAAZ,CAA3B;EACA,UAAMM,KAAK,GAAGD,MAAM,CAACrF,MAArB;EACA,UAAMoB,IAAS,GAAGF,KAAK,GAAG,EAAH,GAAQ,EAA/B;EAEA,QAAIqE,UAAU,GAAG,CAAjB;;EAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAApB,EAA2BE,CAAC,EAA5B,EAAgC;EAC9B,YAAMV,GAAG,GAAG5D,KAAK,GAAGsE,CAAH,GAAOH,MAAM,CAACG,CAAD,CAA9B;EACApE,MAAAA,IAAI,CAAC0D,GAAD,CAAJ,GAAYK,gBAAgB,CAACJ,CAAC,CAACD,GAAD,CAAF,EAASE,CAAC,CAACF,GAAD,CAAV,CAA5B;;EACA,UAAI1D,IAAI,CAAC0D,GAAD,CAAJ,KAAcC,CAAC,CAACD,GAAD,CAAnB,EAA0B;EACxBS,QAAAA,UAAU;EACX;EACF;;EAED,WAAOH,KAAK,KAAKE,KAAV,IAAmBC,UAAU,KAAKH,KAAlC,GAA0CL,CAA1C,GAA8C3D,IAArD;EACD;;EAED,SAAO4D,CAAP;EACD;EAED;;;;EAGO,SAASS,mBAAT,CAAgCV,CAAhC,EAAsCC,CAAtC,EAAqD;EAC1D,MAAKD,CAAC,IAAI,CAACC,CAAP,IAAcA,CAAC,IAAI,CAACD,CAAxB,EAA4B;EAC1B,WAAO,KAAP;EACD;;EAED,OAAK,MAAMD,GAAX,IAAkBC,CAAlB,EAAqB;EACnB,QAAIA,CAAC,CAACD,GAAD,CAAD,KAAWE,CAAC,CAACF,GAAD,CAAhB,EAAuB;EACrB,aAAO,KAAP;EACD;EACF;;EAED,SAAO,IAAP;EACD;;EAGM,SAASN,aAAT,CAAuBkB,CAAvB,EAA4C;EACjD,MAAI,CAACC,kBAAkB,CAACD,CAAD,CAAvB,EAA4B;EAC1B,WAAO,KAAP;EACD,GAHgD;;;EAMjD,QAAME,IAAI,GAAGF,CAAC,CAACtG,WAAf;;EACA,MAAI,OAAOwG,IAAP,KAAgB,WAApB,EAAiC;EAC/B,WAAO,IAAP;EACD,GATgD;;;EAYjD,QAAMC,IAAI,GAAGD,IAAI,CAACE,SAAlB;;EACA,MAAI,CAACH,kBAAkB,CAACE,IAAD,CAAvB,EAA+B;EAC7B,WAAO,KAAP;EACD,GAfgD;;;EAkBjD,MAAI,CAACA,IAAI,CAACE,cAAL,CAAoB,eAApB,CAAL,EAA2C;EACzC,WAAO,KAAP;EACD,GApBgD;;;EAuBjD,SAAO,IAAP;EACD;;EAED,SAASJ,kBAAT,CAA4BD,CAA5B,EAA6C;EAC3C,SAAOjB,MAAM,CAACqB,SAAP,CAAiBE,QAAjB,CAA0BC,IAA1B,CAA+BP,CAA/B,MAAsC,iBAA7C;EACD;;EAEM,SAASzD,UAAT,CAAoBzB,KAApB,EAAmD;EACxD,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BG,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAApC;EACD;EAEM,SAAS0F,OAAT,CAAiB1F,KAAjB,EAA6C;EAClD,SAAOA,KAAK,YAAY2F,KAAxB;EACD;EAEM,SAASC,KAAT,CAAeC,OAAf,EAA+C;EACpD,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;EAC5BC,IAAAA,UAAU,CAACD,OAAD,EAAUF,OAAV,CAAV;EACD,GAFM,CAAP;EAGD;EAED;;;;;EAIO,SAASI,iBAAT,CAA2BjH,QAA3B,EAAuD;EAC5D8G,EAAAA,OAAO,CAACC,OAAR,GACGG,IADH,CACQlH,QADR,EAEGmH,KAFH,CAESC,KAAK,IACVJ,UAAU,CAAC,MAAM;EACf,UAAMI,KAAN;EACD,GAFS,CAHd;EAOD;EAEM,SAASC,kBAAT,GAA2D;EAChE,MAAI,OAAOC,eAAP,KAA2B,UAA/B,EAA2C;EACzC,WAAO,IAAIA,eAAJ,EAAP;EACD;EACF;;EC/bM,MAAMC,YAAN,SAA2B5H,YAA3B,CAAwC;EAM7CC,EAAAA,WAAW,GAAG;EACZ;;EACA,SAAK4H,KAAL,GAAaC,OAAO,IAAI;EACtB,UAAI,CAAChH,QAAD,IAAaC,MAAM,EAAEgH,gBAAzB,EAA2C;EACzC,cAAM3H,QAAQ,GAAG,MAAM0H,OAAO,EAA9B,CADyC;;;EAGzC/G,QAAAA,MAAM,CAACgH,gBAAP,CAAwB,kBAAxB,EAA4C3H,QAA5C,EAAsD,KAAtD;EACAW,QAAAA,MAAM,CAACgH,gBAAP,CAAwB,OAAxB,EAAiC3H,QAAjC,EAA2C,KAA3C;EAEA,eAAO,MAAM;EACX;EACAW,UAAAA,MAAM,CAACiH,mBAAP,CAA2B,kBAA3B,EAA+C5H,QAA/C;EACAW,UAAAA,MAAM,CAACiH,mBAAP,CAA2B,OAA3B,EAAoC5H,QAApC;EACD,SAJD;EAKD;EACF,KAbD;EAcD;;EAESI,EAAAA,WAAV,GAA8B;EAC5B,QAAI,CAAC,KAAKyH,OAAV,EAAmB;EACjB,WAAKC,gBAAL,CAAsB,KAAKL,KAA3B;EACD;EACF;;EAESlH,EAAAA,aAAV,GAA0B;EACxB,QAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;EACxB,WAAKqH,OAAL;EACA,WAAKA,OAAL,GAAe3H,SAAf;EACD;EACF;;EAED4H,EAAAA,gBAAgB,CAACL,KAAD,EAAuB;EACrC,SAAKA,KAAL,GAAaA,KAAb;EACA,SAAKI,OAAL;EACA,SAAKA,OAAL,GAAeJ,KAAK,CAACM,OAAO,IAAI;EAC9B,UAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;EAChC,aAAKC,UAAL,CAAgBD,OAAhB;EACD,OAFD,MAEO;EACL,aAAKL,OAAL;EACD;EACF,KANmB,CAApB;EAOD;;EAEDM,EAAAA,UAAU,CAACD,OAAD,EAA0B;EAClC,SAAKA,OAAL,GAAeA,OAAf;;EAEA,QAAIA,OAAJ,EAAa;EACX,WAAKL,OAAL;EACD;EACF;;EAEDA,EAAAA,OAAO,GAAS;EACd,SAAK5H,SAAL,CAAemI,OAAf,CAAuBjI,QAAQ,IAAI;EACjCA,MAAAA,QAAQ;EACT,KAFD;EAGD;;EAEDkI,EAAAA,SAAS,GAAY;EACnB,QAAI,OAAO,KAAKH,OAAZ,KAAwB,SAA5B,EAAuC;EACrC,aAAO,KAAKA,OAAZ;EACD,KAHkB;;;EAMnB,QAAI,OAAOI,QAAP,KAAoB,WAAxB,EAAqC;EACnC,aAAO,IAAP;EACD;;EAED,WAAO,CAACjI,SAAD,EAAY,SAAZ,EAAuB,WAAvB,EAAoCkI,QAApC,CACLD,QAAQ,CAACE,eADJ,CAAP;EAGD;;EA5E4C;QA+ElCC,YAAY,GAAG,IAAId,YAAJ;;EC/ErB,MAAMe,aAAN,SAA4B3I,YAA5B,CAAyC;EAM9CC,EAAAA,WAAW,GAAG;EACZ;;EACA,SAAK4H,KAAL,GAAae,QAAQ,IAAI;EACvB,UAAI,CAAC9H,QAAD,IAAaC,MAAM,EAAEgH,gBAAzB,EAA2C;EACzC,cAAM3H,QAAQ,GAAG,MAAMwI,QAAQ,EAA/B,CADyC;;;EAGzC7H,QAAAA,MAAM,CAACgH,gBAAP,CAAwB,QAAxB,EAAkC3H,QAAlC,EAA4C,KAA5C;EACAW,QAAAA,MAAM,CAACgH,gBAAP,CAAwB,SAAxB,EAAmC3H,QAAnC,EAA6C,KAA7C;EAEA,eAAO,MAAM;EACX;EACAW,UAAAA,MAAM,CAACiH,mBAAP,CAA2B,QAA3B,EAAqC5H,QAArC;EACAW,UAAAA,MAAM,CAACiH,mBAAP,CAA2B,SAA3B,EAAsC5H,QAAtC;EACD,SAJD;EAKD;EACF,KAbD;EAcD;;EAESI,EAAAA,WAAV,GAA8B;EAC5B,QAAI,CAAC,KAAKyH,OAAV,EAAmB;EACjB,WAAKC,gBAAL,CAAsB,KAAKL,KAA3B;EACD;EACF;;EAESlH,EAAAA,aAAV,GAA0B;EACxB,QAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;EACxB,WAAKqH,OAAL;EACA,WAAKA,OAAL,GAAe3H,SAAf;EACD;EACF;;EAED4H,EAAAA,gBAAgB,CAACL,KAAD,EAAuB;EACrC,SAAKA,KAAL,GAAaA,KAAb;EACA,SAAKI,OAAL;EACA,SAAKA,OAAL,GAAeJ,KAAK,CAAEgB,MAAD,IAAsB;EACzC,UAAI,OAAOA,MAAP,KAAkB,SAAtB,EAAiC;EAC/B,aAAKC,SAAL,CAAeD,MAAf;EACD,OAFD,MAEO;EACL,aAAKD,QAAL;EACD;EACF,KANmB,CAApB;EAOD;;EAEDE,EAAAA,SAAS,CAACD,MAAD,EAAyB;EAChC,SAAKA,MAAL,GAAcA,MAAd;;EAEA,QAAIA,MAAJ,EAAY;EACV,WAAKD,QAAL;EACD;EACF;;EAEDA,EAAAA,QAAQ,GAAS;EACf,SAAK1I,SAAL,CAAemI,OAAf,CAAuBjI,QAAQ,IAAI;EACjCA,MAAAA,QAAQ;EACT,KAFD;EAGD;;EAED2I,EAAAA,QAAQ,GAAY;EAClB,QAAI,OAAO,KAAKF,MAAZ,KAAuB,SAA3B,EAAsC;EACpC,aAAO,KAAKA,MAAZ;EACD;;EAED,QACE,OAAOG,SAAP,KAAqB,WAArB,IACA,OAAOA,SAAS,CAACC,MAAjB,KAA4B,WAF9B,EAGE;EACA,aAAO,IAAP;EACD;;EAED,WAAOD,SAAS,CAACC,MAAjB;EACD;;EA5E6C;QA+EnCC,aAAa,GAAG,IAAIP,aAAJ;;ECrD7B,SAASQ,iBAAT,CAA2BC,YAA3B,EAAiD;EAC/C,SAAO9G,IAAI,CAAC+G,GAAL,CAAS,OAAO,KAAKD,YAArB,EAAmC,KAAnC,CAAP;EACD;;EAMM,SAASE,YAAT,CAAsBjI,KAAtB,EAAuD;EAC5D,SAAO,OAAOA,KAAK,EAAEkI,MAAd,KAAyB,UAAhC;EACD;EAEM,MAAMC,cAAN,CAAqB;EAG1BvJ,EAAAA,WAAW,CAACkE,OAAD,EAA0B;EACnC,SAAKsF,MAAL,GAActF,OAAO,EAAEsF,MAAvB;EACA,SAAKC,MAAL,GAAcvF,OAAO,EAAEuF,MAAvB;EACD;;EANyB;EASrB,SAASC,gBAAT,CAA0BtI,KAA1B,EAA+D;EACpE,SAAOA,KAAK,YAAYmI,cAAxB;EACD;;EAIM,MAAMI,OAAN,CAAiD;EAatD3J,EAAAA,WAAW,CAAC4J,MAAD,EAAuC;EAChD,QAAIC,WAAW,GAAG,KAAlB;EACA,QAAIC,QAAJ;EACA,QAAIC,UAAJ;EACA,QAAIC,cAAJ;EACA,QAAIC,aAAJ;EAEA,SAAKC,KAAL,GAAaN,MAAM,CAACM,KAApB;;EACA,SAAKZ,MAAL,GAAca,aAAa,IAAIL,QAAQ,GAAGK,aAAH,CAAvC;;EACA,SAAKN,WAAL,GAAmB,MAAM;EACvBA,MAAAA,WAAW,GAAG,IAAd;EACD,KAFD;;EAGA,SAAKO,aAAL,GAAqB,MAAM;EACzBP,MAAAA,WAAW,GAAG,KAAd;EACD,KAFD;;EAGA,SAAKQ,QAAL,GAAgB,MAAMN,UAAU,IAAhC;;EACA,SAAKZ,YAAL,GAAoB,CAApB;EACA,SAAKmB,QAAL,GAAgB,KAAhB;EACA,SAAKC,UAAL,GAAkB,KAAlB;EACA,SAAKC,qBAAL,GAA6B,KAA7B;EACA,SAAKC,OAAL,GAAe,IAAIvD,OAAJ,CAAmB,CAACwD,YAAD,EAAeC,WAAf,KAA+B;EAC/DX,MAAAA,cAAc,GAAGU,YAAjB;EACAT,MAAAA,aAAa,GAAGU,WAAhB;EACD,KAHc,CAAf;;EAKA,UAAMxD,OAAO,GAAI/F,KAAD,IAAgB;EAC9B,UAAI,CAAC,KAAKmJ,UAAV,EAAsB;EACpB,aAAKA,UAAL,GAAkB,IAAlB;EACAX,QAAAA,MAAM,CAACgB,SAAP,GAAmBxJ,KAAnB;EACA2I,QAAAA,UAAU;EACVC,QAAAA,cAAc,CAAC5I,KAAD,CAAd;EACD;EACF,KAPD;;EASA,UAAMyJ,MAAM,GAAIzJ,KAAD,IAAgB;EAC7B,UAAI,CAAC,KAAKmJ,UAAV,EAAsB;EACpB,aAAKA,UAAL,GAAkB,IAAlB;EACAX,QAAAA,MAAM,CAACkB,OAAP,GAAiB1J,KAAjB;EACA2I,QAAAA,UAAU;EACVE,QAAAA,aAAa,CAAC7I,KAAD,CAAb;EACD;EACF,KAPD;;EASA,UAAM2J,KAAK,GAAG,MAAM;EAClB,aAAO,IAAI7D,OAAJ,CAAY8D,eAAe,IAAI;EACpCjB,QAAAA,UAAU,GAAGiB,eAAb;EACA,aAAKV,QAAL,GAAgB,IAAhB;EACAV,QAAAA,MAAM,CAACqB,OAAP;EACD,OAJM,EAIJ3D,IAJI,CAIC,MAAM;EACZyC,QAAAA,UAAU,GAAG1J,SAAb;EACA,aAAKiK,QAAL,GAAgB,KAAhB;EACAV,QAAAA,MAAM,CAACsB,UAAP;EACD,OARM,CAAP;EASD,KAVD,CA3CgD;;;EAwDhD,UAAMC,GAAG,GAAG,MAAM;EAChB;EACA,UAAI,KAAKZ,UAAT,EAAqB;EACnB;EACD;;EAED,UAAIa,cAAJ,CANgB;;EAShB,UAAI;EACFA,QAAAA,cAAc,GAAGxB,MAAM,CAACyB,EAAP,EAAjB;EACD,OAFD,CAEE,OAAO7D,KAAP,EAAc;EACd4D,QAAAA,cAAc,GAAGlE,OAAO,CAAC2D,MAAR,CAAerD,KAAf,CAAjB;EACD,OAbe;;;EAgBhBsC,MAAAA,QAAQ,GAAGK,aAAa,IAAI;EAC1B,YAAI,CAAC,KAAKI,UAAV,EAAsB;EACpBM,UAAAA,MAAM,CAAC,IAAItB,cAAJ,CAAmBY,aAAnB,CAAD,CAAN;EAEA,eAAKD,KAAL,KAHoB;;EAMpB,cAAIb,YAAY,CAAC+B,cAAD,CAAhB,EAAkC;EAChC,gBAAI;EACFA,cAAAA,cAAc,CAAC9B,MAAf;EACD,aAFD,CAEE,MAAM;EACT;EACF;EACF,OAbD,CAhBgB;;;EAgChB,WAAKkB,qBAAL,GAA6BnB,YAAY,CAAC+B,cAAD,CAAzC;EAEAlE,MAAAA,OAAO,CAACC,OAAR,CAAgBiE,cAAhB,EACG9D,IADH,CACQH,OADR,EAEGI,KAFH,CAESC,KAAK,IAAI;EACd;EACA,YAAI,KAAK+C,UAAT,EAAqB;EACnB;EACD,SAJa;;;EAOd,cAAMe,KAAK,GAAG1B,MAAM,CAAC0B,KAAP,IAAgB,CAA9B;EACA,cAAMC,UAAU,GAAG3B,MAAM,CAAC2B,UAAP,IAAqBrC,iBAAxC;EACA,cAAMsC,KAAK,GACT,OAAOD,UAAP,KAAsB,UAAtB,GACIA,UAAU,CAAC,KAAKpC,YAAN,EAAoB3B,KAApB,CADd,GAEI+D,UAHN;EAIA,cAAME,WAAW,GACfH,KAAK,KAAK,IAAV,IACC,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,KAAKnC,YAAL,GAAoBmC,KADlD,IAEC,OAAOA,KAAP,KAAiB,UAAjB,IAA+BA,KAAK,CAAC,KAAKnC,YAAN,EAAoB3B,KAApB,CAHvC;;EAKA,YAAIqC,WAAW,IAAI,CAAC4B,WAApB,EAAiC;EAC/B;EACAZ,UAAAA,MAAM,CAACrD,KAAD,CAAN;EACA;EACD;;EAED,aAAK2B,YAAL,GAxBc;;EA2BdS,QAAAA,MAAM,CAAC8B,MAAP,GAAgB,KAAKvC,YAArB,EAAmC3B,KAAnC,EA3Bc;;EA8BdR,QAAAA,KAAK,CAACwE,KAAD,CAAL;EAAA,SAEGlE,IAFH,CAEQ,MAAM;EACV,cAAI,CAACmB,YAAY,CAACJ,SAAb,EAAD,IAA6B,CAACY,aAAa,CAACH,QAAd,EAAlC,EAA4D;EAC1D,mBAAOiC,KAAK,EAAZ;EACD;EACF,SANH,EAOGzD,IAPH,CAOQ,MAAM;EACV,cAAIuC,WAAJ,EAAiB;EACfgB,YAAAA,MAAM,CAACrD,KAAD,CAAN;EACD,WAFD,MAEO;EACL2D,YAAAA,GAAG;EACJ;EACF,SAbH;EAcD,OA9CH;EA+CD,KAjFD,CAxDgD;;;EA4IhDA,IAAAA,GAAG;EACJ;;EA1JqD;;EClDxD;EAEO,MAAMQ,aAAN,CAAoB;EAMzB3L,EAAAA,WAAW,GAAG;EACZ,SAAK4L,KAAL,GAAa,EAAb;EACA,SAAKC,YAAL,GAAoB,CAApB;;EAEA,SAAKC,QAAL,GAAiB1L,QAAD,IAA0B;EACxCA,MAAAA,QAAQ;EACT,KAFD;;EAIA,SAAK2L,aAAL,GAAsB3L,QAAD,IAA0B;EAC7CA,MAAAA,QAAQ;EACT,KAFD;EAGD;;EAED4L,EAAAA,KAAK,CAAI5L,QAAJ,EAA0B;EAC7B,QAAIqF,MAAJ;EACA,SAAKoG,YAAL;;EACA,QAAI;EACFpG,MAAAA,MAAM,GAAGrF,QAAQ,EAAjB;EACD,KAFD,SAEU;EACR,WAAKyL,YAAL;;EACA,UAAI,CAAC,KAAKA,YAAV,EAAwB;EACtB,aAAKI,KAAL;EACD;EACF;;EACD,WAAOxG,MAAP;EACD;;EAEDyG,EAAAA,QAAQ,CAAC9L,QAAD,EAAiC;EACvC,QAAI,KAAKyL,YAAT,EAAuB;EACrB,WAAKD,KAAL,CAAWtL,IAAX,CAAgBF,QAAhB;EACD,KAFD,MAEO;EACLiH,MAAAA,iBAAiB,CAAC,MAAM;EACtB,aAAKyE,QAAL,CAAc1L,QAAd;EACD,OAFgB,CAAjB;EAGD;EACF;EAED;;;;;EAGA+L,EAAAA,UAAU,CAAqB/L,QAArB,EAAqC;EAC7C,WAAQ,CAAC,GAAGgM,IAAJ,KAAoB;EAC1B,WAAKF,QAAL,CAAc,MAAM;EAClB9L,QAAAA,QAAQ,CAAC,GAAGgM,IAAJ,CAAR;EACD,OAFD;EAGD,KAJD;EAKD;;EAEDH,EAAAA,KAAK,GAAS;EACZ,UAAML,KAAK,GAAG,KAAKA,KAAnB;EACA,SAAKA,KAAL,GAAa,EAAb;;EACA,QAAIA,KAAK,CAAChL,MAAV,EAAkB;EAChByG,MAAAA,iBAAiB,CAAC,MAAM;EACtB,aAAK0E,aAAL,CAAmB,MAAM;EACvBH,UAAAA,KAAK,CAACxD,OAAN,CAAchI,QAAQ,IAAI;EACxB,iBAAK0L,QAAL,CAAc1L,QAAd;EACD,WAFD;EAGD,SAJD;EAKD,OANgB,CAAjB;EAOD;EACF;EAED;;;;;;EAIAiM,EAAAA,iBAAiB,CAAChB,EAAD,EAAqB;EACpC,SAAKS,QAAL,GAAgBT,EAAhB;EACD;EAED;;;;;;EAIAiB,EAAAA,sBAAsB,CAACjB,EAAD,EAA0B;EAC9C,SAAKU,aAAL,GAAqBV,EAArB;EACD;;EAlFwB;;QAuFdkB,aAAa,GAAG,IAAIZ,aAAJ;;ECnG7B;EAUA;EAEA,IAAIa,MAAc,GAAGC,OAArB;EAEO,SAASC,SAAT,GAA6B;EAClC,SAAOF,MAAP;EACD;EAEM,SAASG,SAAT,CAAmBC,SAAnB,EAAsC;EAC3CJ,EAAAA,MAAM,GAAGI,SAAT;EACD;;ECyHD;EAEO,MAAMC,KAAN,CAKL;EAmBA7M,EAAAA,WAAW,CAAC4J,MAAD,EAA8D;EACvE,SAAKkD,mBAAL,GAA2B,KAA3B;EACA,SAAKC,YAAL,GAAoB,KAApB;EACA,SAAKC,cAAL,GAAsBpD,MAAM,CAACoD,cAA7B;EACA,SAAKC,UAAL,CAAgBrD,MAAM,CAAC1F,OAAvB;EACA,SAAKgJ,SAAL,GAAiB,EAAjB;EACA,SAAKC,KAAL,GAAavD,MAAM,CAACuD,KAApB;EACA,SAAKrK,QAAL,GAAgB8G,MAAM,CAAC9G,QAAvB;EACA,SAAKkB,SAAL,GAAiB4F,MAAM,CAAC5F,SAAxB;EACA,SAAKoJ,YAAL,GAAoBxD,MAAM,CAAClF,KAAP,IAAgB,KAAK2I,eAAL,CAAqB,KAAKnJ,OAA1B,CAApC;EACA,SAAKQ,KAAL,GAAa,KAAK0I,YAAlB;EACA,SAAKE,IAAL,GAAY1D,MAAM,CAAC0D,IAAnB;EACA,SAAKC,UAAL;EACD;;EAEON,EAAAA,UAAR,CACE/I,OADF,EAEQ;EACN,SAAKA,OAAL,GAAe,EAAE,GAAG,KAAK8I,cAAV;EAA0B,SAAG9I;EAA7B,KAAf;EAEA,SAAKoJ,IAAL,GAAYpJ,OAAO,EAAEoJ,IAArB,CAHM;;EAMN,SAAKE,SAAL,GAAiBnL,IAAI,CAACC,GAAL,CACf,KAAKkL,SAAL,IAAkB,CADH,EAEf,KAAKtJ,OAAL,CAAasJ,SAAb,IAA0B,IAAI,EAAJ,GAAS,IAFpB,CAAjB;EAID;;EAEDC,EAAAA,iBAAiB,CACfvJ,OADe,EAET;EACN,SAAK8I,cAAL,GAAsB9I,OAAtB;EACD;;EAEOqJ,EAAAA,UAAR,GAA2B;EACzB,SAAKG,cAAL;;EAEA,QAAIvM,cAAc,CAAC,KAAKqM,SAAN,CAAlB,EAAoC;EAClC,WAAKG,SAAL,GAAiBvG,UAAU,CAAC,MAAM;EAChC,aAAKwG,cAAL;EACD,OAF0B,EAExB,KAAKJ,SAFmB,CAA3B;EAGD;EACF;;EAEOE,EAAAA,cAAR,GAAyB;EACvB,QAAI,KAAKC,SAAT,EAAoB;EAClBE,MAAAA,YAAY,CAAC,KAAKF,SAAN,CAAZ;EACA,WAAKA,SAAL,GAAiBtN,SAAjB;EACD;EACF;;EAEOuN,EAAAA,cAAR,GAAyB;EACvB,QAAI,CAAC,KAAKV,SAAL,CAAetM,MAApB,EAA4B;EAC1B,UAAI,KAAK8D,KAAL,CAAWJ,UAAf,EAA2B;EACzB,YAAI,KAAKyI,YAAT,EAAuB;EACrB,eAAKQ,UAAL;EACD;EACF,OAJD,MAIO;EACL,aAAKJ,KAAL,CAAWW,MAAX,CAAkB,IAAlB;EACD;EACF;EACF;;EAEDC,EAAAA,OAAO,CACL9M,OADK,EAELiD,OAFK,EAGE;EACP,UAAM8J,QAAQ,GAAG,KAAKtJ,KAAL,CAAWuJ,IAA5B,CADO;;EAIP,QAAIA,IAAI,GAAGjN,gBAAgB,CAACC,OAAD,EAAU+M,QAAV,CAA3B,CAJO;;EAOP,QAAI,KAAK9J,OAAL,CAAagK,WAAb,GAA2BF,QAA3B,EAAqCC,IAArC,CAAJ,EAAgD;EAC9CA,MAAAA,IAAI,GAAGD,QAAP;EACD,KAFD,MAEO,IAAI,KAAK9J,OAAL,CAAaiK,iBAAb,KAAmC,KAAvC,EAA8C;EACnD;EACAF,MAAAA,IAAI,GAAGlI,gBAAgB,CAACiI,QAAD,EAAWC,IAAX,CAAvB;EACD,KAZM;;;EAeP,SAAKG,QAAL,CAAc;EACZH,MAAAA,IADY;EAEZI,MAAAA,IAAI,EAAE,SAFM;EAGZC,MAAAA,aAAa,EAAEpK,OAAO,EAAE/B;EAHZ,KAAd;EAMA,WAAO8L,IAAP;EACD;;EAEDM,EAAAA,QAAQ,CACN7J,KADM,EAEN8J,eAFM,EAGA;EACN,SAAKJ,QAAL,CAAc;EAAEC,MAAAA,IAAI,EAAE,UAAR;EAAoB3J,MAAAA,KAApB;EAA2B8J,MAAAA;EAA3B,KAAd;EACD;;EAEDlF,EAAAA,MAAM,CAACpF,OAAD,EAAyC;EAC7C,UAAMuG,OAAO,GAAG,KAAKA,OAArB;EACA,SAAKgE,OAAL,EAAcnF,MAAd,CAAqBpF,OAArB;EACA,WAAOuG,OAAO,GAAGA,OAAO,CAACnD,IAAR,CAAavG,IAAb,EAAmBwG,KAAnB,CAAyBxG,IAAzB,CAAH,GAAoCmG,OAAO,CAACC,OAAR,EAAlD;EACD;;EAEDuH,EAAAA,OAAO,GAAS;EACd,SAAKhB,cAAL;EACA,SAAKpE,MAAL,CAAY;EAAEG,MAAAA,MAAM,EAAE;EAAV,KAAZ;EACD;;EAEDkF,EAAAA,KAAK,GAAS;EACZ,SAAKD,OAAL;EACA,SAAKH,QAAL,CAAc,KAAKnB,YAAnB;EACD;;EAED5J,EAAAA,QAAQ,GAAY;EAClB,WAAO,KAAK0J,SAAL,CAAepH,IAAf,CAAoB8I,QAAQ,IAAIA,QAAQ,CAAC1K,OAAT,CAAiB2K,OAAjB,KAA6B,KAA7D,CAAP;EACD;;EAEDvK,EAAAA,UAAU,GAAY;EACpB,WAAO,KAAKI,KAAL,CAAWJ,UAAlB;EACD;;EAEDD,EAAAA,OAAO,GAAY;EACjB,WACE,KAAKK,KAAL,CAAWoK,aAAX,IACA,CAAC,KAAKpK,KAAL,CAAW4J,aADZ,IAEA,KAAKpB,SAAL,CAAepH,IAAf,CAAoB8I,QAAQ,IAAIA,QAAQ,CAACG,gBAAT,GAA4B1K,OAA5D,CAHF;EAKD;;EAED2K,EAAAA,aAAa,CAAC5M,SAAS,GAAG,CAAb,EAAyB;EACpC,WACE,KAAKsC,KAAL,CAAWoK,aAAX,IACA,CAAC,KAAKpK,KAAL,CAAW4J,aADZ,IAEA,CAACpM,cAAc,CAAC,KAAKwC,KAAL,CAAW4J,aAAZ,EAA2BlM,SAA3B,CAHjB;EAKD;;EAEDyF,EAAAA,OAAO,GAAS;EACd,UAAM+G,QAAQ,GAAG,KAAK1B,SAAL,CAAe+B,IAAf,CAAoBxO,CAAC,IAAIA,CAAC,CAACyO,wBAAF,EAAzB,CAAjB;;EAEA,QAAIN,QAAJ,EAAc;EACZA,MAAAA,QAAQ,CAACO,OAAT;EACD,KALa;;;EAQd,SAAKV,OAAL,EAAcpE,QAAd;EACD;;EAED1B,EAAAA,QAAQ,GAAS;EACf,UAAMiG,QAAQ,GAAG,KAAK1B,SAAL,CAAe+B,IAAf,CAAoBxO,CAAC,IAAIA,CAAC,CAAC2O,sBAAF,EAAzB,CAAjB;;EAEA,QAAIR,QAAJ,EAAc;EACZA,MAAAA,QAAQ,CAACO,OAAT;EACD,KALc;;;EAQf,SAAKV,OAAL,EAAcpE,QAAd;EACD;;EAEDgF,EAAAA,WAAW,CAACT,QAAD,EAAyD;EAClE,QAAI,KAAK1B,SAAL,CAAetL,OAAf,CAAuBgN,QAAvB,MAAqC,CAAC,CAA1C,EAA6C;EAC3C,WAAK1B,SAAL,CAAe5M,IAAf,CAAoBsO,QAApB;EACA,WAAK7B,YAAL,GAAoB,IAApB,CAF2C;;EAK3C,WAAKW,cAAL;EAEA,WAAKP,KAAL,CAAWmC,MAAX,CAAkB;EAAEjB,QAAAA,IAAI,EAAE,eAAR;EAAyB1K,QAAAA,KAAK,EAAE,IAAhC;EAAsCiL,QAAAA;EAAtC,OAAlB;EACD;EACF;;EAEDW,EAAAA,cAAc,CAACX,QAAD,EAAyD;EACrE,QAAI,KAAK1B,SAAL,CAAetL,OAAf,CAAuBgN,QAAvB,MAAqC,CAAC,CAA1C,EAA6C;EAC3C,WAAK1B,SAAL,GAAiB,KAAKA,SAAL,CAAe1M,MAAf,CAAsBC,CAAC,IAAIA,CAAC,KAAKmO,QAAjC,CAAjB;;EAEA,UAAI,CAAC,KAAK1B,SAAL,CAAetM,MAApB,EAA4B;EAC1B;EACA;EACA,YAAI,KAAK6N,OAAT,EAAkB;EAChB,cAAI,KAAKA,OAAL,CAAajE,qBAAb,IAAsC,KAAKsC,mBAA/C,EAAoE;EAClE,iBAAK2B,OAAL,CAAanF,MAAb,CAAoB;EAAEE,cAAAA,MAAM,EAAE;EAAV,aAApB;EACD,WAFD,MAEO;EACL,iBAAKiF,OAAL,CAAa5E,WAAb;EACD;EACF;;EAED,YAAI,KAAK2D,SAAT,EAAoB;EAClB,eAAKD,UAAL;EACD,SAFD,MAEO;EACL,eAAKJ,KAAL,CAAWW,MAAX,CAAkB,IAAlB;EACD;EACF;;EAED,WAAKX,KAAL,CAAWmC,MAAX,CAAkB;EAAEjB,QAAAA,IAAI,EAAE,iBAAR;EAA2B1K,QAAAA,KAAK,EAAE,IAAlC;EAAwCiL,QAAAA;EAAxC,OAAlB;EACD;EACF;;EAEDY,EAAAA,iBAAiB,GAAW;EAC1B,WAAO,KAAKtC,SAAL,CAAetM,MAAtB;EACD;;EAED6O,EAAAA,UAAU,GAAS;EACjB,QAAI,CAAC,KAAK/K,KAAL,CAAWoK,aAAhB,EAA+B;EAC7B,WAAKV,QAAL,CAAc;EAAEC,QAAAA,IAAI,EAAE;EAAR,OAAd;EACD;EACF;;EAEDqB,EAAAA,KAAK,CACHxL,OADG,EAEHyL,YAFG,EAGa;EAChB,QAAI,KAAKjL,KAAL,CAAWJ,UAAf,EAA2B;EACzB,UAAI,KAAKI,KAAL,CAAW4J,aAAX,IAA4BqB,YAAY,EAAEC,aAA9C,EAA6D;EAC3D;EACA,aAAKtG,MAAL,CAAY;EAAEG,UAAAA,MAAM,EAAE;EAAV,SAAZ;EACD,OAHD,MAGO,IAAI,KAAKgB,OAAT,EAAkB;EACvB;EACA,aAAKgE,OAAL,EAAcrE,aAAd,GAFuB;;EAIvB,eAAO,KAAKK,OAAZ;EACD;EACF,KAXe;;;EAchB,QAAIvG,OAAJ,EAAa;EACX,WAAK+I,UAAL,CAAgB/I,OAAhB;EACD,KAhBe;EAmBhB;;;EACA,QAAI,CAAC,KAAKA,OAAL,CAAanB,OAAlB,EAA2B;EACzB,YAAM6L,QAAQ,GAAG,KAAK1B,SAAL,CAAe+B,IAAf,CAAoBxO,CAAC,IAAIA,CAAC,CAACyD,OAAF,CAAUnB,OAAnC,CAAjB;;EACA,UAAI6L,QAAJ,EAAc;EACZ,aAAK3B,UAAL,CAAgB2B,QAAQ,CAAC1K,OAAzB;EACD;EACF;;EAED,UAAMpB,QAAQ,GAAGxB,mBAAmB,CAAC,KAAKwB,QAAN,CAApC;EACA,UAAM+M,eAAe,GAAGpI,kBAAkB,EAA1C,CA5BgB;;EA+BhB,UAAMqI,cAA+C,GAAG;EACtDhN,MAAAA,QADsD;EAEtDiN,MAAAA,SAAS,EAAE1P,SAF2C;EAGtDiN,MAAAA,IAAI,EAAE,KAAKA;EAH2C,KAAxD;EAMAjI,IAAAA,MAAM,CAAC2K,cAAP,CAAsBF,cAAtB,EAAsC,QAAtC,EAAgD;EAC9CG,MAAAA,UAAU,EAAE,IADkC;EAE9CC,MAAAA,GAAG,EAAE,MAAM;EACT,YAAIL,eAAJ,EAAqB;EACnB,eAAK/C,mBAAL,GAA2B,IAA3B;EACA,iBAAO+C,eAAe,CAACM,MAAvB;EACD;;EACD,eAAO9P,SAAP;EACD;EAR6C,KAAhD,EArCgB;;EAiDhB,UAAM+P,OAAO,GAAG,MAAM;EACpB,UAAI,CAAC,KAAKlM,OAAL,CAAanB,OAAlB,EAA2B;EACzB,eAAOmE,OAAO,CAAC2D,MAAR,CAAe,iBAAf,CAAP;EACD;;EACD,WAAKiC,mBAAL,GAA2B,KAA3B;EACA,aAAO,KAAK5I,OAAL,CAAanB,OAAb,CAAqB+M,cAArB,CAAP;EACD,KAND,CAjDgB;;;EA0DhB,UAAMO,OAA6D,GAAG;EACpEV,MAAAA,YADoE;EAEpEzL,MAAAA,OAAO,EAAE,KAAKA,OAFsD;EAGpEpB,MAAAA,QAAQ,EAAEA,QAH0D;EAIpE4B,MAAAA,KAAK,EAAE,KAAKA,KAJwD;EAKpE0L,MAAAA,OALoE;EAMpE9C,MAAAA,IAAI,EAAE,KAAKA;EANyD,KAAtE;;EASA,QAAI,KAAKpJ,OAAL,CAAaoM,QAAb,EAAuBC,OAA3B,EAAoC;EAClC,WAAKrM,OAAL,CAAaoM,QAAb,EAAuBC,OAAvB,CAA+BF,OAA/B;EACD,KArEe;;;EAwEhB,SAAKG,WAAL,GAAmB,KAAK9L,KAAxB,CAxEgB;;EA2EhB,QACE,CAAC,KAAKA,KAAL,CAAWJ,UAAZ,IACA,KAAKI,KAAL,CAAW+L,SAAX,KAAyBJ,OAAO,CAACV,YAAR,EAAsBrC,IAFjD,EAGE;EACA,WAAKc,QAAL,CAAc;EAAEC,QAAAA,IAAI,EAAE,OAAR;EAAiBf,QAAAA,IAAI,EAAE+C,OAAO,CAACV,YAAR,EAAsBrC;EAA7C,OAAd;EACD,KAhFe;;;EAmFhB,SAAKmB,OAAL,GAAe,IAAI9E,OAAJ,CAAY;EACzB0B,MAAAA,EAAE,EAAEgF,OAAO,CAACD,OADa;EAEzBlG,MAAAA,KAAK,EAAE2F,eAAe,EAAE3F,KAAjB,EAAwBwG,IAAxB,CAA6Bb,eAA7B,CAFkB;EAGzBjF,MAAAA,SAAS,EAAEqD,IAAI,IAAI;EACjB,aAAKF,OAAL,CAAaE,IAAb,EADiB;;EAIjB,aAAKd,KAAL,CAAWvD,MAAX,CAAkBgB,SAAlB,GAA8BqD,IAA9B,EAAoC,IAApC,EAJiB;;EAOjB,YAAI,KAAKT,SAAL,KAAmB,CAAvB,EAA0B;EACxB,eAAKI,cAAL;EACD;EACF,OAbwB;EAczB9C,MAAAA,OAAO,EAAGtD,KAAD,IAA0C;EACjD;EACA,YAAI,EAAEkC,gBAAgB,CAAClC,KAAD,CAAhB,IAA2BA,KAAK,CAACiC,MAAnC,CAAJ,EAAgD;EAC9C,eAAK2E,QAAL,CAAc;EACZC,YAAAA,IAAI,EAAE,OADM;EAEZ7G,YAAAA,KAAK,EAAEA;EAFK,WAAd;EAID;;EAED,YAAI,CAACkC,gBAAgB,CAAClC,KAAD,CAArB,EAA8B;EAC5B;EACA,eAAK2F,KAAL,CAAWvD,MAAX,CAAkBkB,OAAlB,GAA4BtD,KAA5B,EAAmC,IAAnC,EAF4B;;EAK5BkF,UAAAA,SAAS,GAAGlF,KAAZ,CAAkBA,KAAlB;EACD,SAfgD;;;EAkBjD,YAAI,KAAKgG,SAAL,KAAmB,CAAvB,EAA0B;EACxB,eAAKI,cAAL;EACD;EACF,OAnCwB;EAoCzBlC,MAAAA,MAAM,EAAE,MAAM;EACZ,aAAK0C,QAAL,CAAc;EAAEC,UAAAA,IAAI,EAAE;EAAR,SAAd;EACD,OAtCwB;EAuCzBpD,MAAAA,OAAO,EAAE,MAAM;EACb,aAAKmD,QAAL,CAAc;EAAEC,UAAAA,IAAI,EAAE;EAAR,SAAd;EACD,OAzCwB;EA0CzBnD,MAAAA,UAAU,EAAE,MAAM;EAChB,aAAKkD,QAAL,CAAc;EAAEC,UAAAA,IAAI,EAAE;EAAR,SAAd;EACD,OA5CwB;EA6CzB/C,MAAAA,KAAK,EAAE+E,OAAO,CAACnM,OAAR,CAAgBoH,KA7CE;EA8CzBC,MAAAA,UAAU,EAAE8E,OAAO,CAACnM,OAAR,CAAgBqH;EA9CH,KAAZ,CAAf;EAiDA,SAAKd,OAAL,GAAe,KAAKgE,OAAL,CAAahE,OAA5B;EAEA,WAAO,KAAKA,OAAZ;EACD;;EAEO2D,EAAAA,QAAR,CAAiBuC,MAAjB,EAAsD;EACpD,SAAKjM,KAAL,GAAa,KAAKkM,OAAL,CAAa,KAAKlM,KAAlB,EAAyBiM,MAAzB,CAAb;EAEApE,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxB,WAAKkB,SAAL,CAAe9E,OAAf,CAAuBwG,QAAQ,IAAI;EACjCA,QAAAA,QAAQ,CAACiC,aAAT,CAAuBF,MAAvB;EACD,OAFD;EAIA,WAAKxD,KAAL,CAAWmC,MAAX,CAAkB;EAAE3L,QAAAA,KAAK,EAAE,IAAT;EAAe0K,QAAAA,IAAI,EAAE,cAArB;EAAqCsC,QAAAA;EAArC,OAAlB;EACD,KAND;EAOD;;EAEStD,EAAAA,eAAV,CACEnJ,OADF,EAE6B;EAC3B,UAAM+J,IAAI,GACR,OAAO/J,OAAO,CAAC4M,WAAf,KAA+B,UAA/B,GACK5M,OAAO,CAAC4M,WAAT,EADJ,GAEI5M,OAAO,CAAC4M,WAHd;EAKA,UAAMC,cAAc,GAAG,OAAO7M,OAAO,CAAC4M,WAAf,KAA+B,WAAtD;EAEA,UAAME,oBAAoB,GAAGD,cAAc,GACvC,OAAO7M,OAAO,CAAC8M,oBAAf,KAAwC,UAAxC,GACG9M,OAAO,CAAC8M,oBAAT,EADF,GAEE9M,OAAO,CAAC8M,oBAH6B,GAIvC,CAJJ;EAMA,UAAMC,OAAO,GAAG,OAAOhD,IAAP,KAAgB,WAAhC;EAEA,WAAO;EACLA,MAAAA,IADK;EAELiD,MAAAA,eAAe,EAAE,CAFZ;EAGL5C,MAAAA,aAAa,EAAE2C,OAAO,GAAGD,oBAAoB,IAAIzO,IAAI,CAACC,GAAL,EAA3B,GAAwC,CAHzD;EAILgF,MAAAA,KAAK,EAAE,IAJF;EAKL2J,MAAAA,gBAAgB,EAAE,CALb;EAMLC,MAAAA,cAAc,EAAE,CANX;EAOLC,MAAAA,iBAAiB,EAAE,CAPd;EAQLZ,MAAAA,SAAS,EAAE,IARN;EASLnM,MAAAA,UAAU,EAAE,KATP;EAULwK,MAAAA,aAAa,EAAE,KAVV;EAWLxE,MAAAA,QAAQ,EAAE,KAXL;EAYL3F,MAAAA,MAAM,EAAEsM,OAAO,GAAG,SAAH,GAAe;EAZzB,KAAP;EAcD;;EAESL,EAAAA,OAAV,CACElM,KADF,EAEEiM,MAFF,EAG6B;EAC3B,YAAQA,MAAM,CAACtC,IAAf;EACE,WAAK,QAAL;EACE,eAAO,EACL,GAAG3J,KADE;EAEL2M,UAAAA,iBAAiB,EAAE3M,KAAK,CAAC2M,iBAAN,GAA0B;EAFxC,SAAP;;EAIF,WAAK,OAAL;EACE,eAAO,EACL,GAAG3M,KADE;EAEL4F,UAAAA,QAAQ,EAAE;EAFL,SAAP;;EAIF,WAAK,UAAL;EACE,eAAO,EACL,GAAG5F,KADE;EAEL4F,UAAAA,QAAQ,EAAE;EAFL,SAAP;;EAIF,WAAK,OAAL;EACE,eAAO,EACL,GAAG5F,KADE;EAEL2M,UAAAA,iBAAiB,EAAE,CAFd;EAGLZ,UAAAA,SAAS,EAAEE,MAAM,CAACrD,IAAP,IAAe,IAHrB;EAILhJ,UAAAA,UAAU,EAAE,IAJP;EAKLgG,UAAAA,QAAQ,EAAE,KALL;EAML,cAAI,CAAC5F,KAAK,CAAC4J,aAAP,IAAwB;EAC1B9G,YAAAA,KAAK,EAAE,IADmB;EAE1B7C,YAAAA,MAAM,EAAE;EAFkB,WAA5B;EANK,SAAP;;EAWF,WAAK,SAAL;EACE,eAAO,EACL,GAAGD,KADE;EAELuJ,UAAAA,IAAI,EAAE0C,MAAM,CAAC1C,IAFR;EAGLiD,UAAAA,eAAe,EAAExM,KAAK,CAACwM,eAAN,GAAwB,CAHpC;EAIL5C,UAAAA,aAAa,EAAEqC,MAAM,CAACrC,aAAP,IAAwB/L,IAAI,CAACC,GAAL,EAJlC;EAKLgF,UAAAA,KAAK,EAAE,IALF;EAML6J,UAAAA,iBAAiB,EAAE,CANd;EAOL/M,UAAAA,UAAU,EAAE,KAPP;EAQLwK,UAAAA,aAAa,EAAE,KARV;EASLxE,UAAAA,QAAQ,EAAE,KATL;EAUL3F,UAAAA,MAAM,EAAE;EAVH,SAAP;;EAYF,WAAK,OAAL;EACE,cAAM6C,KAAK,GAAGmJ,MAAM,CAACnJ,KAArB;;EAEA,YAAIkC,gBAAgB,CAAClC,KAAD,CAAhB,IAA2BA,KAAK,CAACgC,MAAjC,IAA2C,KAAKgH,WAApD,EAAiE;EAC/D,iBAAO,EAAE,GAAG,KAAKA;EAAV,WAAP;EACD;;EAED,eAAO,EACL,GAAG9L,KADE;EAEL8C,UAAAA,KAAK,EAAEA,KAFF;EAGL2J,UAAAA,gBAAgB,EAAEzM,KAAK,CAACyM,gBAAN,GAAyB,CAHtC;EAILC,UAAAA,cAAc,EAAE7O,IAAI,CAACC,GAAL,EAJX;EAKL6O,UAAAA,iBAAiB,EAAE3M,KAAK,CAAC2M,iBAAN,GAA0B,CALxC;EAML/M,UAAAA,UAAU,EAAE,KANP;EAOLgG,UAAAA,QAAQ,EAAE,KAPL;EAQL3F,UAAAA,MAAM,EAAE;EARH,SAAP;;EAUF,WAAK,YAAL;EACE,eAAO,EACL,GAAGD,KADE;EAELoK,UAAAA,aAAa,EAAE;EAFV,SAAP;;EAIF,WAAK,UAAL;EACE,eAAO,EACL,GAAGpK,KADE;EAEL,aAAGiM,MAAM,CAACjM;EAFL,SAAP;;EAIF;EACE,eAAOA,KAAP;EArEJ;EAuED;;EAxeD;;ECjFF;EAEO,MAAM4M,UAAN,SAAyBvR,YAAzB,CAA0D;EAM/DC,EAAAA,WAAW,CAAC4J,MAAD,EAA4B;EACrC;EACA,SAAKA,MAAL,GAAcA,MAAM,IAAI,EAAxB;EACA,SAAK2H,OAAL,GAAe,EAAf;EACA,SAAKC,UAAL,GAAkB,EAAlB;EACD;;EAEDC,EAAAA,KAAK,CACHC,MADG,EAEHxN,OAFG,EAGHQ,KAHG,EAI4C;EAC/C,UAAM5B,QAAQ,GAAGoB,OAAO,CAACpB,QAAzB;EACA,UAAMkB,SAAS,GACbE,OAAO,CAACF,SAAR,IAAqBC,qBAAqB,CAACnB,QAAD,EAAWoB,OAAX,CAD5C;EAEA,QAAIP,KAAK,GAAG,KAAKuM,GAAL,CAAiDlM,SAAjD,CAAZ;;EAEA,QAAI,CAACL,KAAL,EAAY;EACVA,MAAAA,KAAK,GAAG,IAAIkJ,KAAJ,CAAU;EAChBM,QAAAA,KAAK,EAAE,IADS;EAEhBrK,QAAAA,QAFgB;EAGhBkB,QAAAA,SAHgB;EAIhBE,QAAAA,OAAO,EAAEwN,MAAM,CAACC,mBAAP,CAA2BzN,OAA3B,CAJO;EAKhBQ,QAAAA,KALgB;EAMhBsI,QAAAA,cAAc,EAAE0E,MAAM,CAACE,gBAAP,CAAwB9O,QAAxB,CANA;EAOhBwK,QAAAA,IAAI,EAAEpJ,OAAO,CAACoJ;EAPE,OAAV,CAAR;EASA,WAAKuE,GAAL,CAASlO,KAAT;EACD;;EAED,WAAOA,KAAP;EACD;;EAEDkO,EAAAA,GAAG,CAAClO,KAAD,EAAyC;EAC1C,QAAI,CAAC,KAAK6N,UAAL,CAAgB7N,KAAK,CAACK,SAAtB,CAAL,EAAuC;EACrC,WAAKwN,UAAL,CAAgB7N,KAAK,CAACK,SAAtB,IAAmCL,KAAnC;EACA,WAAK4N,OAAL,CAAajR,IAAb,CAAkBqD,KAAlB;EACA,WAAK2L,MAAL,CAAY;EACVjB,QAAAA,IAAI,EAAE,YADI;EAEV1K,QAAAA;EAFU,OAAZ;EAID;EACF;;EAEDmK,EAAAA,MAAM,CAACnK,KAAD,EAAyC;EAC7C,UAAMmO,UAAU,GAAG,KAAKN,UAAL,CAAgB7N,KAAK,CAACK,SAAtB,CAAnB;;EAEA,QAAI8N,UAAJ,EAAgB;EACdnO,MAAAA,KAAK,CAAC+K,OAAN;EAEA,WAAK6C,OAAL,GAAe,KAAKA,OAAL,CAAa/Q,MAAb,CAAoBC,CAAC,IAAIA,CAAC,KAAKkD,KAA/B,CAAf;;EAEA,UAAImO,UAAU,KAAKnO,KAAnB,EAA0B;EACxB,eAAO,KAAK6N,UAAL,CAAgB7N,KAAK,CAACK,SAAtB,CAAP;EACD;;EAED,WAAKsL,MAAL,CAAY;EAAEjB,QAAAA,IAAI,EAAE,cAAR;EAAwB1K,QAAAA;EAAxB,OAAZ;EACD;EACF;;EAEDoO,EAAAA,KAAK,GAAS;EACZxF,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxB,WAAKuF,OAAL,CAAanJ,OAAb,CAAqBzE,KAAK,IAAI;EAC5B,aAAKmK,MAAL,CAAYnK,KAAZ;EACD,OAFD;EAGD,KAJD;EAKD;;EAEDuM,EAAAA,GAAG,CAMDlM,SANC,EAOyD;EAC1D,WAAO,KAAKwN,UAAL,CAAgBxN,SAAhB,CAAP;EACD;;EAEDgO,EAAAA,MAAM,GAAY;EAChB,WAAO,KAAKT,OAAZ;EACD;;EAEDtC,EAAAA,IAAI,CACFvM,IADE,EAEFC,IAFE,EAG8C;EAChD,UAAM,CAACe,OAAD,IAAYP,eAAe,CAACT,IAAD,EAAOC,IAAP,CAAjC;;EAEA,QAAI,OAAOe,OAAO,CAACE,KAAf,KAAyB,WAA7B,EAA0C;EACxCF,MAAAA,OAAO,CAACE,KAAR,GAAgB,IAAhB;EACD;;EAED,WAAO,KAAK2N,OAAL,CAAatC,IAAb,CAAkBtL,KAAK,IAAIF,UAAU,CAACC,OAAD,EAAUC,KAAV,CAArC,CAAP;EACD;;EAKDsO,EAAAA,OAAO,CAACvP,IAAD,EAAiCC,IAAjC,EAA+D;EACpE,UAAM,CAACe,OAAD,IAAYP,eAAe,CAACT,IAAD,EAAOC,IAAP,CAAjC;EACA,WAAO0C,MAAM,CAACC,IAAP,CAAY5B,OAAZ,EAAqB9C,MAArB,GAA8B,CAA9B,GACH,KAAK2Q,OAAL,CAAa/Q,MAAb,CAAoBmD,KAAK,IAAIF,UAAU,CAACC,OAAD,EAAUC,KAAV,CAAvC,CADG,GAEH,KAAK4N,OAFT;EAGD;;EAEDjC,EAAAA,MAAM,CAAC4C,KAAD,EAA+B;EACnC3F,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxB,WAAK/L,SAAL,CAAemI,OAAf,CAAuBjI,QAAQ,IAAI;EACjCA,QAAAA,QAAQ,CAAC+R,KAAD,CAAR;EACD,OAFD;EAGD,KAJD;EAKD;;EAEDrK,EAAAA,OAAO,GAAS;EACd0E,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxB,WAAKuF,OAAL,CAAanJ,OAAb,CAAqBzE,KAAK,IAAI;EAC5BA,QAAAA,KAAK,CAACkE,OAAN;EACD,OAFD;EAGD,KAJD;EAKD;;EAEDc,EAAAA,QAAQ,GAAS;EACf4D,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxB,WAAKuF,OAAL,CAAanJ,OAAb,CAAqBzE,KAAK,IAAI;EAC5BA,QAAAA,KAAK,CAACgF,QAAN;EACD,OAFD;EAGD,KAJD;EAKD;;EAtI8D;;ECOjE;EAEO,MAAMwJ,QAAN,CAKL;EAUAnS,EAAAA,WAAW,CAAC4J,MAAD,EAA8D;EACvE,SAAK1F,OAAL,GAAe,EACb,GAAG0F,MAAM,CAACoD,cADG;EAEb,SAAGpD,MAAM,CAAC1F;EAFG,KAAf;EAIA,SAAKkO,UAAL,GAAkBxI,MAAM,CAACwI,UAAzB;EACA,SAAKC,aAAL,GAAqBzI,MAAM,CAACyI,aAA5B;EACA,SAAKnF,SAAL,GAAiB,EAAjB;EACA,SAAKxI,KAAL,GAAakF,MAAM,CAAClF,KAAP,IAAgB2I,eAAe,EAA5C;EACA,SAAKC,IAAL,GAAY1D,MAAM,CAAC0D,IAAnB;EACD;;EAEDiB,EAAAA,QAAQ,CAAC7J,KAAD,EAAkE;EACxE,SAAK0J,QAAL,CAAc;EAAEC,MAAAA,IAAI,EAAE,UAAR;EAAoB3J,MAAAA;EAApB,KAAd;EACD;;EAED2K,EAAAA,WAAW,CAACT,QAAD,EAAuD;EAChE,QAAI,KAAK1B,SAAL,CAAetL,OAAf,CAAuBgN,QAAvB,MAAqC,CAAC,CAA1C,EAA6C;EAC3C,WAAK1B,SAAL,CAAe5M,IAAf,CAAoBsO,QAApB;EACD;EACF;;EAEDW,EAAAA,cAAc,CAACX,QAAD,EAAuD;EACnE,SAAK1B,SAAL,GAAiB,KAAKA,SAAL,CAAe1M,MAAf,CAAsBC,CAAC,IAAIA,CAAC,KAAKmO,QAAjC,CAAjB;EACD;;EAEDtF,EAAAA,MAAM,GAAkB;EACtB,QAAI,KAAKmF,OAAT,EAAkB;EAChB,WAAKA,OAAL,CAAanF,MAAb;EACA,aAAO,KAAKmF,OAAL,CAAahE,OAAb,CAAqBnD,IAArB,CAA0BvG,IAA1B,EAAgCwG,KAAhC,CAAsCxG,IAAtC,CAAP;EACD;;EACD,WAAOmG,OAAO,CAACC,OAAR,EAAP;EACD;;EAEDkD,EAAAA,QAAQ,GAAmB;EACzB,QAAI,KAAKoE,OAAT,EAAkB;EAChB,WAAKA,OAAL,CAAapE,QAAb;EACA,aAAO,KAAKoE,OAAL,CAAahE,OAApB;EACD;;EACD,WAAO,KAAK6H,OAAL,EAAP;EACD;;EAEDA,EAAAA,OAAO,GAAmB;EACxB,QAAIrE,IAAJ;EAEA,UAAMsE,QAAQ,GAAG,KAAK7N,KAAL,CAAWC,MAAX,KAAsB,SAAvC;EAEA,QAAI8F,OAAO,GAAGvD,OAAO,CAACC,OAAR,EAAd;;EAEA,QAAI,CAACoL,QAAL,EAAe;EACb,WAAKnE,QAAL,CAAc;EAAEC,QAAAA,IAAI,EAAE,SAAR;EAAmBmE,QAAAA,SAAS,EAAE,KAAKtO,OAAL,CAAasO;EAA3C,OAAd;EACA/H,MAAAA,OAAO,GAAGA,OAAO,CACdnD,IADO,CACF,MAAM;EACV;EACA,aAAK+K,aAAL,CAAmBzI,MAAnB,CAA0B6I,QAA1B,GACE,KAAK/N,KAAL,CAAW8N,SADb,EAEE,IAFF;EAID,OAPO,EAQPlL,IARO,CAQF,MAAM,KAAKpD,OAAL,CAAauO,QAAb,GAAwB,KAAK/N,KAAL,CAAW8N,SAAnC,CARJ,EASPlL,IATO,CASF+I,OAAO,IAAI;EACf,YAAIA,OAAO,KAAK,KAAK3L,KAAL,CAAW2L,OAA3B,EAAoC;EAClC,eAAKjC,QAAL,CAAc;EACZC,YAAAA,IAAI,EAAE,SADM;EAEZgC,YAAAA,OAFY;EAGZmC,YAAAA,SAAS,EAAE,KAAK9N,KAAL,CAAW8N;EAHV,WAAd;EAKD;EACF,OAjBO,CAAV;EAkBD;;EAED,WAAO/H,OAAO,CACXnD,IADI,CACC,MAAM,KAAKoL,eAAL,EADP,EAEJpL,IAFI,CAEC7B,MAAM,IAAI;EACdwI,MAAAA,IAAI,GAAGxI,MAAP,CADc;;EAGd,WAAK4M,aAAL,CAAmBzI,MAAnB,CAA0BgB,SAA1B,GACEqD,IADF,EAEE,KAAKvJ,KAAL,CAAW8N,SAFb,EAGE,KAAK9N,KAAL,CAAW2L,OAHb,EAIE,IAJF;EAMD,KAXI,EAYJ/I,IAZI,CAYC,MACJ,KAAKpD,OAAL,CAAa0G,SAAb,GACEqD,IADF,EAEE,KAAKvJ,KAAL,CAAW8N,SAFb,EAGE,KAAK9N,KAAL,CAAW2L,OAHb,CAbG,EAmBJ/I,IAnBI,CAmBC,MACJ,KAAKpD,OAAL,CAAayO,SAAb,GACE1E,IADF,EAEE,IAFF,EAGE,KAAKvJ,KAAL,CAAW8N,SAHb,EAIE,KAAK9N,KAAL,CAAW2L,OAJb,CApBG,EA2BJ/I,IA3BI,CA2BC,MAAM;EACV,WAAK8G,QAAL,CAAc;EAAEC,QAAAA,IAAI,EAAE,SAAR;EAAmBJ,QAAAA;EAAnB,OAAd;EACA,aAAOA,IAAP;EACD,KA9BI,EA+BJ1G,KA/BI,CA+BEC,KAAK,IAAI;EACd;EACA,WAAK6K,aAAL,CAAmBzI,MAAnB,CAA0BkB,OAA1B,GACEtD,KADF,EAEE,KAAK9C,KAAL,CAAW8N,SAFb,EAGE,KAAK9N,KAAL,CAAW2L,OAHb,EAIE,IAJF,EAFc;;EAUd3D,MAAAA,SAAS,GAAGlF,KAAZ,CAAkBA,KAAlB;EAEA,aAAON,OAAO,CAACC,OAAR,GACJG,IADI,CACC,MACJ,KAAKpD,OAAL,CAAa4G,OAAb,GACEtD,KADF,EAEE,KAAK9C,KAAL,CAAW8N,SAFb,EAGE,KAAK9N,KAAL,CAAW2L,OAHb,CAFG,EAQJ/I,IARI,CAQC,MACJ,KAAKpD,OAAL,CAAayO,SAAb,GACEtS,SADF,EAEEmH,KAFF,EAGE,KAAK9C,KAAL,CAAW8N,SAHb,EAIE,KAAK9N,KAAL,CAAW2L,OAJb,CATG,EAgBJ/I,IAhBI,CAgBC,MAAM;EACV,aAAK8G,QAAL,CAAc;EAAEC,UAAAA,IAAI,EAAE,OAAR;EAAiB7G,UAAAA;EAAjB,SAAd;EACA,cAAMA,KAAN;EACD,OAnBI,CAAP;EAoBD,KA/DI,CAAP;EAgED;;EAEOkL,EAAAA,eAAR,GAA0C;EACxC,SAAKjE,OAAL,GAAe,IAAI9E,OAAJ,CAAY;EACzB0B,MAAAA,EAAE,EAAE,MAAM;EACR,YAAI,CAAC,KAAKnH,OAAL,CAAahB,UAAlB,EAA8B;EAC5B,iBAAOgE,OAAO,CAAC2D,MAAR,CAAe,qBAAf,CAAP;EACD;;EACD,eAAO,KAAK3G,OAAL,CAAahB,UAAb,CAAwB,KAAKwB,KAAL,CAAW8N,SAAnC,CAAP;EACD,OANwB;EAOzB9G,MAAAA,MAAM,EAAE,MAAM;EACZ,aAAK0C,QAAL,CAAc;EAAEC,UAAAA,IAAI,EAAE;EAAR,SAAd;EACD,OATwB;EAUzBpD,MAAAA,OAAO,EAAE,MAAM;EACb,aAAKmD,QAAL,CAAc;EAAEC,UAAAA,IAAI,EAAE;EAAR,SAAd;EACD,OAZwB;EAazBnD,MAAAA,UAAU,EAAE,MAAM;EAChB,aAAKkD,QAAL,CAAc;EAAEC,UAAAA,IAAI,EAAE;EAAR,SAAd;EACD,OAfwB;EAgBzB/C,MAAAA,KAAK,EAAE,KAAKpH,OAAL,CAAaoH,KAAb,IAAsB,CAhBJ;EAiBzBC,MAAAA,UAAU,EAAE,KAAKrH,OAAL,CAAaqH;EAjBA,KAAZ,CAAf;EAoBA,WAAO,KAAKkD,OAAL,CAAahE,OAApB;EACD;;EAEO2D,EAAAA,QAAR,CAAiBuC,MAAjB,EAA4E;EAC1E,SAAKjM,KAAL,GAAakM,OAAO,CAAC,KAAKlM,KAAN,EAAaiM,MAAb,CAApB;EAEApE,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxB,WAAKkB,SAAL,CAAe9E,OAAf,CAAuBwG,QAAQ,IAAI;EACjCA,QAAAA,QAAQ,CAACgE,gBAAT,CAA0BjC,MAA1B;EACD,OAFD;EAGA,WAAK0B,aAAL,CAAmB/C,MAAnB,CAA0B,IAA1B;EACD,KALD;EAMD;;EApLD;EAuLK,SAASjC,eAAT,GAKiD;EACtD,SAAO;EACLgD,IAAAA,OAAO,EAAEhQ,SADJ;EAEL4N,IAAAA,IAAI,EAAE5N,SAFD;EAGLmH,IAAAA,KAAK,EAAE,IAHF;EAIL2B,IAAAA,YAAY,EAAE,CAJT;EAKLmB,IAAAA,QAAQ,EAAE,KALL;EAML3F,IAAAA,MAAM,EAAE,MANH;EAOL6N,IAAAA,SAAS,EAAEnS;EAPN,GAAP;EASD;;EAED,SAASuQ,OAAT,CACElM,KADF,EAEEiM,MAFF,EAGsD;EACpD,UAAQA,MAAM,CAACtC,IAAf;EACE,SAAK,QAAL;EACE,aAAO,EACL,GAAG3J,KADE;EAELyE,QAAAA,YAAY,EAAEzE,KAAK,CAACyE,YAAN,GAAqB;EAF9B,OAAP;;EAIF,SAAK,OAAL;EACE,aAAO,EACL,GAAGzE,KADE;EAEL4F,QAAAA,QAAQ,EAAE;EAFL,OAAP;;EAIF,SAAK,UAAL;EACE,aAAO,EACL,GAAG5F,KADE;EAEL4F,QAAAA,QAAQ,EAAE;EAFL,OAAP;;EAIF,SAAK,SAAL;EACE,aAAO,EACL,GAAG5F,KADE;EAEL2L,QAAAA,OAAO,EAAEM,MAAM,CAACN,OAFX;EAGLpC,QAAAA,IAAI,EAAE5N,SAHD;EAILmH,QAAAA,KAAK,EAAE,IAJF;EAKL8C,QAAAA,QAAQ,EAAE,KALL;EAML3F,QAAAA,MAAM,EAAE,SANH;EAOL6N,QAAAA,SAAS,EAAE7B,MAAM,CAAC6B;EAPb,OAAP;;EASF,SAAK,SAAL;EACE,aAAO,EACL,GAAG9N,KADE;EAELuJ,QAAAA,IAAI,EAAE0C,MAAM,CAAC1C,IAFR;EAGLzG,QAAAA,KAAK,EAAE,IAHF;EAIL7C,QAAAA,MAAM,EAAE,SAJH;EAKL2F,QAAAA,QAAQ,EAAE;EALL,OAAP;;EAOF,SAAK,OAAL;EACE,aAAO,EACL,GAAG5F,KADE;EAELuJ,QAAAA,IAAI,EAAE5N,SAFD;EAGLmH,QAAAA,KAAK,EAAEmJ,MAAM,CAACnJ,KAHT;EAIL2B,QAAAA,YAAY,EAAEzE,KAAK,CAACyE,YAAN,GAAqB,CAJ9B;EAKLmB,QAAAA,QAAQ,EAAE,KALL;EAML3F,QAAAA,MAAM,EAAE;EANH,OAAP;;EAQF,SAAK,UAAL;EACE,aAAO,EACL,GAAGD,KADE;EAEL,WAAGiM,MAAM,CAACjM;EAFL,OAAP;;EAIF;EACE,aAAOA,KAAP;EAjDJ;EAmDD;;ECpTD;EAEO,MAAMmO,aAAN,SAA4B9S,YAA5B,CAAgE;EAMrEC,EAAAA,WAAW,CAAC4J,MAAD,EAA+B;EACxC;EACA,SAAKA,MAAL,GAAcA,MAAM,IAAI,EAAxB;EACA,SAAKkJ,SAAL,GAAiB,EAAjB;EACA,SAAKV,UAAL,GAAkB,CAAlB;EACD;;EAEDX,EAAAA,KAAK,CACHC,MADG,EAEHxN,OAFG,EAGHQ,KAHG,EAI4C;EAC/C,UAAMF,QAAQ,GAAG,IAAI2N,QAAJ,CAAa;EAC5BE,MAAAA,aAAa,EAAE,IADa;EAE5BD,MAAAA,UAAU,EAAE,EAAE,KAAKA,UAFS;EAG5BlO,MAAAA,OAAO,EAAEwN,MAAM,CAACqB,sBAAP,CAA8B7O,OAA9B,CAHmB;EAI5BQ,MAAAA,KAJ4B;EAK5BsI,MAAAA,cAAc,EAAE9I,OAAO,CAACjB,WAAR,GACZyO,MAAM,CAACsB,mBAAP,CAA2B9O,OAAO,CAACjB,WAAnC,CADY,GAEZ5C,SAPwB;EAQ5BiN,MAAAA,IAAI,EAAEpJ,OAAO,CAACoJ;EARc,KAAb,CAAjB;EAWA,SAAKuE,GAAL,CAASrN,QAAT;EAEA,WAAOA,QAAP;EACD;;EAEDqN,EAAAA,GAAG,CAACrN,QAAD,EAA+C;EAChD,SAAKsO,SAAL,CAAexS,IAAf,CAAoBkE,QAApB;EACA,SAAK8K,MAAL,CAAY9K,QAAZ;EACD;;EAEDsJ,EAAAA,MAAM,CAACtJ,QAAD,EAA+C;EACnD,SAAKsO,SAAL,GAAiB,KAAKA,SAAL,CAAetS,MAAf,CAAsBC,CAAC,IAAIA,CAAC,KAAK+D,QAAjC,CAAjB;EACAA,IAAAA,QAAQ,CAAC8E,MAAT;EACA,SAAKgG,MAAL,CAAY9K,QAAZ;EACD;;EAEDuN,EAAAA,KAAK,GAAS;EACZxF,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxB,WAAK8G,SAAL,CAAe1K,OAAf,CAAuB5D,QAAQ,IAAI;EACjC,aAAKsJ,MAAL,CAAYtJ,QAAZ;EACD,OAFD;EAGD,KAJD;EAKD;;EAEDwN,EAAAA,MAAM,GAAe;EACnB,WAAO,KAAKc,SAAZ;EACD;;EAED7D,EAAAA,IAAI,CACFvL,OADE,EAEyD;EAC3D,QAAI,OAAOA,OAAO,CAACE,KAAf,KAAyB,WAA7B,EAA0C;EACxCF,MAAAA,OAAO,CAACE,KAAR,GAAgB,IAAhB;EACD;;EAED,WAAO,KAAKkP,SAAL,CAAe7D,IAAf,CAAoBzK,QAAQ,IAAID,aAAa,CAACb,OAAD,EAAUc,QAAV,CAA7C,CAAP;EACD;;EAEDyN,EAAAA,OAAO,CAACvO,OAAD,EAAuC;EAC5C,WAAO,KAAKoP,SAAL,CAAetS,MAAf,CAAsBgE,QAAQ,IAAID,aAAa,CAACb,OAAD,EAAUc,QAAV,CAA/C,CAAP;EACD;;EAED8K,EAAAA,MAAM,CAAC9K,QAAD,EAA0C;EAC9C+H,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxB,WAAK/L,SAAL,CAAemI,OAAf,CAAuBjI,QAAQ,IAAI;EACjCA,QAAAA,QAAQ,CAACqE,QAAD,CAAR;EACD,OAFD;EAGD,KAJD;EAKD;;EAEDqD,EAAAA,OAAO,GAAS;EACd,SAAKoL,qBAAL;EACD;;EAEDtK,EAAAA,QAAQ,GAAS;EACf,SAAKsK,qBAAL;EACD;;EAEDA,EAAAA,qBAAqB,GAAkB;EACrC,UAAMC,eAAe,GAAG,KAAKJ,SAAL,CAAetS,MAAf,CAAsBC,CAAC,IAAIA,CAAC,CAACiE,KAAF,CAAQ4F,QAAnC,CAAxB;EACA,WAAOiC,aAAa,CAACP,KAAd,CAAoB,MACzBkH,eAAe,CAAC1N,MAAhB,CACE,CAACiF,OAAD,EAAUjG,QAAV,KACEiG,OAAO,CAACnD,IAAR,CAAa,MAAM9C,QAAQ,CAAC6F,QAAT,GAAoB9C,KAApB,CAA0BxG,IAA1B,CAAnB,CAFJ,EAGEmG,OAAO,CAACC,OAAR,EAHF,CADK,CAAP;EAOD;;EAhGoE;;ECtBhE,SAASgM,qBAAT,GAIuD;EAC5D,SAAO;EACL5C,IAAAA,OAAO,EAAEF,OAAO,IAAI;EAClBA,MAAAA,OAAO,CAACD,OAAR,GAAkB,MAAM;EACtB,cAAMgD,WAA2D,GAC/D/C,OAAO,CAACV,YAAR,EAAsBrC,IAAtB,EAA4B8F,WAD9B;EAEA,cAAMC,SAAS,GAAGhD,OAAO,CAACV,YAAR,EAAsBrC,IAAtB,EAA4B+F,SAA9C;EACA,cAAMtD,SAAS,GAAGsD,SAAS,EAAEtD,SAA7B;EACA,cAAMuD,kBAAkB,GAAGD,SAAS,EAAEE,SAAX,KAAyB,SAApD;EACA,cAAMC,sBAAsB,GAAGH,SAAS,EAAEE,SAAX,KAAyB,UAAxD;EACA,cAAME,QAAQ,GAAGpD,OAAO,CAAC3L,KAAR,CAAcuJ,IAAd,EAAoByF,KAApB,IAA6B,EAA9C;EACA,cAAMC,aAAa,GAAGtD,OAAO,CAAC3L,KAAR,CAAcuJ,IAAd,EAAoB2F,UAApB,IAAkC,EAAxD;EACA,cAAM/D,eAAe,GAAGpI,kBAAkB,EAA1C;EACA,cAAMoM,WAAW,GAAGhE,eAAe,EAAEM,MAArC;EACA,YAAI2D,aAAa,GAAGH,aAApB;EACA,YAAII,SAAS,GAAG,KAAhB,CAZsB;;EAetB,cAAMhR,OAAO,GACXsN,OAAO,CAACnM,OAAR,CAAgBnB,OAAhB,KAA4B,MAAMmE,OAAO,CAAC2D,MAAR,CAAe,iBAAf,CAAlC,CADF;;EAGA,cAAMmJ,aAAa,GAAG,CACpBN,KADoB,EAEpBO,KAFoB,EAGpBC,IAHoB,EAIpBC,QAJoB,KAKjB;EACHL,UAAAA,aAAa,GAAGK,QAAQ,GACpB,CAACF,KAAD,EAAQ,GAAGH,aAAX,CADoB,GAEpB,CAAC,GAAGA,aAAJ,EAAmBG,KAAnB,CAFJ;EAGA,iBAAOE,QAAQ,GAAG,CAACD,IAAD,EAAO,GAAGR,KAAV,CAAH,GAAsB,CAAC,GAAGA,KAAJ,EAAWQ,IAAX,CAArC;EACD,SAVD,CAlBsB;;;EA+BtB,cAAME,SAAS,GAAG,CAChBV,KADgB,EAEhBW,MAFgB,EAGhBJ,KAHgB,EAIhBE,QAJgB,KAKO;EACvB,cAAIJ,SAAJ,EAAe;EACb,mBAAO7M,OAAO,CAAC2D,MAAR,CAAe,WAAf,CAAP;EACD;;EAED,cAAI,OAAOoJ,KAAP,KAAiB,WAAjB,IAAgC,CAACI,MAAjC,IAA2CX,KAAK,CAAC9S,MAArD,EAA6D;EAC3D,mBAAOsG,OAAO,CAACC,OAAR,CAAgBuM,KAAhB,CAAP;EACD;;EAED,gBAAM5D,cAAoC,GAAG;EAC3ChN,YAAAA,QAAQ,EAAEuN,OAAO,CAACvN,QADyB;EAE3CqN,YAAAA,MAAM,EAAE0D,WAFmC;EAG3C9D,YAAAA,SAAS,EAAEkE,KAHgC;EAI3C3G,YAAAA,IAAI,EAAE+C,OAAO,CAAC/C;EAJ6B,WAA7C;EAOA,gBAAMgH,aAAa,GAAGvR,OAAO,CAAC+M,cAAD,CAA7B;EAEA,gBAAMrF,OAAO,GAAGvD,OAAO,CAACC,OAAR,CAAgBmN,aAAhB,EAA+BhN,IAA/B,CAAoC4M,IAAI,IACtDF,aAAa,CAACN,KAAD,EAAQO,KAAR,EAAeC,IAAf,EAAqBC,QAArB,CADC,CAAhB;;EAIA,cAAI9K,YAAY,CAACiL,aAAD,CAAhB,EAAiC;EAC/B,kBAAMC,YAAY,GAAG9J,OAArB;EACA8J,YAAAA,YAAY,CAACjL,MAAb,GAAsBgL,aAAa,CAAChL,MAApC;EACD;;EAED,iBAAOmB,OAAP;EACD,SAjCD;;EAmCA,YAAIA,OAAJ,CAlEsB;;EAqEtB,YAAI,CAACgJ,QAAQ,CAAC7S,MAAd,EAAsB;EACpB6J,UAAAA,OAAO,GAAG2J,SAAS,CAAC,EAAD,CAAnB;EACD,SAFD;EAAA,aAKK,IAAId,kBAAJ,EAAwB;EAC3B,kBAAMe,MAAM,GAAG,OAAOtE,SAAP,KAAqB,WAApC;EACA,kBAAMkE,KAAK,GAAGI,MAAM,GAChBtE,SADgB,GAEhByE,gBAAgB,CAACnE,OAAO,CAACnM,OAAT,EAAkBuP,QAAlB,CAFpB;EAGAhJ,YAAAA,OAAO,GAAG2J,SAAS,CAACX,QAAD,EAAWY,MAAX,EAAmBJ,KAAnB,CAAnB;EACD,WANI;EAAA,eASA,IAAIT,sBAAJ,EAA4B;EAC/B,oBAAMa,MAAM,GAAG,OAAOtE,SAAP,KAAqB,WAApC;EACA,oBAAMkE,KAAK,GAAGI,MAAM,GAChBtE,SADgB,GAEhB0E,oBAAoB,CAACpE,OAAO,CAACnM,OAAT,EAAkBuP,QAAlB,CAFxB;EAGAhJ,cAAAA,OAAO,GAAG2J,SAAS,CAACX,QAAD,EAAWY,MAAX,EAAmBJ,KAAnB,EAA0B,IAA1B,CAAnB;EACD,aANI;EAAA,iBASA;EACHH,gBAAAA,aAAa,GAAG,EAAhB;EAEA,sBAAMO,MAAM,GAAG,OAAOhE,OAAO,CAACnM,OAAR,CAAgBsQ,gBAAvB,KAA4C,WAA3D;EAEA,sBAAME,oBAAoB,GACxBtB,WAAW,IAAIK,QAAQ,CAAC,CAAD,CAAvB,GACIL,WAAW,CAACK,QAAQ,CAAC,CAAD,CAAT,EAAc,CAAd,EAAiBA,QAAjB,CADf,GAEI,IAHN,CALG;;EAWHhJ,gBAAAA,OAAO,GAAGiK,oBAAoB,GAC1BN,SAAS,CAAC,EAAD,EAAKC,MAAL,EAAaV,aAAa,CAAC,CAAD,CAA1B,CADiB,GAE1BzM,OAAO,CAACC,OAAR,CAAgB6M,aAAa,CAAC,EAAD,EAAKL,aAAa,CAAC,CAAD,CAAlB,EAAuBF,QAAQ,CAAC,CAAD,CAA/B,CAA7B,CAFJ,CAXG;;EAgBH,qBAAK,IAAIrN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqN,QAAQ,CAAC7S,MAA7B,EAAqCwF,CAAC,EAAtC,EAA0C;EACxCqE,kBAAAA,OAAO,GAAGA,OAAO,CAACnD,IAAR,CAAaoM,KAAK,IAAI;EAC9B,0BAAMiB,mBAAmB,GACvBvB,WAAW,IAAIK,QAAQ,CAACrN,CAAD,CAAvB,GACIgN,WAAW,CAACK,QAAQ,CAACrN,CAAD,CAAT,EAAcA,CAAd,EAAiBqN,QAAjB,CADf,GAEI,IAHN;;EAKA,wBAAIkB,mBAAJ,EAAyB;EACvB,4BAAMV,KAAK,GAAGI,MAAM,GAChBV,aAAa,CAACvN,CAAD,CADG,GAEhBoO,gBAAgB,CAACnE,OAAO,CAACnM,OAAT,EAAkBwP,KAAlB,CAFpB;EAGA,6BAAOU,SAAS,CAACV,KAAD,EAAQW,MAAR,EAAgBJ,KAAhB,CAAhB;EACD;;EACD,2BAAO/M,OAAO,CAACC,OAAR,CACL6M,aAAa,CAACN,KAAD,EAAQC,aAAa,CAACvN,CAAD,CAArB,EAA0BqN,QAAQ,CAACrN,CAAD,CAAlC,CADR,CAAP;EAGD,mBAfS,CAAV;EAgBD;EACF;;EAED,cAAMwO,YAAY,GAAGnK,OAAO,CAACnD,IAAR,CAAaoM,KAAK,KAAK;EAC1CA,UAAAA,KAD0C;EAE1CE,UAAAA,UAAU,EAAEE;EAF8B,SAAL,CAAlB,CAArB;EAKA,cAAMe,iBAAiB,GAAGD,YAA1B;;EAEAC,QAAAA,iBAAiB,CAACvL,MAAlB,GAA2B,MAAM;EAC/ByK,UAAAA,SAAS,GAAG,IAAZ;EACAlE,UAAAA,eAAe,EAAE3F,KAAjB;;EACA,cAAIb,YAAY,CAACoB,OAAD,CAAhB,EAA2B;EACzBA,YAAAA,OAAO,CAACnB,MAAR;EACD;EACF,SAND;;EAQA,eAAOsL,YAAP;EACD,OAhJD;EAiJD;EAnJI,GAAP;EAqJD;EAEM,SAASJ,gBAAT,CACLtQ,OADK,EAELwP,KAFK,EAGgB;EACrB,SAAOxP,OAAO,CAACsQ,gBAAR,GAA2Bd,KAAK,CAACA,KAAK,CAAC9S,MAAN,GAAe,CAAhB,CAAhC,EAAoD8S,KAApD,CAAP;EACD;EAEM,SAASe,oBAAT,CACLvQ,OADK,EAELwP,KAFK,EAGgB;EACrB,SAAOxP,OAAO,CAACuQ,oBAAR,GAA+Bf,KAAK,CAAC,CAAD,CAApC,EAAyCA,KAAzC,CAAP;EACD;EAED;;;;;EAIO,SAASoB,WAAT,CACL5Q,OADK,EAELwP,KAFK,EAGgB;EACrB,MAAIxP,OAAO,CAACsQ,gBAAR,IAA4BjT,KAAK,CAACC,OAAN,CAAckS,KAAd,CAAhC,EAAsD;EACpD,UAAMqB,aAAa,GAAGP,gBAAgB,CAACtQ,OAAD,EAAUwP,KAAV,CAAtC;EACA,WACE,OAAOqB,aAAP,KAAyB,WAAzB,IACAA,aAAa,KAAK,IADlB,IAEAA,aAAa,KAAK,KAHpB;EAKD;EACF;EAED;;;;;EAIO,SAASC,eAAT,CACL9Q,OADK,EAELwP,KAFK,EAGgB;EACrB,MAAIxP,OAAO,CAACuQ,oBAAR,IAAgClT,KAAK,CAACC,OAAN,CAAckS,KAAd,CAApC,EAA0D;EACxD,UAAMuB,iBAAiB,GAAGR,oBAAoB,CAACvQ,OAAD,EAAUwP,KAAV,CAA9C;EACA,WACE,OAAOuB,iBAAP,KAA6B,WAA7B,IACAA,iBAAiB,KAAK,IADtB,IAEAA,iBAAiB,KAAK,KAHxB;EAKD;EACF;;ECjKD;EAEO,MAAMC,WAAN,CAAkB;EASvBlV,EAAAA,WAAW,CAAC4J,MAAyB,GAAG,EAA7B,EAAiC;EAC1C,SAAKuL,UAAL,GAAkBvL,MAAM,CAACuL,UAAP,IAAqB,IAAI7D,UAAJ,EAAvC;EACA,SAAKe,aAAL,GAAqBzI,MAAM,CAACyI,aAAP,IAAwB,IAAIQ,aAAJ,EAA7C;EACA,SAAK7F,cAAL,GAAsBpD,MAAM,CAACoD,cAAP,IAAyB,EAA/C;EACA,SAAKoI,aAAL,GAAqB,EAArB;EACA,SAAKC,gBAAL,GAAwB,EAAxB;EACD;;EAEDC,EAAAA,KAAK,GAAS;EACZ,SAAKC,gBAAL,GAAwB9M,YAAY,CAACvI,SAAb,CAAuB,MAAM;EACnD,UAAIuI,YAAY,CAACJ,SAAb,MAA4BY,aAAa,CAACH,QAAd,EAAhC,EAA0D;EACxD,aAAKuJ,aAAL,CAAmBxK,OAAnB;EACA,aAAKsN,UAAL,CAAgBtN,OAAhB;EACD;EACF,KALuB,CAAxB;EAMA,SAAK2N,iBAAL,GAAyBvM,aAAa,CAAC/I,SAAd,CAAwB,MAAM;EACrD,UAAIuI,YAAY,CAACJ,SAAb,MAA4BY,aAAa,CAACH,QAAd,EAAhC,EAA0D;EACxD,aAAKuJ,aAAL,CAAmB1J,QAAnB;EACA,aAAKwM,UAAL,CAAgBxM,QAAhB;EACD;EACF,KALwB,CAAzB;EAMD;;EAED8M,EAAAA,OAAO,GAAS;EACd,SAAKF,gBAAL;EACA,SAAKC,iBAAL;EACD;;EAIDlR,EAAAA,UAAU,CAAC5B,IAAD,EAAiCC,IAAjC,EAA8D;EACtE,UAAM,CAACe,OAAD,IAAYP,eAAe,CAACT,IAAD,EAAOC,IAAP,CAAjC;EACAe,IAAAA,OAAO,CAACG,QAAR,GAAmB,IAAnB;EACA,WAAO,KAAKsR,UAAL,CAAgBlD,OAAhB,CAAwBvO,OAAxB,EAAiC9C,MAAxC;EACD;;EAED8U,EAAAA,UAAU,CAAChS,OAAD,EAAoC;EAC5C,WAAO,KAAK2O,aAAL,CAAmBJ,OAAnB,CAA2B,EAAE,GAAGvO,OAAL;EAAcG,MAAAA,QAAQ,EAAE;EAAxB,KAA3B,EAA2DjD,MAAlE;EACD;;EAED+U,EAAAA,YAAY,CACV7S,QADU,EAEVY,OAFU,EAGS;EACnB,WAAO,KAAKyR,UAAL,CAAgBlG,IAAhB,CAA4BnM,QAA5B,EAAsCY,OAAtC,GAAgDgB,KAAhD,CAAsDuJ,IAA7D;EACD;;EAID2H,EAAAA,cAAc,CACZC,iBADY,EAES;EACrB,WAAO,KAAKC,aAAL,GACJ7D,OADI,CACI4D,iBADJ,EAEJE,GAFI,CAEA,CAAC;EAAEjT,MAAAA,QAAF;EAAY4B,MAAAA;EAAZ,KAAD,KAAyB;EAC5B,YAAMuJ,IAAI,GAAGvJ,KAAK,CAACuJ,IAAnB;EACA,aAAO,CAACnL,QAAD,EAAWmL,IAAX,CAAP;EACD,KALI,CAAP;EAMD;;EAED+H,EAAAA,YAAY,CACVlT,QADU,EAEV7B,OAFU,EAGViD,OAHU,EAIH;EACP,UAAM+R,aAAa,GAAGxT,cAAc,CAACK,QAAD,CAApC;EACA,UAAMoT,gBAAgB,GAAG,KAAKvE,mBAAL,CAAyBsE,aAAzB,CAAzB;EACA,WAAO,KAAKd,UAAL,CACJ1D,KADI,CACE,IADF,EACQyE,gBADR,EAEJnI,OAFI,CAEI9M,OAFJ,EAEaiD,OAFb,CAAP;EAGD;;EAcDiS,EAAAA,cAAc,CACZN,iBADY,EAEZ5U,OAFY,EAGZiD,OAHY,EAIS;EACrB,WAAOqI,aAAa,CAACP,KAAd,CAAoB,MACzB,KAAK8J,aAAL,GACG7D,OADH,CACW4D,iBADX,EAEGE,GAFH,CAEO,CAAC;EAAEjT,MAAAA;EAAF,KAAD,KAAkB,CACrBA,QADqB,EAErB,KAAKkT,YAAL,CAAyBlT,QAAzB,EAAmC7B,OAAnC,EAA4CiD,OAA5C,CAFqB,CAFzB,CADK,CAAP;EAQD;;EAEDkS,EAAAA,aAAa,CACXtT,QADW,EAEXY,OAFW,EAG4B;EACvC,WAAO,KAAKyR,UAAL,CAAgBlG,IAAhB,CAAoCnM,QAApC,EAA8CY,OAA9C,GAAwDgB,KAA/D;EACD;;EAID2R,EAAAA,aAAa,CAAC3T,IAAD,EAAiCC,IAAjC,EAA4D;EACvE,UAAM,CAACe,OAAD,IAAYP,eAAe,CAACT,IAAD,EAAOC,IAAP,CAAjC;EACA,UAAMwS,UAAU,GAAG,KAAKA,UAAxB;EACA5I,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxBmJ,MAAAA,UAAU,CAAClD,OAAX,CAAmBvO,OAAnB,EAA4B0E,OAA5B,CAAoCzE,KAAK,IAAI;EAC3CwR,QAAAA,UAAU,CAACrH,MAAX,CAAkBnK,KAAlB;EACD,OAFD;EAGD,KAJD;EAKD;;EAWD2S,EAAAA,YAAY,CACV5T,IADU,EAEVC,IAFU,EAGVC,IAHU,EAIK;EACf,UAAM,CAACc,OAAD,EAAUQ,OAAV,IAAqBf,eAAe,CAACT,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAA1C;EACA,UAAMuS,UAAU,GAAG,KAAKA,UAAxB;EAEA,UAAMoB,cAAmC,GAAG,EAC1C,GAAG7S,OADuC;EAE1CJ,MAAAA,MAAM,EAAE;EAFkC,KAA5C;EAKA,WAAOiJ,aAAa,CAACP,KAAd,CAAoB,MAAM;EAC/BmJ,MAAAA,UAAU,CAAClD,OAAX,CAAmBvO,OAAnB,EAA4B0E,OAA5B,CAAoCzE,KAAK,IAAI;EAC3CA,QAAAA,KAAK,CAACgL,KAAN;EACD,OAFD;EAGA,aAAO,KAAK6H,cAAL,CAAoBD,cAApB,EAAoCrS,OAApC,CAAP;EACD,KALM,CAAP;EAMD;;EAQDuS,EAAAA,aAAa,CACX/T,IADW,EAEXC,IAFW,EAGXC,IAHW,EAII;EACf,UAAM,CAACc,OAAD,EAAUyG,aAAa,GAAG,EAA1B,IAAgChH,eAAe,CAACT,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAArD;;EAEA,QAAI,OAAOuH,aAAa,CAACX,MAArB,KAAgC,WAApC,EAAiD;EAC/CW,MAAAA,aAAa,CAACX,MAAd,GAAuB,IAAvB;EACD;;EAED,UAAMkN,QAAQ,GAAGnK,aAAa,CAACP,KAAd,CAAoB,MACnC,KAAKmJ,UAAL,CAAgBlD,OAAhB,CAAwBvO,OAAxB,EAAiCqS,GAAjC,CAAqCpS,KAAK,IAAIA,KAAK,CAAC2F,MAAN,CAAaa,aAAb,CAA9C,CADe,CAAjB;EAIA,WAAOjD,OAAO,CAACyP,GAAR,CAAYD,QAAZ,EAAsBpP,IAAtB,CAA2BvG,IAA3B,EAAiCwG,KAAjC,CAAuCxG,IAAvC,CAAP;EACD;;EAWD6V,EAAAA,iBAAiB,CACflU,IADe,EAEfC,IAFe,EAGfC,IAHe,EAIA;EACf,UAAM,CAACc,OAAD,EAAUQ,OAAV,IAAqBf,eAAe,CAACT,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAA1C;EAEA,UAAM2T,cAAmC,GAAG,EAC1C,GAAG7S,OADuC;EAE1C;EACA;EACAJ,MAAAA,MAAM,EAAEI,OAAO,CAACmT,aAAR,IAAyBnT,OAAO,CAACJ,MAAjC,IAA2C,IAJT;EAK1CC,MAAAA,QAAQ,EAAEG,OAAO,CAACoT,eAAR,IAA2B;EALK,KAA5C;EAQA,WAAOvK,aAAa,CAACP,KAAd,CAAoB,MAAM;EAC/B,WAAKmJ,UAAL,CAAgBlD,OAAhB,CAAwBvO,OAAxB,EAAiC0E,OAAjC,CAAyCzE,KAAK,IAAI;EAChDA,QAAAA,KAAK,CAAC8L,UAAN;EACD,OAFD;EAGA,aAAO,KAAK+G,cAAL,CAAoBD,cAApB,EAAoCrS,OAApC,CAAP;EACD,KALM,CAAP;EAMD;;EAWDsS,EAAAA,cAAc,CACZ9T,IADY,EAEZC,IAFY,EAGZC,IAHY,EAIG;EACf,UAAM,CAACc,OAAD,EAAUQ,OAAV,IAAqBf,eAAe,CAACT,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAA1C;EAEA,UAAM8T,QAAQ,GAAGnK,aAAa,CAACP,KAAd,CAAoB,MACnC,KAAKmJ,UAAL,CAAgBlD,OAAhB,CAAwBvO,OAAxB,EAAiCqS,GAAjC,CAAqCpS,KAAK,IACxCA,KAAK,CAAC+L,KAAN,CAAYrP,SAAZ,EAAuB,EACrB,GAAG6D,OADkB;EAErBoJ,MAAAA,IAAI,EAAE;EAAE8F,QAAAA,WAAW,EAAE1P,OAAO,EAAE0P;EAAxB;EAFe,KAAvB,CADF,CADe,CAAjB;EASA,QAAI3I,OAAO,GAAGvD,OAAO,CAACyP,GAAR,CAAYD,QAAZ,EAAsBpP,IAAtB,CAA2BvG,IAA3B,CAAd;;EAEA,QAAI,CAACmD,OAAO,EAAE6S,YAAd,EAA4B;EAC1BtM,MAAAA,OAAO,GAAGA,OAAO,CAAClD,KAAR,CAAcxG,IAAd,CAAV;EACD;;EAED,WAAO0J,OAAP;EACD;;EA6BDuM,EAAAA,UAAU,CAMRtU,IANQ,EAORC,IAPQ,EAURC,IAVQ,EAWQ;EAChB,UAAMqT,aAAa,GAAGxT,cAAc,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAApC;EACA,UAAMsT,gBAAgB,GAAG,KAAKvE,mBAAL,CAAyBsE,aAAzB,CAAzB,CAFgB;;EAKhB,QAAI,OAAOC,gBAAgB,CAAC5K,KAAxB,KAAkC,WAAtC,EAAmD;EACjD4K,MAAAA,gBAAgB,CAAC5K,KAAjB,GAAyB,KAAzB;EACD;;EAED,UAAM3H,KAAK,GAAG,KAAKwR,UAAL,CAAgB1D,KAAhB,CAAsB,IAAtB,EAA4ByE,gBAA5B,CAAd;EAEA,WAAOvS,KAAK,CAACqL,aAAN,CAAoBkH,gBAAgB,CAAC9T,SAArC,IACHuB,KAAK,CAAC+L,KAAN,CAAYwG,gBAAZ,CADG,GAEHhP,OAAO,CAACC,OAAR,CAAgBxD,KAAK,CAACe,KAAN,CAAYuJ,IAA5B,CAFJ;EAGD;;EA6BDgJ,EAAAA,aAAa,CAMXvU,IANW,EAOXC,IAPW,EAUXC,IAVW,EAWI;EACf,WAAO,KAAKoU,UAAL,CAAgBtU,IAAhB,EAA6BC,IAA7B,EAA0CC,IAA1C,EACJ0E,IADI,CACCvG,IADD,EAEJwG,KAFI,CAEExG,IAFF,CAAP;EAGD;;EA6BDmW,EAAAA,kBAAkB,CAMhBxU,IANgB,EAShBC,IATgB,EAYhBC,IAZgB,EAac;EAC9B,UAAMqT,aAAa,GAAGxT,cAAc,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAApC;EACAqT,IAAAA,aAAa,CAAC3F,QAAd,GAAyB6C,qBAAqB,EAA9C;EAKA,WAAO,KAAK6D,UAAL,CAAgBf,aAAhB,CAAP;EACD;;EA6BDkB,EAAAA,qBAAqB,CAMnBzU,IANmB,EASnBC,IATmB,EAYnBC,IAZmB,EAaJ;EACf,WAAO,KAAKsU,kBAAL,CAAwBxU,IAAxB,EAAqCC,IAArC,EAAkDC,IAAlD,EACJ0E,IADI,CACCvG,IADD,EAEJwG,KAFI,CAEExG,IAFF,CAAP;EAGD;;EAEDqW,EAAAA,eAAe,GAAkB;EAC/B,UAAMV,QAAQ,GAAGnK,aAAa,CAACP,KAAd,CAAoB,MACnC,KAAKqG,aAAL,CAAmBL,MAAnB,GAA4B+D,GAA5B,CAAgCvR,QAAQ,IAAIA,QAAQ,CAAC8E,MAAT,EAA5C,CADe,CAAjB;EAGA,WAAOpC,OAAO,CAACyP,GAAR,CAAYD,QAAZ,EAAsBpP,IAAtB,CAA2BvG,IAA3B,EAAiCwG,KAAjC,CAAuCxG,IAAvC,CAAP;EACD;;EAEDkS,EAAAA,qBAAqB,GAAkB;EACrC,WAAO,KAAKoE,gBAAL,GAAwBpE,qBAAxB,EAAP;EACD;;EAEDP,EAAAA,eAAe,CAMbxO,OANa,EAOG;EAChB,WAAO,KAAKmO,aAAL,CAAmBZ,KAAnB,CAAyB,IAAzB,EAA+BvN,OAA/B,EAAwCoO,OAAxC,EAAP;EACD;;EAEDwD,EAAAA,aAAa,GAAe;EAC1B,WAAO,KAAKX,UAAZ;EACD;;EAEDkC,EAAAA,gBAAgB,GAAkB;EAChC,WAAO,KAAKhF,aAAZ;EACD;;EAEDiF,EAAAA,iBAAiB,GAAmB;EAClC,WAAO,KAAKtK,cAAZ;EACD;;EAEDS,EAAAA,iBAAiB,CAACvJ,OAAD,EAAgC;EAC/C,SAAK8I,cAAL,GAAsB9I,OAAtB;EACD;;EAEDqT,EAAAA,gBAAgB,CACdzU,QADc,EAEdoB,OAFc,EAGR;EACN,UAAMuB,MAAM,GAAG,KAAK2P,aAAL,CAAmBnG,IAAnB,CACbxO,CAAC,IAAIgE,YAAY,CAAC3B,QAAD,CAAZ,KAA2B2B,YAAY,CAAChE,CAAC,CAACqC,QAAH,CAD/B,CAAf;;EAGA,QAAI2C,MAAJ,EAAY;EACVA,MAAAA,MAAM,CAACuH,cAAP,GAAwB9I,OAAxB;EACD,KAFD,MAEO;EACL,WAAKkR,aAAL,CAAmB9U,IAAnB,CAAwB;EAAEwC,QAAAA,QAAF;EAAYkK,QAAAA,cAAc,EAAE9I;EAA5B,OAAxB;EACD;EACF;;EAED0N,EAAAA,gBAAgB,CACd9O,QADc,EAE6C;EAC3D,WAAOA,QAAQ,GACX,KAAKsS,aAAL,CAAmBnG,IAAnB,CAAwBxO,CAAC,IAAI0D,eAAe,CAACrB,QAAD,EAAWrC,CAAC,CAACqC,QAAb,CAA5C,GACIkK,cAFO,GAGX3M,SAHJ;EAID;;EAEDmX,EAAAA,mBAAmB,CACjBvU,WADiB,EAEjBiB,OAFiB,EAGX;EACN,UAAMuB,MAAM,GAAG,KAAK4P,gBAAL,CAAsBpG,IAAtB,CACbxO,CAAC,IAAIgE,YAAY,CAACxB,WAAD,CAAZ,KAA8BwB,YAAY,CAAChE,CAAC,CAACwC,WAAH,CADlC,CAAf;;EAGA,QAAIwC,MAAJ,EAAY;EACVA,MAAAA,MAAM,CAACuH,cAAP,GAAwB9I,OAAxB;EACD,KAFD,MAEO;EACL,WAAKmR,gBAAL,CAAsB/U,IAAtB,CAA2B;EAAE2C,QAAAA,WAAF;EAAe+J,QAAAA,cAAc,EAAE9I;EAA/B,OAA3B;EACD;EACF;;EAED8O,EAAAA,mBAAmB,CACjB/P,WADiB,EAEwC;EACzD,WAAOA,WAAW,GACd,KAAKoS,gBAAL,CAAsBpG,IAAtB,CAA2BxO,CAAC,IAC1B0D,eAAe,CAAClB,WAAD,EAAcxC,CAAC,CAACwC,WAAhB,CADjB,GAEG+J,cAHW,GAId3M,SAJJ;EAKD;;EAEDsR,EAAAA,mBAAmB,CAOjBzN,OAPiB,EAcyD;EAC1E,QAAIA,OAAO,EAAEuT,UAAb,EAAyB;EACvB,aAAOvT,OAAP;EACD;;EAED,UAAMgS,gBAAgB,GAAG,EACvB,GAAG,KAAKlJ,cAAL,CAAoBuE,OADA;EAEvB,SAAG,KAAKK,gBAAL,CAAsB1N,OAAO,EAAEpB,QAA/B,CAFoB;EAGvB,SAAGoB,OAHoB;EAIvBuT,MAAAA,UAAU,EAAE;EAJW,KAAzB;;EAaA,QAAI,CAACvB,gBAAgB,CAAClS,SAAlB,IAA+BkS,gBAAgB,CAACpT,QAApD,EAA8D;EAC5DoT,MAAAA,gBAAgB,CAAClS,SAAjB,GAA6BC,qBAAqB,CAChDiS,gBAAgB,CAACpT,QAD+B,EAEhDoT,gBAFgD,CAAlD;EAID;;EAED,WAAOA,gBAAP;EACD;;EAEDwB,EAAAA,2BAA2B,CAOzBxT,OAPyB,EAciD;EAC1E,WAAO,KAAKyN,mBAAL,CAAyBzN,OAAzB,CAAP;EACD;;EAED6O,EAAAA,sBAAsB,CACpB7O,OADoB,EAEjB;EACH,QAAIA,OAAO,EAAEuT,UAAb,EAAyB;EACvB,aAAOvT,OAAP;EACD;;EACD,WAAO,EACL,GAAG,KAAK8I,cAAL,CAAoB8F,SADlB;EAEL,SAAG,KAAKE,mBAAL,CAAyB9O,OAAO,EAAEjB,WAAlC,CAFE;EAGL,SAAGiB,OAHE;EAILuT,MAAAA,UAAU,EAAE;EAJP,KAAP;EAMD;;EAED1F,EAAAA,KAAK,GAAS;EACZ,SAAKoD,UAAL,CAAgBpD,KAAhB;EACA,SAAKM,aAAL,CAAmBN,KAAnB;EACD;;EA3lBsB;;ECblB,MAAM4F,aAAN,SAMG5X,YANH,CAMsD;EA8B3DC,EAAAA,WAAW,CACT0R,MADS,EAETxN,OAFS,EAST;EACA;EAEA,SAAKwN,MAAL,GAAcA,MAAd;EACA,SAAKxN,OAAL,GAAeA,OAAf;EACA,SAAK0T,YAAL,GAAoB,EAApB;EACA,SAAKC,WAAL,GAAmB,IAAnB;EACA,SAAKC,WAAL;EACA,SAAK7K,UAAL,CAAgB/I,OAAhB;EACD;;EAES4T,EAAAA,WAAV,GAA8B;EAC5B,SAAKhK,MAAL,GAAc,KAAKA,MAAL,CAAY4C,IAAZ,CAAiB,IAAjB,CAAd;EACA,SAAKvB,OAAL,GAAe,KAAKA,OAAL,CAAauB,IAAb,CAAkB,IAAlB,CAAf;EACD;;EAESnQ,EAAAA,WAAV,GAA8B;EAC5B,QAAI,KAAKN,SAAL,CAAeW,MAAf,KAA0B,CAA9B,EAAiC;EAC/B,WAAKmX,YAAL,CAAkB1I,WAAlB,CAA8B,IAA9B;;EAEA,UAAI2I,kBAAkB,CAAC,KAAKD,YAAN,EAAoB,KAAK7T,OAAzB,CAAtB,EAAyD;EACvD,aAAK+T,YAAL;EACD;;EAED,WAAKC,YAAL;EACD;EACF;;EAESxX,EAAAA,aAAV,GAAgC;EAC9B,QAAI,CAAC,KAAKT,SAAL,CAAeW,MAApB,EAA4B;EAC1B,WAAK8N,OAAL;EACD;EACF;;EAEDU,EAAAA,sBAAsB,GAAY;EAChC,WAAO+I,aAAa,CAClB,KAAKJ,YADa,EAElB,KAAK7T,OAFa,EAGlB,KAAKA,OAAL,CAAakU,kBAHK,CAApB;EAKD;;EAEDlJ,EAAAA,wBAAwB,GAAY;EAClC,WAAOiJ,aAAa,CAClB,KAAKJ,YADa,EAElB,KAAK7T,OAFa,EAGlB,KAAKA,OAAL,CAAamU,oBAHK,CAApB;EAKD;;EAED3J,EAAAA,OAAO,GAAS;EACd,SAAKzO,SAAL,GAAiB,EAAjB;EACA,SAAKqY,WAAL;EACA,SAAKP,YAAL,CAAkBxI,cAAlB,CAAiC,IAAjC;EACD;;EAEDtC,EAAAA,UAAU,CACR/I,OADQ,EAQRqU,aARQ,EASF;EACN,UAAMC,WAAW,GAAG,KAAKtU,OAAzB;EACA,UAAMuU,SAAS,GAAG,KAAKV,YAAvB;EAEA,SAAK7T,OAAL,GAAe,KAAKwN,MAAL,CAAYgG,2BAAZ,CAAwCxT,OAAxC,CAAf;;EAEA,QACE,OAAO,KAAKA,OAAL,CAAa2K,OAApB,KAAgC,WAAhC,IACA,OAAO,KAAK3K,OAAL,CAAa2K,OAApB,KAAgC,SAFlC,EAGE;EACA,YAAM,IAAI9H,KAAJ,CAAU,kCAAV,CAAN;EACD,KAXK;;;EAcN,QAAI,CAAC,KAAK7C,OAAL,CAAapB,QAAlB,EAA4B;EAC1B,WAAKoB,OAAL,CAAapB,QAAb,GAAwB0V,WAAW,CAAC1V,QAApC;EACD;;EAED,SAAK4V,WAAL;EAEA,UAAMC,OAAO,GAAG,KAAKhY,YAAL,EAAhB,CApBM;;EAuBN,QACEgY,OAAO,IACPC,qBAAqB,CACnB,KAAKb,YADc,EAEnBU,SAFmB,EAGnB,KAAKvU,OAHc,EAInBsU,WAJmB,CAFvB,EAQE;EACA,WAAKP,YAAL;EACD,KAjCK;;;EAoCN,SAAKY,YAAL,CAAkBN,aAAlB,EApCM;;EAuCN,QACEI,OAAO,KACN,KAAKZ,YAAL,KAAsBU,SAAtB,IACC,KAAKvU,OAAL,CAAa2K,OAAb,KAAyB2J,WAAW,CAAC3J,OADtC,IAEC,KAAK3K,OAAL,CAAa9B,SAAb,KAA2BoW,WAAW,CAACpW,SAHlC,CADT,EAKE;EACA,WAAK0W,kBAAL;EACD;;EAED,UAAMC,mBAAmB,GAAG,KAAKC,sBAAL,EAA5B,CAhDM;;EAmDN,QACEL,OAAO,KACN,KAAKZ,YAAL,KAAsBU,SAAtB,IACC,KAAKvU,OAAL,CAAa2K,OAAb,KAAyB2J,WAAW,CAAC3J,OADtC,IAECkK,mBAAmB,KAAK,KAAKE,sBAHxB,CADT,EAKE;EACA,WAAKC,qBAAL,CAA2BH,mBAA3B;EACD;EACF;;EAEDI,EAAAA,mBAAmB,CACjBjV,OADiB,EAQmB;EACpC,UAAMgS,gBAAgB,GAAG,KAAKxE,MAAL,CAAYgG,2BAAZ,CAAwCxT,OAAxC,CAAzB;EAEA,UAAMP,KAAK,GAAG,KAAK+N,MAAL,CACXoE,aADW,GAEXrE,KAFW,CAGV,KAAKC,MAHK,EAIVwE,gBAJU,CAAd;EAYA,WAAO,KAAKkD,YAAL,CAAkBzV,KAAlB,EAAyBuS,gBAAzB,CAAP;EACD;;EAEDnH,EAAAA,gBAAgB,GAAuC;EACrD,WAAO,KAAKsK,aAAZ;EACD;;EAEDC,EAAAA,WAAW,CACT7T,MADS,EAETyQ,gBAFS,EAS2B;EACpC,UAAMqD,aAAa,GAAG,EAAtB;;EAEA,UAAMC,SAAS,GAAI9T,GAAD,IAAoC;EACpD,UAAI,CAAC,KAAKkS,YAAL,CAAkBrP,QAAlB,CAA2B7C,GAA3B,CAAL,EAAsC;EACpC,aAAKkS,YAAL,CAAkBtX,IAAlB,CAAuBoF,GAAvB;EACD;EACF,KAJD;;EAMAL,IAAAA,MAAM,CAACC,IAAP,CAAYG,MAAZ,EAAoB2C,OAApB,CAA4B1C,GAAG,IAAI;EACjCL,MAAAA,MAAM,CAAC2K,cAAP,CAAsBuJ,aAAtB,EAAqC7T,GAArC,EAA0C;EACxC+T,QAAAA,YAAY,EAAE,KAD0B;EAExCxJ,QAAAA,UAAU,EAAE,IAF4B;EAGxCC,QAAAA,GAAG,EAAE,MAAM;EACTsJ,UAAAA,SAAS,CAAC9T,GAAD,CAAT;EACA,iBAAOD,MAAM,CAACC,GAAD,CAAb;EACD;EANuC,OAA1C;EAQD,KATD;;EAWA,QAAIwQ,gBAAgB,CAACwD,gBAAjB,IAAqCxD,gBAAgB,CAACyD,QAA1D,EAAoE;EAClEH,MAAAA,SAAS,CAAC,OAAD,CAAT;EACD;;EAED,WAAOD,aAAP;EACD;;EAEDK,EAAAA,aAAa,CACX1V,OADW,EAEkC;EAC7C,WAAO,IAAIgD,OAAJ,CAAY,CAACC,OAAD,EAAU0D,MAAV,KAAqB;EACtC,YAAMgP,WAAW,GAAG,KAAK3Z,SAAL,CAAeuF,MAAM,IAAI;EAC3C,YAAI,CAACA,MAAM,CAACnB,UAAZ,EAAwB;EACtBuV,UAAAA,WAAW;;EACX,cAAIpU,MAAM,CAACqB,OAAP,IAAkB5C,OAAO,EAAE6S,YAA/B,EAA6C;EAC3ClM,YAAAA,MAAM,CAACpF,MAAM,CAAC+B,KAAR,CAAN;EACD,WAFD,MAEO;EACLL,YAAAA,OAAO,CAAC1B,MAAD,CAAP;EACD;EACF;EACF,OATmB,CAApB;EAUD,KAXM,CAAP;EAYD;;EAEDqU,EAAAA,eAAe,GAAuD;EACpE,WAAO,KAAK/B,YAAZ;EACD;;EAEDjK,EAAAA,MAAM,GAAS;EACb,SAAK4D,MAAL,CAAYoE,aAAZ,GAA4BhI,MAA5B,CAAmC,KAAKiK,YAAxC;EACD;;EAED5I,EAAAA,OAAO,CACLjL,OADK,EAEwC;EAC7C,WAAO,KAAKwL,KAAL,CAAW,EAChB,GAAGxL,OADa;EAEhBoJ,MAAAA,IAAI,EAAE;EAAE8F,QAAAA,WAAW,EAAElP,OAAO,EAAEkP;EAAxB;EAFU,KAAX,CAAP;EAID;;EAED2G,EAAAA,eAAe,CACb7V,OADa,EAQgC;EAC7C,UAAMgS,gBAAgB,GAAG,KAAKxE,MAAL,CAAYgG,2BAAZ,CAAwCxT,OAAxC,CAAzB;EAEA,UAAMP,KAAK,GAAG,KAAK+N,MAAL,CACXoE,aADW,GAEXrE,KAFW,CAGV,KAAKC,MAHK,EAIVwE,gBAJU,CAAd;EAYA,WAAOvS,KAAK,CAAC+L,KAAN,GAAcpI,IAAd,CAAmB,MAAM,KAAK8R,YAAL,CAAkBzV,KAAlB,EAAyBuS,gBAAzB,CAAzB,CAAP;EACD;;EAESxG,EAAAA,KAAV,CACEC,YADF,EAE+C;EAC7C,WAAO,KAAKsI,YAAL,CAAkBtI,YAAlB,EAAgCrI,IAAhC,CAAqC,MAAM;EAChD,WAAKuR,YAAL;EACA,aAAO,KAAKQ,aAAZ;EACD,KAHM,CAAP;EAID;;EAEOpB,EAAAA,YAAR,CACEtI,YADF,EAEmC;EACjC;EACA,SAAK+I,WAAL,GAFiC;;EAKjC,QAAIjO,OAAwC,GAAG,KAAKsN,YAAL,CAAkBrI,KAAlB,CAC7C,KAAKxL,OADwC,EAE7CyL,YAF6C,CAA/C;;EAKA,QAAI,CAACA,YAAY,EAAEoH,YAAnB,EAAiC;EAC/BtM,MAAAA,OAAO,GAAGA,OAAO,CAAClD,KAAR,CAAcxG,IAAd,CAAV;EACD;;EAED,WAAO0J,OAAP;EACD;;EAEOqO,EAAAA,kBAAR,GAAmC;EACjC,SAAKkB,iBAAL;;EAEA,QACEnZ,QAAQ,IACR,KAAKwY,aAAL,CAAmBhV,OADnB,IAEA,CAAClD,cAAc,CAAC,KAAK+C,OAAL,CAAa9B,SAAd,CAHjB,EAIE;EACA;EACD;;EAED,UAAM6X,IAAI,GAAG/X,cAAc,CACzB,KAAKmX,aAAL,CAAmB/K,aADM,EAEzB,KAAKpK,OAAL,CAAa9B,SAFY,CAA3B,CAXiC;EAiBjC;;EACA,UAAM6E,OAAO,GAAGgT,IAAI,GAAG,CAAvB;EAEA,SAAKC,cAAL,GAAsB9S,UAAU,CAAC,MAAM;EACrC,UAAI,CAAC,KAAKiS,aAAL,CAAmBhV,OAAxB,EAAiC;EAC/B,aAAKwU,YAAL;EACD;EACF,KAJ+B,EAI7B5R,OAJ6B,CAAhC;EAKD;;EAEO+R,EAAAA,sBAAR,GAAiC;EAC/B,WAAO,OAAO,KAAK9U,OAAL,CAAaiW,eAApB,KAAwC,UAAxC,GACH,KAAKjW,OAAL,CAAaiW,eAAb,CAA6B,KAAKd,aAAL,CAAmBpL,IAAhD,EAAsD,KAAK8J,YAA3D,CADG,GAEH,KAAK7T,OAAL,CAAaiW,eAAb,IAAgC,KAFpC;EAGD;;EAEOjB,EAAAA,qBAAR,CAA8BkB,YAA9B,EAAkE;EAChE,SAAKC,oBAAL;EAEA,SAAKpB,sBAAL,GAA8BmB,YAA9B;;EAEA,QACEvZ,QAAQ,IACR,KAAKqD,OAAL,CAAa2K,OAAb,KAAyB,KADzB,IAEA,CAAC1N,cAAc,CAAC,KAAK8X,sBAAN,CAFf,IAGA,KAAKA,sBAAL,KAAgC,CAJlC,EAKE;EACA;EACD;;EAED,SAAKqB,iBAAL,GAAyBC,WAAW,CAAC,MAAM;EACzC,UACE,KAAKrW,OAAL,CAAasW,2BAAb,IACA/R,YAAY,CAACJ,SAAb,EAFF,EAGE;EACA,aAAK4P,YAAL;EACD;EACF,KAPmC,EAOjC,KAAKgB,sBAP4B,CAApC;EAQD;;EAEOf,EAAAA,YAAR,GAA6B;EAC3B,SAAKY,kBAAL;EACA,SAAKI,qBAAL,CAA2B,KAAKF,sBAAL,EAA3B;EACD;;EAEOV,EAAAA,WAAR,GAA4B;EAC1B,SAAK0B,iBAAL;EACA,SAAKK,oBAAL;EACD;;EAEOL,EAAAA,iBAAR,GAAkC;EAChC,QAAI,KAAKE,cAAT,EAAyB;EACvBrM,MAAAA,YAAY,CAAC,KAAKqM,cAAN,CAAZ;EACA,WAAKA,cAAL,GAAsB7Z,SAAtB;EACD;EACF;;EAEOga,EAAAA,oBAAR,GAAqC;EACnC,QAAI,KAAKC,iBAAT,EAA4B;EAC1BG,MAAAA,aAAa,CAAC,KAAKH,iBAAN,CAAb;EACA,WAAKA,iBAAL,GAAyBja,SAAzB;EACD;EACF;;EAES+Y,EAAAA,YAAV,CACEzV,KADF,EAEEO,OAFF,EASsC;EACpC,UAAMuU,SAAS,GAAG,KAAKV,YAAvB;EACA,UAAMS,WAAW,GAAG,KAAKtU,OAAzB;EACA,UAAMwW,UAAU,GAAG,KAAKrB,aAAxB;EACA,UAAMsB,eAAe,GAAG,KAAKC,kBAA7B;EACA,UAAMC,iBAAiB,GAAG,KAAKC,oBAA/B;EACA,UAAMC,WAAW,GAAGpX,KAAK,KAAK8U,SAA9B;EACA,UAAMuC,iBAAiB,GAAGD,WAAW,GACjCpX,KAAK,CAACe,KAD2B,GAEjC,KAAKuW,wBAFT;EAGA,UAAMC,eAAe,GAAGH,WAAW,GAC/B,KAAK1B,aAD0B,GAE/B,KAAK8B,mBAFT;EAIA,UAAM;EAAEzW,MAAAA;EAAF,QAAYf,KAAlB;EACA,QAAI;EAAE2K,MAAAA,aAAF;EAAiB9G,MAAAA,KAAjB;EAAwB4J,MAAAA,cAAxB;EAAwC9M,MAAAA,UAAxC;EAAoDK,MAAAA;EAApD,QAA+DD,KAAnE;EACA,QAAI0W,cAAc,GAAG,KAArB;EACA,QAAIC,iBAAiB,GAAG,KAAxB;EACA,QAAIpN,IAAJ,CAlBoC;;EAqBpC,QAAI/J,OAAO,CAACoX,iBAAZ,EAA+B;EAC7B,YAAM3C,OAAO,GAAG,KAAKhY,YAAL,EAAhB;EAEA,YAAM4a,YAAY,GAAG,CAAC5C,OAAD,IAAYX,kBAAkB,CAACrU,KAAD,EAAQO,OAAR,CAAnD;EAEA,YAAMsX,eAAe,GACnB7C,OAAO,IAAIC,qBAAqB,CAACjV,KAAD,EAAQ8U,SAAR,EAAmBvU,OAAnB,EAA4BsU,WAA5B,CADlC;;EAGA,UAAI+C,YAAY,IAAIC,eAApB,EAAqC;EACnClX,QAAAA,UAAU,GAAG,IAAb;;EACA,YAAI,CAACgK,aAAL,EAAoB;EAClB3J,UAAAA,MAAM,GAAG,SAAT;EACD;EACF;EACF,KAnCmC;;;EAsCpC,QACET,OAAO,CAACuX,gBAAR,IACA,CAAC/W,KAAK,CAACwM,eADP,IAEAgK,eAAe,EAAEQ,SAFjB,IAGA/W,MAAM,KAAK,OAJb,EAKE;EACAsJ,MAAAA,IAAI,GAAGiN,eAAe,CAACjN,IAAvB;EACAK,MAAAA,aAAa,GAAG4M,eAAe,CAAC5M,aAAhC;EACA3J,MAAAA,MAAM,GAAGuW,eAAe,CAACvW,MAAzB;EACAyW,MAAAA,cAAc,GAAG,IAAjB;EACD,KAVD;EAAA,SAYK,IAAIlX,OAAO,CAACyX,MAAR,IAAkB,OAAOjX,KAAK,CAACuJ,IAAb,KAAsB,WAA5C,EAAyD;EAC5D;EACA,YACEyM,UAAU,IACVhW,KAAK,CAACuJ,IAAN,KAAe0M,eAAe,EAAE1M,IADhC,IAEA/J,OAAO,CAACyX,MAAR,KAAmB,KAAKC,QAH1B,EAIE;EACA3N,UAAAA,IAAI,GAAG,KAAK4N,YAAZ;EACD,SAND,MAMO;EACL,cAAI;EACF,iBAAKD,QAAL,GAAgB1X,OAAO,CAACyX,MAAxB;EACA1N,YAAAA,IAAI,GAAG/J,OAAO,CAACyX,MAAR,CAAejX,KAAK,CAACuJ,IAArB,CAAP;;EACA,gBAAI/J,OAAO,CAACiK,iBAAR,KAA8B,KAAlC,EAAyC;EACvCF,cAAAA,IAAI,GAAGlI,gBAAgB,CAAC2U,UAAU,EAAEzM,IAAb,EAAmBA,IAAnB,CAAvB;EACD;;EACD,iBAAK4N,YAAL,GAAoB5N,IAApB;EACA,iBAAK4J,WAAL,GAAmB,IAAnB;EACD,WARD,CAQE,OAAOA,WAAP,EAAoB;EACpBnL,YAAAA,SAAS,GAAGlF,KAAZ,CAAkBqQ,WAAlB;EACA,iBAAKA,WAAL,GAAmBA,WAAnB;EACD;EACF;EACF,OAtBI;EAAA,WAwBA;EACH5J,UAAAA,IAAI,GAAIvJ,KAAK,CAACuJ,IAAd;EACD,SA5EmC;;;EA+EpC,QACE,OAAO/J,OAAO,CAAC4X,eAAf,KAAmC,WAAnC,IACA,OAAO7N,IAAP,KAAgB,WADhB,KAECtJ,MAAM,KAAK,SAAX,IAAwBA,MAAM,KAAK,MAFpC,CADF,EAIE;EACA,UAAImX,eAAJ,CADA;;EAIA,UACEpB,UAAU,EAAEW,iBAAZ,IACAnX,OAAO,CAAC4X,eAAR,KAA4BjB,iBAAiB,EAAEiB,eAFjD,EAGE;EACAA,QAAAA,eAAe,GAAGpB,UAAU,CAACzM,IAA7B;EACD,OALD,MAKO;EACL6N,QAAAA,eAAe,GACb,OAAO5X,OAAO,CAAC4X,eAAf,KAAmC,UAAnC,GACK5X,OAAO,CAAC4X,eAAT,EADJ,GAEI5X,OAAO,CAAC4X,eAHd;;EAIA,YAAI5X,OAAO,CAACyX,MAAR,IAAkB,OAAOG,eAAP,KAA2B,WAAjD,EAA8D;EAC5D,cAAI;EACFA,YAAAA,eAAe,GAAG5X,OAAO,CAACyX,MAAR,CAAeG,eAAf,CAAlB;;EACA,gBAAI5X,OAAO,CAACiK,iBAAR,KAA8B,KAAlC,EAAyC;EACvC2N,cAAAA,eAAe,GAAG/V,gBAAgB,CAChC2U,UAAU,EAAEzM,IADoB,EAEhC6N,eAFgC,CAAlC;EAID;;EACD,iBAAKjE,WAAL,GAAmB,IAAnB;EACD,WATD,CASE,OAAOA,WAAP,EAAoB;EACpBnL,YAAAA,SAAS,GAAGlF,KAAZ,CAAkBqQ,WAAlB;EACA,iBAAKA,WAAL,GAAmBA,WAAnB;EACD;EACF;EACF;;EAED,UAAI,OAAOiE,eAAP,KAA2B,WAA/B,EAA4C;EAC1CnX,QAAAA,MAAM,GAAG,SAAT;EACAsJ,QAAAA,IAAI,GAAG6N,eAAP;EACAT,QAAAA,iBAAiB,GAAG,IAApB;EACD;EACF;;EAED,QAAI,KAAKxD,WAAT,EAAsB;EACpBrQ,MAAAA,KAAK,GAAG,KAAKqQ,WAAb;EACA5J,MAAAA,IAAI,GAAG,KAAK4N,YAAZ;EACAzK,MAAAA,cAAc,GAAG7O,IAAI,CAACC,GAAL,EAAjB;EACAmC,MAAAA,MAAM,GAAG,OAAT;EACD;;EAED,UAAMc,MAA8C,GAAG;EACrDd,MAAAA,MADqD;EAErDoX,MAAAA,SAAS,EAAEpX,MAAM,KAAK,SAF+B;EAGrD+W,MAAAA,SAAS,EAAE/W,MAAM,KAAK,SAH+B;EAIrDmC,MAAAA,OAAO,EAAEnC,MAAM,KAAK,OAJiC;EAKrDqX,MAAAA,MAAM,EAAErX,MAAM,KAAK,MALkC;EAMrDsJ,MAAAA,IANqD;EAOrDK,MAAAA,aAPqD;EAQrD9G,MAAAA,KARqD;EASrD4J,MAAAA,cATqD;EAUrDjI,MAAAA,YAAY,EAAEzE,KAAK,CAAC2M,iBAViC;EAWrDF,MAAAA,gBAAgB,EAAEzM,KAAK,CAACyM,gBAX6B;EAYrD8K,MAAAA,SAAS,EAAEvX,KAAK,CAACwM,eAAN,GAAwB,CAAxB,IAA6BxM,KAAK,CAACyM,gBAAN,GAAyB,CAZZ;EAarD+K,MAAAA,mBAAmB,EACjBxX,KAAK,CAACwM,eAAN,GAAwB8J,iBAAiB,CAAC9J,eAA1C,IACAxM,KAAK,CAACyM,gBAAN,GAAyB6J,iBAAiB,CAAC7J,gBAfQ;EAgBrD7M,MAAAA,UAhBqD;EAiBrD6X,MAAAA,YAAY,EAAE7X,UAAU,IAAIK,MAAM,KAAK,SAjBc;EAkBrDyX,MAAAA,cAAc,EAAEzX,MAAM,KAAK,OAAX,IAAsBD,KAAK,CAAC4J,aAAN,KAAwB,CAlBT;EAmBrD+M,MAAAA,iBAnBqD;EAoBrDD,MAAAA,cApBqD;EAqBrDiB,MAAAA,cAAc,EAAE1X,MAAM,KAAK,OAAX,IAAsBD,KAAK,CAAC4J,aAAN,KAAwB,CArBT;EAsBrDjK,MAAAA,OAAO,EAAEA,OAAO,CAACV,KAAD,EAAQO,OAAR,CAtBqC;EAuBrDiL,MAAAA,OAAO,EAAE,KAAKA,OAvBuC;EAwBrDrB,MAAAA,MAAM,EAAE,KAAKA;EAxBwC,KAAvD;EA2BA,WAAOrI,MAAP;EACD;;EAEO6W,EAAAA,qBAAR,CACE7W,MADF,EAEEiV,UAFF,EAGW;EACT,QAAI,CAACA,UAAL,EAAiB;EACf,aAAO,IAAP;EACD;;EAED,UAAM;EAAE6B,MAAAA,mBAAF;EAAuBC,MAAAA;EAAvB,QAAyD,KAAKtY,OAApE;;EAEA,QAAI,CAACqY,mBAAD,IAAwB,CAACC,6BAA7B,EAA4D;EAC1D,aAAO,IAAP;EACD;;EAED,QAAID,mBAAmB,KAAK,SAAxB,IAAqC,CAAC,KAAK3E,YAAL,CAAkBhX,MAA5D,EAAoE;EAClE,aAAO,IAAP;EACD;;EAED,UAAM6b,aAAa,GACjBF,mBAAmB,KAAK,SAAxB,GACI,KAAK3E,YADT,GAEI2E,mBAHN;EAKA,WAAOlX,MAAM,CAACC,IAAP,CAAYG,MAAZ,EAAoBK,IAApB,CAAyBJ,GAAG,IAAI;EACrC,YAAMgX,QAAQ,GAAGhX,GAAjB;EACA,YAAMiX,OAAO,GAAGlX,MAAM,CAACiX,QAAD,CAAN,KAAqBhC,UAAU,CAACgC,QAAD,CAA/C;EACA,YAAME,UAAU,GAAGH,aAAa,EAAE3W,IAAf,CAAoBrF,CAAC,IAAIA,CAAC,KAAKiF,GAA/B,CAAnB;EACA,YAAMmX,UAAU,GAAGL,6BAA6B,EAAE1W,IAA/B,CAAoCrF,CAAC,IAAIA,CAAC,KAAKiF,GAA/C,CAAnB;EACA,aAAOiX,OAAO,IAAI,CAACE,UAAZ,KAA2B,CAACJ,aAAD,IAAkBG,UAA7C,CAAP;EACD,KANM,CAAP;EAOD;;EAED/D,EAAAA,YAAY,CAACN,aAAD,EAAsC;EAChD,UAAMmC,UAAU,GAAG,KAAKrB,aAAxB;EAIA,SAAKA,aAAL,GAAqB,KAAKD,YAAL,CAAkB,KAAKrB,YAAvB,EAAqC,KAAK7T,OAA1C,CAArB;EACA,SAAK0W,kBAAL,GAA0B,KAAK7C,YAAL,CAAkBrT,KAA5C;EACA,SAAKoW,oBAAL,GAA4B,KAAK5W,OAAjC,CAPgD;;EAUhD,QAAImC,mBAAmB,CAAC,KAAKgT,aAAN,EAAqBqB,UAArB,CAAvB,EAAyD;EACvD;EACD,KAZ+C;;;EAehD,UAAMoC,oBAAmC,GAAG;EAAE3P,MAAAA,KAAK,EAAE;EAAT,KAA5C;;EAEA,QACEoL,aAAa,EAAEtY,SAAf,KAA6B,KAA7B,IACA,KAAKqc,qBAAL,CAA2B,KAAKjD,aAAhC,EAA+CqB,UAA/C,CAFF,EAGE;EACAoC,MAAAA,oBAAoB,CAAC7c,SAArB,GAAiC,IAAjC;EACD;;EAED,SAAKqP,MAAL,CAAY,EAAE,GAAGwN,oBAAL;EAA2B,SAAGvE;EAA9B,KAAZ;EACD;;EAEOG,EAAAA,WAAR,GAA4B;EAC1B,UAAM/U,KAAK,GAAG,KAAK+N,MAAL,CACXoE,aADW,GAEXrE,KAFW,CAGV,KAAKC,MAHK,EAIV,KAAKxN,OAJK,CAAd;;EAYA,QAAIP,KAAK,KAAK,KAAKoU,YAAnB,EAAiC;EAC/B;EACD;;EAED,UAAMU,SAAS,GAAG,KAAKV,YAAvB;EACA,SAAKA,YAAL,GAAoBpU,KAApB;EACA,SAAKsX,wBAAL,GAAgCtX,KAAK,CAACe,KAAtC;EACA,SAAKyW,mBAAL,GAA2B,KAAK9B,aAAhC;;EAEA,QAAI,KAAK1Y,YAAL,EAAJ,EAAyB;EACvB8X,MAAAA,SAAS,EAAElJ,cAAX,CAA0B,IAA1B;EACA5L,MAAAA,KAAK,CAAC0L,WAAN,CAAkB,IAAlB;EACD;EACF;;EAEDwB,EAAAA,aAAa,CAACF,MAAD,EAAsC;EACjD,UAAM4H,aAA4B,GAAG,EAArC;;EAEA,QAAI5H,MAAM,CAACtC,IAAP,KAAgB,SAApB,EAA+B;EAC7BkK,MAAAA,aAAa,CAAC3N,SAAd,GAA0B,IAA1B;EACD,KAFD,MAEO,IAAI+F,MAAM,CAACtC,IAAP,KAAgB,OAAhB,IAA2B,CAAC3E,gBAAgB,CAACiH,MAAM,CAACnJ,KAAR,CAAhD,EAAgE;EACrE+Q,MAAAA,aAAa,CAACzN,OAAd,GAAwB,IAAxB;EACD;;EAED,SAAK+N,YAAL,CAAkBN,aAAlB;;EAEA,QAAI,KAAK5X,YAAL,EAAJ,EAAyB;EACvB,WAAKuX,YAAL;EACD;EACF;;EAEO5I,EAAAA,MAAR,CAAeiJ,aAAf,EAAmD;EACjDhM,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxB;EACA,UAAIuM,aAAa,CAAC3N,SAAlB,EAA6B;EAC3B,aAAK1G,OAAL,CAAa0G,SAAb,GAAyB,KAAKyO,aAAL,CAAmBpL,IAA5C;EACA,aAAK/J,OAAL,CAAayO,SAAb,GAAyB,KAAK0G,aAAL,CAAmBpL,IAA5C,EAAmD,IAAnD;EACD,OAHD,MAGO,IAAIsK,aAAa,CAACzN,OAAlB,EAA2B;EAChC,aAAK5G,OAAL,CAAa4G,OAAb,GAAuB,KAAKuO,aAAL,CAAmB7R,KAA1C;EACA,aAAKtD,OAAL,CAAayO,SAAb,GAAyBtS,SAAzB,EAAoC,KAAKgZ,aAAL,CAAmB7R,KAAvD;EACD,OARuB;;;EAWxB,UAAI+Q,aAAa,CAACtY,SAAlB,EAA6B;EAC3B,aAAKA,SAAL,CAAemI,OAAf,CAAuBjI,QAAQ,IAAI;EACjCA,UAAAA,QAAQ,CAAC,KAAKkZ,aAAN,CAAR;EACD,SAFD;EAGD,OAfuB;;;EAkBxB,UAAId,aAAa,CAACpL,KAAlB,EAAyB;EACvB,aAAKuE,MAAL,CACGoE,aADH,GAEGxG,MAFH,CAEU;EAAE3L,UAAAA,KAAK,EAAE,KAAKoU,YAAd;EAA4B1J,UAAAA,IAAI,EAAE;EAAlC,SAFV;EAGD;EACF,KAvBD;EAwBD;;EAvrB0D;;EA0rB7D,SAAS0O,iBAAT,CACEpZ,KADF,EAEEO,OAFF,EAGW;EACT,SACEA,OAAO,CAAC2K,OAAR,KAAoB,KAApB,IACA,CAAClL,KAAK,CAACe,KAAN,CAAY4J,aADb,IAEA,EAAE3K,KAAK,CAACe,KAAN,CAAYC,MAAZ,KAAuB,OAAvB,IAAkCT,OAAO,CAAC8Y,YAAR,KAAyB,KAA7D,CAHF;EAKD;;EAED,SAAShF,kBAAT,CACErU,KADF,EAEEO,OAFF,EAGW;EACT,SACE6Y,iBAAiB,CAACpZ,KAAD,EAAQO,OAAR,CAAjB,IACCP,KAAK,CAACe,KAAN,CAAY4J,aAAZ,GAA4B,CAA5B,IACC6J,aAAa,CAACxU,KAAD,EAAQO,OAAR,EAAiBA,OAAO,CAAC+Y,cAAzB,CAHjB;EAKD;;EAED,SAAS9E,aAAT,CACExU,KADF,EAEEO,OAFF,EAGEgZ,KAHF,EAME;EACA,MAAIhZ,OAAO,CAAC2K,OAAR,KAAoB,KAAxB,EAA+B;EAC7B,UAAMzN,KAAK,GAAG,OAAO8b,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACvZ,KAAD,CAAnC,GAA6CuZ,KAA3D;EAEA,WAAO9b,KAAK,KAAK,QAAV,IAAuBA,KAAK,KAAK,KAAV,IAAmBiD,OAAO,CAACV,KAAD,EAAQO,OAAR,CAAxD;EACD;;EACD,SAAO,KAAP;EACD;;EAED,SAAS0U,qBAAT,CACEjV,KADF,EAEE8U,SAFF,EAGEvU,OAHF,EAIEsU,WAJF,EAKW;EACT,SACEtU,OAAO,CAAC2K,OAAR,KAAoB,KAApB,KACClL,KAAK,KAAK8U,SAAV,IAAuBD,WAAW,CAAC3J,OAAZ,KAAwB,KADhD,MAEC,CAAC3K,OAAO,CAACyV,QAAT,IAAqBhW,KAAK,CAACe,KAAN,CAAYC,MAAZ,KAAuB,OAF7C,KAGAN,OAAO,CAACV,KAAD,EAAQO,OAAR,CAJT;EAMD;;EAED,SAASG,OAAT,CACEV,KADF,EAEEO,OAFF,EAGW;EACT,SAAOP,KAAK,CAACqL,aAAN,CAAoB9K,OAAO,CAAC9B,SAA5B,CAAP;EACD;;ECzxBM,MAAM+a,eAAN,SAA8Bpd,YAA9B,CAAoE;EAOzEC,EAAAA,WAAW,CAAC0R,MAAD,EAAsBH,OAAtB,EAAwD;EACjE;EAEA,SAAKG,MAAL,GAAcA,MAAd;EACA,SAAKH,OAAL,GAAe,EAAf;EACA,SAAK9L,MAAL,GAAc,EAAd;EACA,SAAKyH,SAAL,GAAiB,EAAjB;EACA,SAAKkQ,YAAL,GAAoB,EAApB;;EAEA,QAAI7L,OAAJ,EAAa;EACX,WAAK8L,UAAL,CAAgB9L,OAAhB;EACD;EACF;;EAEShR,EAAAA,WAAV,GAA8B;EAC5B,QAAI,KAAKN,SAAL,CAAeW,MAAf,KAA0B,CAA9B,EAAiC;EAC/B,WAAKsM,SAAL,CAAe9E,OAAf,CAAuBwG,QAAQ,IAAI;EACjCA,QAAAA,QAAQ,CAAC1O,SAAT,CAAmBuF,MAAM,IAAI;EAC3B,eAAK6X,QAAL,CAAc1O,QAAd,EAAwBnJ,MAAxB;EACD,SAFD;EAGD,OAJD;EAKD;EACF;;EAES/E,EAAAA,aAAV,GAAgC;EAC9B,QAAI,CAAC,KAAKT,SAAL,CAAeW,MAApB,EAA4B;EAC1B,WAAK8N,OAAL;EACD;EACF;;EAEDA,EAAAA,OAAO,GAAS;EACd,SAAKzO,SAAL,GAAiB,EAAjB;EACA,SAAKiN,SAAL,CAAe9E,OAAf,CAAuBwG,QAAQ,IAAI;EACjCA,MAAAA,QAAQ,CAACF,OAAT;EACD,KAFD;EAGD;;EAED2O,EAAAA,UAAU,CACR9L,OADQ,EAERgH,aAFQ,EAGF;EACN,SAAKhH,OAAL,GAAeA,OAAf;EACA,SAAKgM,eAAL,CAAqBhF,aAArB;EACD;;EAEDxJ,EAAAA,gBAAgB,GAA0B;EACxC,WAAO,KAAKtJ,MAAZ;EACD;;EAED0T,EAAAA,mBAAmB,CAAC5H,OAAD,EAAyD;EAC1E,WAAO,KAAKiM,qBAAL,CAA2BjM,OAA3B,EAAoCwE,GAApC,CAAwC0H,KAAK,IAClDA,KAAK,CAAC7O,QAAN,CAAeuK,mBAAf,CAAmCsE,KAAK,CAACC,qBAAzC,CADK,CAAP;EAGD;;EAEOF,EAAAA,qBAAR,CACEjM,OADF,EAEwB;EACtB,UAAMoM,aAAa,GAAG,KAAKzQ,SAA3B;EACA,UAAMwQ,qBAAqB,GAAGnM,OAAO,CAACwE,GAAR,CAAY7R,OAAO,IAC/C,KAAKwN,MAAL,CAAYgG,2BAAZ,CAAwCxT,OAAxC,CAD4B,CAA9B;EAIA,UAAM0Z,iBAAuC,GAAGF,qBAAqB,CAACG,OAAtB,CAC9C3H,gBAAgB,IAAI;EAClB,YAAMuH,KAAK,GAAGE,aAAa,CAAC1O,IAAd,CACZL,QAAQ,IAAIA,QAAQ,CAAC1K,OAAT,CAAiBF,SAAjB,KAA+BkS,gBAAgB,CAAClS,SADhD,CAAd;;EAGA,UAAIyZ,KAAK,IAAI,IAAb,EAAmB;EACjB,eAAO,CAAC;EAAEC,UAAAA,qBAAqB,EAAExH,gBAAzB;EAA2CtH,UAAAA,QAAQ,EAAE6O;EAArD,SAAD,CAAP;EACD;;EACD,aAAO,EAAP;EACD,KAT6C,CAAhD;EAYA,UAAMK,kBAAkB,GAAGF,iBAAiB,CAAC7H,GAAlB,CACzB0H,KAAK,IAAIA,KAAK,CAACC,qBAAN,CAA4B1Z,SADZ,CAA3B;EAGA,UAAM+Z,gBAAgB,GAAGL,qBAAqB,CAACld,MAAtB,CACvB0V,gBAAgB,IACd,CAAC4H,kBAAkB,CAACvV,QAAnB,CAA4B2N,gBAAgB,CAAClS,SAA7C,CAFoB,CAAzB;EAKA,UAAMga,kBAAkB,GAAGL,aAAa,CAACnd,MAAd,CACzByd,YAAY,IACV,CAACL,iBAAiB,CAAC9X,IAAlB,CAAuB2X,KAAK,IAAIA,KAAK,CAAC7O,QAAN,KAAmBqP,YAAnD,CAFsB,CAA3B;EAKA,UAAMC,oBAA0C,GAAGH,gBAAgB,CAAChI,GAAjB,CACjD,CAAC7R,OAAD,EAAUnC,KAAV,KAAoB;EAClB,UAAImC,OAAO,CAACuX,gBAAZ,EAA8B;EAC5B;EACA,cAAM0C,sBAAsB,GAAGH,kBAAkB,CAACjc,KAAD,CAAjD;;EACA,YAAIoc,sBAAsB,KAAK9d,SAA/B,EAA0C;EACxC,iBAAO;EACLqd,YAAAA,qBAAqB,EAAExZ,OADlB;EAEL0K,YAAAA,QAAQ,EAAEuP;EAFL,WAAP;EAID;EACF;;EACD,aAAO;EACLT,QAAAA,qBAAqB,EAAExZ,OADlB;EAEL0K,QAAAA,QAAQ,EAAE,KAAKwP,WAAL,CAAiBla,OAAjB;EAFL,OAAP;EAID,KAhBgD,CAAnD;;EAmBA,UAAMma,2BAA2B,GAAG,CAClC1Y,CADkC,EAElCC,CAFkC,KAIlC8X,qBAAqB,CAAC9b,OAAtB,CAA8B+D,CAAC,CAAC+X,qBAAhC,IACAA,qBAAqB,CAAC9b,OAAtB,CAA8BgE,CAAC,CAAC8X,qBAAhC,CALF;;EAOA,WAAOE,iBAAiB,CACrBU,MADI,CACGJ,oBADH,EAEJ3Y,IAFI,CAEC8Y,2BAFD,CAAP;EAGD;;EAEOD,EAAAA,WAAR,CAAoBla,OAApB,EAAkE;EAChE,UAAMgS,gBAAgB,GAAG,KAAKxE,MAAL,CAAYgG,2BAAZ,CAAwCxT,OAAxC,CAAzB;EACA,UAAMqa,eAAe,GAAG,KAAKnB,YAAL,CAAkBlH,gBAAgB,CAAClS,SAAnC,CAAxB;EACA,WAAOua,eAAe,IAAI,IAAI5G,aAAJ,CAAkB,KAAKjG,MAAvB,EAA+BwE,gBAA/B,CAA1B;EACD;;EAEOqH,EAAAA,eAAR,CAAwBhF,aAAxB,EAA6D;EAC3DhM,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxB,YAAM2R,aAAa,GAAG,KAAKzQ,SAA3B;EAEA,YAAMsR,kBAAkB,GAAG,KAAKhB,qBAAL,CAA2B,KAAKjM,OAAhC,CAA3B,CAHwB;;EAMxBiN,MAAAA,kBAAkB,CAACpW,OAAnB,CAA2BqV,KAAK,IAC9BA,KAAK,CAAC7O,QAAN,CAAe3B,UAAf,CAA0BwQ,KAAK,CAACC,qBAAhC,EAAuDnF,aAAvD,CADF;EAIA,YAAMkG,YAAY,GAAGD,kBAAkB,CAACzI,GAAnB,CAAuB0H,KAAK,IAAIA,KAAK,CAAC7O,QAAtC,CAArB;EACA,YAAM8P,eAAe,GAAGrZ,MAAM,CAACsZ,WAAP,CACtBF,YAAY,CAAC1I,GAAb,CAAiBnH,QAAQ,IAAI,CAACA,QAAQ,CAAC1K,OAAT,CAAiBF,SAAlB,EAA6B4K,QAA7B,CAA7B,CADsB,CAAxB;EAGA,YAAMgQ,SAAS,GAAGH,YAAY,CAAC1I,GAAb,CAAiBnH,QAAQ,IACzCA,QAAQ,CAACG,gBAAT,EADgB,CAAlB;EAIA,YAAM8P,cAAc,GAAGJ,YAAY,CAAC3Y,IAAb,CACrB,CAAC8I,QAAD,EAAW7M,KAAX,KAAqB6M,QAAQ,KAAK+O,aAAa,CAAC5b,KAAD,CAD1B,CAAvB;;EAGA,UAAI4b,aAAa,CAAC/c,MAAd,KAAyB6d,YAAY,CAAC7d,MAAtC,IAAgD,CAACie,cAArD,EAAqE;EACnE;EACD;;EAED,WAAK3R,SAAL,GAAiBuR,YAAjB;EACA,WAAKrB,YAAL,GAAoBsB,eAApB;EACA,WAAKjZ,MAAL,GAAcmZ,SAAd;;EAEA,UAAI,CAAC,KAAKje,YAAL,EAAL,EAA0B;EACxB;EACD;;EAEDc,MAAAA,UAAU,CAACkc,aAAD,EAAgBc,YAAhB,CAAV,CAAwCrW,OAAxC,CAAgDwG,QAAQ,IAAI;EAC1DA,QAAAA,QAAQ,CAACF,OAAT;EACD,OAFD;EAIAjN,MAAAA,UAAU,CAACgd,YAAD,EAAed,aAAf,CAAV,CAAwCvV,OAAxC,CAAgDwG,QAAQ,IAAI;EAC1DA,QAAAA,QAAQ,CAAC1O,SAAT,CAAmBuF,MAAM,IAAI;EAC3B,eAAK6X,QAAL,CAAc1O,QAAd,EAAwBnJ,MAAxB;EACD,SAFD;EAGD,OAJD;EAMA,WAAK6J,MAAL;EACD,KA5CD;EA6CD;;EAEOgO,EAAAA,QAAR,CAAiB1O,QAAjB,EAA0CnJ,MAA1C,EAA6E;EAC3E,UAAM1D,KAAK,GAAG,KAAKmL,SAAL,CAAetL,OAAf,CAAuBgN,QAAvB,CAAd;;EACA,QAAI7M,KAAK,KAAK,CAAC,CAAf,EAAkB;EAChB,WAAK0D,MAAL,GAAc5D,SAAS,CAAC,KAAK4D,MAAN,EAAc1D,KAAd,EAAqB0D,MAArB,CAAvB;EACA,WAAK6J,MAAL;EACD;EACF;;EAEOA,EAAAA,MAAR,GAAuB;EACrB/C,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxB,WAAK/L,SAAL,CAAemI,OAAf,CAAuBjI,QAAQ,IAAI;EACjCA,QAAAA,QAAQ,CAAC,KAAKsF,MAAN,CAAR;EACD,OAFD;EAGD,KAJD;EAKD;;EAlMwE;;ECepE,MAAMqZ,qBAAN,SAKGnH,aALH,CAUL;EACA;EAKA;EAGA;EAKA;EACA3X,EAAAA,WAAW,CACT0R,MADS,EAETxN,OAFS,EAQT;EACA,UAAMwN,MAAN,EAAcxN,OAAd;EACD;;EAES4T,EAAAA,WAAV,GAA8B;EAC5B,UAAMA,WAAN;EACA,SAAKiH,aAAL,GAAqB,KAAKA,aAAL,CAAmBrO,IAAnB,CAAwB,IAAxB,CAArB;EACA,SAAKsO,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBtO,IAAvB,CAA4B,IAA5B,CAAzB;EACD;;EAEDzD,EAAAA,UAAU,CACR/I,OADQ,EAORqU,aAPQ,EAQF;EACN,UAAMtL,UAAN,CACE,EACE,GAAG/I,OADL;EAEEoM,MAAAA,QAAQ,EAAE6C,qBAAqB;EAFjC,KADF,EAKEoF,aALF;EAOD;;EAEDY,EAAAA,mBAAmB,CACjBjV,OADiB,EAO2B;EAC5CA,IAAAA,OAAO,CAACoM,QAAR,GAAmB6C,qBAAqB,EAAxC;EACA,WAAO,MAAMgG,mBAAN,CAA0BjV,OAA1B,CAAP;EAID;;EAED6a,EAAAA,aAAa,CACX7a,OADW,EAE0C;EACrD,WAAO,KAAKwL,KAAL,CAAW;EAChB;EACAE,MAAAA,aAAa,EAAE1L,OAAO,EAAE0L,aAAT,IAA0B,IAFzB;EAGhBmH,MAAAA,YAAY,EAAE7S,OAAO,EAAE6S,YAHP;EAIhBzJ,MAAAA,IAAI,EAAE;EACJ+F,QAAAA,SAAS,EAAE;EAAEE,UAAAA,SAAS,EAAE,SAAb;EAAwBxD,UAAAA,SAAS,EAAE7L,OAAO,EAAE6L;EAA5C;EADP;EAJU,KAAX,CAAP;EAQD;;EAEDiP,EAAAA,iBAAiB,CACf9a,OADe,EAEsC;EACrD,WAAO,KAAKwL,KAAL,CAAW;EAChB;EACAE,MAAAA,aAAa,EAAE1L,OAAO,EAAE0L,aAAT,IAA0B,IAFzB;EAGhBmH,MAAAA,YAAY,EAAE7S,OAAO,EAAE6S,YAHP;EAIhBzJ,MAAAA,IAAI,EAAE;EACJ+F,QAAAA,SAAS,EAAE;EAAEE,UAAAA,SAAS,EAAE,UAAb;EAAyBxD,UAAAA,SAAS,EAAE7L,OAAO,EAAE6L;EAA7C;EADP;EAJU,KAAX,CAAP;EAQD;;EAESqJ,EAAAA,YAAV,CACEzV,KADF,EAEEO,OAFF,EAQ8C;EAC5C,UAAM;EAAEQ,MAAAA;EAAF,QAAYf,KAAlB;EACA,UAAM8B,MAAM,GAAG,MAAM2T,YAAN,CAAmBzV,KAAnB,EAA0BO,OAA1B,CAAf;EACA,WAAO,EACL,GAAGuB,MADE;EAELsZ,MAAAA,aAAa,EAAE,KAAKA,aAFf;EAGLC,MAAAA,iBAAiB,EAAE,KAAKA,iBAHnB;EAILlK,MAAAA,WAAW,EAAEA,WAAW,CAAC5Q,OAAD,EAAUQ,KAAK,CAACuJ,IAAN,EAAYyF,KAAtB,CAJnB;EAKLsB,MAAAA,eAAe,EAAEA,eAAe,CAAC9Q,OAAD,EAAUQ,KAAK,CAACuJ,IAAN,EAAYyF,KAAtB,CAL3B;EAMLJ,MAAAA,kBAAkB,EAChB5O,KAAK,CAACJ,UAAN,IAAoBI,KAAK,CAAC+L,SAAN,EAAiB4C,SAAjB,EAA4BE,SAA5B,KAA0C,SAP3D;EAQLC,MAAAA,sBAAsB,EACpB9O,KAAK,CAACJ,UAAN,IACAI,KAAK,CAAC+L,SAAN,EAAiB4C,SAAjB,EAA4BE,SAA5B,KAA0C;EAVvC,KAAP;EAYD;;EAnHD;;ECXF;EAEO,MAAM0L,gBAAN,SAKGlf,YALH,CAOL;EAaAC,EAAAA,WAAW,CACT0R,MADS,EAETxN,OAFS,EAGT;EACA;EAEA,SAAKwN,MAAL,GAAcA,MAAd;EACA,SAAKzE,UAAL,CAAgB/I,OAAhB;EACA,SAAK4T,WAAL;EACA,SAAKe,YAAL;EACD;;EAESf,EAAAA,WAAV,GAA8B;EAC5B,SAAKoH,MAAL,GAAc,KAAKA,MAAL,CAAYxO,IAAZ,CAAiB,IAAjB,CAAd;EACA,SAAK/B,KAAL,GAAa,KAAKA,KAAL,CAAW+B,IAAX,CAAgB,IAAhB,CAAb;EACD;;EAEDzD,EAAAA,UAAU,CACR/I,OADQ,EAER;EACA,SAAKA,OAAL,GAAe,KAAKwN,MAAL,CAAYqB,sBAAZ,CAAmC7O,OAAnC,CAAf;EACD;;EAESxD,EAAAA,aAAV,GAAgC;EAC9B,QAAI,CAAC,KAAKT,SAAL,CAAeW,MAApB,EAA4B;EAC1B,WAAKue,eAAL,EAAsB5P,cAAtB,CAAqC,IAArC;EACD;EACF;;EAEDqD,EAAAA,gBAAgB,CAACjC,MAAD,EAA4D;EAC1E,SAAKkI,YAAL,GAD0E;;EAI1E,UAAMN,aAA4B,GAAG;EACnCtY,MAAAA,SAAS,EAAE;EADwB,KAArC;;EAIA,QAAI0Q,MAAM,CAACtC,IAAP,KAAgB,SAApB,EAA+B;EAC7BkK,MAAAA,aAAa,CAAC3N,SAAd,GAA0B,IAA1B;EACD,KAFD,MAEO,IAAI+F,MAAM,CAACtC,IAAP,KAAgB,OAApB,EAA6B;EAClCkK,MAAAA,aAAa,CAACzN,OAAd,GAAwB,IAAxB;EACD;;EAED,SAAKwE,MAAL,CAAYiJ,aAAZ;EACD;;EAEDxJ,EAAAA,gBAAgB,GAKd;EACA,WAAO,KAAKsK,aAAZ;EACD;;EAED1K,EAAAA,KAAK,GAAS;EACZ,SAAKwQ,eAAL,GAAuB9e,SAAvB;EACA,SAAKwY,YAAL;EACA,SAAKvJ,MAAL,CAAY;EAAErP,MAAAA,SAAS,EAAE;EAAb,KAAZ;EACD;;EAEDif,EAAAA,MAAM,CACJ1M,SADI,EAEJtO,OAFI,EAGY;EAChB,SAAKkb,aAAL,GAAqBlb,OAArB;;EAEA,QAAI,KAAKib,eAAT,EAA0B;EACxB,WAAKA,eAAL,CAAqB5P,cAArB,CAAoC,IAApC;EACD;;EAED,SAAK4P,eAAL,GAAuB,KAAKzN,MAAL,CAAY2F,gBAAZ,GAA+B5F,KAA/B,CAAqC,KAAKC,MAA1C,EAAkD,EACvE,GAAG,KAAKxN,OAD+D;EAEvEsO,MAAAA,SAAS,EACP,OAAOA,SAAP,KAAqB,WAArB,GAAmCA,SAAnC,GAA+C,KAAKtO,OAAL,CAAasO;EAHS,KAAlD,CAAvB;EAMA,SAAK2M,eAAL,CAAqB9P,WAArB,CAAiC,IAAjC;EAEA,WAAO,KAAK8P,eAAL,CAAqB7M,OAArB,EAAP;EACD;;EAEOuG,EAAAA,YAAR,GAA6B;EAC3B,UAAMnU,KAAK,GAAG,KAAKya,eAAL,GACV,KAAKA,eAAL,CAAqBza,KADX,GAEV2I,eAAe,EAFnB;EAIA,UAAM5H,MAKL,GAAG,EACF,GAAGf,KADD;EAEFqX,MAAAA,SAAS,EAAErX,KAAK,CAACC,MAAN,KAAiB,SAF1B;EAGF+W,MAAAA,SAAS,EAAEhX,KAAK,CAACC,MAAN,KAAiB,SAH1B;EAIFmC,MAAAA,OAAO,EAAEpC,KAAK,CAACC,MAAN,KAAiB,OAJxB;EAKFqX,MAAAA,MAAM,EAAEtX,KAAK,CAACC,MAAN,KAAiB,MALvB;EAMFua,MAAAA,MAAM,EAAE,KAAKA,MANX;EAOFvQ,MAAAA,KAAK,EAAE,KAAKA;EAPV,KALJ;EAeA,SAAK0K,aAAL,GAAqB5T,MAArB;EAMD;;EAEO6J,EAAAA,MAAR,CAAepL,OAAf,EAAuC;EACrCqI,IAAAA,aAAa,CAACP,KAAd,CAAoB,MAAM;EACxB;EACA,UAAI,KAAKoT,aAAT,EAAwB;EACtB,YAAIlb,OAAO,CAAC0G,SAAZ,EAAuB;EACrB,eAAKwU,aAAL,CAAmBxU,SAAnB,GACE,KAAKyO,aAAL,CAAmBpL,IADrB,EAEE,KAAKoL,aAAL,CAAmB7G,SAFrB,EAGE,KAAK6G,aAAL,CAAmBhJ,OAHrB;EAKA,eAAK+O,aAAL,CAAmBzM,SAAnB,GACE,KAAK0G,aAAL,CAAmBpL,IADrB,EAEE,IAFF,EAGE,KAAKoL,aAAL,CAAmB7G,SAHrB,EAIE,KAAK6G,aAAL,CAAmBhJ,OAJrB;EAMD,SAZD,MAYO,IAAInM,OAAO,CAAC4G,OAAZ,EAAqB;EAC1B,eAAKsU,aAAL,CAAmBtU,OAAnB,GACE,KAAKuO,aAAL,CAAmB7R,KADrB,EAEE,KAAK6R,aAAL,CAAmB7G,SAFrB,EAGE,KAAK6G,aAAL,CAAmBhJ,OAHrB;EAKA,eAAK+O,aAAL,CAAmBzM,SAAnB,GACEtS,SADF,EAEE,KAAKgZ,aAAL,CAAmB7R,KAFrB,EAGE,KAAK6R,aAAL,CAAmB7G,SAHrB,EAIE,KAAK6G,aAAL,CAAmBhJ,OAJrB;EAMD;EACF,OA5BuB;;;EA+BxB,UAAInM,OAAO,CAACjE,SAAZ,EAAuB;EACrB,aAAKA,SAAL,CAAemI,OAAf,CAAuBjI,QAAQ,IAAI;EACjCA,UAAAA,QAAQ,CAAC,KAAKkZ,aAAN,CAAR;EACD,SAFD;EAGD;EACF,KApCD;EAqCD;;EAjKD;;ECtBF;EAoCA;EAEA,SAASgG,iBAAT,CAA2B7a,QAA3B,EAAmE;EACjE,SAAO;EACLvB,IAAAA,WAAW,EAAEuB,QAAQ,CAACN,OAAT,CAAiBjB,WADzB;EAELyB,IAAAA,KAAK,EAAEF,QAAQ,CAACE;EAFX,GAAP;EAID;EAGD;EACA;EACA;;;EACA,SAAS4a,cAAT,CAAwB3b,KAAxB,EAAuD;EACrD,SAAO;EACLe,IAAAA,KAAK,EAAEf,KAAK,CAACe,KADR;EAEL5B,IAAAA,QAAQ,EAAEa,KAAK,CAACb,QAFX;EAGLkB,IAAAA,SAAS,EAAEL,KAAK,CAACK;EAHZ,GAAP;EAKD;;EAED,SAASub,8BAAT,CAAwC/a,QAAxC,EAA4D;EAC1D,SAAOA,QAAQ,CAACE,KAAT,CAAe4F,QAAtB;EACD;;EAED,SAASkV,2BAAT,CAAqC7b,KAArC,EAAmD;EACjD,SAAOA,KAAK,CAACe,KAAN,CAAYC,MAAZ,KAAuB,SAA9B;EACD;;EAEM,SAAS8a,SAAT,CACL/N,MADK,EAELxN,OAFK,EAGY;EACjBA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;EAEA,QAAM4O,SAA+B,GAAG,EAAxC;EACA,QAAMvB,OAA0B,GAAG,EAAnC;;EAEA,MAAIrN,OAAO,EAAEwb,kBAAT,KAAgC,KAApC,EAA2C;EACzC,UAAMC,uBAAuB,GAC3Bzb,OAAO,CAACyb,uBAAR,IAAmCJ,8BADrC;EAGA7N,IAAAA,MAAM,CACH2F,gBADH,GAEGrF,MAFH,GAGG5J,OAHH,CAGW5D,QAAQ,IAAI;EACnB,UAAImb,uBAAuB,CAACnb,QAAD,CAA3B,EAAuC;EACrCsO,QAAAA,SAAS,CAACxS,IAAV,CAAe+e,iBAAiB,CAAC7a,QAAD,CAAhC;EACD;EACF,KAPH;EAQD;;EAED,MAAIN,OAAO,EAAE0b,gBAAT,KAA8B,KAAlC,EAAyC;EACvC,UAAMC,oBAAoB,GACxB3b,OAAO,CAAC2b,oBAAR,IAAgCL,2BADlC;EAGA9N,IAAAA,MAAM,CACHoE,aADH,GAEG9D,MAFH,GAGG5J,OAHH,CAGWzE,KAAK,IAAI;EAChB,UAAIkc,oBAAoB,CAAClc,KAAD,CAAxB,EAAiC;EAC/B4N,QAAAA,OAAO,CAACjR,IAAR,CAAagf,cAAc,CAAC3b,KAAD,CAA3B;EACD;EACF,KAPH;EAQD;;EAED,SAAO;EAAEmP,IAAAA,SAAF;EAAavB,IAAAA;EAAb,GAAP;EACD;EAEM,SAASuO,OAAT,CACLpO,MADK,EAELqO,eAFK,EAGL7b,OAHK,EAIC;EACN,MAAI,OAAO6b,eAAP,KAA2B,QAA3B,IAAuCA,eAAe,KAAK,IAA/D,EAAqE;EACnE;EACD;;EAED,QAAM1N,aAAa,GAAGX,MAAM,CAAC2F,gBAAP,EAAtB;EACA,QAAMlC,UAAU,GAAGzD,MAAM,CAACoE,aAAP,EAAnB;EAEA,QAAMhD,SAAS,GAAIiN,eAAD,CAAqCjN,SAArC,IAAkD,EAApE;EACA,QAAMvB,OAAO,GAAIwO,eAAD,CAAqCxO,OAArC,IAAgD,EAAhE;EAEAuB,EAAAA,SAAS,CAAC1K,OAAV,CAAkB4X,kBAAkB,IAAI;EACtC3N,IAAAA,aAAa,CAACZ,KAAd,CACEC,MADF,EAEE,EACE,GAAGxN,OAAO,EAAE8I,cAAT,EAAyB8F,SAD9B;EAEE7P,MAAAA,WAAW,EAAE+c,kBAAkB,CAAC/c;EAFlC,KAFF,EAME+c,kBAAkB,CAACtb,KANrB;EAQD,GATD;EAWA6M,EAAAA,OAAO,CAACnJ,OAAR,CAAgB6X,eAAe,IAAI;EACjC,UAAMtc,KAAK,GAAGwR,UAAU,CAACjF,GAAX,CAAe+P,eAAe,CAACjc,SAA/B,CAAd,CADiC;;EAIjC,QAAIL,KAAJ,EAAW;EACT,UAAIA,KAAK,CAACe,KAAN,CAAY4J,aAAZ,GAA4B2R,eAAe,CAACvb,KAAhB,CAAsB4J,aAAtD,EAAqE;EACnE3K,QAAAA,KAAK,CAAC4K,QAAN,CAAe0R,eAAe,CAACvb,KAA/B;EACD;;EACD;EACD,KATgC;;;EAYjCyQ,IAAAA,UAAU,CAAC1D,KAAX,CACEC,MADF,EAEE,EACE,GAAGxN,OAAO,EAAE8I,cAAT,EAAyBuE,OAD9B;EAEEzO,MAAAA,QAAQ,EAAEmd,eAAe,CAACnd,QAF5B;EAGEkB,MAAAA,SAAS,EAAEic,eAAe,CAACjc;EAH7B,KAFF,EAOEic,eAAe,CAACvb,KAPlB;EASD,GArBD;EAsBD;;ECzJD,MAAMwb,cAAc,gBAAGC,cAAK,CAACC,aAAN,CAA6C/f,SAA7C,CAAvB;EACA,MAAMggB,yBAAyB,gBAAGF,cAAK,CAACC,aAAN,CAA6B,KAA7B,CAAlC;EAGA;EACA;EACA;EACA;EACA;;EACA,SAASE,qBAAT,CAA+BC,cAA/B,EAAwD;EACtD,MAAIA,cAAc,IAAI,OAAOzf,MAAP,KAAkB,WAAxC,EAAqD;EACnD,QAAI,CAACA,MAAM,CAAC0f,uBAAZ,EAAqC;EACnC1f,MAAAA,MAAM,CAAC0f,uBAAP,GAAiCN,cAAjC;EACD;;EAED,WAAOpf,MAAM,CAAC0f,uBAAd;EACD;;EAED,SAAON,cAAP;EACD;;QAEYO,cAAc,GAAG,MAAM;EAClC,QAAMC,WAAW,GAAGP,cAAK,CAACQ,UAAN,CAClBL,qBAAqB,CAACH,cAAK,CAACQ,UAAN,CAAiBN,yBAAjB,CAAD,CADH,CAApB;;EAIA,MAAI,CAACK,WAAL,EAAkB;EAChB,UAAM,IAAI3Z,KAAJ,CAAU,wDAAV,CAAN;EACD;;EAED,SAAO2Z,WAAP;EACD;QAQYE,mBAAmB,GAAG,CAAC;EAClClP,EAAAA,MADkC;EAElC6O,EAAAA,cAAc,GAAG,KAFiB;EAGlCM,EAAAA;EAHkC,CAAD,KAIU;EAC3CV,EAAAA,cAAK,CAACW,SAAN,CAAgB,MAAM;EACpBpP,IAAAA,MAAM,CAAC4D,KAAP;EACA,WAAO,MAAM;EACX5D,MAAAA,MAAM,CAAC+D,OAAP;EACD,KAFD;EAGD,GALD,EAKG,CAAC/D,MAAD,CALH;EAOA,QAAMqP,OAAO,GAAGT,qBAAqB,CAACC,cAAD,CAArC;EAEA,sBACEJ,6BAAC,yBAAD,CAA2B,QAA3B;EAAoC,IAAA,KAAK,EAAEI;EAA3C,kBACEJ,6BAAC,OAAD,CAAS,QAAT;EAAkB,IAAA,KAAK,EAAEzO;EAAzB,KAAkCmP,QAAlC,CADF,CADF;EAKD;;EC1DD,SAASG,WAAT,GAAqD;EACnD,MAAIC,OAAO,GAAG,KAAd;EACA,SAAO;EACLC,IAAAA,UAAU,EAAE,MAAM;EAChBD,MAAAA,OAAO,GAAG,KAAV;EACD,KAHI;EAILtS,IAAAA,KAAK,EAAE,MAAM;EACXsS,MAAAA,OAAO,GAAG,IAAV;EACD,KANI;EAOLA,IAAAA,OAAO,EAAE,MAAM;EACb,aAAOA,OAAP;EACD;EATI,GAAP;EAWD;;EAED,MAAME,8BAA8B,gBAAGhB,cAAK,CAACC,aAAN,CAAoBY,WAAW,EAA/B,CAAvC;;QAIaI,0BAA0B,GAAG,MACxCjB,cAAK,CAACQ,UAAN,CAAiBQ,8BAAjB;;QAUWE,uBAAuB,GAAG,CAAC;EACtCR,EAAAA;EADsC,CAAD,KAEH;EAClC,QAAMzf,KAAK,GAAG+e,cAAK,CAACmB,OAAN,CAAc,MAAMN,WAAW,EAA/B,EAAmC,EAAnC,CAAd;EACA,sBACEb,6BAAC,8BAAD,CAAgC,QAAhC;EAAyC,IAAA,KAAK,EAAE/e;EAAhD,KACG,OAAOyf,QAAP,KAAoB,UAApB,GACIA,QAAD,CAAuBzf,KAAvB,CADH,GAEGyf,QAHN,CADF;EAOD;;EC3CD,MAAMU,eAAe,GAAG,CACtBb,WADsB,EAEtBhd,OAFsB,EAGtBY,UAHsB,EAItBkd,aAJsB,KAKnB;EACH,QAAMC,aAAa,GAAGf,WAAW,CAACpc,UAAZ,CAAuBZ,OAAvB,CAAtB;;EACA,MAAIY,UAAU,KAAKmd,aAAnB,EAAkC;EAChCD,IAAAA,aAAa,CAACC,aAAD,CAAb;EACD;EACF,CAVD;;EAiBO,SAASC,aAAT,CACLhf,IADK,EAELC,IAFK,EAGG;EACR,QAAMgf,UAAU,GAAGxB,cAAK,CAACyB,MAAN,CAAa,KAAb,CAAnB;EAEA,QAAMlB,WAAW,GAAGD,cAAc,EAAlC;EAEA,QAAM,CAAC/c,OAAD,IAAYP,eAAe,CAACT,IAAD,EAAOC,IAAP,CAAjC;EACA,QAAM,CAAC2B,UAAD,EAAakd,aAAb,IAA8BrB,cAAK,CAAC0B,QAAN,CAClCnB,WAAW,CAACpc,UAAZ,CAAuBZ,OAAvB,CADkC,CAApC;EAIA,QAAMoe,UAAU,GAAG3B,cAAK,CAACyB,MAAN,CAAale,OAAb,CAAnB;EACAoe,EAAAA,UAAU,CAACC,OAAX,GAAqBre,OAArB;EACA,QAAMse,aAAa,GAAG7B,cAAK,CAACyB,MAAN,CAAatd,UAAb,CAAtB;EACA0d,EAAAA,aAAa,CAACD,OAAd,GAAwBzd,UAAxB;EAEA6b,EAAAA,cAAK,CAACW,SAAN,CAAgB,MAAM;EACpBa,IAAAA,UAAU,CAACI,OAAX,GAAqB,IAArB;EAEAR,IAAAA,eAAe,CACbb,WADa,EAEboB,UAAU,CAACC,OAFE,EAGbC,aAAa,CAACD,OAHD,EAIbP,aAJa,CAAf;EAOA,UAAM3H,WAAW,GAAG6G,WAAW,CAAC5K,aAAZ,GAA4B5V,SAA5B,CAClBqM,aAAa,CAACJ,UAAd,CAAyB,MAAM;EAC7B,UAAIwV,UAAU,CAACI,OAAf,EAAwB;EACtBR,QAAAA,eAAe,CACbb,WADa,EAEboB,UAAU,CAACC,OAFE,EAGbC,aAAa,CAACD,OAHD,EAIbP,aAJa,CAAf;EAMD;EACF,KATD,CADkB,CAApB;EAaA,WAAO,MAAM;EACXG,MAAAA,UAAU,CAACI,OAAX,GAAqB,KAArB;EACAlI,MAAAA,WAAW;EACZ,KAHD;EAID,GA3BD,EA2BG,CAAC6G,WAAD,CA3BH;EA6BA,SAAOpc,UAAP;EACD;;EC7DM,SAAS2d,aAAT,CACLvf,IADK,EAELC,IAFK,EAGG;EACR,QAAMgf,UAAU,GAAGxB,cAAK,CAACyB,MAAN,CAAa,KAAb,CAAnB;EACA,QAAMle,OAAO,GAAGN,uBAAuB,CAACV,IAAD,EAAOC,IAAP,CAAvC;EAEA,QAAM+d,WAAW,GAAGD,cAAc,EAAlC;EAEA,QAAM,CAAC/K,UAAD,EAAawM,aAAb,IAA8B/B,cAAK,CAAC0B,QAAN,CAClCnB,WAAW,CAAChL,UAAZ,CAAuBhS,OAAvB,CADkC,CAApC;EAIA,QAAMoe,UAAU,GAAG3B,cAAK,CAACyB,MAAN,CAAale,OAAb,CAAnB;EACAoe,EAAAA,UAAU,CAACC,OAAX,GAAqBre,OAArB;EACA,QAAMye,aAAa,GAAGhC,cAAK,CAACyB,MAAN,CAAalM,UAAb,CAAtB;EACAyM,EAAAA,aAAa,CAACJ,OAAd,GAAwBrM,UAAxB;EAEAyK,EAAAA,cAAK,CAACW,SAAN,CAAgB,MAAM;EACpBa,IAAAA,UAAU,CAACI,OAAX,GAAqB,IAArB;EAEA,UAAMlI,WAAW,GAAG6G,WAAW,CAACrJ,gBAAZ,GAA+BnX,SAA/B,CAClBqM,aAAa,CAACJ,UAAd,CAAyB,MAAM;EAC7B,UAAIwV,UAAU,CAACI,OAAf,EAAwB;EACtB,cAAMK,aAAa,GAAG1B,WAAW,CAAChL,UAAZ,CAAuBoM,UAAU,CAACC,OAAlC,CAAtB;;EACA,YAAII,aAAa,CAACJ,OAAd,KAA0BK,aAA9B,EAA6C;EAC3CF,UAAAA,aAAa,CAACE,aAAD,CAAb;EACD;EACF;EACF,KAPD,CADkB,CAApB;EAWA,WAAO,MAAM;EACXT,MAAAA,UAAU,CAACI,OAAX,GAAqB,KAArB;EACAlI,MAAAA,WAAW;EACZ,KAHD;EAID,GAlBD,EAkBG,CAAC6G,WAAD,CAlBH;EAoBA,SAAOhL,UAAP;EACD;;ECnDM,SAAS2M,gBAAT,CACL1I,QADK,EAEL2I,iBAFK,EAGLC,MAHK,EAII;EACT;EACA,MAAI,OAAOD,iBAAP,KAA6B,UAAjC,EAA6C;EAC3C,WAAOA,iBAAiB,CAAC,GAAGC,MAAJ,CAAxB;EACD,GAJQ;;;EAOT,MAAI,OAAOD,iBAAP,KAA6B,SAAjC,EAA4C,OAAOA,iBAAP,CAPnC;;EAUT,SAAO,CAAC,CAAC3I,QAAT;EACD;;EC8CM,SAAS6I,WAAT,CAML9f,IANK,EAULC,IAVK,EAaLC,IAbK,EAcmD;EACxD,QAAM+e,UAAU,GAAGxB,cAAK,CAACyB,MAAN,CAAa,KAAb,CAAnB;EACA,QAAM,GAAGa,WAAH,IAAkBtC,cAAK,CAAC0B,QAAN,CAAe,CAAf,CAAxB;EAEA,QAAM3d,OAAO,GAAGlB,iBAAiB,CAACN,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAAjC;EACA,QAAM8d,WAAW,GAAGD,cAAc,EAAlC;EAEA,QAAMiC,MAAM,GAAGvC,cAAK,CAACyB,MAAN,EAAf;;EAIA,MAAI,CAACc,MAAM,CAACX,OAAZ,EAAqB;EACnBW,IAAAA,MAAM,CAACX,OAAP,GAAiB,IAAI9C,gBAAJ,CAAqByB,WAArB,EAAkCxc,OAAlC,CAAjB;EACD,GAFD,MAEO;EACLwe,IAAAA,MAAM,CAACX,OAAP,CAAe9U,UAAf,CAA0B/I,OAA1B;EACD;;EAED,QAAMmV,aAAa,GAAGqJ,MAAM,CAACX,OAAP,CAAehT,gBAAf,EAAtB;EAEAoR,EAAAA,cAAK,CAACW,SAAN,CAAgB,MAAM;EACpBa,IAAAA,UAAU,CAACI,OAAX,GAAqB,IAArB;EAEA,UAAMlI,WAAW,GAAG6I,MAAM,CAACX,OAAP,CAAgB7hB,SAAhB,CAClBqM,aAAa,CAACJ,UAAd,CAAyB,MAAM;EAC7B,UAAIwV,UAAU,CAACI,OAAf,EAAwB;EACtBU,QAAAA,WAAW,CAAChiB,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAX;EACD;EACF,KAJD,CADkB,CAApB;EAOA,WAAO,MAAM;EACXkhB,MAAAA,UAAU,CAACI,OAAX,GAAqB,KAArB;EACAlI,MAAAA,WAAW;EACZ,KAHD;EAID,GAdD,EAcG,EAdH;EAgBA,QAAMqF,MAAM,GAAGiB,cAAK,CAACwC,WAAN,CAEb,CAACnQ,SAAD,EAAY4M,aAAZ,KAA8B;EAC9BsD,IAAAA,MAAM,CAACX,OAAP,CAAgB7C,MAAhB,CAAuB1M,SAAvB,EAAkC4M,aAAlC,EAAiD7X,KAAjD,CAAuDxG,IAAvD;EACD,GAJc,EAIZ,EAJY,CAAf;;EAMA,MACEsY,aAAa,CAAC7R,KAAd,IACA6a,gBAAgB,CAAChiB,SAAD,EAAYqiB,MAAM,CAACX,OAAP,CAAe7d,OAAf,CAAuBwV,gBAAnC,EAAqD,CACnEL,aAAa,CAAC7R,KADqD,CAArD,CAFlB,EAKE;EACA,UAAM6R,aAAa,CAAC7R,KAApB;EACD;;EAED,SAAO,EAAE,GAAG6R,aAAL;EAAoB6F,IAAAA,MAApB;EAA4B0D,IAAAA,WAAW,EAAEvJ,aAAa,CAAC6F;EAAvD,GAAP;EACD;;ECpHM,SAAS2D,YAAT,CAOL3e,OAPK,EAcL4e,QAdK,EAeL;EACA,QAAMnB,UAAU,GAAGxB,cAAK,CAACyB,MAAN,CAAa,KAAb,CAAnB;EACA,QAAM,GAAGa,WAAH,IAAkBtC,cAAK,CAAC0B,QAAN,CAAe,CAAf,CAAxB;EAEA,QAAMnB,WAAW,GAAGD,cAAc,EAAlC;EACA,QAAMsC,kBAAkB,GAAG3B,0BAA0B,EAArD;EACA,QAAMlL,gBAAgB,GAAGwK,WAAW,CAAChJ,2BAAZ,CAAwCxT,OAAxC,CAAzB,CANA;;EASAgS,EAAAA,gBAAgB,CAACoF,iBAAjB,GAAqC,IAArC,CATA;;EAYA,MAAIpF,gBAAgB,CAACpL,OAArB,EAA8B;EAC5BoL,IAAAA,gBAAgB,CAACpL,OAAjB,GAA2ByB,aAAa,CAACJ,UAAd,CACzB+J,gBAAgB,CAACpL,OADQ,CAA3B;EAGD;;EAED,MAAIoL,gBAAgB,CAACtL,SAArB,EAAgC;EAC9BsL,IAAAA,gBAAgB,CAACtL,SAAjB,GAA6B2B,aAAa,CAACJ,UAAd,CAC3B+J,gBAAgB,CAACtL,SADU,CAA7B;EAGD;;EAED,MAAIsL,gBAAgB,CAACvD,SAArB,EAAgC;EAC9BuD,IAAAA,gBAAgB,CAACvD,SAAjB,GAA6BpG,aAAa,CAACJ,UAAd,CAC3B+J,gBAAgB,CAACvD,SADU,CAA7B;EAGD;;EAED,MAAIuD,gBAAgB,CAACyD,QAArB,EAA+B;EAC7B;EACA;EACA,QAAI,OAAOzD,gBAAgB,CAAC9T,SAAxB,KAAsC,QAA1C,EAAoD;EAClD8T,MAAAA,gBAAgB,CAAC9T,SAAjB,GAA6B,IAA7B;EACD,KAL4B;EAQ7B;;;EACA,QAAI8T,gBAAgB,CAAC1I,SAAjB,KAA+B,CAAnC,EAAsC;EACpC0I,MAAAA,gBAAgB,CAAC1I,SAAjB,GAA6B,CAA7B;EACD;EACF;;EAED,MAAI0I,gBAAgB,CAACyD,QAAjB,IAA6BzD,gBAAgB,CAACwD,gBAAlD,EAAoE;EAClE;EACA,QAAI,CAACqJ,kBAAkB,CAAC9B,OAAnB,EAAL,EAAmC;EACjC/K,MAAAA,gBAAgB,CAAC8G,YAAjB,GAAgC,KAAhC;EACD;EACF;;EAED,QAAM,CAACpO,QAAD,IAAauR,cAAK,CAAC0B,QAAN,CACjB,MACE,IAAIiB,QAAJ,CACEpC,WADF,EAEExK,gBAFF,CAFe,CAAnB;EAQA,MAAIzQ,MAAM,GAAGmJ,QAAQ,CAACuK,mBAAT,CAA6BjD,gBAA7B,CAAb;EAEAiK,EAAAA,cAAK,CAACW,SAAN,CAAgB,MAAM;EACpBa,IAAAA,UAAU,CAACI,OAAX,GAAqB,IAArB;EAEAgB,IAAAA,kBAAkB,CAAC7B,UAAnB;EAEA,UAAMrH,WAAW,GAAGjL,QAAQ,CAAC1O,SAAT,CAClBqM,aAAa,CAACJ,UAAd,CAAyB,MAAM;EAC7B,UAAIwV,UAAU,CAACI,OAAf,EAAwB;EACtBU,QAAAA,WAAW,CAAChiB,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAX;EACD;EACF,KAJD,CADkB,CAApB,CALoB;EAcpB;;EACAmO,IAAAA,QAAQ,CAACiK,YAAT;EAEA,WAAO,MAAM;EACX8I,MAAAA,UAAU,CAACI,OAAX,GAAqB,KAArB;EACAlI,MAAAA,WAAW;EACZ,KAHD;EAID,GArBD,EAqBG,CAACkJ,kBAAD,EAAqBnU,QAArB,CArBH;EAuBAuR,EAAAA,cAAK,CAACW,SAAN,CAAgB,MAAM;EACpB;EACA;EACAlS,IAAAA,QAAQ,CAAC3B,UAAT,CAAoBiJ,gBAApB,EAAsC;EAAEjW,MAAAA,SAAS,EAAE;EAAb,KAAtC;EACD,GAJD,EAIG,CAACiW,gBAAD,EAAmBtH,QAAnB,CAJH,EApFA;;EA2FA,MAAIsH,gBAAgB,CAACyD,QAAjB,IAA6BlU,MAAM,CAACsW,SAAxC,EAAmD;EACjD,UAAMnN,QAAQ,CACXmL,eADG,CACa7D,gBADb,EAEH5O,IAFG,CAEE,CAAC;EAAE2G,MAAAA;EAAF,KAAD,KAAc;EAClBiI,MAAAA,gBAAgB,CAACtL,SAAjB,GAA6BqD,IAA7B;EACAiI,MAAAA,gBAAgB,CAACvD,SAAjB,GAA6B1E,IAA7B,EAAmC,IAAnC;EACD,KALG,EAMH1G,KANG,CAMGC,KAAK,IAAI;EACdub,MAAAA,kBAAkB,CAAC7B,UAAnB;EACAhL,MAAAA,gBAAgB,CAACpL,OAAjB,GAA2BtD,KAA3B;EACA0O,MAAAA,gBAAgB,CAACvD,SAAjB,GAA6BtS,SAA7B,EAAwCmH,KAAxC;EACD,KAVG,CAAN;EAWD,GAvGD;;;EA0GA,MACE/B,MAAM,CAACqB,OAAP,IACA,CAACic,kBAAkB,CAAC9B,OAAnB,EADD,IAEA,CAACxb,MAAM,CAACnB,UAFR,IAGA+d,gBAAgB,CACdnM,gBAAgB,CAACyD,QADH,EAEdzD,gBAAgB,CAACwD,gBAFH,EAGd,CAACjU,MAAM,CAAC+B,KAAR,EAAeoH,QAAQ,CAACkL,eAAT,EAAf,CAHc,CAJlB,EASE;EACA,UAAMrU,MAAM,CAAC+B,KAAb;EACD,GArHD;;;EAwHA,MAAI0O,gBAAgB,CAACqG,mBAAjB,KAAyC,SAA7C,EAAwD;EACtD9W,IAAAA,MAAM,GAAGmJ,QAAQ,CAAC0K,WAAT,CAAqB7T,MAArB,EAA6ByQ,gBAA7B,CAAT;EACD;;EAED,SAAOzQ,MAAP;EACD;;EC7GM,SAASud,QAAT,CAMLtgB,IANK,EAOLC,IAPK,EAULC,IAVK,EAW0B;EAC/B,QAAMqT,aAAa,GAAGxT,cAAc,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAApC;EACA,SAAOigB,YAAY,CAAC5M,aAAD,EAAgB0B,aAAhB,CAAnB;EACD;;ECmEM,SAASsL,UAAT,CACL1R,OADK,EAEc;EACnB,QAAMoQ,UAAU,GAAGxB,cAAK,CAACyB,MAAN,CAAa,KAAb,CAAnB;EACA,QAAM,GAAGa,WAAH,IAAkBtC,cAAK,CAAC0B,QAAN,CAAe,CAAf,CAAxB;EAEA,QAAMnB,WAAW,GAAGD,cAAc,EAAlC;EAEA,QAAMyC,gBAAgB,GAAG5B,aAAO,CAC9B,MACE/P,OAAO,CAACwE,GAAR,CAAY7R,OAAO,IAAI;EACrB,UAAMgS,gBAAgB,GAAGwK,WAAW,CAAChJ,2BAAZ,CACvBxT,OADuB,CAAzB,CADqB;;EAMrBgS,IAAAA,gBAAgB,CAACoF,iBAAjB,GAAqC,IAArC;EAEA,WAAOpF,gBAAP;EACD,GATD,CAF4B,EAY9B,CAAC3E,OAAD,EAAUmP,WAAV,CAZ8B,CAAhC;EAeA,QAAM,CAAC9R,QAAD,IAAauR,cAAK,CAAC0B,QAAN,CACjB,MAAM,IAAI1E,eAAJ,CAAoBuD,WAApB,EAAiCwC,gBAAjC,CADW,CAAnB;EAIA,QAAMzd,MAAM,GAAGmJ,QAAQ,CAACuK,mBAAT,CAA6B+J,gBAA7B,CAAf;EAEA/C,EAAAA,cAAK,CAACW,SAAN,CAAgB,MAAM;EACpBa,IAAAA,UAAU,CAACI,OAAX,GAAqB,IAArB;EAEA,UAAMlI,WAAW,GAAGjL,QAAQ,CAAC1O,SAAT,CAClBqM,aAAa,CAACJ,UAAd,CAAyB,MAAM;EAC7B,UAAIwV,UAAU,CAACI,OAAf,EAAwB;EACtBU,QAAAA,WAAW,CAAChiB,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAX;EACD;EACF,KAJD,CADkB,CAApB;EAQA,WAAO,MAAM;EACXkhB,MAAAA,UAAU,CAACI,OAAX,GAAqB,KAArB;EACAlI,MAAAA,WAAW;EACZ,KAHD;EAID,GAfD,EAeG,CAACjL,QAAD,CAfH;EAiBAuR,EAAAA,cAAK,CAACW,SAAN,CAAgB,MAAM;EACpB;EACA;EACAlS,IAAAA,QAAQ,CAACyO,UAAT,CAAoB6F,gBAApB,EAAsC;EAAEjjB,MAAAA,SAAS,EAAE;EAAb,KAAtC;EACD,GAJD,EAIG,CAACijB,gBAAD,EAAmBtU,QAAnB,CAJH;EAMA,SAAOnJ,MAAP;EACD;;ECnHM,SAAS0d,gBAAT,CAMLzgB,IANK,EAeLC,IAfK,EAwBLC,IAxBK,EA+BkC;EACvC,QAAMsB,OAAO,GAAGzB,cAAc,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,CAA9B;EACA,SAAOigB,YAAY,CACjB3e,OADiB,EAEjB4a,qBAFiB,CAAnB;EAID;;EC5FM,SAASsE,UAAT,CAAoB1e,KAApB,EAAoCR,OAApC,EAA8D;EACnE,QAAMwc,WAAW,GAAGD,cAAc,EAAlC;EAEA,QAAM4C,UAAU,GAAGlD,cAAK,CAACyB,MAAN,CAAa1d,OAAb,CAAnB;EACAmf,EAAAA,UAAU,CAACtB,OAAX,GAAqB7d,OAArB,CAJmE;EAOnE;EACA;EACA;;EACAic,EAAAA,cAAK,CAACmB,OAAN,CAAc,MAAM;EAClB,QAAI5c,KAAJ,EAAW;EACTob,MAAAA,OAAO,CAACY,WAAD,EAAchc,KAAd,EAAqB2e,UAAU,CAACtB,OAAhC,CAAP;EACD;EACF,GAJD,EAIG,CAACrB,WAAD,EAAchc,KAAd,CAJH;EAKD;QAQY4e,OAAO,GAAG,CAAC;EAAEzC,EAAAA,QAAF;EAAY3c,EAAAA,OAAZ;EAAqBQ,EAAAA;EAArB,CAAD,KAAgD;EACrE0e,EAAAA,UAAU,CAAC1e,KAAD,EAAQR,OAAR,CAAV;EACA,SAAO2c,QAAP;EACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}