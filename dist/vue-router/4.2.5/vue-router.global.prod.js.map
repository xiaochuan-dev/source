{"version":3,"file":"vue-router.global.prod.js","sources":["../src/utils/env.ts","../src/utils/index.ts","../src/location.ts","../src/history/common.ts","../src/scrollBehavior.ts","../src/history/html5.ts","../src/types/typeGuards.ts","../src/types/index.ts","../src/errors.ts","../src/matcher/pathParserRanker.ts","../src/matcher/pathTokenizer.ts","../src/matcher/pathMatcher.ts","../src/matcher/index.ts","../src/encoding.ts","../src/query.ts","../src/injectionSymbols.ts","../src/utils/callbacks.ts","../src/navigationGuards.ts","../src/RouterLink.ts","../src/RouterView.ts","../src/history/memory.ts","../src/router.ts","../src/history/hash.ts","../src/useApi.ts"],"sourcesContent":["export const isBrowser = typeof window !== 'undefined'\n","import {\n  RouteParams,\n  RouteComponent,\n  RouteParamsRaw,\n  RouteParamValueRaw,\n} from '../types'\n\nexport * from './env'\n\nexport function isESModule(obj: any): obj is { default: RouteComponent } {\n  return obj.__esModule || obj[Symbol.toStringTag] === 'Module'\n}\n\nexport const assign = Object.assign\n\nexport function applyToParams(\n  fn: (v: string | number | null | undefined) => string,\n  params: RouteParamsRaw | undefined\n): RouteParams {\n  const newParams: RouteParams = {}\n\n  for (const key in params) {\n    const value = params[key]\n    newParams[key] = isArray(value)\n      ? value.map(fn)\n      : fn(value as Exclude<RouteParamValueRaw, any[]>)\n  }\n\n  return newParams\n}\n\nexport const noop = () => {}\n\n/**\n * Typesafe alternative to Array.isArray\n * https://github.com/microsoft/TypeScript/pull/48228\n */\nexport const isArray: (arg: ArrayLike<any> | any) => arg is ReadonlyArray<any> =\n  Array.isArray\n","import { LocationQuery, LocationQueryRaw } from './query'\nimport {\n  RouteLocation,\n  RouteLocationNormalized,\n  RouteParamValue,\n} from './types'\nimport { RouteRecord } from './matcher/types'\nimport { warn } from './warning'\nimport { isArray } from './utils'\n\n/**\n * Location object returned by {@link `parseURL`}.\n * @internal\n */\ninterface LocationNormalized {\n  path: string\n  fullPath: string\n  hash: string\n  query: LocationQuery\n}\n\n/**\n * Location object accepted by {@link `stringifyURL`}.\n * @internal\n */\ninterface LocationPartial {\n  path: string\n  query?: LocationQueryRaw\n  hash?: string\n}\n\nconst TRAILING_SLASH_RE = /\\/$/\nexport const removeTrailingSlash = (path: string) =>\n  path.replace(TRAILING_SLASH_RE, '')\n\n/**\n * Transforms a URI into a normalized history location\n *\n * @param parseQuery\n * @param location - URI to normalize\n * @param currentLocation - current absolute location. Allows resolving relative\n * paths. Must start with `/`. Defaults to `/`\n * @returns a normalized history location\n */\nexport function parseURL(\n  parseQuery: (search: string) => LocationQuery,\n  location: string,\n  currentLocation: string = '/'\n): LocationNormalized {\n  let path: string | undefined,\n    query: LocationQuery = {},\n    searchString = '',\n    hash = ''\n\n  // Could use URL and URLSearchParams but IE 11 doesn't support it\n  // TODO: move to new URL()\n  const hashPos = location.indexOf('#')\n  let searchPos = location.indexOf('?')\n  // the hash appears before the search, so it's not part of the search string\n  if (hashPos < searchPos && hashPos >= 0) {\n    searchPos = -1\n  }\n\n  if (searchPos > -1) {\n    path = location.slice(0, searchPos)\n    searchString = location.slice(\n      searchPos + 1,\n      hashPos > -1 ? hashPos : location.length\n    )\n\n    query = parseQuery(searchString)\n  }\n\n  if (hashPos > -1) {\n    path = path || location.slice(0, hashPos)\n    // keep the # character\n    hash = location.slice(hashPos, location.length)\n  }\n\n  // no search and no query\n  path = resolveRelativePath(path != null ? path : location, currentLocation)\n  // empty path means a relative query or hash `?foo=f`, `#thing`\n\n  return {\n    fullPath: path + (searchString && '?') + searchString + hash,\n    path,\n    query,\n    hash,\n  }\n}\n\n/**\n * Stringifies a URL object\n *\n * @param stringifyQuery\n * @param location\n */\nexport function stringifyURL(\n  stringifyQuery: (query: LocationQueryRaw) => string,\n  location: LocationPartial\n): string {\n  const query: string = location.query ? stringifyQuery(location.query) : ''\n  return location.path + (query && '?') + query + (location.hash || '')\n}\n\n/**\n * Strips off the base from the beginning of a location.pathname in a non-case-sensitive way.\n *\n * @param pathname - location.pathname\n * @param base - base to strip off\n */\nexport function stripBase(pathname: string, base: string): string {\n  // no base or base is not found at the beginning\n  if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))\n    return pathname\n  return pathname.slice(base.length) || '/'\n}\n\n/**\n * Checks if two RouteLocation are equal. This means that both locations are\n * pointing towards the same {@link RouteRecord} and that all `params`, `query`\n * parameters and `hash` are the same\n *\n * @param stringifyQuery - A function that takes a query object of type LocationQueryRaw and returns a string representation of it.\n * @param a - first {@link RouteLocation}\n * @param b - second {@link RouteLocation}\n */\nexport function isSameRouteLocation(\n  stringifyQuery: (query: LocationQueryRaw) => string,\n  a: RouteLocation,\n  b: RouteLocation\n): boolean {\n  const aLastIndex = a.matched.length - 1\n  const bLastIndex = b.matched.length - 1\n\n  return (\n    aLastIndex > -1 &&\n    aLastIndex === bLastIndex &&\n    isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) &&\n    isSameRouteLocationParams(a.params, b.params) &&\n    stringifyQuery(a.query) === stringifyQuery(b.query) &&\n    a.hash === b.hash\n  )\n}\n\n/**\n * Check if two `RouteRecords` are equal. Takes into account aliases: they are\n * considered equal to the `RouteRecord` they are aliasing.\n *\n * @param a - first {@link RouteRecord}\n * @param b - second {@link RouteRecord}\n */\nexport function isSameRouteRecord(a: RouteRecord, b: RouteRecord): boolean {\n  // since the original record has an undefined value for aliasOf\n  // but all aliases point to the original record, this will always compare\n  // the original record\n  return (a.aliasOf || a) === (b.aliasOf || b)\n}\n\nexport function isSameRouteLocationParams(\n  a: RouteLocationNormalized['params'],\n  b: RouteLocationNormalized['params']\n): boolean {\n  if (Object.keys(a).length !== Object.keys(b).length) return false\n\n  for (const key in a) {\n    if (!isSameRouteLocationParamsValue(a[key], b[key])) return false\n  }\n\n  return true\n}\n\nfunction isSameRouteLocationParamsValue(\n  a: RouteParamValue | readonly RouteParamValue[],\n  b: RouteParamValue | readonly RouteParamValue[]\n): boolean {\n  return isArray(a)\n    ? isEquivalentArray(a, b)\n    : isArray(b)\n    ? isEquivalentArray(b, a)\n    : a === b\n}\n\n/**\n * Check if two arrays are the same or if an array with one single entry is the\n * same as another primitive value. Used to check query and parameters\n *\n * @param a - array of values\n * @param b - array of values or a single value\n */\nfunction isEquivalentArray<T>(a: readonly T[], b: readonly T[] | T): boolean {\n  return isArray(b)\n    ? a.length === b.length && a.every((value, i) => value === b[i])\n    : a.length === 1 && a[0] === b\n}\n\n/**\n * Resolves a relative path that starts with `.`.\n *\n * @param to - path location we are resolving\n * @param from - currentLocation.path, should start with `/`\n */\nexport function resolveRelativePath(to: string, from: string): string {\n  if (to.startsWith('/')) return to\n  if (__DEV__ && !from.startsWith('/')) {\n    warn(\n      `Cannot resolve a relative location without an absolute path. Trying to resolve \"${to}\" from \"${from}\". It should look like \"/${from}\".`\n    )\n    return to\n  }\n\n  if (!to) return from\n\n  const fromSegments = from.split('/')\n  const toSegments = to.split('/')\n  const lastToSegment = toSegments[toSegments.length - 1]\n\n  // make . and ./ the same (../ === .., ../../ === ../..)\n  // this is the same behavior as new URL()\n  if (lastToSegment === '..' || lastToSegment === '.') {\n    toSegments.push('')\n  }\n\n  let position = fromSegments.length - 1\n  let toPosition: number\n  let segment: string\n\n  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {\n    segment = toSegments[toPosition]\n\n    // we stay on the same position\n    if (segment === '.') continue\n    // go up in the from array\n    if (segment === '..') {\n      // we can't go below zero, but we still need to increment toPosition\n      if (position > 1) position--\n      // continue\n    }\n    // we reached a non-relative path, we stop here\n    else break\n  }\n\n  return (\n    fromSegments.slice(0, position).join('/') +\n    '/' +\n    toSegments\n      // ensure we use at least the last element in the toSegments\n      .slice(toPosition - (toPosition === toSegments.length ? 1 : 0))\n      .join('/')\n  )\n}\n","import { isBrowser } from '../utils'\nimport { removeTrailingSlash } from '../location'\n\nexport type HistoryLocation = string\n/**\n * Allowed variables in HTML5 history state. Note that pushState clones the state\n * passed and does not accept everything: e.g.: it doesn't accept symbols, nor\n * functions as values. It also ignores Symbols as keys.\n *\n * @internal\n */\nexport type HistoryStateValue =\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | HistoryState\n  | HistoryStateArray\n\n/**\n * Allowed HTML history.state\n */\nexport interface HistoryState {\n  [x: number]: HistoryStateValue\n  [x: string]: HistoryStateValue\n}\n\n/**\n * Allowed arrays for history.state.\n *\n * @internal\n */\nexport interface HistoryStateArray extends Array<HistoryStateValue> {}\n\nexport enum NavigationType {\n  pop = 'pop',\n  push = 'push',\n}\n\nexport enum NavigationDirection {\n  back = 'back',\n  forward = 'forward',\n  unknown = '',\n}\n\nexport interface NavigationInformation {\n  type: NavigationType\n  direction: NavigationDirection\n  delta: number\n}\n\nexport interface NavigationCallback {\n  (\n    to: HistoryLocation,\n    from: HistoryLocation,\n    information: NavigationInformation\n  ): void\n}\n\n/**\n * Starting location for Histories\n */\nexport const START: HistoryLocation = ''\n\nexport type ValueContainer<T> = { value: T }\n\n/**\n * Interface implemented by History implementations that can be passed to the\n * router as {@link Router.history}\n *\n * @alpha\n */\nexport interface RouterHistory {\n  /**\n   * Base path that is prepended to every url. This allows hosting an SPA at a\n   * sub-folder of a domain like `example.com/sub-folder` by having a `base` of\n   * `/sub-folder`\n   */\n  readonly base: string\n  /**\n   * Current History location\n   */\n  readonly location: HistoryLocation\n  /**\n   * Current History state\n   */\n  readonly state: HistoryState\n  // readonly location: ValueContainer<HistoryLocationNormalized>\n\n  /**\n   * Navigates to a location. In the case of an HTML5 History implementation,\n   * this will call `history.pushState` to effectively change the URL.\n   *\n   * @param to - location to push\n   * @param data - optional {@link HistoryState} to be associated with the\n   * navigation entry\n   */\n  push(to: HistoryLocation, data?: HistoryState): void\n  /**\n   * Same as {@link RouterHistory.push} but performs a `history.replaceState`\n   * instead of `history.pushState`\n   *\n   * @param to - location to set\n   * @param data - optional {@link HistoryState} to be associated with the\n   * navigation entry\n   */\n  replace(to: HistoryLocation, data?: HistoryState): void\n\n  /**\n   * Traverses history in a given direction.\n   *\n   * @example\n   * ```js\n   * myHistory.go(-1) // equivalent to window.history.back()\n   * myHistory.go(1) // equivalent to window.history.forward()\n   * ```\n   *\n   * @param delta - distance to travel. If delta is \\< 0, it will go back,\n   * if it's \\> 0, it will go forward by that amount of entries.\n   * @param triggerListeners - whether this should trigger listeners attached to\n   * the history\n   */\n  go(delta: number, triggerListeners?: boolean): void\n\n  /**\n   * Attach a listener to the History implementation that is triggered when the\n   * navigation is triggered from outside (like the Browser back and forward\n   * buttons) or when passing `true` to {@link RouterHistory.back} and\n   * {@link RouterHistory.forward}\n   *\n   * @param callback - listener to attach\n   * @returns a callback to remove the listener\n   */\n  listen(callback: NavigationCallback): () => void\n\n  /**\n   * Generates the corresponding href to be used in an anchor tag.\n   *\n   * @param location - history location that should create an href\n   */\n  createHref(location: HistoryLocation): string\n\n  /**\n   * Clears any event listener attached by the history implementation.\n   */\n  destroy(): void\n}\n\n// Generic utils\n\n/**\n * Normalizes a base by removing any trailing slash and reading the base tag if\n * present.\n *\n * @param base - base to normalize\n */\nexport function normalizeBase(base?: string): string {\n  if (!base) {\n    if (isBrowser) {\n      // respect <base> tag\n      const baseEl = document.querySelector('base')\n      base = (baseEl && baseEl.getAttribute('href')) || '/'\n      // strip full URL origin\n      base = base.replace(/^\\w+:\\/\\/[^\\/]+/, '')\n    } else {\n      base = '/'\n    }\n  }\n\n  // ensure leading slash when it was removed by the regex above avoid leading\n  // slash with hash because the file could be read from the disk like file://\n  // and the leading slash would cause problems\n  if (base[0] !== '/' && base[0] !== '#') base = '/' + base\n\n  // remove the trailing slash so all other method can just do `base + fullPath`\n  // to build an href\n  return removeTrailingSlash(base)\n}\n\n// remove any character before the hash\nconst BEFORE_HASH_RE = /^[^#]+#/\nexport function createHref(base: string, location: HistoryLocation): string {\n  return base.replace(BEFORE_HASH_RE, '#') + location\n}\n","import { RouteLocationNormalized, RouteLocationNormalizedLoaded } from './types'\nimport { warn } from './warning'\n\n// we use types instead of interfaces to make it work with HistoryStateValue type\n\n/**\n * Scroll position similar to\n * {@link https://developer.mozilla.org/en-US/docs/Web/API/ScrollToOptions | `ScrollToOptions`}.\n * Note that not all browsers support `behavior`.\n */\nexport type ScrollPositionCoordinates = {\n  behavior?: ScrollOptions['behavior']\n  left?: number\n  top?: number\n}\n\n/**\n * Internal normalized version of {@link ScrollPositionCoordinates} that always\n * has `left` and `top` coordinates.\n *\n * @internal\n */\nexport type _ScrollPositionNormalized = {\n  behavior?: ScrollOptions['behavior']\n  left: number\n  top: number\n}\n\nexport interface ScrollPositionElement extends ScrollToOptions {\n  /**\n   * A valid CSS selector. Note some characters must be escaped in id selectors (https://mathiasbynens.be/notes/css-escapes).\n   * @example\n   * Here are a few examples:\n   *\n   * - `.title`\n   * - `.content:first-child`\n   * - `#marker`\n   * - `#marker\\~with\\~symbols`\n   * - `#marker.with.dot`: selects `class=\"with dot\" id=\"marker\"`, not `id=\"marker.with.dot\"`\n   *\n   */\n  el: string | Element\n}\n\nexport type ScrollPosition = ScrollPositionCoordinates | ScrollPositionElement\n\ntype Awaitable<T> = T | PromiseLike<T>\n\nexport interface ScrollBehaviorHandler<T> {\n  (\n    to: RouteLocationNormalized,\n    from: RouteLocationNormalizedLoaded,\n    savedPosition: T | void\n  ): Awaitable<ScrollPosition | false | void>\n}\n\nfunction getElementPosition(\n  el: Element,\n  offset: ScrollPositionCoordinates\n): _ScrollPositionNormalized {\n  const docRect = document.documentElement.getBoundingClientRect()\n  const elRect = el.getBoundingClientRect()\n\n  return {\n    behavior: offset.behavior,\n    left: elRect.left - docRect.left - (offset.left || 0),\n    top: elRect.top - docRect.top - (offset.top || 0),\n  }\n}\n\nexport const computeScrollPosition = () =>\n  ({\n    left: window.pageXOffset,\n    top: window.pageYOffset,\n  } as _ScrollPositionNormalized)\n\nexport function scrollToPosition(position: ScrollPosition): void {\n  let scrollToOptions: ScrollPositionCoordinates\n\n  if ('el' in position) {\n    const positionEl = position.el\n    const isIdSelector =\n      typeof positionEl === 'string' && positionEl.startsWith('#')\n    /**\n     * `id`s can accept pretty much any characters, including CSS combinators\n     * like `>` or `~`. It's still possible to retrieve elements using\n     * `document.getElementById('~')` but it needs to be escaped when using\n     * `document.querySelector('#\\\\~')` for it to be valid. The only\n     * requirements for `id`s are them to be unique on the page and to not be\n     * empty (`id=\"\"`). Because of that, when passing an id selector, it should\n     * be properly escaped for it to work with `querySelector`. We could check\n     * for the id selector to be simple (no CSS combinators `+ >~`) but that\n     * would make things inconsistent since they are valid characters for an\n     * `id` but would need to be escaped when using `querySelector`, breaking\n     * their usage and ending up in no selector returned. Selectors need to be\n     * escaped:\n     *\n     * - `#1-thing` becomes `#\\31 -thing`\n     * - `#with~symbols` becomes `#with\\\\~symbols`\n     *\n     * - More information about  the topic can be found at\n     *   https://mathiasbynens.be/notes/html5-id-class.\n     * - Practical example: https://mathiasbynens.be/demo/html5-id\n     */\n    if (__DEV__ && typeof position.el === 'string') {\n      if (!isIdSelector || !document.getElementById(position.el.slice(1))) {\n        try {\n          const foundEl = document.querySelector(position.el)\n          if (isIdSelector && foundEl) {\n            warn(\n              `The selector \"${position.el}\" should be passed as \"el: document.querySelector('${position.el}')\" because it starts with \"#\".`\n            )\n            // return to avoid other warnings\n            return\n          }\n        } catch (err) {\n          warn(\n            `The selector \"${position.el}\" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`\n          )\n          // return to avoid other warnings\n          return\n        }\n      }\n    }\n\n    const el =\n      typeof positionEl === 'string'\n        ? isIdSelector\n          ? document.getElementById(positionEl.slice(1))\n          : document.querySelector(positionEl)\n        : positionEl\n\n    if (!el) {\n      __DEV__ &&\n        warn(\n          `Couldn't find element using selector \"${position.el}\" returned by scrollBehavior.`\n        )\n      return\n    }\n    scrollToOptions = getElementPosition(el, position)\n  } else {\n    scrollToOptions = position\n  }\n\n  if ('scrollBehavior' in document.documentElement.style)\n    window.scrollTo(scrollToOptions)\n  else {\n    window.scrollTo(\n      scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset,\n      scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset\n    )\n  }\n}\n\nexport function getScrollKey(path: string, delta: number): string {\n  const position: number = history.state ? history.state.position - delta : -1\n  return position + path\n}\n\nexport const scrollPositions = new Map<string, _ScrollPositionNormalized>()\n\nexport function saveScrollPosition(\n  key: string,\n  scrollPosition: _ScrollPositionNormalized\n) {\n  scrollPositions.set(key, scrollPosition)\n}\n\nexport function getSavedScrollPosition(key: string) {\n  const scroll = scrollPositions.get(key)\n  // consume it so it's not used again\n  scrollPositions.delete(key)\n  return scroll\n}\n\n// TODO: RFC about how to save scroll position\n/**\n * ScrollBehavior instance used by the router to compute and restore the scroll\n * position when navigating.\n */\n// export interface ScrollHandler<ScrollPositionEntry extends HistoryStateValue, ScrollPosition extends ScrollPositionEntry> {\n//   // returns a scroll position that can be saved in history\n//   compute(): ScrollPositionEntry\n//   // can take an extended ScrollPositionEntry\n//   scroll(position: ScrollPosition): void\n// }\n\n// export const scrollHandler: ScrollHandler<ScrollPosition> = {\n//   compute: computeScroll,\n//   scroll: scrollToPosition,\n// }\n","import {\n  RouterHistory,\n  NavigationCallback,\n  NavigationType,\n  NavigationDirection,\n  HistoryState,\n  ValueContainer,\n  normalizeBase,\n  createHref,\n  HistoryLocation,\n} from './common'\nimport {\n  computeScrollPosition,\n  _ScrollPositionNormalized,\n} from '../scrollBehavior'\nimport { warn } from '../warning'\nimport { stripBase } from '../location'\nimport { assign } from '../utils'\n\ntype PopStateListener = (this: Window, ev: PopStateEvent) => any\n\nlet createBaseLocation = () => location.protocol + '//' + location.host\n\ninterface StateEntry extends HistoryState {\n  back: HistoryLocation | null\n  current: HistoryLocation\n  forward: HistoryLocation | null\n  position: number\n  replaced: boolean\n  scroll: _ScrollPositionNormalized | null | false\n}\n\n/**\n * Creates a normalized history location from a window.location object\n * @param base - The base path\n * @param location - The window.location object\n */\nfunction createCurrentLocation(\n  base: string,\n  location: Location\n): HistoryLocation {\n  const { pathname, search, hash } = location\n  // allows hash bases like #, /#, #/, #!, #!/, /#!/, or even /folder#end\n  const hashPos = base.indexOf('#')\n  if (hashPos > -1) {\n    let slicePos = hash.includes(base.slice(hashPos))\n      ? base.slice(hashPos).length\n      : 1\n    let pathFromHash = hash.slice(slicePos)\n    // prepend the starting slash to hash so the url starts with /#\n    if (pathFromHash[0] !== '/') pathFromHash = '/' + pathFromHash\n    return stripBase(pathFromHash, '')\n  }\n  const path = stripBase(pathname, base)\n  return path + search + hash\n}\n\nfunction useHistoryListeners(\n  base: string,\n  historyState: ValueContainer<StateEntry>,\n  currentLocation: ValueContainer<HistoryLocation>,\n  replace: RouterHistory['replace']\n) {\n  let listeners: NavigationCallback[] = []\n  let teardowns: Array<() => void> = []\n  // TODO: should it be a stack? a Dict. Check if the popstate listener\n  // can trigger twice\n  let pauseState: HistoryLocation | null = null\n\n  const popStateHandler: PopStateListener = ({\n    state,\n  }: {\n    state: StateEntry | null\n  }) => {\n    const to = createCurrentLocation(base, location)\n    const from: HistoryLocation = currentLocation.value\n    const fromState: StateEntry = historyState.value\n    let delta = 0\n\n    if (state) {\n      currentLocation.value = to\n      historyState.value = state\n\n      // ignore the popstate and reset the pauseState\n      if (pauseState && pauseState === from) {\n        pauseState = null\n        return\n      }\n      delta = fromState ? state.position - fromState.position : 0\n    } else {\n      replace(to)\n    }\n\n    // Here we could also revert the navigation by calling history.go(-delta)\n    // this listener will have to be adapted to not trigger again and to wait for the url\n    // to be updated before triggering the listeners. Some kind of validation function would also\n    // need to be passed to the listeners so the navigation can be accepted\n    // call all listeners\n    listeners.forEach(listener => {\n      listener(currentLocation.value, from, {\n        delta,\n        type: NavigationType.pop,\n        direction: delta\n          ? delta > 0\n            ? NavigationDirection.forward\n            : NavigationDirection.back\n          : NavigationDirection.unknown,\n      })\n    })\n  }\n\n  function pauseListeners() {\n    pauseState = currentLocation.value\n  }\n\n  function listen(callback: NavigationCallback) {\n    // set up the listener and prepare teardown callbacks\n    listeners.push(callback)\n\n    const teardown = () => {\n      const index = listeners.indexOf(callback)\n      if (index > -1) listeners.splice(index, 1)\n    }\n\n    teardowns.push(teardown)\n    return teardown\n  }\n\n  function beforeUnloadListener() {\n    const { history } = window\n    if (!history.state) return\n    history.replaceState(\n      assign({}, history.state, { scroll: computeScrollPosition() }),\n      ''\n    )\n  }\n\n  function destroy() {\n    for (const teardown of teardowns) teardown()\n    teardowns = []\n    window.removeEventListener('popstate', popStateHandler)\n    window.removeEventListener('beforeunload', beforeUnloadListener)\n  }\n\n  // set up the listeners and prepare teardown callbacks\n  window.addEventListener('popstate', popStateHandler)\n  // TODO: could we use 'pagehide' or 'visibilitychange' instead?\n  // https://developer.chrome.com/blog/page-lifecycle-api/\n  window.addEventListener('beforeunload', beforeUnloadListener, {\n    passive: true,\n  })\n\n  return {\n    pauseListeners,\n    listen,\n    destroy,\n  }\n}\n\n/**\n * Creates a state object\n */\nfunction buildState(\n  back: HistoryLocation | null,\n  current: HistoryLocation,\n  forward: HistoryLocation | null,\n  replaced: boolean = false,\n  computeScroll: boolean = false\n): StateEntry {\n  return {\n    back,\n    current,\n    forward,\n    replaced,\n    position: window.history.length,\n    scroll: computeScroll ? computeScrollPosition() : null,\n  }\n}\n\nfunction useHistoryStateNavigation(base: string) {\n  const { history, location } = window\n\n  // private variables\n  const currentLocation: ValueContainer<HistoryLocation> = {\n    value: createCurrentLocation(base, location),\n  }\n  const historyState: ValueContainer<StateEntry> = { value: history.state }\n  // build current history entry as this is a fresh navigation\n  if (!historyState.value) {\n    changeLocation(\n      currentLocation.value,\n      {\n        back: null,\n        current: currentLocation.value,\n        forward: null,\n        // the length is off by one, we need to decrease it\n        position: history.length - 1,\n        replaced: true,\n        // don't add a scroll as the user may have an anchor, and we want\n        // scrollBehavior to be triggered without a saved position\n        scroll: null,\n      },\n      true\n    )\n  }\n\n  function changeLocation(\n    to: HistoryLocation,\n    state: StateEntry,\n    replace: boolean\n  ): void {\n    /**\n     * if a base tag is provided, and we are on a normal domain, we have to\n     * respect the provided `base` attribute because pushState() will use it and\n     * potentially erase anything before the `#` like at\n     * https://github.com/vuejs/router/issues/685 where a base of\n     * `/folder/#` but a base of `/` would erase the `/folder/` section. If\n     * there is no host, the `<base>` tag makes no sense and if there isn't a\n     * base tag we can just use everything after the `#`.\n     */\n    const hashIndex = base.indexOf('#')\n    const url =\n      hashIndex > -1\n        ? (location.host && document.querySelector('base')\n            ? base\n            : base.slice(hashIndex)) + to\n        : createBaseLocation() + base + to\n    try {\n      // BROWSER QUIRK\n      // NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds\n      history[replace ? 'replaceState' : 'pushState'](state, '', url)\n      historyState.value = state\n    } catch (err) {\n      if (__DEV__) {\n        warn('Error with push/replace State', err)\n      } else {\n        console.error(err)\n      }\n      // Force the navigation, this also resets the call count\n      location[replace ? 'replace' : 'assign'](url)\n    }\n  }\n\n  function replace(to: HistoryLocation, data?: HistoryState) {\n    const state: StateEntry = assign(\n      {},\n      history.state,\n      buildState(\n        historyState.value.back,\n        // keep back and forward entries but override current position\n        to,\n        historyState.value.forward,\n        true\n      ),\n      data,\n      { position: historyState.value.position }\n    )\n\n    changeLocation(to, state, true)\n    currentLocation.value = to\n  }\n\n  function push(to: HistoryLocation, data?: HistoryState) {\n    // Add to current entry the information of where we are going\n    // as well as saving the current position\n    const currentState = assign(\n      {},\n      // use current history state to gracefully handle a wrong call to\n      // history.replaceState\n      // https://github.com/vuejs/router/issues/366\n      historyState.value,\n      history.state as Partial<StateEntry> | null,\n      {\n        forward: to,\n        scroll: computeScrollPosition(),\n      }\n    )\n\n    if (__DEV__ && !history.state) {\n      warn(\n        `history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\\n\\n` +\n          `history.replaceState(history.state, '', url)\\n\\n` +\n          `You can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state.`\n      )\n    }\n\n    changeLocation(currentState.current, currentState, true)\n\n    const state: StateEntry = assign(\n      {},\n      buildState(currentLocation.value, to, null),\n      { position: currentState.position + 1 },\n      data\n    )\n\n    changeLocation(to, state, false)\n    currentLocation.value = to\n  }\n\n  return {\n    location: currentLocation,\n    state: historyState,\n\n    push,\n    replace,\n  }\n}\n\n/**\n * Creates an HTML5 history. Most common history for single page applications.\n *\n * @param base -\n */\nexport function createWebHistory(base?: string): RouterHistory {\n  base = normalizeBase(base)\n\n  const historyNavigation = useHistoryStateNavigation(base)\n  const historyListeners = useHistoryListeners(\n    base,\n    historyNavigation.state,\n    historyNavigation.location,\n    historyNavigation.replace\n  )\n  function go(delta: number, triggerListeners = true) {\n    if (!triggerListeners) historyListeners.pauseListeners()\n    history.go(delta)\n  }\n\n  const routerHistory: RouterHistory = assign(\n    {\n      // it's overridden right after\n      location: '',\n      base,\n      go,\n      createHref: createHref.bind(null, base),\n    },\n\n    historyNavigation,\n    historyListeners\n  )\n\n  Object.defineProperty(routerHistory, 'location', {\n    enumerable: true,\n    get: () => historyNavigation.location.value,\n  })\n\n  Object.defineProperty(routerHistory, 'state', {\n    enumerable: true,\n    get: () => historyNavigation.state.value,\n  })\n\n  return routerHistory\n}\n","import { RouteLocationRaw, RouteRecordName } from './index'\n\nexport function isRouteLocation(route: any): route is RouteLocationRaw {\n  return typeof route === 'string' || (route && typeof route === 'object')\n}\n\nexport function isRouteName(name: any): name is RouteRecordName {\n  return typeof name === 'string' || typeof name === 'symbol'\n}\n","import { LocationQuery, LocationQueryRaw } from '../query'\nimport { PathParserOptions } from '../matcher'\nimport { Ref, ComponentPublicInstance, Component, DefineComponent } from 'vue'\nimport { RouteRecord, RouteRecordNormalized } from '../matcher/types'\nimport { HistoryState } from '../history/common'\nimport { NavigationFailure } from '../errors'\n\nexport type Lazy<T> = () => Promise<T>\nexport type Override<T, U> = Pick<T, Exclude<keyof T, keyof U>> & U\n\n// TODO: find a better way to type readonly types. Readonly<T> is non recursive, maybe we should use it at multiple places. It would also allow preventing the problem Immutable create.\nexport type Immutable<T> = {\n  readonly [P in keyof T]: Immutable<T[P]>\n}\n\n/**\n * Type to transform a static object into one that allows passing Refs as\n * values.\n * @internal\n */\nexport type VueUseOptions<T> = {\n  [k in keyof T]: Ref<T[k]> | T[k]\n}\n\nexport type TODO = any\n\n/**\n * @internal\n */\nexport type RouteParamValue = string\n/**\n * @internal\n */\nexport type RouteParamValueRaw = RouteParamValue | number | null | undefined\nexport type RouteParams = Record<string, RouteParamValue | RouteParamValue[]>\nexport type RouteParamsRaw = Record<\n  string,\n  RouteParamValueRaw | Exclude<RouteParamValueRaw, null | undefined>[]\n>\n\n/**\n * @internal\n */\nexport interface RouteQueryAndHash {\n  query?: LocationQueryRaw\n  hash?: string\n}\n\n/**\n * @internal\n */\nexport interface MatcherLocationAsPath {\n  path: string\n}\n\n/**\n * @internal\n */\nexport interface MatcherLocationAsName {\n  name: RouteRecordName\n  params?: RouteParams\n}\n\n/**\n * @internal\n */\nexport interface MatcherLocationAsRelative {\n  params?: RouteParams\n}\n\n/**\n * @internal\n */\nexport interface LocationAsRelativeRaw {\n  name?: RouteRecordName\n  params?: RouteParamsRaw\n}\n\n/**\n * Common options for all navigation methods.\n */\nexport interface RouteLocationOptions {\n  /**\n   * Replace the entry in the history instead of pushing a new entry\n   */\n  replace?: boolean\n  /**\n   * Triggers the navigation even if the location is the same as the current one.\n   * Note this will also add a new entry to the history unless `replace: true`\n   * is passed.\n   */\n  force?: boolean\n  /**\n   * State to save using the History API. This cannot contain any reactive\n   * values and some primitives like Symbols are forbidden. More info at\n   * https://developer.mozilla.org/en-US/docs/Web/API/History/state\n   */\n  state?: HistoryState\n}\n\n/**\n * User-level route location\n */\nexport type RouteLocationRaw =\n  | string\n  | RouteLocationPathRaw\n  | RouteLocationNamedRaw\n\n/**\n * Route Location that can infer the necessary params based on the name.\n *\n * @internal\n */\nexport interface RouteLocationNamedRaw\n  extends RouteQueryAndHash,\n    LocationAsRelativeRaw,\n    RouteLocationOptions {}\n\n/**\n * Route Location that can infer the possible paths.\n *\n * @internal\n */\nexport interface RouteLocationPathRaw\n  extends RouteQueryAndHash,\n    MatcherLocationAsPath,\n    RouteLocationOptions {}\n\nexport interface RouteLocationMatched extends RouteRecordNormalized {\n  // components cannot be Lazy<RouteComponent>\n  components: Record<string, RouteComponent> | null | undefined\n}\n\n/**\n * Base properties for a normalized route location.\n *\n * @internal\n */\nexport interface _RouteLocationBase\n  extends Pick<MatcherLocation, 'name' | 'path' | 'params' | 'meta'> {\n  /**\n   * The whole location including the `search` and `hash`. This string is\n   * percentage encoded.\n   */\n  fullPath: string\n  /**\n   * Object representation of the `search` property of the current location.\n   */\n  query: LocationQuery\n  /**\n   * Hash of the current location. If present, starts with a `#`.\n   */\n  hash: string\n  /**\n   * Contains the location we were initially trying to access before ending up\n   * on the current location.\n   */\n  redirectedFrom: RouteLocation | undefined\n}\n\n// matched contains resolved components\n/**\n * {@link RouteLocationRaw} with\n */\nexport interface RouteLocationNormalizedLoaded extends _RouteLocationBase {\n  /**\n   * Array of {@link RouteLocationMatched} containing only plain components (any\n   * lazy-loaded components have been loaded and were replaced inside the\n   * `components` object) so it can be directly used to display routes. It\n   * cannot contain redirect records either\n   */\n  matched: RouteLocationMatched[] // non-enumerable\n}\n\n/**\n * {@link RouteLocationRaw} resolved using the matcher\n */\nexport interface RouteLocation extends _RouteLocationBase {\n  /**\n   * Array of {@link RouteRecord} containing components as they were\n   * passed when adding records. It can also contain redirect records. This\n   * can't be used directly\n   */\n  matched: RouteRecord[] // non-enumerable\n}\n\n/**\n * Similar to {@link RouteLocation} but its\n * {@link RouteLocationNormalized.matched} cannot contain redirect records\n */\nexport interface RouteLocationNormalized extends _RouteLocationBase {\n  /**\n   * Array of {@link RouteRecordNormalized}\n   */\n  matched: RouteRecordNormalized[] // non-enumerable\n}\n\n/**\n * Allowed Component in {@link RouteLocationMatched}\n */\nexport type RouteComponent = Component | DefineComponent\n/**\n * Allowed Component definitions in route records provided by the user\n */\nexport type RawRouteComponent = RouteComponent | Lazy<RouteComponent>\n\n/**\n * Possible values for a user-defined route record's name\n */\nexport type RouteRecordName = string | symbol\n\n/**\n * @internal\n */\nexport type _RouteRecordProps =\n  | boolean\n  | Record<string, any>\n  | ((to: RouteLocationNormalized) => Record<string, any>)\n\n// TODO: could this be moved to matcher?\n/**\n * Internal type for common properties among all kind of {@link RouteRecordRaw}.\n */\nexport interface _RouteRecordBase extends PathParserOptions {\n  /**\n   * Path of the record. Should start with `/` unless the record is the child of\n   * another record.\n   *\n   * @example `/users/:id` matches `/users/1` as well as `/users/posva`.\n   */\n  path: string\n\n  /**\n   * Where to redirect if the route is directly matched. The redirection happens\n   * before any navigation guard and triggers a new navigation with the new\n   * target location.\n   */\n  redirect?: RouteRecordRedirectOption\n\n  /**\n   * Aliases for the record. Allows defining extra paths that will behave like a\n   * copy of the record. Allows having paths shorthands like `/users/:id` and\n   * `/u/:id`. All `alias` and `path` values must share the same params.\n   */\n  alias?: string | string[]\n\n  /**\n   * Name for the route record. Must be unique.\n   */\n  name?: RouteRecordName\n\n  /**\n   * Before Enter guard specific to this record. Note `beforeEnter` has no\n   * effect if the record has a `redirect` property.\n   */\n  beforeEnter?:\n    | NavigationGuardWithThis<undefined>\n    | NavigationGuardWithThis<undefined>[]\n\n  /**\n   * Arbitrary data attached to the record.\n   */\n  meta?: RouteMeta\n\n  /**\n   * Array of nested routes.\n   */\n  children?: RouteRecordRaw[]\n\n  /**\n   * Allow passing down params as props to the component rendered by `router-view`.\n   */\n  props?: _RouteRecordProps | Record<string, _RouteRecordProps>\n}\n\n/**\n * Interface to type `meta` fields in route records.\n *\n * @example\n *\n * ```ts\n * // typings.d.ts or router.ts\n * import 'vue-router';\n *\n * declare module 'vue-router' {\n *   interface RouteMeta {\n *     requiresAuth?: boolean\n *   }\n *  }\n * ```\n */\nexport interface RouteMeta extends Record<string | number | symbol, unknown> {}\n\n/**\n * @internal\n */\nexport type RouteRecordRedirectOption =\n  | RouteLocationRaw\n  | ((to: RouteLocation) => RouteLocationRaw)\n\n/**\n * Route Record defining one single component with the `component` option.\n */\nexport interface RouteRecordSingleView extends _RouteRecordBase {\n  /**\n   * Component to display when the URL matches this route.\n   */\n  component: RawRouteComponent\n  components?: never\n  children?: never\n  redirect?: never\n\n  /**\n   * Allow passing down params as props to the component rendered by `router-view`.\n   */\n  props?: _RouteRecordProps\n}\n\n/**\n * Route Record defining one single component with a nested view.\n */\nexport interface RouteRecordSingleViewWithChildren extends _RouteRecordBase {\n  /**\n   * Component to display when the URL matches this route.\n   */\n  component?: RawRouteComponent | null | undefined\n  components?: never\n\n  children: RouteRecordRaw[]\n\n  /**\n   * Allow passing down params as props to the component rendered by `router-view`.\n   */\n  props?: _RouteRecordProps\n}\n\n/**\n * Route Record defining multiple named components with the `components` option.\n */\nexport interface RouteRecordMultipleViews extends _RouteRecordBase {\n  /**\n   * Components to display when the URL matches this route. Allow using named views.\n   */\n  components: Record<string, RawRouteComponent>\n  component?: never\n  children?: never\n  redirect?: never\n\n  /**\n   * Allow passing down params as props to the component rendered by\n   * `router-view`. Should be an object with the same keys as `components` or a\n   * boolean to be applied to every component.\n   */\n  props?: Record<string, _RouteRecordProps> | boolean\n}\n\n/**\n * Route Record defining multiple named components with the `components` option and children.\n */\nexport interface RouteRecordMultipleViewsWithChildren extends _RouteRecordBase {\n  /**\n   * Components to display when the URL matches this route. Allow using named views.\n   */\n  components?: Record<string, RawRouteComponent> | null | undefined\n  component?: never\n\n  children: RouteRecordRaw[]\n\n  /**\n   * Allow passing down params as props to the component rendered by\n   * `router-view`. Should be an object with the same keys as `components` or a\n   * boolean to be applied to every component.\n   */\n  props?: Record<string, _RouteRecordProps> | boolean\n}\n\n/**\n * Route Record that defines a redirect. Cannot have `component` or `components`\n * as it is never rendered.\n */\nexport interface RouteRecordRedirect extends _RouteRecordBase {\n  redirect: RouteRecordRedirectOption\n  component?: never\n  components?: never\n  props?: never\n}\n\nexport type RouteRecordRaw =\n  | RouteRecordSingleView\n  | RouteRecordSingleViewWithChildren\n  | RouteRecordMultipleViews\n  | RouteRecordMultipleViewsWithChildren\n  | RouteRecordRedirect\n\n/**\n * Initial route location where the router is. Can be used in navigation guards\n * to differentiate the initial navigation.\n *\n * @example\n * ```js\n * import { START_LOCATION } from 'vue-router'\n *\n * router.beforeEach((to, from) => {\n *   if (from === START_LOCATION) {\n *     // initial navigation\n *   }\n * })\n * ```\n */\nexport const START_LOCATION_NORMALIZED: RouteLocationNormalizedLoaded = {\n  path: '/',\n  name: undefined,\n  params: {},\n  query: {},\n  hash: '',\n  fullPath: '/',\n  matched: [],\n  meta: {},\n  redirectedFrom: undefined,\n}\n\n// make matched non-enumerable for easy printing\n// NOTE: commented for tests at RouterView.spec\n// Object.defineProperty(START_LOCATION_NORMALIZED, 'matched', {\n//   enumerable: false,\n// })\n\n// Matcher types\n// the matcher doesn't care about query and hash\n/**\n * Route location that can be passed to the matcher.\n */\nexport type MatcherLocationRaw =\n  | MatcherLocationAsPath\n  | MatcherLocationAsName\n  | MatcherLocationAsRelative\n\n/**\n * Normalized/resolved Route location that returned by the matcher.\n */\nexport interface MatcherLocation {\n  /**\n   * Name of the matched record\n   */\n  name: RouteRecordName | null | undefined\n\n  /**\n   * Percentage encoded pathname section of the URL.\n   */\n  path: string\n\n  /**\n   * Object of decoded params extracted from the `path`.\n   */\n  params: RouteParams\n\n  /**\n   * Merged `meta` properties from all the matched route records.\n   */\n  meta: RouteMeta\n\n  /**\n   * Array of {@link RouteRecord} containing components as they were\n   * passed when adding records. It can also contain redirect records. This\n   * can't be used directly\n   */\n  matched: RouteRecord[] // non-enumerable\n}\n\nexport interface NavigationGuardNext {\n  (): void\n  (error: Error): void\n  (location: RouteLocationRaw): void\n  (valid: boolean | undefined): void\n  (cb: NavigationGuardNextCallback): void\n  /**\n   * Allows to detect if `next` isn't called in a resolved guard. Used\n   * internally in DEV mode to emit a warning. Commented out to simplify\n   * typings.\n   * @internal\n   */\n  // _called: boolean\n}\n\nexport type NavigationGuardNextCallback = (\n  vm: ComponentPublicInstance\n) => unknown\n\nexport type NavigationGuardReturn =\n  | void\n  | Error\n  | RouteLocationRaw\n  | boolean\n  // FIXME: this one is only allowed in options api\n  | NavigationGuardNextCallback\n\n/**\n * Navigation guard. See [Navigation\n * Guards](/guide/advanced/navigation-guards.md).\n */\nexport interface NavigationGuard {\n  (\n    // TODO: we could maybe add extra information like replace: true/false\n    to: RouteLocationNormalized,\n    from: RouteLocationNormalized,\n    next: NavigationGuardNext\n    // FIXME: this one shouldn't allow returning () => ...\n  ): NavigationGuardReturn | Promise<NavigationGuardReturn>\n}\n\n/**\n * {@inheritDoc NavigationGuard}\n */\nexport interface NavigationGuardWithThis<T> {\n  (\n    this: T,\n    to: RouteLocationNormalized,\n    from: RouteLocationNormalized,\n    next: NavigationGuardNext\n  ): NavigationGuardReturn | Promise<NavigationGuardReturn>\n}\n\nexport interface NavigationHookAfter {\n  (\n    to: RouteLocationNormalized,\n    from: RouteLocationNormalized,\n    failure?: NavigationFailure | void\n  ): any\n}\n\nexport * from './typeGuards'\n\nexport type Mutable<T> = {\n  -readonly [P in keyof T]: T[P]\n}\n","import {\n  MatcherLocationRaw,\n  MatcherLocation,\n  RouteLocationRaw,\n  RouteLocationNormalized,\n} from './types'\nimport { assign } from './utils'\n\n/**\n * Flags so we can combine them when checking for multiple errors. This is the internal version of\n * {@link NavigationFailureType}.\n *\n * @internal\n */\nexport const enum ErrorTypes {\n  // they must be literals to be used as values, so we can't write\n  // 1 << 2\n  MATCHER_NOT_FOUND = 1,\n  NAVIGATION_GUARD_REDIRECT = 2,\n  NAVIGATION_ABORTED = 4,\n  NAVIGATION_CANCELLED = 8,\n  NAVIGATION_DUPLICATED = 16,\n}\n\nconst NavigationFailureSymbol = Symbol(__DEV__ ? 'navigation failure' : '')\n\nexport interface MatcherError extends Error {\n  type: ErrorTypes.MATCHER_NOT_FOUND\n  location: MatcherLocationRaw\n  currentLocation?: MatcherLocation\n}\n\n/**\n * Enumeration with all possible types for navigation failures. Can be passed to\n * {@link isNavigationFailure} to check for specific failures.\n */\nexport enum NavigationFailureType {\n  /**\n   * An aborted navigation is a navigation that failed because a navigation\n   * guard returned `false` or called `next(false)`\n   */\n  aborted = ErrorTypes.NAVIGATION_ABORTED,\n  /**\n   * A cancelled navigation is a navigation that failed because a more recent\n   * navigation finished started (not necessarily finished).\n   */\n  cancelled = ErrorTypes.NAVIGATION_CANCELLED,\n  /**\n   * A duplicated navigation is a navigation that failed because it was\n   * initiated while already being at the exact same location.\n   */\n  duplicated = ErrorTypes.NAVIGATION_DUPLICATED,\n}\n\n/**\n * Extended Error that contains extra information regarding a failed navigation.\n */\nexport interface NavigationFailure extends Error {\n  /**\n   * Type of the navigation. One of {@link NavigationFailureType}\n   */\n  type:\n    | ErrorTypes.NAVIGATION_CANCELLED\n    | ErrorTypes.NAVIGATION_ABORTED\n    | ErrorTypes.NAVIGATION_DUPLICATED\n  /**\n   * Route location we were navigating from\n   */\n  from: RouteLocationNormalized\n  /**\n   * Route location we were navigating to\n   */\n  to: RouteLocationNormalized\n}\n\n/**\n * Internal error used to detect a redirection.\n *\n * @internal\n */\nexport interface NavigationRedirectError\n  extends Omit<NavigationFailure, 'to' | 'type'> {\n  type: ErrorTypes.NAVIGATION_GUARD_REDIRECT\n  to: RouteLocationRaw\n}\n\n// DEV only debug messages\nconst ErrorTypeMessages = {\n  [ErrorTypes.MATCHER_NOT_FOUND]({ location, currentLocation }: MatcherError) {\n    return `No match for\\n ${JSON.stringify(location)}${\n      currentLocation\n        ? '\\nwhile being at\\n' + JSON.stringify(currentLocation)\n        : ''\n    }`\n  },\n  [ErrorTypes.NAVIGATION_GUARD_REDIRECT]({\n    from,\n    to,\n  }: NavigationRedirectError) {\n    return `Redirected from \"${from.fullPath}\" to \"${stringifyRoute(\n      to\n    )}\" via a navigation guard.`\n  },\n  [ErrorTypes.NAVIGATION_ABORTED]({ from, to }: NavigationFailure) {\n    return `Navigation aborted from \"${from.fullPath}\" to \"${to.fullPath}\" via a navigation guard.`\n  },\n  [ErrorTypes.NAVIGATION_CANCELLED]({ from, to }: NavigationFailure) {\n    return `Navigation cancelled from \"${from.fullPath}\" to \"${to.fullPath}\" with a new navigation.`\n  },\n  [ErrorTypes.NAVIGATION_DUPLICATED]({ from, to }: NavigationFailure) {\n    return `Avoided redundant navigation to current location: \"${from.fullPath}\".`\n  },\n}\n\n// Possible internal errors\ntype RouterError = NavigationFailure | NavigationRedirectError | MatcherError\n\nexport function createRouterError<E extends RouterError>(\n  type: E['type'],\n  params: Omit<E, 'type' | keyof Error>\n): E {\n  // keep full error messages in cjs versions\n  if (__DEV__ || !__BROWSER__) {\n    return assign(\n      new Error(ErrorTypeMessages[type](params as any)),\n      {\n        type,\n        [NavigationFailureSymbol]: true,\n      } as { type: typeof type },\n      params\n    ) as E\n  } else {\n    return assign(\n      new Error(),\n      {\n        type,\n        [NavigationFailureSymbol]: true,\n      } as { type: typeof type },\n      params\n    ) as E\n  }\n}\n\n/**\n * Check if an object is a {@link NavigationFailure}.\n *\n * @param error - possible {@link NavigationFailure}\n * @param type - optional types to check for\n *\n * @example\n * ```js\n * import { isNavigationFailure, NavigationFailureType } from 'vue-router'\n *\n * router.afterEach((to, from, failure) => {\n *   // Any kind of navigation failure\n *   if (isNavigationFailure(failure)) {\n *     // ...\n *   }\n *   // Only duplicated navigations\n *   if (isNavigationFailure(failure, NavigationFailureType.duplicated)) {\n *     // ...\n *   }\n *   // Aborted or canceled navigations\n *   if (isNavigationFailure(failure, NavigationFailureType.aborted | NavigationFailureType.canceled)) {\n *     // ...\n *   }\n * })\n * ```\n */\nexport function isNavigationFailure(\n  error: any,\n  type?: ErrorTypes.NAVIGATION_GUARD_REDIRECT\n): error is NavigationRedirectError\nexport function isNavigationFailure(\n  error: any,\n  type?: ErrorTypes | NavigationFailureType\n): error is NavigationFailure\nexport function isNavigationFailure(\n  error: any,\n  type?: number\n): error is NavigationFailure {\n  return (\n    error instanceof Error &&\n    NavigationFailureSymbol in error &&\n    (type == null || !!((error as unknown as NavigationFailure).type & type))\n  )\n}\n\nconst propertiesToLog = ['params', 'query', 'hash'] as const\n\nfunction stringifyRoute(to: RouteLocationRaw): string {\n  if (typeof to === 'string') return to\n  if ('path' in to) return to.path\n  const location = {} as Record<string, unknown>\n  for (const key of propertiesToLog) {\n    if (key in to) location[key] = to[key]\n  }\n  return JSON.stringify(location, null, 2)\n}\n","import { Token, TokenType } from './pathTokenizer'\nimport { assign, isArray } from '../utils'\n\nexport type PathParams = Record<string, string | string[]>\n\n/**\n * A param in a url like `/users/:id`\n */\ninterface PathParserParamKey {\n  name: string\n  repeatable: boolean\n  optional: boolean\n}\n\nexport interface PathParser {\n  /**\n   * The regexp used to match a url\n   */\n  re: RegExp\n\n  /**\n   * The score of the parser\n   */\n  score: Array<number[]>\n\n  /**\n   * Keys that appeared in the path\n   */\n  keys: PathParserParamKey[]\n  /**\n   * Parses a url and returns the matched params or null if it doesn't match. An\n   * optional param that isn't preset will be an empty string. A repeatable\n   * param will be an array if there is at least one value.\n   *\n   * @param path - url to parse\n   * @returns a Params object, empty if there are no params. `null` if there is\n   * no match\n   */\n  parse(path: string): PathParams | null\n\n  /**\n   * Creates a string version of the url\n   *\n   * @param params - object of params\n   * @returns a url\n   */\n  stringify(params: PathParams): string\n}\n\n/**\n * @internal\n */\nexport interface _PathParserOptions {\n  /**\n   * Makes the RegExp case-sensitive.\n   *\n   * @defaultValue `false`\n   */\n  sensitive?: boolean\n\n  /**\n   * Whether to disallow a trailing slash or not.\n   *\n   * @defaultValue `false`\n   */\n  strict?: boolean\n\n  /**\n   * Should the RegExp match from the beginning by prepending a `^` to it.\n   * @internal\n   *\n   * @defaultValue `true`\n   */\n  start?: boolean\n\n  /**\n   * Should the RegExp match until the end by appending a `$` to it.\n   *\n   * @defaultValue `true`\n   */\n  end?: boolean\n}\n\nexport type PathParserOptions = Pick<\n  _PathParserOptions,\n  'end' | 'sensitive' | 'strict'\n>\n\n// default pattern for a param: non-greedy everything but /\nconst BASE_PARAM_PATTERN = '[^/]+?'\n\nconst BASE_PATH_PARSER_OPTIONS: Required<_PathParserOptions> = {\n  sensitive: false,\n  strict: false,\n  start: true,\n  end: true,\n}\n\n// Scoring values used in tokensToParser\nconst enum PathScore {\n  _multiplier = 10,\n  Root = 9 * _multiplier, // just /\n  Segment = 4 * _multiplier, // /a-segment\n  SubSegment = 3 * _multiplier, // /multiple-:things-in-one-:segment\n  Static = 4 * _multiplier, // /static\n  Dynamic = 2 * _multiplier, // /:someId\n  BonusCustomRegExp = 1 * _multiplier, // /:someId(\\\\d+)\n  BonusWildcard = -4 * _multiplier - BonusCustomRegExp, // /:namedWildcard(.*) we remove the bonus added by the custom regexp\n  BonusRepeatable = -2 * _multiplier, // /:w+ or /:w*\n  BonusOptional = -0.8 * _multiplier, // /:w? or /:w*\n  // these two have to be under 0.1 so a strict /:page is still lower than /:a-:b\n  BonusStrict = 0.07 * _multiplier, // when options strict: true is passed, as the regex omits \\/?\n  BonusCaseSensitive = 0.025 * _multiplier, // when options strict: true is passed, as the regex omits \\/?\n}\n\n// Special Regex characters that must be escaped in static tokens\nconst REGEX_CHARS_RE = /[.+*?^${}()[\\]/\\\\]/g\n\n/**\n * Creates a path parser from an array of Segments (a segment is an array of Tokens)\n *\n * @param segments - array of segments returned by tokenizePath\n * @param extraOptions - optional options for the regexp\n * @returns a PathParser\n */\nexport function tokensToParser(\n  segments: Array<Token[]>,\n  extraOptions?: _PathParserOptions\n): PathParser {\n  const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions)\n\n  // the amount of scores is the same as the length of segments except for the root segment \"/\"\n  const score: Array<number[]> = []\n  // the regexp as a string\n  let pattern = options.start ? '^' : ''\n  // extracted keys\n  const keys: PathParserParamKey[] = []\n\n  for (const segment of segments) {\n    // the root segment needs special treatment\n    const segmentScores: number[] = segment.length ? [] : [PathScore.Root]\n\n    // allow trailing slash\n    if (options.strict && !segment.length) pattern += '/'\n    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {\n      const token = segment[tokenIndex]\n      // resets the score if we are inside a sub-segment /:a-other-:b\n      let subSegmentScore: number =\n        PathScore.Segment +\n        (options.sensitive ? PathScore.BonusCaseSensitive : 0)\n\n      if (token.type === TokenType.Static) {\n        // prepend the slash if we are starting a new segment\n        if (!tokenIndex) pattern += '/'\n        pattern += token.value.replace(REGEX_CHARS_RE, '\\\\$&')\n        subSegmentScore += PathScore.Static\n      } else if (token.type === TokenType.Param) {\n        const { value, repeatable, optional, regexp } = token\n        keys.push({\n          name: value,\n          repeatable,\n          optional,\n        })\n        const re = regexp ? regexp : BASE_PARAM_PATTERN\n        // the user provided a custom regexp /:id(\\\\d+)\n        if (re !== BASE_PARAM_PATTERN) {\n          subSegmentScore += PathScore.BonusCustomRegExp\n          // make sure the regexp is valid before using it\n          try {\n            new RegExp(`(${re})`)\n          } catch (err) {\n            throw new Error(\n              `Invalid custom RegExp for param \"${value}\" (${re}): ` +\n                (err as Error).message\n            )\n          }\n        }\n\n        // when we repeat we must take care of the repeating leading slash\n        let subPattern = repeatable ? `((?:${re})(?:/(?:${re}))*)` : `(${re})`\n\n        // prepend the slash if we are starting a new segment\n        if (!tokenIndex)\n          subPattern =\n            // avoid an optional / if there are more segments e.g. /:p?-static\n            // or /:p?-:p2\n            optional && segment.length < 2\n              ? `(?:/${subPattern})`\n              : '/' + subPattern\n        if (optional) subPattern += '?'\n\n        pattern += subPattern\n\n        subSegmentScore += PathScore.Dynamic\n        if (optional) subSegmentScore += PathScore.BonusOptional\n        if (repeatable) subSegmentScore += PathScore.BonusRepeatable\n        if (re === '.*') subSegmentScore += PathScore.BonusWildcard\n      }\n\n      segmentScores.push(subSegmentScore)\n    }\n\n    // an empty array like /home/ -> [[{home}], []]\n    // if (!segment.length) pattern += '/'\n\n    score.push(segmentScores)\n  }\n\n  // only apply the strict bonus to the last score\n  if (options.strict && options.end) {\n    const i = score.length - 1\n    score[i][score[i].length - 1] += PathScore.BonusStrict\n  }\n\n  // TODO: dev only warn double trailing slash\n  if (!options.strict) pattern += '/?'\n\n  if (options.end) pattern += '$'\n  // allow paths like /dynamic to only match dynamic or dynamic/... but not dynamic_something_else\n  else if (options.strict) pattern += '(?:/|$)'\n\n  const re = new RegExp(pattern, options.sensitive ? '' : 'i')\n\n  function parse(path: string): PathParams | null {\n    const match = path.match(re)\n    const params: PathParams = {}\n\n    if (!match) return null\n\n    for (let i = 1; i < match.length; i++) {\n      const value: string = match[i] || ''\n      const key = keys[i - 1]\n      params[key.name] = value && key.repeatable ? value.split('/') : value\n    }\n\n    return params\n  }\n\n  function stringify(params: PathParams): string {\n    let path = ''\n    // for optional parameters to allow to be empty\n    let avoidDuplicatedSlash: boolean = false\n    for (const segment of segments) {\n      if (!avoidDuplicatedSlash || !path.endsWith('/')) path += '/'\n      avoidDuplicatedSlash = false\n\n      for (const token of segment) {\n        if (token.type === TokenType.Static) {\n          path += token.value\n        } else if (token.type === TokenType.Param) {\n          const { value, repeatable, optional } = token\n          const param: string | readonly string[] =\n            value in params ? params[value] : ''\n\n          if (isArray(param) && !repeatable) {\n            throw new Error(\n              `Provided param \"${value}\" is an array but it is not repeatable (* or + modifiers)`\n            )\n          }\n\n          const text: string = isArray(param)\n            ? (param as string[]).join('/')\n            : (param as string)\n          if (!text) {\n            if (optional) {\n              // if we have more than one optional param like /:a?-static we don't need to care about the optional param\n              if (segment.length < 2) {\n                // remove the last slash as we could be at the end\n                if (path.endsWith('/')) path = path.slice(0, -1)\n                // do not append a slash on the next iteration\n                else avoidDuplicatedSlash = true\n              }\n            } else throw new Error(`Missing required param \"${value}\"`)\n          }\n          path += text\n        }\n      }\n    }\n\n    // avoid empty path when we have multiple optional params\n    return path || '/'\n  }\n\n  return {\n    re,\n    score,\n    keys,\n    parse,\n    stringify,\n  }\n}\n\n/**\n * Compares an array of numbers as used in PathParser.score and returns a\n * number. This function can be used to `sort` an array\n *\n * @param a - first array of numbers\n * @param b - second array of numbers\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\n * should be sorted first\n */\nfunction compareScoreArray(a: number[], b: number[]): number {\n  let i = 0\n  while (i < a.length && i < b.length) {\n    const diff = b[i] - a[i]\n    // only keep going if diff === 0\n    if (diff) return diff\n\n    i++\n  }\n\n  // if the last subsegment was Static, the shorter segments should be sorted first\n  // otherwise sort the longest segment first\n  if (a.length < b.length) {\n    return a.length === 1 && a[0] === PathScore.Static + PathScore.Segment\n      ? -1\n      : 1\n  } else if (a.length > b.length) {\n    return b.length === 1 && b[0] === PathScore.Static + PathScore.Segment\n      ? 1\n      : -1\n  }\n\n  return 0\n}\n\n/**\n * Compare function that can be used with `sort` to sort an array of PathParser\n *\n * @param a - first PathParser\n * @param b - second PathParser\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\n */\nexport function comparePathParserScore(a: PathParser, b: PathParser): number {\n  let i = 0\n  const aScore = a.score\n  const bScore = b.score\n  while (i < aScore.length && i < bScore.length) {\n    const comp = compareScoreArray(aScore[i], bScore[i])\n    // do not return if both are equal\n    if (comp) return comp\n\n    i++\n  }\n  if (Math.abs(bScore.length - aScore.length) === 1) {\n    if (isLastScoreNegative(aScore)) return 1\n    if (isLastScoreNegative(bScore)) return -1\n  }\n\n  // if a and b share the same score entries but b has more, sort b first\n  return bScore.length - aScore.length\n  // this is the ternary version\n  // return aScore.length < bScore.length\n  //   ? 1\n  //   : aScore.length > bScore.length\n  //   ? -1\n  //   : 0\n}\n\n/**\n * This allows detecting splats at the end of a path: /home/:id(.*)*\n *\n * @param score - score to check\n * @returns true if the last entry is negative\n */\nfunction isLastScoreNegative(score: PathParser['score']): boolean {\n  const last = score[score.length - 1]\n  return score.length > 0 && last[last.length - 1] < 0\n}\n","export const enum TokenType {\n  Static,\n  Param,\n  Group,\n}\n\nconst enum TokenizerState {\n  Static,\n  Param,\n  ParamRegExp, // custom re for a param\n  ParamRegExpEnd, // check if there is any ? + *\n  EscapeNext,\n}\n\ninterface TokenStatic {\n  type: TokenType.Static\n  value: string\n}\n\ninterface TokenParam {\n  type: TokenType.Param\n  regexp?: string\n  value: string\n  optional: boolean\n  repeatable: boolean\n}\n\ninterface TokenGroup {\n  type: TokenType.Group\n  value: Exclude<Token, TokenGroup>[]\n}\n\nexport type Token = TokenStatic | TokenParam | TokenGroup\n\nconst ROOT_TOKEN: Token = {\n  type: TokenType.Static,\n  value: '',\n}\n\nconst VALID_PARAM_RE = /[a-zA-Z0-9_]/\n// After some profiling, the cache seems to be unnecessary because tokenizePath\n// (the slowest part of adding a route) is very fast\n\n// const tokenCache = new Map<string, Token[][]>()\n\nexport function tokenizePath(path: string): Array<Token[]> {\n  if (!path) return [[]]\n  if (path === '/') return [[ROOT_TOKEN]]\n  if (!path.startsWith('/')) {\n    throw new Error(\n      __DEV__\n        ? `Route paths should start with a \"/\": \"${path}\" should be \"/${path}\".`\n        : `Invalid path \"${path}\"`\n    )\n  }\n\n  // if (tokenCache.has(path)) return tokenCache.get(path)!\n\n  function crash(message: string) {\n    throw new Error(`ERR (${state})/\"${buffer}\": ${message}`)\n  }\n\n  let state: TokenizerState = TokenizerState.Static\n  let previousState: TokenizerState = state\n  const tokens: Array<Token[]> = []\n  // the segment will always be valid because we get into the initial state\n  // with the leading /\n  let segment!: Token[]\n\n  function finalizeSegment() {\n    if (segment) tokens.push(segment)\n    segment = []\n  }\n\n  // index on the path\n  let i = 0\n  // char at index\n  let char: string\n  // buffer of the value read\n  let buffer: string = ''\n  // custom regexp for a param\n  let customRe: string = ''\n\n  function consumeBuffer() {\n    if (!buffer) return\n\n    if (state === TokenizerState.Static) {\n      segment.push({\n        type: TokenType.Static,\n        value: buffer,\n      })\n    } else if (\n      state === TokenizerState.Param ||\n      state === TokenizerState.ParamRegExp ||\n      state === TokenizerState.ParamRegExpEnd\n    ) {\n      if (segment.length > 1 && (char === '*' || char === '+'))\n        crash(\n          `A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`\n        )\n      segment.push({\n        type: TokenType.Param,\n        value: buffer,\n        regexp: customRe,\n        repeatable: char === '*' || char === '+',\n        optional: char === '*' || char === '?',\n      })\n    } else {\n      crash('Invalid state to consume buffer')\n    }\n    buffer = ''\n  }\n\n  function addCharToBuffer() {\n    buffer += char\n  }\n\n  while (i < path.length) {\n    char = path[i++]\n\n    if (char === '\\\\' && state !== TokenizerState.ParamRegExp) {\n      previousState = state\n      state = TokenizerState.EscapeNext\n      continue\n    }\n\n    switch (state) {\n      case TokenizerState.Static:\n        if (char === '/') {\n          if (buffer) {\n            consumeBuffer()\n          }\n          finalizeSegment()\n        } else if (char === ':') {\n          consumeBuffer()\n          state = TokenizerState.Param\n        } else {\n          addCharToBuffer()\n        }\n        break\n\n      case TokenizerState.EscapeNext:\n        addCharToBuffer()\n        state = previousState\n        break\n\n      case TokenizerState.Param:\n        if (char === '(') {\n          state = TokenizerState.ParamRegExp\n        } else if (VALID_PARAM_RE.test(char)) {\n          addCharToBuffer()\n        } else {\n          consumeBuffer()\n          state = TokenizerState.Static\n          // go back one character if we were not modifying\n          if (char !== '*' && char !== '?' && char !== '+') i--\n        }\n        break\n\n      case TokenizerState.ParamRegExp:\n        // TODO: is it worth handling nested regexp? like :p(?:prefix_([^/]+)_suffix)\n        // it already works by escaping the closing )\n        // https://paths.esm.dev/?p=AAMeJbiAwQEcDKbAoAAkP60PG2R6QAvgNaA6AFACM2ABuQBB#\n        // is this really something people need since you can also write\n        // /prefix_:p()_suffix\n        if (char === ')') {\n          // handle the escaped )\n          if (customRe[customRe.length - 1] == '\\\\')\n            customRe = customRe.slice(0, -1) + char\n          else state = TokenizerState.ParamRegExpEnd\n        } else {\n          customRe += char\n        }\n        break\n\n      case TokenizerState.ParamRegExpEnd:\n        // same as finalizing a param\n        consumeBuffer()\n        state = TokenizerState.Static\n        // go back one character if we were not modifying\n        if (char !== '*' && char !== '?' && char !== '+') i--\n        customRe = ''\n        break\n\n      default:\n        crash('Unknown state')\n        break\n    }\n  }\n\n  if (state === TokenizerState.ParamRegExp)\n    crash(`Unfinished custom RegExp for param \"${buffer}\"`)\n\n  consumeBuffer()\n  finalizeSegment()\n\n  // tokenCache.set(path, tokens)\n\n  return tokens\n}\n","import { RouteRecord } from './types'\nimport {\n  tokensToParser,\n  PathParser,\n  PathParserOptions,\n} from './pathParserRanker'\nimport { tokenizePath } from './pathTokenizer'\nimport { warn } from '../warning'\nimport { assign } from '../utils'\n\nexport interface RouteRecordMatcher extends PathParser {\n  record: RouteRecord\n  parent: RouteRecordMatcher | undefined\n  children: RouteRecordMatcher[]\n  // aliases that must be removed when removing this record\n  alias: RouteRecordMatcher[]\n}\n\nexport function createRouteRecordMatcher(\n  record: Readonly<RouteRecord>,\n  parent: RouteRecordMatcher | undefined,\n  options?: PathParserOptions\n): RouteRecordMatcher {\n  const parser = tokensToParser(tokenizePath(record.path), options)\n\n  // warn against params with the same name\n  if (__DEV__) {\n    const existingKeys = new Set<string>()\n    for (const key of parser.keys) {\n      if (existingKeys.has(key.name))\n        warn(\n          `Found duplicated params with name \"${key.name}\" for path \"${record.path}\". Only the last one will be available on \"$route.params\".`\n        )\n      existingKeys.add(key.name)\n    }\n  }\n\n  const matcher: RouteRecordMatcher = assign(parser, {\n    record,\n    parent,\n    // these needs to be populated by the parent\n    children: [],\n    alias: [],\n  })\n\n  if (parent) {\n    // both are aliases or both are not aliases\n    // we don't want to mix them because the order is used when\n    // passing originalRecord in Matcher.addRoute\n    if (!matcher.record.aliasOf === !parent.record.aliasOf)\n      parent.children.push(matcher)\n  }\n\n  return matcher\n}\n","import {\n  RouteRecordRaw,\n  MatcherLocationRaw,\n  MatcherLocation,\n  isRouteName,\n  RouteRecordName,\n  _RouteRecordProps,\n} from '../types'\nimport { createRouterError, ErrorTypes, MatcherError } from '../errors'\nimport { createRouteRecordMatcher, RouteRecordMatcher } from './pathMatcher'\nimport { RouteRecordNormalized } from './types'\n\nimport type {\n  PathParams,\n  PathParserOptions,\n  _PathParserOptions,\n} from './pathParserRanker'\n\nimport { comparePathParserScore } from './pathParserRanker'\n\nimport { warn } from '../warning'\nimport { assign, noop } from '../utils'\n\n/**\n * Internal RouterMatcher\n *\n * @internal\n */\nexport interface RouterMatcher {\n  addRoute: (record: RouteRecordRaw, parent?: RouteRecordMatcher) => () => void\n  removeRoute: {\n    (matcher: RouteRecordMatcher): void\n    (name: RouteRecordName): void\n  }\n  getRoutes: () => RouteRecordMatcher[]\n  getRecordMatcher: (name: RouteRecordName) => RouteRecordMatcher | undefined\n\n  /**\n   * Resolves a location. Gives access to the route record that corresponds to the actual path as well as filling the corresponding params objects\n   *\n   * @param location - MatcherLocationRaw to resolve to a url\n   * @param currentLocation - MatcherLocation of the current location\n   */\n  resolve: (\n    location: MatcherLocationRaw,\n    currentLocation: MatcherLocation\n  ) => MatcherLocation\n}\n\n/**\n * Creates a Router Matcher.\n *\n * @internal\n * @param routes - array of initial routes\n * @param globalOptions - global route options\n */\nexport function createRouterMatcher(\n  routes: Readonly<RouteRecordRaw[]>,\n  globalOptions: PathParserOptions\n): RouterMatcher {\n  // normalized ordered array of matchers\n  const matchers: RouteRecordMatcher[] = []\n  const matcherMap = new Map<RouteRecordName, RouteRecordMatcher>()\n  globalOptions = mergeOptions(\n    { strict: false, end: true, sensitive: false } as PathParserOptions,\n    globalOptions\n  )\n\n  function getRecordMatcher(name: RouteRecordName) {\n    return matcherMap.get(name)\n  }\n\n  function addRoute(\n    record: RouteRecordRaw,\n    parent?: RouteRecordMatcher,\n    originalRecord?: RouteRecordMatcher\n  ) {\n    // used later on to remove by name\n    const isRootAdd = !originalRecord\n    const mainNormalizedRecord = normalizeRouteRecord(record)\n    if (__DEV__) {\n      checkChildMissingNameWithEmptyPath(mainNormalizedRecord, parent)\n    }\n    // we might be the child of an alias\n    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record\n    const options: PathParserOptions = mergeOptions(globalOptions, record)\n    // generate an array of records to correctly handle aliases\n    const normalizedRecords: (typeof mainNormalizedRecord)[] = [\n      mainNormalizedRecord,\n    ]\n    if ('alias' in record) {\n      const aliases =\n        typeof record.alias === 'string' ? [record.alias] : record.alias!\n      for (const alias of aliases) {\n        normalizedRecords.push(\n          assign({}, mainNormalizedRecord, {\n            // this allows us to hold a copy of the `components` option\n            // so that async components cache is hold on the original record\n            components: originalRecord\n              ? originalRecord.record.components\n              : mainNormalizedRecord.components,\n            path: alias,\n            // we might be the child of an alias\n            aliasOf: originalRecord\n              ? originalRecord.record\n              : mainNormalizedRecord,\n            // the aliases are always of the same kind as the original since they\n            // are defined on the same record\n          }) as typeof mainNormalizedRecord\n        )\n      }\n    }\n\n    let matcher: RouteRecordMatcher\n    let originalMatcher: RouteRecordMatcher | undefined\n\n    for (const normalizedRecord of normalizedRecords) {\n      const { path } = normalizedRecord\n      // Build up the path for nested routes if the child isn't an absolute\n      // route. Only add the / delimiter if the child path isn't empty and if the\n      // parent path doesn't have a trailing slash\n      if (parent && path[0] !== '/') {\n        const parentPath = parent.record.path\n        const connectingSlash =\n          parentPath[parentPath.length - 1] === '/' ? '' : '/'\n        normalizedRecord.path =\n          parent.record.path + (path && connectingSlash + path)\n      }\n\n      if (__DEV__ && normalizedRecord.path === '*') {\n        throw new Error(\n          'Catch all routes (\"*\") must now be defined using a param with a custom regexp.\\n' +\n            'See more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.'\n        )\n      }\n\n      // create the object beforehand, so it can be passed to children\n      matcher = createRouteRecordMatcher(normalizedRecord, parent, options)\n\n      if (__DEV__ && parent && path[0] === '/')\n        checkMissingParamsInAbsolutePath(matcher, parent)\n\n      // if we are an alias we must tell the original record that we exist,\n      // so we can be removed\n      if (originalRecord) {\n        originalRecord.alias.push(matcher)\n        if (__DEV__) {\n          checkSameParams(originalRecord, matcher)\n        }\n      } else {\n        // otherwise, the first record is the original and others are aliases\n        originalMatcher = originalMatcher || matcher\n        if (originalMatcher !== matcher) originalMatcher.alias.push(matcher)\n\n        // remove the route if named and only for the top record (avoid in nested calls)\n        // this works because the original record is the first one\n        if (isRootAdd && record.name && !isAliasRecord(matcher))\n          removeRoute(record.name)\n      }\n\n      if (mainNormalizedRecord.children) {\n        const children = mainNormalizedRecord.children\n        for (let i = 0; i < children.length; i++) {\n          addRoute(\n            children[i],\n            matcher,\n            originalRecord && originalRecord.children[i]\n          )\n        }\n      }\n\n      // if there was no original record, then the first one was not an alias and all\n      // other aliases (if any) need to reference this record when adding children\n      originalRecord = originalRecord || matcher\n\n      // TODO: add normalized records for more flexibility\n      // if (parent && isAliasRecord(originalRecord)) {\n      //   parent.children.push(originalRecord)\n      // }\n\n      // Avoid adding a record that doesn't display anything. This allows passing through records without a component to\n      // not be reached and pass through the catch all route\n      if (\n        (matcher.record.components &&\n          Object.keys(matcher.record.components).length) ||\n        matcher.record.name ||\n        matcher.record.redirect\n      ) {\n        insertMatcher(matcher)\n      }\n    }\n\n    return originalMatcher\n      ? () => {\n          // since other matchers are aliases, they should be removed by the original matcher\n          removeRoute(originalMatcher!)\n        }\n      : noop\n  }\n\n  function removeRoute(matcherRef: RouteRecordName | RouteRecordMatcher) {\n    if (isRouteName(matcherRef)) {\n      const matcher = matcherMap.get(matcherRef)\n      if (matcher) {\n        matcherMap.delete(matcherRef)\n        matchers.splice(matchers.indexOf(matcher), 1)\n        matcher.children.forEach(removeRoute)\n        matcher.alias.forEach(removeRoute)\n      }\n    } else {\n      const index = matchers.indexOf(matcherRef)\n      if (index > -1) {\n        matchers.splice(index, 1)\n        if (matcherRef.record.name) matcherMap.delete(matcherRef.record.name)\n        matcherRef.children.forEach(removeRoute)\n        matcherRef.alias.forEach(removeRoute)\n      }\n    }\n  }\n\n  function getRoutes() {\n    return matchers\n  }\n\n  function insertMatcher(matcher: RouteRecordMatcher) {\n    let i = 0\n    while (\n      i < matchers.length &&\n      comparePathParserScore(matcher, matchers[i]) >= 0 &&\n      // Adding children with empty path should still appear before the parent\n      // https://github.com/vuejs/router/issues/1124\n      (matcher.record.path !== matchers[i].record.path ||\n        !isRecordChildOf(matcher, matchers[i]))\n    )\n      i++\n    matchers.splice(i, 0, matcher)\n    // only add the original record to the name map\n    if (matcher.record.name && !isAliasRecord(matcher))\n      matcherMap.set(matcher.record.name, matcher)\n  }\n\n  function resolve(\n    location: Readonly<MatcherLocationRaw>,\n    currentLocation: Readonly<MatcherLocation>\n  ): MatcherLocation {\n    let matcher: RouteRecordMatcher | undefined\n    let params: PathParams = {}\n    let path: MatcherLocation['path']\n    let name: MatcherLocation['name']\n\n    if ('name' in location && location.name) {\n      matcher = matcherMap.get(location.name)\n\n      if (!matcher)\n        throw createRouterError<MatcherError>(ErrorTypes.MATCHER_NOT_FOUND, {\n          location,\n        })\n\n      // warn if the user is passing invalid params so they can debug it better when they get removed\n      if (__DEV__) {\n        const invalidParams: string[] = Object.keys(\n          location.params || {}\n        ).filter(paramName => !matcher!.keys.find(k => k.name === paramName))\n\n        if (invalidParams.length) {\n          warn(\n            `Discarded invalid param(s) \"${invalidParams.join(\n              '\", \"'\n            )}\" when navigating. See https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#414-2022-08-22 for more details.`\n          )\n        }\n      }\n\n      name = matcher.record.name\n      params = assign(\n        // paramsFromLocation is a new object\n        paramsFromLocation(\n          currentLocation.params,\n          // only keep params that exist in the resolved location\n          // TODO: only keep optional params coming from a parent record\n          matcher.keys.filter(k => !k.optional).map(k => k.name)\n        ),\n        // discard any existing params in the current location that do not exist here\n        // #1497 this ensures better active/exact matching\n        location.params &&\n          paramsFromLocation(\n            location.params,\n            matcher.keys.map(k => k.name)\n          )\n      )\n      // throws if cannot be stringified\n      path = matcher.stringify(params)\n    } else if ('path' in location) {\n      // no need to resolve the path with the matcher as it was provided\n      // this also allows the user to control the encoding\n      path = location.path\n\n      if (__DEV__ && !path.startsWith('/')) {\n        warn(\n          `The Matcher cannot resolve relative paths but received \"${path}\". Unless you directly called \\`matcher.resolve(\"${path}\")\\`, this is probably a bug in vue-router. Please open an issue at https://github.com/vuejs/router/issues/new/choose.`\n        )\n      }\n\n      matcher = matchers.find(m => m.re.test(path))\n      // matcher should have a value after the loop\n\n      if (matcher) {\n        // we know the matcher works because we tested the regexp\n        params = matcher.parse(path)!\n        name = matcher.record.name\n      }\n      // location is a relative path\n    } else {\n      // match by name or path of current route\n      matcher = currentLocation.name\n        ? matcherMap.get(currentLocation.name)\n        : matchers.find(m => m.re.test(currentLocation.path))\n      if (!matcher)\n        throw createRouterError<MatcherError>(ErrorTypes.MATCHER_NOT_FOUND, {\n          location,\n          currentLocation,\n        })\n      name = matcher.record.name\n      // since we are navigating to the same location, we don't need to pick the\n      // params like when `name` is provided\n      params = assign({}, currentLocation.params, location.params)\n      path = matcher.stringify(params)\n    }\n\n    const matched: MatcherLocation['matched'] = []\n    let parentMatcher: RouteRecordMatcher | undefined = matcher\n    while (parentMatcher) {\n      // reversed order so parents are at the beginning\n\n      matched.unshift(parentMatcher.record)\n      parentMatcher = parentMatcher.parent\n    }\n\n    return {\n      name,\n      path,\n      params,\n      matched,\n      meta: mergeMetaFields(matched),\n    }\n  }\n\n  // add initial routes\n  routes.forEach(route => addRoute(route))\n\n  return { addRoute, resolve, removeRoute, getRoutes, getRecordMatcher }\n}\n\nfunction paramsFromLocation(\n  params: MatcherLocation['params'],\n  keys: string[]\n): MatcherLocation['params'] {\n  const newParams = {} as MatcherLocation['params']\n\n  for (const key of keys) {\n    if (key in params) newParams[key] = params[key]\n  }\n\n  return newParams\n}\n\n/**\n * Normalizes a RouteRecordRaw. Creates a copy\n *\n * @param record\n * @returns the normalized version\n */\nexport function normalizeRouteRecord(\n  record: RouteRecordRaw\n): RouteRecordNormalized {\n  return {\n    path: record.path,\n    redirect: record.redirect,\n    name: record.name,\n    meta: record.meta || {},\n    aliasOf: undefined,\n    beforeEnter: record.beforeEnter,\n    props: normalizeRecordProps(record),\n    children: record.children || [],\n    instances: {},\n    leaveGuards: new Set(),\n    updateGuards: new Set(),\n    enterCallbacks: {},\n    components:\n      'components' in record\n        ? record.components || null\n        : record.component && { default: record.component },\n  }\n}\n\n/**\n * Normalize the optional `props` in a record to always be an object similar to\n * components. Also accept a boolean for components.\n * @param record\n */\nfunction normalizeRecordProps(\n  record: RouteRecordRaw\n): Record<string, _RouteRecordProps> {\n  const propsObject = {} as Record<string, _RouteRecordProps>\n  // props does not exist on redirect records, but we can set false directly\n  const props = record.props || false\n  if ('component' in record) {\n    propsObject.default = props\n  } else {\n    // NOTE: we could also allow a function to be applied to every component.\n    // Would need user feedback for use cases\n    for (const name in record.components)\n      propsObject[name] = typeof props === 'object' ? props[name] : props\n  }\n\n  return propsObject\n}\n\n/**\n * Checks if a record or any of its parent is an alias\n * @param record\n */\nfunction isAliasRecord(record: RouteRecordMatcher | undefined): boolean {\n  while (record) {\n    if (record.record.aliasOf) return true\n    record = record.parent\n  }\n\n  return false\n}\n\n/**\n * Merge meta fields of an array of records\n *\n * @param matched - array of matched records\n */\nfunction mergeMetaFields(matched: MatcherLocation['matched']) {\n  return matched.reduce(\n    (meta, record) => assign(meta, record.meta),\n    {} as MatcherLocation['meta']\n  )\n}\n\nfunction mergeOptions<T extends object>(\n  defaults: T,\n  partialOptions: Partial<T>\n): T {\n  const options = {} as T\n  for (const key in defaults) {\n    options[key] = key in partialOptions ? partialOptions[key]! : defaults[key]\n  }\n\n  return options\n}\n\ntype ParamKey = RouteRecordMatcher['keys'][number]\n\nfunction isSameParam(a: ParamKey, b: ParamKey): boolean {\n  return (\n    a.name === b.name &&\n    a.optional === b.optional &&\n    a.repeatable === b.repeatable\n  )\n}\n\n/**\n * Check if a path and its alias have the same required params\n *\n * @param a - original record\n * @param b - alias record\n */\nfunction checkSameParams(a: RouteRecordMatcher, b: RouteRecordMatcher) {\n  for (const key of a.keys) {\n    if (!key.optional && !b.keys.find(isSameParam.bind(null, key)))\n      return warn(\n        `Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" must have the exact same param named \"${key.name}\"`\n      )\n  }\n  for (const key of b.keys) {\n    if (!key.optional && !a.keys.find(isSameParam.bind(null, key)))\n      return warn(\n        `Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" must have the exact same param named \"${key.name}\"`\n      )\n  }\n}\n\n/**\n * A route with a name and a child with an empty path without a name should warn when adding the route\n *\n * @param mainNormalizedRecord - RouteRecordNormalized\n * @param parent - RouteRecordMatcher\n */\nfunction checkChildMissingNameWithEmptyPath(\n  mainNormalizedRecord: RouteRecordNormalized,\n  parent?: RouteRecordMatcher\n) {\n  if (\n    parent &&\n    parent.record.name &&\n    !mainNormalizedRecord.name &&\n    !mainNormalizedRecord.path\n  ) {\n    warn(\n      `The route named \"${String(\n        parent.record.name\n      )}\" has a child without a name and an empty path. Using that name won't render the empty path child so you probably want to move the name to the child instead. If this is intentional, add a name to the child route to remove the warning.`\n    )\n  }\n}\n\nfunction checkMissingParamsInAbsolutePath(\n  record: RouteRecordMatcher,\n  parent: RouteRecordMatcher\n) {\n  for (const key of parent.keys) {\n    if (!record.keys.find(isSameParam.bind(null, key)))\n      return warn(\n        `Absolute path \"${record.record.path}\" must have the exact same param named \"${key.name}\" as its parent \"${parent.record.path}\".`\n      )\n  }\n}\n\nfunction isRecordChildOf(\n  record: RouteRecordMatcher,\n  parent: RouteRecordMatcher\n): boolean {\n  return parent.children.some(\n    child => child === record || isRecordChildOf(record, child)\n  )\n}\n\nexport type { PathParserOptions, _PathParserOptions }\n","import { warn } from './warning'\n\n/**\n * Encoding Rules ␣ = Space Path: ␣ \" < > # ? { } Query: ␣ \" < > # & = Hash: ␣ \"\n * < > `\n *\n * On top of that, the RFC3986 (https://tools.ietf.org/html/rfc3986#section-2.2)\n * defines some extra characters to be encoded. Most browsers do not encode them\n * in encodeURI https://github.com/whatwg/url/issues/369, so it may be safer to\n * also encode `!'()*`. Leaving un-encoded only ASCII alphanumeric(`a-zA-Z0-9`)\n * plus `-._~`. This extra safety should be applied to query by patching the\n * string returned by encodeURIComponent encodeURI also encodes `[\\]^`. `\\`\n * should be encoded to avoid ambiguity. Browsers (IE, FF, C) transform a `\\`\n * into a `/` if directly typed in. The _backtick_ (`````) should also be\n * encoded everywhere because some browsers like FF encode it when directly\n * written while others don't. Safari and IE don't encode ``\"<>{}``` in hash.\n */\n// const EXTRA_RESERVED_RE = /[!'()*]/g\n// const encodeReservedReplacer = (c: string) => '%' + c.charCodeAt(0).toString(16)\n\nconst HASH_RE = /#/g // %23\nconst AMPERSAND_RE = /&/g // %26\nconst SLASH_RE = /\\//g // %2F\nconst EQUAL_RE = /=/g // %3D\nconst IM_RE = /\\?/g // %3F\nexport const PLUS_RE = /\\+/g // %2B\n/**\n * NOTE: It's not clear to me if we should encode the + symbol in queries, it\n * seems to be less flexible than not doing so and I can't find out the legacy\n * systems requiring this for regular requests like text/html. In the standard,\n * the encoding of the plus character is only mentioned for\n * application/x-www-form-urlencoded\n * (https://url.spec.whatwg.org/#urlencoded-parsing) and most browsers seems lo\n * leave the plus character as is in queries. To be more flexible, we allow the\n * plus character on the query, but it can also be manually encoded by the user.\n *\n * Resources:\n * - https://url.spec.whatwg.org/#urlencoded-parsing\n * - https://stackoverflow.com/questions/1634271/url-encoding-the-space-character-or-20\n */\n\nconst ENC_BRACKET_OPEN_RE = /%5B/g // [\nconst ENC_BRACKET_CLOSE_RE = /%5D/g // ]\nconst ENC_CARET_RE = /%5E/g // ^\nconst ENC_BACKTICK_RE = /%60/g // `\nconst ENC_CURLY_OPEN_RE = /%7B/g // {\nconst ENC_PIPE_RE = /%7C/g // |\nconst ENC_CURLY_CLOSE_RE = /%7D/g // }\nconst ENC_SPACE_RE = /%20/g // }\n\n/**\n * Encode characters that need to be encoded on the path, search and hash\n * sections of the URL.\n *\n * @internal\n * @param text - string to encode\n * @returns encoded string\n */\nfunction commonEncode(text: string | number): string {\n  return encodeURI('' + text)\n    .replace(ENC_PIPE_RE, '|')\n    .replace(ENC_BRACKET_OPEN_RE, '[')\n    .replace(ENC_BRACKET_CLOSE_RE, ']')\n}\n\n/**\n * Encode characters that need to be encoded on the hash section of the URL.\n *\n * @param text - string to encode\n * @returns encoded string\n */\nexport function encodeHash(text: string): string {\n  return commonEncode(text)\n    .replace(ENC_CURLY_OPEN_RE, '{')\n    .replace(ENC_CURLY_CLOSE_RE, '}')\n    .replace(ENC_CARET_RE, '^')\n}\n\n/**\n * Encode characters that need to be encoded query values on the query\n * section of the URL.\n *\n * @param text - string to encode\n * @returns encoded string\n */\nexport function encodeQueryValue(text: string | number): string {\n  return (\n    commonEncode(text)\n      // Encode the space as +, encode the + to differentiate it from the space\n      .replace(PLUS_RE, '%2B')\n      .replace(ENC_SPACE_RE, '+')\n      .replace(HASH_RE, '%23')\n      .replace(AMPERSAND_RE, '%26')\n      .replace(ENC_BACKTICK_RE, '`')\n      .replace(ENC_CURLY_OPEN_RE, '{')\n      .replace(ENC_CURLY_CLOSE_RE, '}')\n      .replace(ENC_CARET_RE, '^')\n  )\n}\n\n/**\n * Like `encodeQueryValue` but also encodes the `=` character.\n *\n * @param text - string to encode\n */\nexport function encodeQueryKey(text: string | number): string {\n  return encodeQueryValue(text).replace(EQUAL_RE, '%3D')\n}\n\n/**\n * Encode characters that need to be encoded on the path section of the URL.\n *\n * @param text - string to encode\n * @returns encoded string\n */\nexport function encodePath(text: string | number): string {\n  return commonEncode(text).replace(HASH_RE, '%23').replace(IM_RE, '%3F')\n}\n\n/**\n * Encode characters that need to be encoded on the path section of the URL as a\n * param. This function encodes everything {@link encodePath} does plus the\n * slash (`/`) character. If `text` is `null` or `undefined`, returns an empty\n * string instead.\n *\n * @param text - string to encode\n * @returns encoded string\n */\nexport function encodeParam(text: string | number | null | undefined): string {\n  return text == null ? '' : encodePath(text).replace(SLASH_RE, '%2F')\n}\n\n/**\n * Decode text using `decodeURIComponent`. Returns the original text if it\n * fails.\n *\n * @param text - string to decode\n * @returns decoded string\n */\nexport function decode(text: string | number): string {\n  try {\n    return decodeURIComponent('' + text)\n  } catch (err) {\n    __DEV__ && warn(`Error decoding \"${text}\". Using original value`)\n  }\n  return '' + text\n}\n","import { decode, encodeQueryKey, encodeQueryValue, PLUS_RE } from './encoding'\nimport { isArray } from './utils'\n\n/**\n * Possible values in normalized {@link LocationQuery}. `null` renders the query\n * param but without an `=`.\n *\n * @example\n * ```\n * ?isNull&isEmpty=&other=other\n * gives\n * `{ isNull: null, isEmpty: '', other: 'other' }`.\n * ```\n *\n * @internal\n */\nexport type LocationQueryValue = string | null\n/**\n * Possible values when defining a query.\n *\n * @internal\n */\nexport type LocationQueryValueRaw = LocationQueryValue | number | undefined\n/**\n * Normalized query object that appears in {@link RouteLocationNormalized}\n *\n * @public\n */\nexport type LocationQuery = Record<\n  string,\n  LocationQueryValue | LocationQueryValue[]\n>\n/**\n * Loose {@link LocationQuery} object that can be passed to functions like\n * {@link Router.push} and {@link Router.replace} or anywhere when creating a\n * {@link RouteLocationRaw}\n *\n * @public\n */\nexport type LocationQueryRaw = Record<\n  string | number,\n  LocationQueryValueRaw | LocationQueryValueRaw[]\n>\n\n/**\n * Transforms a queryString into a {@link LocationQuery} object. Accept both, a\n * version with the leading `?` and without Should work as URLSearchParams\n\n * @internal\n *\n * @param search - search string to parse\n * @returns a query object\n */\nexport function parseQuery(search: string): LocationQuery {\n  const query: LocationQuery = {}\n  // avoid creating an object with an empty key and empty value\n  // because of split('&')\n  if (search === '' || search === '?') return query\n  const hasLeadingIM = search[0] === '?'\n  const searchParams = (hasLeadingIM ? search.slice(1) : search).split('&')\n  for (let i = 0; i < searchParams.length; ++i) {\n    // pre decode the + into space\n    const searchParam = searchParams[i].replace(PLUS_RE, ' ')\n    // allow the = character\n    const eqPos = searchParam.indexOf('=')\n    const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos))\n    const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1))\n\n    if (key in query) {\n      // an extra variable for ts types\n      let currentValue = query[key]\n      if (!isArray(currentValue)) {\n        currentValue = query[key] = [currentValue]\n      }\n      // we force the modification\n      ;(currentValue as LocationQueryValue[]).push(value)\n    } else {\n      query[key] = value\n    }\n  }\n  return query\n}\n\n/**\n * Stringifies a {@link LocationQueryRaw} object. Like `URLSearchParams`, it\n * doesn't prepend a `?`\n *\n * @internal\n *\n * @param query - query object to stringify\n * @returns string version of the query without the leading `?`\n */\nexport function stringifyQuery(query: LocationQueryRaw): string {\n  let search = ''\n  for (let key in query) {\n    const value = query[key]\n    key = encodeQueryKey(key)\n    if (value == null) {\n      // only null adds the value\n      if (value !== undefined) {\n        search += (search.length ? '&' : '') + key\n      }\n      continue\n    }\n    // keep null values\n    const values: LocationQueryValueRaw[] = isArray(value)\n      ? value.map(v => v && encodeQueryValue(v))\n      : [value && encodeQueryValue(value)]\n\n    values.forEach(value => {\n      // skip undefined values in arrays as if they were not present\n      // smaller code than using filter\n      if (value !== undefined) {\n        // only append & with non-empty search\n        search += (search.length ? '&' : '') + key\n        if (value != null) search += '=' + value\n      }\n    })\n  }\n\n  return search\n}\n\n/**\n * Transforms a {@link LocationQueryRaw} into a {@link LocationQuery} by casting\n * numbers into strings, removing keys with an undefined value and replacing\n * undefined with null in arrays\n *\n * @param query - query object to normalize\n * @returns a normalized query object\n */\nexport function normalizeQuery(\n  query: LocationQueryRaw | undefined\n): LocationQuery {\n  const normalizedQuery: LocationQuery = {}\n\n  for (const key in query) {\n    const value = query[key]\n    if (value !== undefined) {\n      normalizedQuery[key] = isArray(value)\n        ? value.map(v => (v == null ? null : '' + v))\n        : value == null\n        ? value\n        : '' + value\n    }\n  }\n\n  return normalizedQuery\n}\n","import type { InjectionKey, ComputedRef, Ref } from 'vue'\nimport { RouteLocationNormalizedLoaded } from './types'\nimport { RouteRecordNormalized } from './matcher/types'\nimport type { Router } from './router'\n\n/**\n * RouteRecord being rendered by the closest ancestor Router View. Used for\n * `onBeforeRouteUpdate` and `onBeforeRouteLeave`. rvlm stands for Router View\n * Location Matched\n *\n * @internal\n */\nexport const matchedRouteKey = Symbol(\n  __DEV__ ? 'router view location matched' : ''\n) as InjectionKey<ComputedRef<RouteRecordNormalized | undefined>>\n\n/**\n * Allows overriding the router view depth to control which component in\n * `matched` is rendered. rvd stands for Router View Depth\n *\n * @internal\n */\nexport const viewDepthKey = Symbol(\n  __DEV__ ? 'router view depth' : ''\n) as InjectionKey<Ref<number> | number>\n\n/**\n * Allows overriding the router instance returned by `useRouter` in tests. r\n * stands for router\n *\n * @internal\n */\nexport const routerKey = Symbol(__DEV__ ? 'router' : '') as InjectionKey<Router>\n\n/**\n * Allows overriding the current route returned by `useRoute` in tests. rl\n * stands for route location\n *\n * @internal\n */\nexport const routeLocationKey = Symbol(\n  __DEV__ ? 'route location' : ''\n) as InjectionKey<RouteLocationNormalizedLoaded>\n\n/**\n * Allows overriding the current route used by router-view. Internally this is\n * used when the `route` prop is passed.\n *\n * @internal\n */\nexport const routerViewLocationKey = Symbol(\n  __DEV__ ? 'router view location' : ''\n) as InjectionKey<Ref<RouteLocationNormalizedLoaded>>\n","/**\n * Create a list of callbacks that can be reset. Used to create before and after navigation guards list\n */\nexport function useCallbacks<T>() {\n  let handlers: T[] = []\n\n  function add(handler: T): () => void {\n    handlers.push(handler)\n    return () => {\n      const i = handlers.indexOf(handler)\n      if (i > -1) handlers.splice(i, 1)\n    }\n  }\n\n  function reset() {\n    handlers = []\n  }\n\n  return {\n    add,\n    list: () => handlers.slice(),\n    reset,\n  }\n}\n","import {\n  NavigationGuard,\n  RouteLocationNormalized,\n  NavigationGuardNext,\n  RouteLocationRaw,\n  RouteLocationNormalizedLoaded,\n  NavigationGuardNextCallback,\n  isRouteLocation,\n  Lazy,\n  RouteComponent,\n  RawRouteComponent,\n} from './types'\n\nimport {\n  createRouterError,\n  ErrorTypes,\n  NavigationFailure,\n  NavigationRedirectError,\n} from './errors'\nimport { ComponentOptions, onUnmounted, onActivated, onDeactivated } from 'vue'\nimport { inject, getCurrentInstance } from 'vue'\nimport { matchedRouteKey } from './injectionSymbols'\nimport { RouteRecordNormalized } from './matcher/types'\nimport { isESModule } from './utils'\nimport { warn } from './warning'\n\nfunction registerGuard(\n  record: RouteRecordNormalized,\n  name: 'leaveGuards' | 'updateGuards',\n  guard: NavigationGuard\n) {\n  const removeFromList = () => {\n    record[name].delete(guard)\n  }\n\n  onUnmounted(removeFromList)\n  onDeactivated(removeFromList)\n\n  onActivated(() => {\n    record[name].add(guard)\n  })\n\n  record[name].add(guard)\n}\n\n/**\n * Add a navigation guard that triggers whenever the component for the current\n * location is about to be left. Similar to {@link beforeRouteLeave} but can be\n * used in any component. The guard is removed when the component is unmounted.\n *\n * @param leaveGuard - {@link NavigationGuard}\n */\nexport function onBeforeRouteLeave(leaveGuard: NavigationGuard) {\n  if (__DEV__ && !getCurrentInstance()) {\n    warn(\n      'getCurrentInstance() returned null. onBeforeRouteLeave() must be called at the top of a setup function'\n    )\n    return\n  }\n\n  const activeRecord: RouteRecordNormalized | undefined = inject(\n    matchedRouteKey,\n    // to avoid warning\n    {} as any\n  ).value\n\n  if (!activeRecord) {\n    __DEV__ &&\n      warn(\n        'No active route record was found when calling `onBeforeRouteLeave()`. Make sure you call this function inside a component child of <router-view>. Maybe you called it inside of App.vue?'\n      )\n    return\n  }\n\n  registerGuard(activeRecord, 'leaveGuards', leaveGuard)\n}\n\n/**\n * Add a navigation guard that triggers whenever the current location is about\n * to be updated. Similar to {@link beforeRouteUpdate} but can be used in any\n * component. The guard is removed when the component is unmounted.\n *\n * @param updateGuard - {@link NavigationGuard}\n */\nexport function onBeforeRouteUpdate(updateGuard: NavigationGuard) {\n  if (__DEV__ && !getCurrentInstance()) {\n    warn(\n      'getCurrentInstance() returned null. onBeforeRouteUpdate() must be called at the top of a setup function'\n    )\n    return\n  }\n\n  const activeRecord: RouteRecordNormalized | undefined = inject(\n    matchedRouteKey,\n    // to avoid warning\n    {} as any\n  ).value\n\n  if (!activeRecord) {\n    __DEV__ &&\n      warn(\n        'No active route record was found when calling `onBeforeRouteUpdate()`. Make sure you call this function inside a component child of <router-view>. Maybe you called it inside of App.vue?'\n      )\n    return\n  }\n\n  registerGuard(activeRecord, 'updateGuards', updateGuard)\n}\n\nexport function guardToPromiseFn(\n  guard: NavigationGuard,\n  to: RouteLocationNormalized,\n  from: RouteLocationNormalizedLoaded\n): () => Promise<void>\nexport function guardToPromiseFn(\n  guard: NavigationGuard,\n  to: RouteLocationNormalized,\n  from: RouteLocationNormalizedLoaded,\n  record: RouteRecordNormalized,\n  name: string\n): () => Promise<void>\nexport function guardToPromiseFn(\n  guard: NavigationGuard,\n  to: RouteLocationNormalized,\n  from: RouteLocationNormalizedLoaded,\n  record?: RouteRecordNormalized,\n  name?: string\n): () => Promise<void> {\n  // keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place\n  const enterCallbackArray =\n    record &&\n    // name is defined if record is because of the function overload\n    (record.enterCallbacks[name!] = record.enterCallbacks[name!] || [])\n\n  return () =>\n    new Promise((resolve, reject) => {\n      const next: NavigationGuardNext = (\n        valid?: boolean | RouteLocationRaw | NavigationGuardNextCallback | Error\n      ) => {\n        if (valid === false) {\n          reject(\n            createRouterError<NavigationFailure>(\n              ErrorTypes.NAVIGATION_ABORTED,\n              {\n                from,\n                to,\n              }\n            )\n          )\n        } else if (valid instanceof Error) {\n          reject(valid)\n        } else if (isRouteLocation(valid)) {\n          reject(\n            createRouterError<NavigationRedirectError>(\n              ErrorTypes.NAVIGATION_GUARD_REDIRECT,\n              {\n                from: to,\n                to: valid,\n              }\n            )\n          )\n        } else {\n          if (\n            enterCallbackArray &&\n            // since enterCallbackArray is truthy, both record and name also are\n            record!.enterCallbacks[name!] === enterCallbackArray &&\n            typeof valid === 'function'\n          ) {\n            enterCallbackArray.push(valid)\n          }\n          resolve()\n        }\n      }\n\n      // wrapping with Promise.resolve allows it to work with both async and sync guards\n      const guardReturn = guard.call(\n        record && record.instances[name!],\n        to,\n        from,\n        __DEV__ ? canOnlyBeCalledOnce(next, to, from) : next\n      )\n      let guardCall = Promise.resolve(guardReturn)\n\n      if (guard.length < 3) guardCall = guardCall.then(next)\n      if (__DEV__ && guard.length > 2) {\n        const message = `The \"next\" callback was never called inside of ${\n          guard.name ? '\"' + guard.name + '\"' : ''\n        }:\\n${guard.toString()}\\n. If you are returning a value instead of calling \"next\", make sure to remove the \"next\" parameter from your function.`\n        if (typeof guardReturn === 'object' && 'then' in guardReturn) {\n          guardCall = guardCall.then(resolvedValue => {\n            // @ts-expect-error: _called is added at canOnlyBeCalledOnce\n            if (!next._called) {\n              warn(message)\n              return Promise.reject(new Error('Invalid navigation guard'))\n            }\n            return resolvedValue\n          })\n        } else if (guardReturn !== undefined) {\n          // @ts-expect-error: _called is added at canOnlyBeCalledOnce\n          if (!next._called) {\n            warn(message)\n            reject(new Error('Invalid navigation guard'))\n            return\n          }\n        }\n      }\n      guardCall.catch(err => reject(err))\n    })\n}\n\nfunction canOnlyBeCalledOnce(\n  next: NavigationGuardNext,\n  to: RouteLocationNormalized,\n  from: RouteLocationNormalized\n): NavigationGuardNext {\n  let called = 0\n  return function () {\n    if (called++ === 1)\n      warn(\n        `The \"next\" callback was called more than once in one navigation guard when going from \"${from.fullPath}\" to \"${to.fullPath}\". It should be called exactly one time in each navigation guard. This will fail in production.`\n      )\n    // @ts-expect-error: we put it in the original one because it's easier to check\n    next._called = true\n    if (called === 1) next.apply(null, arguments as any)\n  }\n}\n\ntype GuardType = 'beforeRouteEnter' | 'beforeRouteUpdate' | 'beforeRouteLeave'\n\nexport function extractComponentsGuards(\n  matched: RouteRecordNormalized[],\n  guardType: GuardType,\n  to: RouteLocationNormalized,\n  from: RouteLocationNormalizedLoaded\n) {\n  const guards: Array<() => Promise<void>> = []\n\n  for (const record of matched) {\n    if (__DEV__ && !record.components && !record.children.length) {\n      warn(\n        `Record with path \"${record.path}\" is either missing a \"component(s)\"` +\n          ` or \"children\" property.`\n      )\n    }\n    for (const name in record.components) {\n      let rawComponent = record.components[name]\n      if (__DEV__) {\n        if (\n          !rawComponent ||\n          (typeof rawComponent !== 'object' &&\n            typeof rawComponent !== 'function')\n        ) {\n          warn(\n            `Component \"${name}\" in record with path \"${record.path}\" is not` +\n              ` a valid component. Received \"${String(rawComponent)}\".`\n          )\n          // throw to ensure we stop here but warn to ensure the message isn't\n          // missed by the user\n          throw new Error('Invalid route component')\n        } else if ('then' in rawComponent) {\n          // warn if user wrote import('/component.vue') instead of () =>\n          // import('./component.vue')\n          warn(\n            `Component \"${name}\" in record with path \"${record.path}\" is a ` +\n              `Promise instead of a function that returns a Promise. Did you ` +\n              `write \"import('./MyPage.vue')\" instead of ` +\n              `\"() => import('./MyPage.vue')\" ? This will break in ` +\n              `production if not fixed.`\n          )\n          const promise = rawComponent\n          rawComponent = () => promise\n        } else if (\n          (rawComponent as any).__asyncLoader &&\n          // warn only once per component\n          !(rawComponent as any).__warnedDefineAsync\n        ) {\n          ;(rawComponent as any).__warnedDefineAsync = true\n          warn(\n            `Component \"${name}\" in record with path \"${record.path}\" is defined ` +\n              `using \"defineAsyncComponent()\". ` +\n              `Write \"() => import('./MyPage.vue')\" instead of ` +\n              `\"defineAsyncComponent(() => import('./MyPage.vue'))\".`\n          )\n        }\n      }\n\n      // skip update and leave guards if the route component is not mounted\n      if (guardType !== 'beforeRouteEnter' && !record.instances[name]) continue\n\n      if (isRouteComponent(rawComponent)) {\n        // __vccOpts is added by vue-class-component and contain the regular options\n        const options: ComponentOptions =\n          (rawComponent as any).__vccOpts || rawComponent\n        const guard = options[guardType]\n        guard && guards.push(guardToPromiseFn(guard, to, from, record, name))\n      } else {\n        // start requesting the chunk already\n        let componentPromise: Promise<\n          RouteComponent | null | undefined | void\n        > = (rawComponent as Lazy<RouteComponent>)()\n\n        if (__DEV__ && !('catch' in componentPromise)) {\n          warn(\n            `Component \"${name}\" in record with path \"${record.path}\" is a function that does not return a Promise. If you were passing a functional component, make sure to add a \"displayName\" to the component. This will break in production if not fixed.`\n          )\n          componentPromise = Promise.resolve(componentPromise as RouteComponent)\n        }\n\n        guards.push(() =>\n          componentPromise.then(resolved => {\n            if (!resolved)\n              return Promise.reject(\n                new Error(\n                  `Couldn't resolve component \"${name}\" at \"${record.path}\"`\n                )\n              )\n            const resolvedComponent = isESModule(resolved)\n              ? resolved.default\n              : resolved\n            // replace the function with the resolved component\n            // cannot be null or undefined because we went into the for loop\n            record.components![name] = resolvedComponent\n            // __vccOpts is added by vue-class-component and contain the regular options\n            const options: ComponentOptions =\n              (resolvedComponent as any).__vccOpts || resolvedComponent\n            const guard = options[guardType]\n            return guard && guardToPromiseFn(guard, to, from, record, name)()\n          })\n        )\n      }\n    }\n  }\n\n  return guards\n}\n\n/**\n * Allows differentiating lazy components from functional components and vue-class-component\n * @internal\n *\n * @param component\n */\nexport function isRouteComponent(\n  component: RawRouteComponent\n): component is RouteComponent {\n  return (\n    typeof component === 'object' ||\n    'displayName' in component ||\n    'props' in component ||\n    '__vccOpts' in component\n  )\n}\n\n/**\n * Ensures a route is loaded, so it can be passed as o prop to `<RouterView>`.\n *\n * @param route - resolved route to load\n */\nexport function loadRouteLocation(\n  route: RouteLocationNormalized\n): Promise<RouteLocationNormalizedLoaded> {\n  return route.matched.every(record => record.redirect)\n    ? Promise.reject(new Error('Cannot load a route that redirects.'))\n    : Promise.all(\n        route.matched.map(\n          record =>\n            record.components &&\n            Promise.all(\n              Object.keys(record.components).reduce((promises, name) => {\n                const rawComponent = record.components![name]\n                if (\n                  typeof rawComponent === 'function' &&\n                  !('displayName' in rawComponent)\n                ) {\n                  promises.push(\n                    (rawComponent as Lazy<RouteComponent>)().then(resolved => {\n                      if (!resolved)\n                        return Promise.reject(\n                          new Error(\n                            `Couldn't resolve component \"${name}\" at \"${record.path}\". Ensure you passed a function that returns a promise.`\n                          )\n                        )\n                      const resolvedComponent = isESModule(resolved)\n                        ? resolved.default\n                        : resolved\n                      // replace the function with the resolved component\n                      // cannot be null or undefined because we went into the for loop\n                      record.components![name] = resolvedComponent\n                      return\n                    })\n                  )\n                }\n                return promises\n              }, [] as Array<Promise<RouteComponent | null | undefined>>)\n            )\n        )\n      ).then(() => route as RouteLocationNormalizedLoaded)\n}\n","import {\n  defineComponent,\n  h,\n  PropType,\n  inject,\n  computed,\n  reactive,\n  unref,\n  VNode,\n  UnwrapRef,\n  VNodeProps,\n  AllowedComponentProps,\n  ComponentCustomProps,\n  getCurrentInstance,\n  watchEffect,\n  // this is a workaround for https://github.com/microsoft/rushstack/issues/1050\n  // this file is meant to be prepended to the generated dist/src/RouterLink.d.ts\n  // @ts-ignore\n  ComputedRef,\n  // @ts-ignore\n  DefineComponent,\n  // @ts-ignore\n  RendererElement,\n  // @ts-ignore\n  RendererNode,\n  // @ts-ignore\n  ComponentOptionsMixin,\n} from 'vue'\nimport {\n  RouteLocationRaw,\n  VueUseOptions,\n  RouteLocation,\n  RouteLocationNormalized,\n} from './types'\nimport { isSameRouteLocationParams, isSameRouteRecord } from './location'\nimport { routerKey, routeLocationKey } from './injectionSymbols'\nimport { RouteRecord } from './matcher/types'\nimport { NavigationFailure } from './errors'\nimport { isArray, isBrowser, noop } from './utils'\n\nexport interface RouterLinkOptions {\n  /**\n   * Route Location the link should navigate to when clicked on.\n   */\n  to: RouteLocationRaw\n  /**\n   * Calls `router.replace` instead of `router.push`.\n   */\n  replace?: boolean\n  // TODO: refactor using extra options allowed in router.push. Needs RFC\n}\n\nexport interface RouterLinkProps extends RouterLinkOptions {\n  /**\n   * Whether RouterLink should not wrap its content in an `a` tag. Useful when\n   * using `v-slot` to create a custom RouterLink\n   */\n  custom?: boolean\n  /**\n   * Class to apply when the link is active\n   */\n  activeClass?: string\n  /**\n   * Class to apply when the link is exact active\n   */\n  exactActiveClass?: string\n  /**\n   * Value passed to the attribute `aria-current` when the link is exact active.\n   *\n   * @defaultValue `'page'`\n   */\n  ariaCurrentValue?:\n    | 'page'\n    | 'step'\n    | 'location'\n    | 'date'\n    | 'time'\n    | 'true'\n    | 'false'\n}\n\nexport interface UseLinkDevtoolsContext {\n  route: RouteLocationNormalized & { href: string }\n  isActive: boolean\n  isExactActive: boolean\n}\n\nexport type UseLinkOptions = VueUseOptions<RouterLinkOptions>\n\n// TODO: we could allow currentRoute as a prop to expose `isActive` and\n// `isExactActive` behavior should go through an RFC\nexport function useLink(props: UseLinkOptions) {\n  const router = inject(routerKey)!\n  const currentRoute = inject(routeLocationKey)!\n\n  const route = computed(() => router.resolve(unref(props.to)))\n\n  const activeRecordIndex = computed<number>(() => {\n    const { matched } = route.value\n    const { length } = matched\n    const routeMatched: RouteRecord | undefined = matched[length - 1]\n    const currentMatched = currentRoute.matched\n    if (!routeMatched || !currentMatched.length) return -1\n    const index = currentMatched.findIndex(\n      isSameRouteRecord.bind(null, routeMatched)\n    )\n    if (index > -1) return index\n    // possible parent record\n    const parentRecordPath = getOriginalPath(\n      matched[length - 2] as RouteRecord | undefined\n    )\n    return (\n      // we are dealing with nested routes\n      length > 1 &&\n        // if the parent and matched route have the same path, this link is\n        // referring to the empty child. Or we currently are on a different\n        // child of the same parent\n        getOriginalPath(routeMatched) === parentRecordPath &&\n        // avoid comparing the child with its parent\n        currentMatched[currentMatched.length - 1].path !== parentRecordPath\n        ? currentMatched.findIndex(\n            isSameRouteRecord.bind(null, matched[length - 2])\n          )\n        : index\n    )\n  })\n\n  const isActive = computed<boolean>(\n    () =>\n      activeRecordIndex.value > -1 &&\n      includesParams(currentRoute.params, route.value.params)\n  )\n  const isExactActive = computed<boolean>(\n    () =>\n      activeRecordIndex.value > -1 &&\n      activeRecordIndex.value === currentRoute.matched.length - 1 &&\n      isSameRouteLocationParams(currentRoute.params, route.value.params)\n  )\n\n  function navigate(\n    e: MouseEvent = {} as MouseEvent\n  ): Promise<void | NavigationFailure> {\n    if (guardEvent(e)) {\n      return router[unref(props.replace) ? 'replace' : 'push'](\n        unref(props.to)\n        // avoid uncaught errors are they are logged anyway\n      ).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  // devtools only\n  if ((__DEV__ || __FEATURE_PROD_DEVTOOLS__) && isBrowser) {\n    const instance = getCurrentInstance()\n    if (instance) {\n      const linkContextDevtools: UseLinkDevtoolsContext = {\n        route: route.value,\n        isActive: isActive.value,\n        isExactActive: isExactActive.value,\n      }\n\n      // @ts-expect-error: this is internal\n      instance.__vrl_devtools = instance.__vrl_devtools || []\n      // @ts-expect-error: this is internal\n      instance.__vrl_devtools.push(linkContextDevtools)\n      watchEffect(\n        () => {\n          linkContextDevtools.route = route.value\n          linkContextDevtools.isActive = isActive.value\n          linkContextDevtools.isExactActive = isExactActive.value\n        },\n        { flush: 'post' }\n      )\n    }\n  }\n\n  /**\n   * NOTE: update {@link _RouterLinkI}'s `$slots` type when updating this\n   */\n  return {\n    route,\n    href: computed(() => route.value.href),\n    isActive,\n    isExactActive,\n    navigate,\n  }\n}\n\nexport const RouterLinkImpl = /*#__PURE__*/ defineComponent({\n  name: 'RouterLink',\n  compatConfig: { MODE: 3 },\n  props: {\n    to: {\n      type: [String, Object] as PropType<RouteLocationRaw>,\n      required: true,\n    },\n    replace: Boolean,\n    activeClass: String,\n    // inactiveClass: String,\n    exactActiveClass: String,\n    custom: Boolean,\n    ariaCurrentValue: {\n      type: String as PropType<RouterLinkProps['ariaCurrentValue']>,\n      default: 'page',\n    },\n  },\n\n  useLink,\n\n  setup(props, { slots }) {\n    const link = reactive(useLink(props))\n    const { options } = inject(routerKey)!\n\n    const elClass = computed(() => ({\n      [getLinkClass(\n        props.activeClass,\n        options.linkActiveClass,\n        'router-link-active'\n      )]: link.isActive,\n      // [getLinkClass(\n      //   props.inactiveClass,\n      //   options.linkInactiveClass,\n      //   'router-link-inactive'\n      // )]: !link.isExactActive,\n      [getLinkClass(\n        props.exactActiveClass,\n        options.linkExactActiveClass,\n        'router-link-exact-active'\n      )]: link.isExactActive,\n    }))\n\n    return () => {\n      const children = slots.default && slots.default(link)\n      return props.custom\n        ? children\n        : h(\n            'a',\n            {\n              'aria-current': link.isExactActive\n                ? props.ariaCurrentValue\n                : null,\n              href: link.href,\n              // this would override user added attrs but Vue will still add\n              // the listener, so we end up triggering both\n              onClick: link.navigate,\n              class: elClass.value,\n            },\n            children\n          )\n    }\n  },\n})\n\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\n * Component to render a link that triggers a navigation on click.\n */\nexport const RouterLink: _RouterLinkI = RouterLinkImpl as any\n\n/**\n * Typed version of the `RouterLink` component. Its generic defaults to the typed router, so it can be inferred\n * automatically for JSX.\n *\n * @internal\n */\nexport interface _RouterLinkI {\n  new (): {\n    $props: AllowedComponentProps &\n      ComponentCustomProps &\n      VNodeProps &\n      RouterLinkProps\n\n    $slots: {\n      default?: ({\n        route,\n        href,\n        isActive,\n        isExactActive,\n        navigate,\n      }: UnwrapRef<ReturnType<typeof useLink>>) => VNode[]\n    }\n  }\n\n  /**\n   * Access to `useLink()` without depending on using vue-router\n   *\n   * @internal\n   */\n  useLink: typeof useLink\n}\n\nfunction guardEvent(e: MouseEvent) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) return\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) return\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) return\n  // don't redirect if `target=\"_blank\"`\n  // @ts-expect-error getAttribute does exist\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    // @ts-expect-error getAttribute exists\n    const target = e.currentTarget.getAttribute('target')\n    if (/\\b_blank\\b/i.test(target)) return\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) e.preventDefault()\n\n  return true\n}\n\nfunction includesParams(\n  outer: RouteLocation['params'],\n  inner: RouteLocation['params']\n): boolean {\n  for (const key in inner) {\n    const innerValue = inner[key]\n    const outerValue = outer[key]\n    if (typeof innerValue === 'string') {\n      if (innerValue !== outerValue) return false\n    } else {\n      if (\n        !isArray(outerValue) ||\n        outerValue.length !== innerValue.length ||\n        innerValue.some((value, i) => value !== outerValue[i])\n      )\n        return false\n    }\n  }\n\n  return true\n}\n\n/**\n * Get the original path value of a record by following its aliasOf\n * @param record\n */\nfunction getOriginalPath(record: RouteRecord | undefined): string {\n  return record ? (record.aliasOf ? record.aliasOf.path : record.path) : ''\n}\n\n/**\n * Utility class to get the active class based on defaults.\n * @param propClass\n * @param globalClass\n * @param defaultClass\n */\nconst getLinkClass = (\n  propClass: string | undefined,\n  globalClass: string | undefined,\n  defaultClass: string\n): string =>\n  propClass != null\n    ? propClass\n    : globalClass != null\n    ? globalClass\n    : defaultClass\n","import {\n  h,\n  inject,\n  provide,\n  defineComponent,\n  PropType,\n  ref,\n  unref,\n  ComponentPublicInstance,\n  VNodeProps,\n  getCurrentInstance,\n  computed,\n  AllowedComponentProps,\n  ComponentCustomProps,\n  watch,\n  Slot,\n  VNode,\n  Component,\n} from 'vue'\nimport {\n  RouteLocationNormalized,\n  RouteLocationNormalizedLoaded,\n  RouteLocationMatched,\n} from './types'\nimport {\n  matchedRouteKey,\n  viewDepthKey,\n  routerViewLocationKey,\n} from './injectionSymbols'\nimport { assign, isArray, isBrowser } from './utils'\nimport { warn } from './warning'\nimport { isSameRouteRecord } from './location'\n\nexport interface RouterViewProps {\n  name?: string\n  // allow looser type for user facing api\n  route?: RouteLocationNormalized\n}\n\nexport interface RouterViewDevtoolsContext\n  extends Pick<RouteLocationMatched, 'path' | 'name' | 'meta'> {\n  depth: number\n}\n\nexport const RouterViewImpl = /*#__PURE__*/ defineComponent({\n  name: 'RouterView',\n  // #674 we manually inherit them\n  inheritAttrs: false,\n  props: {\n    name: {\n      type: String as PropType<string>,\n      default: 'default',\n    },\n    route: Object as PropType<RouteLocationNormalizedLoaded>,\n  },\n\n  // Better compat for @vue/compat users\n  // https://github.com/vuejs/router/issues/1315\n  compatConfig: { MODE: 3 },\n\n  setup(props, { attrs, slots }) {\n    __DEV__ && warnDeprecatedUsage()\n\n    const injectedRoute = inject(routerViewLocationKey)!\n    const routeToDisplay = computed<RouteLocationNormalizedLoaded>(\n      () => props.route || injectedRoute.value\n    )\n    const injectedDepth = inject(viewDepthKey, 0)\n    // The depth changes based on empty components option, which allows passthrough routes e.g. routes with children\n    // that are used to reuse the `path` property\n    const depth = computed<number>(() => {\n      let initialDepth = unref(injectedDepth)\n      const { matched } = routeToDisplay.value\n      let matchedRoute: RouteLocationMatched | undefined\n      while (\n        (matchedRoute = matched[initialDepth]) &&\n        !matchedRoute.components\n      ) {\n        initialDepth++\n      }\n      return initialDepth\n    })\n    const matchedRouteRef = computed<RouteLocationMatched | undefined>(\n      () => routeToDisplay.value.matched[depth.value]\n    )\n\n    provide(\n      viewDepthKey,\n      computed(() => depth.value + 1)\n    )\n    provide(matchedRouteKey, matchedRouteRef)\n    provide(routerViewLocationKey, routeToDisplay)\n\n    const viewRef = ref<ComponentPublicInstance>()\n\n    // watch at the same time the component instance, the route record we are\n    // rendering, and the name\n    watch(\n      () => [viewRef.value, matchedRouteRef.value, props.name] as const,\n      ([instance, to, name], [oldInstance, from, oldName]) => {\n        // copy reused instances\n        if (to) {\n          // this will update the instance for new instances as well as reused\n          // instances when navigating to a new route\n          to.instances[name] = instance\n          // the component instance is reused for a different route or name, so\n          // we copy any saved update or leave guards. With async setup, the\n          // mounting component will mount before the matchedRoute changes,\n          // making instance === oldInstance, so we check if guards have been\n          // added before. This works because we remove guards when\n          // unmounting/deactivating components\n          if (from && from !== to && instance && instance === oldInstance) {\n            if (!to.leaveGuards.size) {\n              to.leaveGuards = from.leaveGuards\n            }\n            if (!to.updateGuards.size) {\n              to.updateGuards = from.updateGuards\n            }\n          }\n        }\n\n        // trigger beforeRouteEnter next callbacks\n        if (\n          instance &&\n          to &&\n          // if there is no instance but to and from are the same this might be\n          // the first visit\n          (!from || !isSameRouteRecord(to, from) || !oldInstance)\n        ) {\n          ;(to.enterCallbacks[name] || []).forEach(callback =>\n            callback(instance)\n          )\n        }\n      },\n      { flush: 'post' }\n    )\n\n    return () => {\n      const route = routeToDisplay.value\n      // we need the value at the time we render because when we unmount, we\n      // navigated to a different location so the value is different\n      const currentName = props.name\n      const matchedRoute = matchedRouteRef.value\n      const ViewComponent =\n        matchedRoute && matchedRoute.components![currentName]\n\n      if (!ViewComponent) {\n        return normalizeSlot(slots.default, { Component: ViewComponent, route })\n      }\n\n      // props from route configuration\n      const routePropsOption = matchedRoute.props[currentName]\n      const routeProps = routePropsOption\n        ? routePropsOption === true\n          ? route.params\n          : typeof routePropsOption === 'function'\n          ? routePropsOption(route)\n          : routePropsOption\n        : null\n\n      const onVnodeUnmounted: VNodeProps['onVnodeUnmounted'] = vnode => {\n        // remove the instance reference to prevent leak\n        if (vnode.component!.isUnmounted) {\n          matchedRoute.instances[currentName] = null\n        }\n      }\n\n      const component = h(\n        ViewComponent,\n        assign({}, routeProps, attrs, {\n          onVnodeUnmounted,\n          ref: viewRef,\n        })\n      )\n\n      if (\n        (__DEV__ || __FEATURE_PROD_DEVTOOLS__) &&\n        isBrowser &&\n        component.ref\n      ) {\n        // TODO: can display if it's an alias, its props\n        const info: RouterViewDevtoolsContext = {\n          depth: depth.value,\n          name: matchedRoute.name,\n          path: matchedRoute.path,\n          meta: matchedRoute.meta,\n        }\n\n        const internalInstances = isArray(component.ref)\n          ? component.ref.map(r => r.i)\n          : [component.ref.i]\n\n        internalInstances.forEach(instance => {\n          // @ts-expect-error\n          instance.__vrv_devtools = info\n        })\n      }\n\n      return (\n        // pass the vnode to the slot as a prop.\n        // h and <component :is=\"...\"> both accept vnodes\n        normalizeSlot(slots.default, { Component: component, route }) ||\n        component\n      )\n    }\n  },\n})\n\nfunction normalizeSlot(slot: Slot | undefined, data: any) {\n  if (!slot) return null\n  const slotContent = slot(data)\n  return slotContent.length === 1 ? slotContent[0] : slotContent\n}\n\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\n * Component to display the current route the user is at.\n */\nexport const RouterView = RouterViewImpl as unknown as {\n  new (): {\n    $props: AllowedComponentProps &\n      ComponentCustomProps &\n      VNodeProps &\n      RouterViewProps\n\n    $slots: {\n      default?: ({\n        Component,\n        route,\n      }: {\n        Component: VNode\n        route: RouteLocationNormalizedLoaded\n      }) => VNode[]\n    }\n  }\n}\n\n// warn against deprecated usage with <transition> & <keep-alive>\n// due to functional component being no longer eager in Vue 3\nfunction warnDeprecatedUsage() {\n  const instance = getCurrentInstance()!\n  const parentName = instance.parent && instance.parent.type.name\n  const parentSubTreeType =\n    instance.parent && instance.parent.subTree && instance.parent.subTree.type\n  if (\n    parentName &&\n    (parentName === 'KeepAlive' || parentName.includes('Transition')) &&\n    typeof parentSubTreeType === 'object' &&\n    (parentSubTreeType as Component).name === 'RouterView'\n  ) {\n    const comp = parentName === 'KeepAlive' ? 'keep-alive' : 'transition'\n    warn(\n      `<router-view> can no longer be used directly inside <transition> or <keep-alive>.\\n` +\n        `Use slot props instead:\\n\\n` +\n        `<router-view v-slot=\"{ Component }\">\\n` +\n        `  <${comp}>\\n` +\n        `    <component :is=\"Component\" />\\n` +\n        `  </${comp}>\\n` +\n        `</router-view>`\n    )\n  }\n}\n","import {\n  RouterHistory,\n  NavigationCallback,\n  START,\n  HistoryState,\n  NavigationType,\n  NavigationDirection,\n  NavigationInformation,\n  normalizeBase,\n  createHref,\n  HistoryLocation,\n} from './common'\n\n/**\n * Creates an in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere.\n * It's up to the user to replace that location with the starter location by either calling `router.push` or `router.replace`.\n *\n * @param base - Base applied to all urls, defaults to '/'\n * @returns a history object that can be passed to the router constructor\n */\nexport function createMemoryHistory(base: string = ''): RouterHistory {\n  let listeners: NavigationCallback[] = []\n  let queue: HistoryLocation[] = [START]\n  let position: number = 0\n  base = normalizeBase(base)\n\n  function setLocation(location: HistoryLocation) {\n    position++\n    if (position !== queue.length) {\n      // we are in the middle, we remove everything from here in the queue\n      queue.splice(position)\n    }\n    queue.push(location)\n  }\n\n  function triggerListeners(\n    to: HistoryLocation,\n    from: HistoryLocation,\n    { direction, delta }: Pick<NavigationInformation, 'direction' | 'delta'>\n  ): void {\n    const info: NavigationInformation = {\n      direction,\n      delta,\n      type: NavigationType.pop,\n    }\n    for (const callback of listeners) {\n      callback(to, from, info)\n    }\n  }\n\n  const routerHistory: RouterHistory = {\n    // rewritten by Object.defineProperty\n    location: START,\n    // TODO: should be kept in queue\n    state: {},\n    base,\n    createHref: createHref.bind(null, base),\n\n    replace(to) {\n      // remove current entry and decrement position\n      queue.splice(position--, 1)\n      setLocation(to)\n    },\n\n    push(to, data?: HistoryState) {\n      setLocation(to)\n    },\n\n    listen(callback) {\n      listeners.push(callback)\n      return () => {\n        const index = listeners.indexOf(callback)\n        if (index > -1) listeners.splice(index, 1)\n      }\n    },\n    destroy() {\n      listeners = []\n      queue = [START]\n      position = 0\n    },\n\n    go(delta, shouldTrigger = true) {\n      const from = this.location\n      const direction: NavigationDirection =\n        // we are considering delta === 0 going forward, but in abstract mode\n        // using 0 for the delta doesn't make sense like it does in html5 where\n        // it reloads the page\n        delta < 0 ? NavigationDirection.back : NavigationDirection.forward\n      position = Math.max(0, Math.min(position + delta, queue.length - 1))\n      if (shouldTrigger) {\n        triggerListeners(this.location, from, {\n          direction,\n          delta,\n        })\n      }\n    },\n  }\n\n  Object.defineProperty(routerHistory, 'location', {\n    enumerable: true,\n    get: () => queue[position],\n  })\n\n  if (__TEST__) {\n    // @ts-expect-error: only for tests\n    routerHistory.changeURL = function (url: string) {\n      const from = this.location\n      queue.splice(position++ + 1, queue.length, url)\n      triggerListeners(this.location, from, {\n        direction: NavigationDirection.unknown,\n        delta: 0,\n      })\n    }\n  }\n\n  return routerHistory\n}\n","import {\n  RouteLocationNormalized,\n  RouteRecordRaw,\n  RouteLocationRaw,\n  NavigationHookAfter,\n  START_LOCATION_NORMALIZED,\n  Lazy,\n  RouteLocationNormalizedLoaded,\n  RouteLocation,\n  RouteRecordName,\n  isRouteName,\n  NavigationGuardWithThis,\n  RouteLocationOptions,\n  MatcherLocationRaw,\n  RouteParams,\n} from './types'\nimport { RouterHistory, HistoryState, NavigationType } from './history/common'\nimport {\n  ScrollPosition,\n  getSavedScrollPosition,\n  getScrollKey,\n  saveScrollPosition,\n  computeScrollPosition,\n  scrollToPosition,\n  _ScrollPositionNormalized,\n} from './scrollBehavior'\nimport { createRouterMatcher, PathParserOptions } from './matcher'\nimport {\n  createRouterError,\n  ErrorTypes,\n  NavigationFailure,\n  NavigationRedirectError,\n  isNavigationFailure,\n} from './errors'\nimport { applyToParams, isBrowser, assign, noop, isArray } from './utils'\nimport { useCallbacks } from './utils/callbacks'\nimport { encodeParam, decode, encodeHash } from './encoding'\nimport {\n  normalizeQuery,\n  parseQuery as originalParseQuery,\n  stringifyQuery as originalStringifyQuery,\n  LocationQuery,\n} from './query'\nimport { shallowRef, Ref, nextTick, App, unref, shallowReactive } from 'vue'\nimport { RouteRecord, RouteRecordNormalized } from './matcher/types'\nimport {\n  parseURL,\n  stringifyURL,\n  isSameRouteLocation,\n  isSameRouteRecord,\n} from './location'\nimport { extractComponentsGuards, guardToPromiseFn } from './navigationGuards'\nimport { warn } from './warning'\nimport { RouterLink } from './RouterLink'\nimport { RouterView } from './RouterView'\nimport {\n  routeLocationKey,\n  routerKey,\n  routerViewLocationKey,\n} from './injectionSymbols'\nimport { addDevtools } from './devtools'\n\n/**\n * Internal type to define an ErrorHandler\n *\n * @param error - error thrown\n * @param to - location we were navigating to when the error happened\n * @param from - location we were navigating from when the error happened\n * @internal\n */\nexport interface _ErrorListener {\n  (\n    error: any,\n    to: RouteLocationNormalized,\n    from: RouteLocationNormalizedLoaded\n  ): any\n}\n// resolve, reject arguments of Promise constructor\ntype OnReadyCallback = [() => void, (reason?: any) => void]\n\ntype Awaitable<T> = T | Promise<T>\n\n/**\n * Type of the `scrollBehavior` option that can be passed to `createRouter`.\n */\nexport interface RouterScrollBehavior {\n  /**\n   * @param to - Route location where we are navigating to\n   * @param from - Route location where we are navigating from\n   * @param savedPosition - saved position if it exists, `null` otherwise\n   */\n  (\n    to: RouteLocationNormalized,\n    from: RouteLocationNormalizedLoaded,\n    savedPosition: _ScrollPositionNormalized | null\n  ): Awaitable<ScrollPosition | false | void>\n}\n\n/**\n * Options to initialize a {@link Router} instance.\n */\nexport interface RouterOptions extends PathParserOptions {\n  /**\n   * History implementation used by the router. Most web applications should use\n   * `createWebHistory` but it requires the server to be properly configured.\n   * You can also use a _hash_ based history with `createWebHashHistory` that\n   * does not require any configuration on the server but isn't handled at all\n   * by search engines and does poorly on SEO.\n   *\n   * @example\n   * ```js\n   * createRouter({\n   *   history: createWebHistory(),\n   *   // other options...\n   * })\n   * ```\n   */\n  history: RouterHistory\n  /**\n   * Initial list of routes that should be added to the router.\n   */\n  routes: Readonly<RouteRecordRaw[]>\n  /**\n   * Function to control scrolling when navigating between pages. Can return a\n   * Promise to delay scrolling. Check {@link ScrollBehavior}.\n   *\n   * @example\n   * ```js\n   * function scrollBehavior(to, from, savedPosition) {\n   *   // `to` and `from` are both route locations\n   *   // `savedPosition` can be null if there isn't one\n   * }\n   * ```\n   */\n  scrollBehavior?: RouterScrollBehavior\n  /**\n   * Custom implementation to parse a query. See its counterpart,\n   * {@link RouterOptions.stringifyQuery}.\n   *\n   * @example\n   * Let's say you want to use the [qs package](https://github.com/ljharb/qs)\n   * to parse queries, you can provide both `parseQuery` and `stringifyQuery`:\n   * ```js\n   * import qs from 'qs'\n   *\n   * createRouter({\n   *   // other options...\n   *   parseQuery: qs.parse,\n   *   stringifyQuery: qs.stringify,\n   * })\n   * ```\n   */\n  parseQuery?: typeof originalParseQuery\n  /**\n   * Custom implementation to stringify a query object. Should not prepend a leading `?`.\n   * {@link RouterOptions.parseQuery | parseQuery} counterpart to handle query parsing.\n   */\n  stringifyQuery?: typeof originalStringifyQuery\n  /**\n   * Default class applied to active {@link RouterLink}. If none is provided,\n   * `router-link-active` will be applied.\n   */\n  linkActiveClass?: string\n  /**\n   * Default class applied to exact active {@link RouterLink}. If none is provided,\n   * `router-link-exact-active` will be applied.\n   */\n  linkExactActiveClass?: string\n  /**\n   * Default class applied to non-active {@link RouterLink}. If none is provided,\n   * `router-link-inactive` will be applied.\n   */\n  // linkInactiveClass?: string\n}\n\n/**\n * Router instance.\n */\nexport interface Router {\n  /**\n   * @internal\n   */\n  // readonly history: RouterHistory\n  /**\n   * Current {@link RouteLocationNormalized}\n   */\n  readonly currentRoute: Ref<RouteLocationNormalizedLoaded>\n  /**\n   * Original options object passed to create the Router\n   */\n  readonly options: RouterOptions\n\n  /**\n   * Allows turning off the listening of history events. This is a low level api for micro-frontends.\n   */\n  listening: boolean\n\n  /**\n   * Add a new {@link RouteRecordRaw | route record} as the child of an existing route.\n   *\n   * @param parentName - Parent Route Record where `route` should be appended at\n   * @param route - Route Record to add\n   */\n  addRoute(parentName: RouteRecordName, route: RouteRecordRaw): () => void\n  /**\n   * Add a new {@link RouteRecordRaw | route record} to the router.\n   *\n   * @param route - Route Record to add\n   */\n  addRoute(route: RouteRecordRaw): () => void\n  /**\n   * Remove an existing route by its name.\n   *\n   * @param name - Name of the route to remove\n   */\n  removeRoute(name: RouteRecordName): void\n  /**\n   * Checks if a route with a given name exists\n   *\n   * @param name - Name of the route to check\n   */\n  hasRoute(name: RouteRecordName): boolean\n  /**\n   * Get a full list of all the {@link RouteRecord | route records}.\n   */\n  getRoutes(): RouteRecord[]\n\n  /**\n   * Returns the {@link RouteLocation | normalized version} of a\n   * {@link RouteLocationRaw | route location}. Also includes an `href` property\n   * that includes any existing `base`. By default, the `currentLocation` used is\n   * `router.currentRoute` and should only be overridden in advanced use cases.\n   *\n   * @param to - Raw route location to resolve\n   * @param currentLocation - Optional current location to resolve against\n   */\n  resolve(\n    to: RouteLocationRaw,\n    currentLocation?: RouteLocationNormalizedLoaded\n  ): RouteLocation & { href: string }\n\n  /**\n   * Programmatically navigate to a new URL by pushing an entry in the history\n   * stack.\n   *\n   * @param to - Route location to navigate to\n   */\n  push(to: RouteLocationRaw): Promise<NavigationFailure | void | undefined>\n\n  /**\n   * Programmatically navigate to a new URL by replacing the current entry in\n   * the history stack.\n   *\n   * @param to - Route location to navigate to\n   */\n  replace(to: RouteLocationRaw): Promise<NavigationFailure | void | undefined>\n\n  /**\n   * Go back in history if possible by calling `history.back()`. Equivalent to\n   * `router.go(-1)`.\n   */\n  back(): ReturnType<Router['go']>\n  /**\n   * Go forward in history if possible by calling `history.forward()`.\n   * Equivalent to `router.go(1)`.\n   */\n  forward(): ReturnType<Router['go']>\n  /**\n   * Allows you to move forward or backward through the history. Calls\n   * `history.go()`.\n   *\n   * @param delta - The position in the history to which you want to move,\n   * relative to the current page\n   */\n  go(delta: number): void\n\n  /**\n   * Add a navigation guard that executes before any navigation. Returns a\n   * function that removes the registered guard.\n   *\n   * @param guard - navigation guard to add\n   */\n  beforeEach(guard: NavigationGuardWithThis<undefined>): () => void\n  /**\n   * Add a navigation guard that executes before navigation is about to be\n   * resolved. At this state all component have been fetched and other\n   * navigation guards have been successful. Returns a function that removes the\n   * registered guard.\n   *\n   * @param guard - navigation guard to add\n   * @returns a function that removes the registered guard\n   *\n   * @example\n   * ```js\n   * router.beforeResolve(to => {\n   *   if (to.meta.requiresAuth && !isAuthenticated) return false\n   * })\n   * ```\n   *\n   */\n  beforeResolve(guard: NavigationGuardWithThis<undefined>): () => void\n\n  /**\n   * Add a navigation hook that is executed after every navigation. Returns a\n   * function that removes the registered hook.\n   *\n   * @param guard - navigation hook to add\n   * @returns a function that removes the registered hook\n   *\n   * @example\n   * ```js\n   * router.afterEach((to, from, failure) => {\n   *   if (isNavigationFailure(failure)) {\n   *     console.log('failed navigation', failure)\n   *   }\n   * })\n   * ```\n   */\n  afterEach(guard: NavigationHookAfter): () => void\n\n  /**\n   * Adds an error handler that is called every time a non caught error happens\n   * during navigation. This includes errors thrown synchronously and\n   * asynchronously, errors returned or passed to `next` in any navigation\n   * guard, and errors occurred when trying to resolve an async component that\n   * is required to render a route.\n   *\n   * @param handler - error handler to register\n   */\n  onError(handler: _ErrorListener): () => void\n  /**\n   * Returns a Promise that resolves when the router has completed the initial\n   * navigation, which means it has resolved all async enter hooks and async\n   * components that are associated with the initial route. If the initial\n   * navigation already happened, the promise resolves immediately.\n   *\n   * This is useful in server-side rendering to ensure consistent output on both\n   * the server and the client. Note that on server side, you need to manually\n   * push the initial location while on client side, the router automatically\n   * picks it up from the URL.\n   */\n  isReady(): Promise<void>\n\n  /**\n   * Called automatically by `app.use(router)`. Should not be called manually by\n   * the user. This will trigger the initial navigation when on client side.\n   *\n   * @internal\n   * @param app - Application that uses the router\n   */\n  install(app: App): void\n}\n\n/**\n * Creates a Router instance that can be used by a Vue app.\n *\n * @param options - {@link RouterOptions}\n */\nexport function createRouter(options: RouterOptions): Router {\n  const matcher = createRouterMatcher(options.routes, options)\n  const parseQuery = options.parseQuery || originalParseQuery\n  const stringifyQuery = options.stringifyQuery || originalStringifyQuery\n  const routerHistory = options.history\n  if (__DEV__ && !routerHistory)\n    throw new Error(\n      'Provide the \"history\" option when calling \"createRouter()\":' +\n        ' https://next.router.vuejs.org/api/#history.'\n    )\n\n  const beforeGuards = useCallbacks<NavigationGuardWithThis<undefined>>()\n  const beforeResolveGuards = useCallbacks<NavigationGuardWithThis<undefined>>()\n  const afterGuards = useCallbacks<NavigationHookAfter>()\n  const currentRoute = shallowRef<RouteLocationNormalizedLoaded>(\n    START_LOCATION_NORMALIZED\n  )\n  let pendingLocation: RouteLocation = START_LOCATION_NORMALIZED\n\n  // leave the scrollRestoration if no scrollBehavior is provided\n  if (isBrowser && options.scrollBehavior && 'scrollRestoration' in history) {\n    history.scrollRestoration = 'manual'\n  }\n\n  const normalizeParams = applyToParams.bind(\n    null,\n    paramValue => '' + paramValue\n  )\n  const encodeParams = applyToParams.bind(null, encodeParam)\n  const decodeParams: (params: RouteParams | undefined) => RouteParams =\n    // @ts-expect-error: intentionally avoid the type check\n    applyToParams.bind(null, decode)\n\n  function addRoute(\n    parentOrRoute: RouteRecordName | RouteRecordRaw,\n    route?: RouteRecordRaw\n  ) {\n    let parent: Parameters<(typeof matcher)['addRoute']>[1] | undefined\n    let record: RouteRecordRaw\n    if (isRouteName(parentOrRoute)) {\n      parent = matcher.getRecordMatcher(parentOrRoute)\n      record = route!\n    } else {\n      record = parentOrRoute\n    }\n\n    return matcher.addRoute(record, parent)\n  }\n\n  function removeRoute(name: RouteRecordName) {\n    const recordMatcher = matcher.getRecordMatcher(name)\n    if (recordMatcher) {\n      matcher.removeRoute(recordMatcher)\n    } else if (__DEV__) {\n      warn(`Cannot remove non-existent route \"${String(name)}\"`)\n    }\n  }\n\n  function getRoutes() {\n    return matcher.getRoutes().map(routeMatcher => routeMatcher.record)\n  }\n\n  function hasRoute(name: RouteRecordName): boolean {\n    return !!matcher.getRecordMatcher(name)\n  }\n\n  function resolve(\n    rawLocation: Readonly<RouteLocationRaw>,\n    currentLocation?: RouteLocationNormalizedLoaded\n  ): RouteLocation & { href: string } {\n    // const objectLocation = routerLocationAsObject(rawLocation)\n    // we create a copy to modify it later\n    currentLocation = assign({}, currentLocation || currentRoute.value)\n    if (typeof rawLocation === 'string') {\n      const locationNormalized = parseURL(\n        parseQuery,\n        rawLocation,\n        currentLocation.path\n      )\n      const matchedRoute = matcher.resolve(\n        { path: locationNormalized.path },\n        currentLocation\n      )\n\n      const href = routerHistory.createHref(locationNormalized.fullPath)\n      if (__DEV__) {\n        if (href.startsWith('//'))\n          warn(\n            `Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`\n          )\n        else if (!matchedRoute.matched.length) {\n          warn(`No match found for location with path \"${rawLocation}\"`)\n        }\n      }\n\n      // locationNormalized is always a new object\n      return assign(locationNormalized, matchedRoute, {\n        params: decodeParams(matchedRoute.params),\n        hash: decode(locationNormalized.hash),\n        redirectedFrom: undefined,\n        href,\n      })\n    }\n\n    let matcherLocation: MatcherLocationRaw\n\n    // path could be relative in object as well\n    if ('path' in rawLocation) {\n      if (\n        __DEV__ &&\n        'params' in rawLocation &&\n        !('name' in rawLocation) &&\n        // @ts-expect-error: the type is never\n        Object.keys(rawLocation.params).length\n      ) {\n        warn(\n          `Path \"${rawLocation.path}\" was passed with params but they will be ignored. Use a named route alongside params instead.`\n        )\n      }\n      matcherLocation = assign({}, rawLocation, {\n        path: parseURL(parseQuery, rawLocation.path, currentLocation.path).path,\n      })\n    } else {\n      // remove any nullish param\n      const targetParams = assign({}, rawLocation.params)\n      for (const key in targetParams) {\n        if (targetParams[key] == null) {\n          delete targetParams[key]\n        }\n      }\n      // pass encoded values to the matcher, so it can produce encoded path and fullPath\n      matcherLocation = assign({}, rawLocation, {\n        params: encodeParams(targetParams),\n      })\n      // current location params are decoded, we need to encode them in case the\n      // matcher merges the params\n      currentLocation.params = encodeParams(currentLocation.params)\n    }\n\n    const matchedRoute = matcher.resolve(matcherLocation, currentLocation)\n    const hash = rawLocation.hash || ''\n\n    if (__DEV__ && hash && !hash.startsWith('#')) {\n      warn(\n        `A \\`hash\\` should always start with the character \"#\". Replace \"${hash}\" with \"#${hash}\".`\n      )\n    }\n\n    // the matcher might have merged current location params, so\n    // we need to run the decoding again\n    matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params))\n\n    const fullPath = stringifyURL(\n      stringifyQuery,\n      assign({}, rawLocation, {\n        hash: encodeHash(hash),\n        path: matchedRoute.path,\n      })\n    )\n\n    const href = routerHistory.createHref(fullPath)\n    if (__DEV__) {\n      if (href.startsWith('//')) {\n        warn(\n          `Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`\n        )\n      } else if (!matchedRoute.matched.length) {\n        warn(\n          `No match found for location with path \"${\n            'path' in rawLocation ? rawLocation.path : rawLocation\n          }\"`\n        )\n      }\n    }\n\n    return assign(\n      {\n        fullPath,\n        // keep the hash encoded so fullPath is effectively path + encodedQuery +\n        // hash\n        hash,\n        query:\n          // if the user is using a custom query lib like qs, we might have\n          // nested objects, so we keep the query as is, meaning it can contain\n          // numbers at `$route.query`, but at the point, the user will have to\n          // use their own type anyway.\n          // https://github.com/vuejs/router/issues/328#issuecomment-649481567\n          stringifyQuery === originalStringifyQuery\n            ? normalizeQuery(rawLocation.query)\n            : ((rawLocation.query || {}) as LocationQuery),\n      },\n      matchedRoute,\n      {\n        redirectedFrom: undefined,\n        href,\n      }\n    )\n  }\n\n  function locationAsObject(\n    to: RouteLocationRaw | RouteLocationNormalized\n  ): Exclude<RouteLocationRaw, string> | RouteLocationNormalized {\n    return typeof to === 'string'\n      ? parseURL(parseQuery, to, currentRoute.value.path)\n      : assign({}, to)\n  }\n\n  function checkCanceledNavigation(\n    to: RouteLocationNormalized,\n    from: RouteLocationNormalized\n  ): NavigationFailure | void {\n    if (pendingLocation !== to) {\n      return createRouterError<NavigationFailure>(\n        ErrorTypes.NAVIGATION_CANCELLED,\n        {\n          from,\n          to,\n        }\n      )\n    }\n  }\n\n  function push(to: RouteLocationRaw) {\n    return pushWithRedirect(to)\n  }\n\n  function replace(to: RouteLocationRaw) {\n    return push(assign(locationAsObject(to), { replace: true }))\n  }\n\n  function handleRedirectRecord(to: RouteLocation): RouteLocationRaw | void {\n    const lastMatched = to.matched[to.matched.length - 1]\n    if (lastMatched && lastMatched.redirect) {\n      const { redirect } = lastMatched\n      let newTargetLocation =\n        typeof redirect === 'function' ? redirect(to) : redirect\n\n      if (typeof newTargetLocation === 'string') {\n        newTargetLocation =\n          newTargetLocation.includes('?') || newTargetLocation.includes('#')\n            ? (newTargetLocation = locationAsObject(newTargetLocation))\n            : // force empty params\n              { path: newTargetLocation }\n        // @ts-expect-error: force empty params when a string is passed to let\n        // the router parse them again\n        newTargetLocation.params = {}\n      }\n\n      if (\n        __DEV__ &&\n        !('path' in newTargetLocation) &&\n        !('name' in newTargetLocation)\n      ) {\n        warn(\n          `Invalid redirect found:\\n${JSON.stringify(\n            newTargetLocation,\n            null,\n            2\n          )}\\n when navigating to \"${\n            to.fullPath\n          }\". A redirect must contain a name or path. This will break in production.`\n        )\n        throw new Error('Invalid redirect')\n      }\n\n      return assign(\n        {\n          query: to.query,\n          hash: to.hash,\n          // avoid transferring params if the redirect has a path\n          params: 'path' in newTargetLocation ? {} : to.params,\n        },\n        newTargetLocation\n      )\n    }\n  }\n\n  function pushWithRedirect(\n    to: RouteLocationRaw | RouteLocation,\n    redirectedFrom?: RouteLocation\n  ): Promise<NavigationFailure | void | undefined> {\n    const targetLocation: RouteLocation = (pendingLocation = resolve(to))\n    const from = currentRoute.value\n    const data: HistoryState | undefined = (to as RouteLocationOptions).state\n    const force: boolean | undefined = (to as RouteLocationOptions).force\n    // to could be a string where `replace` is a function\n    const replace = (to as RouteLocationOptions).replace === true\n\n    const shouldRedirect = handleRedirectRecord(targetLocation)\n\n    if (shouldRedirect)\n      return pushWithRedirect(\n        assign(locationAsObject(shouldRedirect), {\n          state:\n            typeof shouldRedirect === 'object'\n              ? assign({}, data, shouldRedirect.state)\n              : data,\n          force,\n          replace,\n        }),\n        // keep original redirectedFrom if it exists\n        redirectedFrom || targetLocation\n      )\n\n    // if it was a redirect we already called `pushWithRedirect` above\n    const toLocation = targetLocation as RouteLocationNormalized\n\n    toLocation.redirectedFrom = redirectedFrom\n    let failure: NavigationFailure | void | undefined\n\n    if (!force && isSameRouteLocation(stringifyQuery, from, targetLocation)) {\n      failure = createRouterError<NavigationFailure>(\n        ErrorTypes.NAVIGATION_DUPLICATED,\n        { to: toLocation, from }\n      )\n      // trigger scroll to allow scrolling to the same anchor\n      handleScroll(\n        from,\n        from,\n        // this is a push, the only way for it to be triggered from a\n        // history.listen is with a redirect, which makes it become a push\n        true,\n        // This cannot be the first navigation because the initial location\n        // cannot be manually navigated to\n        false\n      )\n    }\n\n    return (failure ? Promise.resolve(failure) : navigate(toLocation, from))\n      .catch((error: NavigationFailure | NavigationRedirectError) =>\n        isNavigationFailure(error)\n          ? // navigation redirects still mark the router as ready\n            isNavigationFailure(error, ErrorTypes.NAVIGATION_GUARD_REDIRECT)\n            ? error\n            : markAsReady(error) // also returns the error\n          : // reject any unknown error\n            triggerError(error, toLocation, from)\n      )\n      .then((failure: NavigationFailure | NavigationRedirectError | void) => {\n        if (failure) {\n          if (\n            isNavigationFailure(failure, ErrorTypes.NAVIGATION_GUARD_REDIRECT)\n          ) {\n            if (\n              __DEV__ &&\n              // we are redirecting to the same location we were already at\n              isSameRouteLocation(\n                stringifyQuery,\n                resolve(failure.to),\n                toLocation\n              ) &&\n              // and we have done it a couple of times\n              redirectedFrom &&\n              // @ts-expect-error: added only in dev\n              (redirectedFrom._count = redirectedFrom._count\n                ? // @ts-expect-error\n                  redirectedFrom._count + 1\n                : 1) > 30\n            ) {\n              warn(\n                `Detected a possibly infinite redirection in a navigation guard when going from \"${from.fullPath}\" to \"${toLocation.fullPath}\". Aborting to avoid a Stack Overflow.\\n Are you always returning a new location within a navigation guard? That would lead to this error. Only return when redirecting or aborting, that should fix this. This might break in production if not fixed.`\n              )\n              return Promise.reject(\n                new Error('Infinite redirect in navigation guard')\n              )\n            }\n\n            return pushWithRedirect(\n              // keep options\n              assign(\n                {\n                  // preserve an existing replacement but allow the redirect to override it\n                  replace,\n                },\n                locationAsObject(failure.to),\n                {\n                  state:\n                    typeof failure.to === 'object'\n                      ? assign({}, data, failure.to.state)\n                      : data,\n                  force,\n                }\n              ),\n              // preserve the original redirectedFrom if any\n              redirectedFrom || toLocation\n            )\n          }\n        } else {\n          // if we fail we don't finalize the navigation\n          failure = finalizeNavigation(\n            toLocation as RouteLocationNormalizedLoaded,\n            from,\n            true,\n            replace,\n            data\n          )\n        }\n        triggerAfterEach(\n          toLocation as RouteLocationNormalizedLoaded,\n          from,\n          failure\n        )\n        return failure\n      })\n  }\n\n  /**\n   * Helper to reject and skip all navigation guards if a new navigation happened\n   * @param to\n   * @param from\n   */\n  function checkCanceledNavigationAndReject(\n    to: RouteLocationNormalized,\n    from: RouteLocationNormalized\n  ): Promise<void> {\n    const error = checkCanceledNavigation(to, from)\n    return error ? Promise.reject(error) : Promise.resolve()\n  }\n\n  function runWithContext<T>(fn: () => T): T {\n    const app: App | undefined = installedApps.values().next().value\n    // support Vue < 3.3\n    return app && typeof app.runWithContext === 'function'\n      ? app.runWithContext(fn)\n      : fn()\n  }\n\n  // TODO: refactor the whole before guards by internally using router.beforeEach\n\n  function navigate(\n    to: RouteLocationNormalized,\n    from: RouteLocationNormalizedLoaded\n  ): Promise<any> {\n    let guards: Lazy<any>[]\n\n    const [leavingRecords, updatingRecords, enteringRecords] =\n      extractChangingRecords(to, from)\n\n    // all components here have been resolved once because we are leaving\n    guards = extractComponentsGuards(\n      leavingRecords.reverse(),\n      'beforeRouteLeave',\n      to,\n      from\n    )\n\n    // leavingRecords is already reversed\n    for (const record of leavingRecords) {\n      record.leaveGuards.forEach(guard => {\n        guards.push(guardToPromiseFn(guard, to, from))\n      })\n    }\n\n    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(\n      null,\n      to,\n      from\n    )\n\n    guards.push(canceledNavigationCheck)\n\n    // run the queue of per route beforeRouteLeave guards\n    return (\n      runGuardQueue(guards)\n        .then(() => {\n          // check global guards beforeEach\n          guards = []\n          for (const guard of beforeGuards.list()) {\n            guards.push(guardToPromiseFn(guard, to, from))\n          }\n          guards.push(canceledNavigationCheck)\n\n          return runGuardQueue(guards)\n        })\n        .then(() => {\n          // check in components beforeRouteUpdate\n          guards = extractComponentsGuards(\n            updatingRecords,\n            'beforeRouteUpdate',\n            to,\n            from\n          )\n\n          for (const record of updatingRecords) {\n            record.updateGuards.forEach(guard => {\n              guards.push(guardToPromiseFn(guard, to, from))\n            })\n          }\n          guards.push(canceledNavigationCheck)\n\n          // run the queue of per route beforeEnter guards\n          return runGuardQueue(guards)\n        })\n        .then(() => {\n          // check the route beforeEnter\n          guards = []\n          for (const record of enteringRecords) {\n            // do not trigger beforeEnter on reused views\n            if (record.beforeEnter) {\n              if (isArray(record.beforeEnter)) {\n                for (const beforeEnter of record.beforeEnter)\n                  guards.push(guardToPromiseFn(beforeEnter, to, from))\n              } else {\n                guards.push(guardToPromiseFn(record.beforeEnter, to, from))\n              }\n            }\n          }\n          guards.push(canceledNavigationCheck)\n\n          // run the queue of per route beforeEnter guards\n          return runGuardQueue(guards)\n        })\n        .then(() => {\n          // NOTE: at this point to.matched is normalized and does not contain any () => Promise<Component>\n\n          // clear existing enterCallbacks, these are added by extractComponentsGuards\n          to.matched.forEach(record => (record.enterCallbacks = {}))\n\n          // check in-component beforeRouteEnter\n          guards = extractComponentsGuards(\n            enteringRecords,\n            'beforeRouteEnter',\n            to,\n            from\n          )\n          guards.push(canceledNavigationCheck)\n\n          // run the queue of per route beforeEnter guards\n          return runGuardQueue(guards)\n        })\n        .then(() => {\n          // check global guards beforeResolve\n          guards = []\n          for (const guard of beforeResolveGuards.list()) {\n            guards.push(guardToPromiseFn(guard, to, from))\n          }\n          guards.push(canceledNavigationCheck)\n\n          return runGuardQueue(guards)\n        })\n        // catch any navigation canceled\n        .catch(err =>\n          isNavigationFailure(err, ErrorTypes.NAVIGATION_CANCELLED)\n            ? err\n            : Promise.reject(err)\n        )\n    )\n  }\n\n  function triggerAfterEach(\n    to: RouteLocationNormalizedLoaded,\n    from: RouteLocationNormalizedLoaded,\n    failure?: NavigationFailure | void\n  ): void {\n    // navigation is confirmed, call afterGuards\n    // TODO: wrap with error handlers\n    afterGuards\n      .list()\n      .forEach(guard => runWithContext(() => guard(to, from, failure)))\n  }\n\n  /**\n   * - Cleans up any navigation guards\n   * - Changes the url if necessary\n   * - Calls the scrollBehavior\n   */\n  function finalizeNavigation(\n    toLocation: RouteLocationNormalizedLoaded,\n    from: RouteLocationNormalizedLoaded,\n    isPush: boolean,\n    replace?: boolean,\n    data?: HistoryState\n  ): NavigationFailure | void {\n    // a more recent navigation took place\n    const error = checkCanceledNavigation(toLocation, from)\n    if (error) return error\n\n    // only consider as push if it's not the first navigation\n    const isFirstNavigation = from === START_LOCATION_NORMALIZED\n    const state: Partial<HistoryState> | null = !isBrowser ? {} : history.state\n\n    // change URL only if the user did a push/replace and if it's not the initial navigation because\n    // it's just reflecting the url\n    if (isPush) {\n      // on the initial navigation, we want to reuse the scroll position from\n      // history state if it exists\n      if (replace || isFirstNavigation)\n        routerHistory.replace(\n          toLocation.fullPath,\n          assign(\n            {\n              scroll: isFirstNavigation && state && state.scroll,\n            },\n            data\n          )\n        )\n      else routerHistory.push(toLocation.fullPath, data)\n    }\n\n    // accept current navigation\n    currentRoute.value = toLocation\n    handleScroll(toLocation, from, isPush, isFirstNavigation)\n\n    markAsReady()\n  }\n\n  let removeHistoryListener: undefined | null | (() => void)\n  // attach listener to history to trigger navigations\n  function setupListeners() {\n    // avoid setting up listeners twice due to an invalid first navigation\n    if (removeHistoryListener) return\n    removeHistoryListener = routerHistory.listen((to, _from, info) => {\n      if (!router.listening) return\n      // cannot be a redirect route because it was in history\n      const toLocation = resolve(to) as RouteLocationNormalized\n\n      // due to dynamic routing, and to hash history with manual navigation\n      // (manually changing the url or calling history.hash = '#/somewhere'),\n      // there could be a redirect record in history\n      const shouldRedirect = handleRedirectRecord(toLocation)\n      if (shouldRedirect) {\n        pushWithRedirect(\n          assign(shouldRedirect, { replace: true }),\n          toLocation\n        ).catch(noop)\n        return\n      }\n\n      pendingLocation = toLocation\n      const from = currentRoute.value\n\n      // TODO: should be moved to web history?\n      if (isBrowser) {\n        saveScrollPosition(\n          getScrollKey(from.fullPath, info.delta),\n          computeScrollPosition()\n        )\n      }\n\n      navigate(toLocation, from)\n        .catch((error: NavigationFailure | NavigationRedirectError) => {\n          if (\n            isNavigationFailure(\n              error,\n              ErrorTypes.NAVIGATION_ABORTED | ErrorTypes.NAVIGATION_CANCELLED\n            )\n          ) {\n            return error\n          }\n          if (\n            isNavigationFailure(error, ErrorTypes.NAVIGATION_GUARD_REDIRECT)\n          ) {\n            // Here we could call if (info.delta) routerHistory.go(-info.delta,\n            // false) but this is bug prone as we have no way to wait the\n            // navigation to be finished before calling pushWithRedirect. Using\n            // a setTimeout of 16ms seems to work but there is no guarantee for\n            // it to work on every browser. So instead we do not restore the\n            // history entry and trigger a new navigation as requested by the\n            // navigation guard.\n\n            // the error is already handled by router.push we just want to avoid\n            // logging the error\n            pushWithRedirect(\n              (error as NavigationRedirectError).to,\n              toLocation\n              // avoid an uncaught rejection, let push call triggerError\n            )\n              .then(failure => {\n                // manual change in hash history #916 ending up in the URL not\n                // changing, but it was changed by the manual url change, so we\n                // need to manually change it ourselves\n                if (\n                  isNavigationFailure(\n                    failure,\n                    ErrorTypes.NAVIGATION_ABORTED |\n                      ErrorTypes.NAVIGATION_DUPLICATED\n                  ) &&\n                  !info.delta &&\n                  info.type === NavigationType.pop\n                ) {\n                  routerHistory.go(-1, false)\n                }\n              })\n              .catch(noop)\n            // avoid the then branch\n            return Promise.reject()\n          }\n          // do not restore history on unknown direction\n          if (info.delta) {\n            routerHistory.go(-info.delta, false)\n          }\n          // unrecognized error, transfer to the global handler\n          return triggerError(error, toLocation, from)\n        })\n        .then((failure: NavigationFailure | void) => {\n          failure =\n            failure ||\n            finalizeNavigation(\n              // after navigation, all matched components are resolved\n              toLocation as RouteLocationNormalizedLoaded,\n              from,\n              false\n            )\n\n          // revert the navigation\n          if (failure) {\n            if (\n              info.delta &&\n              // a new navigation has been triggered, so we do not want to revert, that will change the current history\n              // entry while a different route is displayed\n              !isNavigationFailure(failure, ErrorTypes.NAVIGATION_CANCELLED)\n            ) {\n              routerHistory.go(-info.delta, false)\n            } else if (\n              info.type === NavigationType.pop &&\n              isNavigationFailure(\n                failure,\n                ErrorTypes.NAVIGATION_ABORTED | ErrorTypes.NAVIGATION_DUPLICATED\n              )\n            ) {\n              // manual change in hash history #916\n              // it's like a push but lacks the information of the direction\n              routerHistory.go(-1, false)\n            }\n          }\n\n          triggerAfterEach(\n            toLocation as RouteLocationNormalizedLoaded,\n            from,\n            failure\n          )\n        })\n        // avoid warnings in the console about uncaught rejections, they are logged by triggerErrors\n        .catch(noop)\n    })\n  }\n\n  // Initialization and Errors\n\n  let readyHandlers = useCallbacks<OnReadyCallback>()\n  let errorListeners = useCallbacks<_ErrorListener>()\n  let ready: boolean\n\n  /**\n   * Trigger errorListeners added via onError and throws the error as well\n   *\n   * @param error - error to throw\n   * @param to - location we were navigating to when the error happened\n   * @param from - location we were navigating from when the error happened\n   * @returns the error as a rejected promise\n   */\n  function triggerError(\n    error: any,\n    to: RouteLocationNormalized,\n    from: RouteLocationNormalizedLoaded\n  ): Promise<unknown> {\n    markAsReady(error)\n    const list = errorListeners.list()\n    if (list.length) {\n      list.forEach(handler => handler(error, to, from))\n    } else {\n      if (__DEV__) {\n        warn('uncaught error during route navigation:')\n      }\n      console.error(error)\n    }\n    // reject the error no matter there were error listeners or not\n    return Promise.reject(error)\n  }\n\n  function isReady(): Promise<void> {\n    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)\n      return Promise.resolve()\n    return new Promise((resolve, reject) => {\n      readyHandlers.add([resolve, reject])\n    })\n  }\n\n  /**\n   * Mark the router as ready, resolving the promised returned by isReady(). Can\n   * only be called once, otherwise does nothing.\n   * @param err - optional error\n   */\n  function markAsReady<E = any>(err: E): E\n  function markAsReady<E = any>(): void\n  function markAsReady<E = any>(err?: E): E | void {\n    if (!ready) {\n      // still not ready if an error happened\n      ready = !err\n      setupListeners()\n      readyHandlers\n        .list()\n        .forEach(([resolve, reject]) => (err ? reject(err) : resolve()))\n      readyHandlers.reset()\n    }\n    return err\n  }\n\n  // Scroll behavior\n  function handleScroll(\n    to: RouteLocationNormalizedLoaded,\n    from: RouteLocationNormalizedLoaded,\n    isPush: boolean,\n    isFirstNavigation: boolean\n  ): // the return is not meant to be used\n  Promise<unknown> {\n    const { scrollBehavior } = options\n    if (!isBrowser || !scrollBehavior) return Promise.resolve()\n\n    const scrollPosition: _ScrollPositionNormalized | null =\n      (!isPush && getSavedScrollPosition(getScrollKey(to.fullPath, 0))) ||\n      ((isFirstNavigation || !isPush) &&\n        (history.state as HistoryState) &&\n        history.state.scroll) ||\n      null\n\n    return nextTick()\n      .then(() => scrollBehavior(to, from, scrollPosition))\n      .then(position => position && scrollToPosition(position))\n      .catch(err => triggerError(err, to, from))\n  }\n\n  const go = (delta: number) => routerHistory.go(delta)\n\n  let started: boolean | undefined\n  const installedApps = new Set<App>()\n\n  const router: Router = {\n    currentRoute,\n    listening: true,\n\n    addRoute,\n    removeRoute,\n    hasRoute,\n    getRoutes,\n    resolve,\n    options,\n\n    push,\n    replace,\n    go,\n    back: () => go(-1),\n    forward: () => go(1),\n\n    beforeEach: beforeGuards.add,\n    beforeResolve: beforeResolveGuards.add,\n    afterEach: afterGuards.add,\n\n    onError: errorListeners.add,\n    isReady,\n\n    install(app: App) {\n      const router = this\n      app.component('RouterLink', RouterLink)\n      app.component('RouterView', RouterView)\n\n      app.config.globalProperties.$router = router\n      Object.defineProperty(app.config.globalProperties, '$route', {\n        enumerable: true,\n        get: () => unref(currentRoute),\n      })\n\n      // this initial navigation is only necessary on client, on server it doesn't\n      // make sense because it will create an extra unnecessary navigation and could\n      // lead to problems\n      if (\n        isBrowser &&\n        // used for the initial navigation client side to avoid pushing\n        // multiple times when the router is used in multiple apps\n        !started &&\n        currentRoute.value === START_LOCATION_NORMALIZED\n      ) {\n        // see above\n        started = true\n        push(routerHistory.location).catch(err => {\n          if (__DEV__) warn('Unexpected error when starting the router:', err)\n        })\n      }\n\n      const reactiveRoute = {} as RouteLocationNormalizedLoaded\n      for (const key in START_LOCATION_NORMALIZED) {\n        Object.defineProperty(reactiveRoute, key, {\n          get: () => currentRoute.value[key as keyof RouteLocationNormalized],\n          enumerable: true,\n        })\n      }\n\n      app.provide(routerKey, router)\n      app.provide(routeLocationKey, shallowReactive(reactiveRoute))\n      app.provide(routerViewLocationKey, currentRoute)\n\n      const unmountApp = app.unmount\n      installedApps.add(app)\n      app.unmount = function () {\n        installedApps.delete(app)\n        // the router is not attached to an app anymore\n        if (installedApps.size < 1) {\n          // invalidate the current navigation\n          pendingLocation = START_LOCATION_NORMALIZED\n          removeHistoryListener && removeHistoryListener()\n          removeHistoryListener = null\n          currentRoute.value = START_LOCATION_NORMALIZED\n          started = false\n          ready = false\n        }\n        unmountApp()\n      }\n\n      // TODO: this probably needs to be updated so it can be used by vue-termui\n      if ((__DEV__ || __FEATURE_PROD_DEVTOOLS__) && isBrowser) {\n        addDevtools(app, router, matcher)\n      }\n    },\n  }\n\n  // TODO: type this as NavigationGuardReturn or similar instead of any\n  function runGuardQueue(guards: Lazy<any>[]): Promise<any> {\n    return guards.reduce(\n      (promise, guard) => promise.then(() => runWithContext(guard)),\n      Promise.resolve()\n    )\n  }\n\n  return router\n}\n\nfunction extractChangingRecords(\n  to: RouteLocationNormalized,\n  from: RouteLocationNormalizedLoaded\n) {\n  const leavingRecords: RouteRecordNormalized[] = []\n  const updatingRecords: RouteRecordNormalized[] = []\n  const enteringRecords: RouteRecordNormalized[] = []\n\n  const len = Math.max(from.matched.length, to.matched.length)\n  for (let i = 0; i < len; i++) {\n    const recordFrom = from.matched[i]\n    if (recordFrom) {\n      if (to.matched.find(record => isSameRouteRecord(record, recordFrom)))\n        updatingRecords.push(recordFrom)\n      else leavingRecords.push(recordFrom)\n    }\n    const recordTo = to.matched[i]\n    if (recordTo) {\n      // the type doesn't matter because we are comparing per reference\n      if (!from.matched.find(record => isSameRouteRecord(record, recordTo))) {\n        enteringRecords.push(recordTo)\n      }\n    }\n  }\n\n  return [leavingRecords, updatingRecords, enteringRecords]\n}\n","import { RouterHistory } from './common'\nimport { createWebHistory } from './html5'\nimport { warn } from '../warning'\n\n/**\n * Creates a hash history. Useful for web applications with no host (e.g. `file://`) or when configuring a server to\n * handle any URL is not possible.\n *\n * @param base - optional base to provide. Defaults to `location.pathname + location.search` If there is a `<base>` tag\n * in the `head`, its value will be ignored in favor of this parameter **but note it affects all the history.pushState()\n * calls**, meaning that if you use a `<base>` tag, it's `href` value **has to match this parameter** (ignoring anything\n * after the `#`).\n *\n * @example\n * ```js\n * // at https://example.com/folder\n * createWebHashHistory() // gives a url of `https://example.com/folder#`\n * createWebHashHistory('/folder/') // gives a url of `https://example.com/folder/#`\n * // if the `#` is provided in the base, it won't be added by `createWebHashHistory`\n * createWebHashHistory('/folder/#/app/') // gives a url of `https://example.com/folder/#/app/`\n * // you should avoid doing this because it changes the original url and breaks copying urls\n * createWebHashHistory('/other-folder/') // gives a url of `https://example.com/other-folder/#`\n *\n * // at file:///usr/etc/folder/index.html\n * // for locations with no `host`, the base is ignored\n * createWebHashHistory('/iAmIgnored') // gives a url of `file:///usr/etc/folder/index.html#`\n * ```\n */\nexport function createWebHashHistory(base?: string): RouterHistory {\n  // Make sure this implementation is fine in terms of encoding, specially for IE11\n  // for `file://`, directly use the pathname and ignore the base\n  // location.pathname contains an initial `/` even at the root: `https://example.com`\n  base = location.host ? base || location.pathname + location.search : ''\n  // allow the user to provide a `#` in the middle: `/base/#/app`\n  if (!base.includes('#')) base += '#'\n\n  if (__DEV__ && !base.endsWith('#/') && !base.endsWith('#')) {\n    warn(\n      `A hash base must end with a \"#\":\\n\"${base}\" should be \"${base.replace(\n        /#.*$/,\n        '#'\n      )}\".`\n    )\n  }\n  return createWebHistory(base)\n}\n","import { inject } from 'vue'\nimport { routerKey, routeLocationKey } from './injectionSymbols'\nimport { Router } from './router'\nimport { RouteLocationNormalizedLoaded } from './types'\n\n/**\n * Returns the router instance. Equivalent to using `$router` inside\n * templates.\n */\nexport function useRouter(): Router {\n  return inject(routerKey)!\n}\n\n/**\n * Returns the current route location. Equivalent to using `$route` inside\n * templates.\n */\nexport function useRoute(): RouteLocationNormalizedLoaded {\n  return inject(routeLocationKey)!\n}\n"],"names":["isBrowser","window","isESModule","obj","__esModule","Symbol","toStringTag","assign","Object","applyToParams","fn","params","newParams","key","value","isArray","map","noop","Array","TRAILING_SLASH_RE","removeTrailingSlash","path","replace","parseURL","parseQuery","location","currentLocation","query","searchString","hash","hashPos","indexOf","searchPos","slice","length","to","from","startsWith","fromSegments","split","toSegments","lastToSegment","push","toPosition","segment","position","join","resolveRelativePath","fullPath","stripBase","pathname","base","toLowerCase","isSameRouteRecord","a","b","aliasOf","isSameRouteLocationParams","keys","isSameRouteLocationParamsValue","isEquivalentArray","every","i","NavigationType","NavigationDirection","normalizeBase","baseEl","document","querySelector","getAttribute","BEFORE_HASH_RE","createHref","computeScrollPosition","left","pageXOffset","top","pageYOffset","scrollToPosition","scrollToOptions","positionEl","el","isIdSelector","getElementById","offset","docRect","documentElement","getBoundingClientRect","elRect","behavior","getElementPosition","style","scrollTo","getScrollKey","delta","history","state","scrollPositions","Map","createBaseLocation","protocol","host","createCurrentLocation","search","slicePos","includes","pathFromHash","buildState","back","current","forward","replaced","computeScroll","scroll","createWebHistory","historyNavigation","historyState","changeLocation","hashIndex","url","err","console","error","data","currentState","useHistoryStateNavigation","historyListeners","listeners","teardowns","pauseState","popStateHandler","fromState","forEach","listener","type","pop","direction","unknown","beforeUnloadListener","replaceState","addEventListener","passive","pauseListeners","listen","callback","teardown","index","splice","destroy","removeEventListener","useHistoryListeners","routerHistory","go","triggerListeners","bind","defineProperty","enumerable","get","isRouteName","name","START_LOCATION_NORMALIZED","undefined","matched","meta","redirectedFrom","NavigationFailureSymbol","NavigationFailureType","createRouterError","Error","isNavigationFailure","exports","BASE_PARAM_PATTERN","BASE_PATH_PARSER_OPTIONS","sensitive","strict","start","end","REGEX_CHARS_RE","compareScoreArray","diff","comparePathParserScore","aScore","score","bScore","comp","Math","abs","isLastScoreNegative","last","ROOT_TOKEN","VALID_PARAM_RE","createRouteRecordMatcher","record","parent","options","parser","segments","extraOptions","pattern","segmentScores","tokenIndex","token","subSegmentScore","repeatable","optional","regexp","re","RegExp","message","subPattern","parse","match","stringify","avoidDuplicatedSlash","endsWith","param","text","tokensToParser","crash","buffer","previousState","tokens","finalizeSegment","char","customRe","consumeBuffer","addCharToBuffer","test","tokenizePath","matcher","children","alias","createRouterMatcher","routes","globalOptions","matchers","matcherMap","addRoute","originalRecord","isRootAdd","mainNormalizedRecord","redirect","beforeEnter","props","normalizeRecordProps","instances","leaveGuards","Set","updateGuards","enterCallbacks","components","component","default","normalizeRouteRecord","mergeOptions","normalizedRecords","aliases","originalMatcher","normalizedRecord","parentPath","isAliasRecord","removeRoute","insertMatcher","matcherRef","delete","isRecordChildOf","set","route","resolve","paramsFromLocation","filter","k","find","m","parentMatcher","unshift","mergeMetaFields","getRoutes","getRecordMatcher","propsObject","reduce","defaults","partialOptions","some","child","HASH_RE","AMPERSAND_RE","SLASH_RE","EQUAL_RE","IM_RE","PLUS_RE","ENC_BRACKET_OPEN_RE","ENC_BRACKET_CLOSE_RE","ENC_CARET_RE","ENC_BACKTICK_RE","ENC_CURLY_OPEN_RE","ENC_PIPE_RE","ENC_CURLY_CLOSE_RE","ENC_SPACE_RE","commonEncode","encodeURI","encodeQueryValue","encodeParam","encodePath","decode","decodeURIComponent","searchParams","searchParam","eqPos","currentValue","stringifyQuery","v","normalizeQuery","normalizedQuery","matchedRouteKey","viewDepthKey","routerKey","routeLocationKey","routerViewLocationKey","useCallbacks","handlers","add","handler","list","reset","registerGuard","guard","removeFromList","onUnmounted","onDeactivated","onActivated","guardToPromiseFn","enterCallbackArray","Promise","reject","next","valid","guardReturn","call","guardCall","then","catch","extractComponentsGuards","guardType","guards","rawComponent","__vccOpts","componentPromise","resolved","resolvedComponent","useLink","router","inject","currentRoute","computed","unref","activeRecordIndex","routeMatched","currentMatched","findIndex","parentRecordPath","getOriginalPath","isActive","outer","inner","innerValue","outerValue","includesParams","isExactActive","href","navigate","e","metaKey","altKey","ctrlKey","shiftKey","defaultPrevented","button","currentTarget","target","preventDefault","guardEvent","RouterLink","defineComponent","compatConfig","MODE","String","required","Boolean","activeClass","exactActiveClass","custom","ariaCurrentValue","setup","slots","link","reactive","elClass","getLinkClass","linkActiveClass","linkExactActiveClass","h","onClick","class","propClass","globalClass","defaultClass","normalizeSlot","slot","slotContent","RouterView","inheritAttrs","attrs","injectedRoute","routeToDisplay","injectedDepth","depth","initialDepth","matchedRoute","matchedRouteRef","provide","viewRef","ref","watch","instance","oldInstance","oldName","size","flush","currentName","ViewComponent","Component","routePropsOption","routeProps","onVnodeUnmounted","vnode","isUnmounted","queue","setLocation","shouldTrigger","this","max","min","info","originalParseQuery","originalStringifyQuery","beforeGuards","beforeResolveGuards","afterGuards","shallowRef","pendingLocation","scrollBehavior","scrollRestoration","normalizeParams","paramValue","encodeParams","decodeParams","rawLocation","locationNormalized","matcherLocation","targetParams","stringifyURL","locationAsObject","checkCanceledNavigation","pushWithRedirect","handleRedirectRecord","lastMatched","newTargetLocation","targetLocation","force","shouldRedirect","toLocation","failure","aLastIndex","bLastIndex","isSameRouteLocation","handleScroll","markAsReady","triggerError","finalizeNavigation","triggerAfterEach","checkCanceledNavigationAndReject","runWithContext","app","installedApps","values","leavingRecords","updatingRecords","enteringRecords","len","recordFrom","recordTo","extractChangingRecords","reverse","canceledNavigationCheck","runGuardQueue","isPush","isFirstNavigation","removeHistoryListener","setupListeners","_from","listening","scrollPosition","ready","readyHandlers","errorListeners","getSavedScrollPosition","nextTick","started","parentOrRoute","recordMatcher","hasRoute","routeMatcher","beforeEach","beforeResolve","afterEach","onError","isReady","install","config","globalProperties","$router","reactiveRoute","shallowReactive","unmountApp","unmount","promise","all","promises","leaveGuard","activeRecord","updateGuard"],"mappings":"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"}