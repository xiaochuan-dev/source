{"version":3,"file":"universal.js","sources":["../../../../node_modules/.pnpm/dom-expressions@0.37.8_csstype@3.1.0_seroval@0.12.0/node_modules/dom-expressions/src/universal.js","../src/index.ts"],"sourcesContent":["import { root, effect, memo, createComponent, untrack, mergeProps } from \"rxcore\";\n\nexport function createRenderer({\n  createElement,\n  createTextNode,\n  isTextNode,\n  replaceText,\n  insertNode,\n  removeNode,\n  setProperty,\n  getParentNode,\n  getFirstChild,\n  getNextSibling\n}) {\n  function insert(parent, accessor, marker, initial) {\n    if (marker !== undefined && !initial) initial = [];\n    if (typeof accessor !== \"function\") return insertExpression(parent, accessor, initial, marker);\n    effect(current => insertExpression(parent, accessor(), current, marker), initial);\n  }\n\n  function insertExpression(parent, value, current, marker, unwrapArray) {\n    while (typeof current === \"function\") current = current();\n    if (value === current) return current;\n    const t = typeof value,\n      multi = marker !== undefined;\n\n    if (t === \"string\" || t === \"number\") {\n      if (t === \"number\") value = value.toString();\n      if (multi) {\n        let node = current[0];\n        if (node && isTextNode(node)) {\n          replaceText(node, value);\n        } else node = createTextNode(value);\n        current = cleanChildren(parent, current, marker, node);\n      } else {\n        if (current !== \"\" && typeof current === \"string\") {\n          replaceText(getFirstChild(parent), (current = value));\n        } else {\n          cleanChildren(parent, current, marker, createTextNode(value));\n          current = value;\n        }\n      }\n    } else if (value == null || t === \"boolean\") {\n      current = cleanChildren(parent, current, marker);\n    } else if (t === \"function\") {\n      effect(() => {\n        let v = value();\n        while (typeof v === \"function\") v = v();\n        current = insertExpression(parent, v, current, marker);\n      });\n      return () => current;\n    } else if (Array.isArray(value)) {\n      const array = [];\n      if (normalizeIncomingArray(array, value, unwrapArray)) {\n        effect(() => (current = insertExpression(parent, array, current, marker, true)));\n        return () => current;\n      }\n      if (array.length === 0) {\n        const replacement = cleanChildren(parent, current, marker);\n        if (multi) return (current = replacement);\n      } else {\n        if (Array.isArray(current)) {\n          if (current.length === 0) {\n            appendNodes(parent, array, marker);\n          } else reconcileArrays(parent, current, array);\n        } else if (current == null || current === \"\") {\n          appendNodes(parent, array);\n        } else {\n          reconcileArrays(parent, (multi && current) || [getFirstChild(parent)], array);\n        }\n      }\n      current = array;\n    } else {\n      if (Array.isArray(current)) {\n        if (multi) return (current = cleanChildren(parent, current, marker, value));\n        cleanChildren(parent, current, null, value);\n      } else if (current == null || current === \"\" || !getFirstChild(parent)) {\n        insertNode(parent, value);\n      } else replaceNode(parent, value, getFirstChild(parent));\n      current = value;\n    }\n\n    return current;\n  }\n\n  function normalizeIncomingArray(normalized, array, unwrap) {\n    let dynamic = false;\n    for (let i = 0, len = array.length; i < len; i++) {\n      let item = array[i],\n        t;\n      if (item == null || item === true || item === false) {\n        // matches null, undefined, true or false\n        // skip\n      } else if (Array.isArray(item)) {\n        dynamic = normalizeIncomingArray(normalized, item) || dynamic;\n      } else if ((t = typeof item) === \"string\" || t === \"number\") {\n        normalized.push(createTextNode(item));\n      } else if (t === \"function\") {\n        if (unwrap) {\n          while (typeof item === \"function\") item = item();\n          dynamic =\n            normalizeIncomingArray(normalized, Array.isArray(item) ? item : [item]) || dynamic;\n        } else {\n          normalized.push(item);\n          dynamic = true;\n        }\n      } else normalized.push(item);\n    }\n    return dynamic;\n  }\n\n  function reconcileArrays(parentNode, a, b) {\n    let bLength = b.length,\n      aEnd = a.length,\n      bEnd = bLength,\n      aStart = 0,\n      bStart = 0,\n      after = getNextSibling(a[aEnd - 1]),\n      map = null;\n\n    while (aStart < aEnd || bStart < bEnd) {\n      // common prefix\n      if (a[aStart] === b[bStart]) {\n        aStart++;\n        bStart++;\n        continue;\n      }\n      // common suffix\n      while (a[aEnd - 1] === b[bEnd - 1]) {\n        aEnd--;\n        bEnd--;\n      }\n      // append\n      if (aEnd === aStart) {\n        const node =\n          bEnd < bLength ? (bStart ? getNextSibling(b[bStart - 1]) : b[bEnd - bStart]) : after;\n\n        while (bStart < bEnd) insertNode(parentNode, b[bStart++], node);\n        // remove\n      } else if (bEnd === bStart) {\n        while (aStart < aEnd) {\n          if (!map || !map.has(a[aStart])) removeNode(parentNode, a[aStart]);\n          aStart++;\n        }\n        // swap backward\n      } else if (a[aStart] === b[bEnd - 1] && b[bStart] === a[aEnd - 1]) {\n        const node = getNextSibling(a[--aEnd]);\n        insertNode(parentNode, b[bStart++], getNextSibling(a[aStart++]));\n        insertNode(parentNode, b[--bEnd], node);\n\n        a[aEnd] = b[bEnd];\n        // fallback to map\n      } else {\n        if (!map) {\n          map = new Map();\n          let i = bStart;\n\n          while (i < bEnd) map.set(b[i], i++);\n        }\n\n        const index = map.get(a[aStart]);\n        if (index != null) {\n          if (bStart < index && index < bEnd) {\n            let i = aStart,\n              sequence = 1,\n              t;\n\n            while (++i < aEnd && i < bEnd) {\n              if ((t = map.get(a[i])) == null || t !== index + sequence) break;\n              sequence++;\n            }\n\n            if (sequence > index - bStart) {\n              const node = a[aStart];\n              while (bStart < index) insertNode(parentNode, b[bStart++], node);\n            } else replaceNode(parentNode, b[bStart++], a[aStart++]);\n          } else aStart++;\n        } else removeNode(parentNode, a[aStart++]);\n      }\n    }\n  }\n\n  function cleanChildren(parent, current, marker, replacement) {\n    if (marker === undefined) {\n      let removed;\n      while ((removed = getFirstChild(parent))) removeNode(parent, removed);\n      replacement && insertNode(parent, replacement);\n      return \"\";\n    }\n    const node = replacement || createTextNode(\"\");\n    if (current.length) {\n      let inserted = false;\n      for (let i = current.length - 1; i >= 0; i--) {\n        const el = current[i];\n        if (node !== el) {\n          const isParent = getParentNode(el) === parent;\n          if (!inserted && !i)\n            isParent ? replaceNode(parent, node, el) : insertNode(parent, node, marker);\n          else isParent && removeNode(parent, el);\n        } else inserted = true;\n      }\n    } else insertNode(parent, node, marker);\n    return [node];\n  }\n\n  function appendNodes(parent, array, marker) {\n    for (let i = 0, len = array.length; i < len; i++) insertNode(parent, array[i], marker);\n  }\n\n  function replaceNode(parent, newNode, oldNode) {\n    insertNode(parent, newNode, oldNode);\n    removeNode(parent, oldNode);\n  }\n\n  function spreadExpression(node, props, prevProps = {}, skipChildren) {\n    props || (props = {});\n    if (!skipChildren) {\n      effect(() => (prevProps.children = insertExpression(node, props.children, prevProps.children)));\n    }\n    effect(() => props.ref && props.ref(node));\n    effect(() => {\n      for (const prop in props) {\n        if (prop === \"children\" || prop === \"ref\") continue;\n        const value = props[prop];\n        if (value === prevProps[prop]) continue;\n        setProperty(node, prop, value, prevProps[prop]);\n        prevProps[prop] = value;\n      }\n    });\n    return prevProps;\n  }\n\n  return {\n    render(code, element) {\n      let disposer;\n      root(dispose => {\n        disposer = dispose;\n        insert(element, code());\n      });\n      return disposer;\n    },\n    insert,\n    spread(node, accessor, skipChildren) {\n      if (typeof accessor === \"function\") {\n        effect(current => spreadExpression(node, accessor(), current, skipChildren));\n      } else spreadExpression(node, accessor, undefined, skipChildren);\n    },\n    createElement,\n    createTextNode,\n    insertNode,\n    setProp(node, name, value, prev) {\n      setProperty(node, name, value, prev);\n      return value;\n    },\n    mergeProps,\n    effect,\n    memo,\n    createComponent,\n    use(fn, element, arg) {\n      return untrack(() => fn(element, arg));\n    }\n  };\n}\n","import { createRenderer as createRendererDX } from \"./universal.js\";\nimport type { RendererOptions, Renderer } from \"./universal.js\";\nimport { mergeProps } from \"solid-js\";\n\nexport function createRenderer<NodeType>(options: RendererOptions<NodeType>): Renderer<NodeType> {\n  const renderer = createRendererDX(options);\n  renderer.mergeProps = mergeProps;\n  return renderer;\n}\n"],"names":["createRenderer","createElement","createTextNode","isTextNode","replaceText","insertNode","removeNode","setProperty","getParentNode","getFirstChild","getNextSibling","insert","parent","accessor","marker","initial","undefined","insertExpression","effect","current","value","unwrapArray","t","multi","toString","node","cleanChildren","v","Array","isArray","array","normalizeIncomingArray","length","replacement","appendNodes","reconcileArrays","replaceNode","normalized","unwrap","dynamic","i","len","item","push","parentNode","a","b","bLength","aEnd","bEnd","aStart","bStart","after","map","has","Map","set","index","get","sequence","removed","inserted","el","isParent","newNode","oldNode","spreadExpression","props","prevProps","skipChildren","children","ref","prop","render","code","element","disposer","root","dispose","spread","setProp","name","prev","mergeProps","memo","createComponent","use","fn","arg","untrack","options","renderer","createRendererDX"],"mappings":"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","x_google_ignoreList":[0]}