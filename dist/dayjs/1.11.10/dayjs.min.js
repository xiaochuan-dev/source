(function(g,f){typeof exports==='object'&&typeof module!=='undefined'?module.exports=f():typeof define==='function'&&define.amd?define(f):(g=typeof globalThis!=='undefined'?globalThis:g||self,g.dayjs=f());})(this,(function(){'use strict';const SECONDS_A_MINUTE = 60;
const SECONDS_A_HOUR = SECONDS_A_MINUTE * 60;
const SECONDS_A_DAY = SECONDS_A_HOUR * 24;
const SECONDS_A_WEEK = SECONDS_A_DAY * 7;

const MILLISECONDS_A_SECOND = 1e3;
const MILLISECONDS_A_MINUTE = SECONDS_A_MINUTE * MILLISECONDS_A_SECOND;
const MILLISECONDS_A_HOUR = SECONDS_A_HOUR * MILLISECONDS_A_SECOND;
const MILLISECONDS_A_DAY = SECONDS_A_DAY * MILLISECONDS_A_SECOND;
const MILLISECONDS_A_WEEK = SECONDS_A_WEEK * MILLISECONDS_A_SECOND;

// English locales
const MS = 'millisecond';
const S = 'second';
const MIN = 'minute';
const H = 'hour';
const D = 'day';
const W = 'week';
const M = 'month';
const Q = 'quarter';
const Y = 'year';
const DATE = 'date';

const FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ssZ';

const INVALID_DATE_STRING = 'Invalid Date';

// regex
const REGEX_PARSE = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/;
const REGEX_FORMAT = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g;// English [en]
// We don't need weekdaysShort, weekdaysMin, monthsShort in en.js locale
var en = {
  name: 'en',
  weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
  months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
  ordinal: (n) => {
    const s = ['th', 'st', 'nd', 'rd'];
    const v = n % 100;
    return `[${n}${(s[(v - 20) % 10] || s[v] || s[0])}]`
  }
};const padStart = (string, length, pad) => {
  const s = String(string);
  if (!s || s.length >= length) return string
  return `${Array((length + 1) - s.length).join(pad)}${string}`
};

const padZoneStr = (instance) => {
  const negMinutes = -instance.utcOffset();
  const minutes = Math.abs(negMinutes);
  const hourOffset = Math.floor(minutes / 60);
  const minuteOffset = minutes % 60;
  return `${negMinutes <= 0 ? '+' : '-'}${padStart(hourOffset, 2, '0')}:${padStart(minuteOffset, 2, '0')}`
};

const monthDiff = (a, b) => {
  // function from moment.js in order to keep the same result
  if (a.date() < b.date()) return -monthDiff(b, a)
  const wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month());
  const anchor = a.clone().add(wholeMonthDiff, M);
  const c = b - anchor < 0;
  const anchor2 = a.clone().add(wholeMonthDiff + (c ? -1 : 1), M);
  return +(-(wholeMonthDiff + ((b - anchor) / (c ? (anchor - anchor2) :
    (anchor2 - anchor)))) || 0)
};

const absFloor = n => (n < 0 ? Math.ceil(n) || 0 : Math.floor(n));

const prettyUnit = (u) => {
  const special = {
    M: M,
    y: Y,
    w: W,
    d: D,
    D: DATE,
    h: H,
    m: MIN,
    s: S,
    ms: MS,
    Q: Q
  };
  return special[u] || String(u || '').toLowerCase().replace(/s$/, '')
};

const isUndefined = s => s === undefined;

var U = {
  s: padStart,
  z: padZoneStr,
  m: monthDiff,
  a: absFloor,
  p: prettyUnit,
  u: isUndefined
};let L = 'en'; // global locale
const Ls = {}; // global loaded locale
Ls[L] = en;

const IS_DAYJS = '$isDayjsObject';

// eslint-disable-next-line no-use-before-define
const isDayjs = d => d instanceof Dayjs || !!(d && d[IS_DAYJS]);

const parseLocale = (preset, object, isLocal) => {
  let l;
  if (!preset) return L
  if (typeof preset === 'string') {
    const presetLower = preset.toLowerCase();
    if (Ls[presetLower]) {
      l = presetLower;
    }
    if (object) {
      Ls[presetLower] = object;
      l = presetLower;
    }
    const presetSplit = preset.split('-');
    if (!l && presetSplit.length > 1) {
      return parseLocale(presetSplit[0])
    }
  } else {
    const { name } = preset;
    Ls[name] = preset;
    l = name;
  }
  if (!isLocal && l) L = l;
  return l || (!isLocal && L)
};

const dayjs = function (date, c) {
  if (isDayjs(date)) {
    return date.clone()
  }
  // eslint-disable-next-line no-nested-ternary
  const cfg = typeof c === 'object' ? c : {};
  cfg.date = date;
  cfg.args = arguments;// eslint-disable-line prefer-rest-params
  return new Dayjs(cfg) // eslint-disable-line no-use-before-define
};

const wrapper = (date, instance) =>
  dayjs(date, {
    locale: instance.$L,
    utc: instance.$u,
    x: instance.$x,
    $offset: instance.$offset // todo: refactor; do not use this.$offset in you code
  });

const Utils = U; // for plugin use
Utils.l = parseLocale;
Utils.i = isDayjs;
Utils.w = wrapper;

const parseDate = (cfg) => {
  const { date, utc } = cfg;
  if (date === null) return new Date(NaN) // null is invalid
  if (Utils.u(date)) return new Date() // today
  if (date instanceof Date) return new Date(date)
  if (typeof date === 'string' && !/Z$/i.test(date)) {
    const d = date.match(REGEX_PARSE);
    if (d) {
      const m = d[2] - 1 || 0;
      const ms = (d[7] || '0').substring(0, 3);
      if (utc) {
        return new Date(Date.UTC(d[1], m, d[3]
          || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms))
      }
      return new Date(d[1], m, d[3]
        || 1, d[4] || 0, d[5] || 0, d[6] || 0, ms)
    }
  }

  return new Date(date) // everything else
};

class Dayjs {
  constructor(cfg) {
    this.$L = parseLocale(cfg.locale, null, true);
    this.parse(cfg); // for plugin
    this.$x = this.$x || cfg.x || {};
    this[IS_DAYJS] = true;
  }

  parse(cfg) {
    this.$d = parseDate(cfg);
    this.init();
  }

  init() {
    const { $d } = this;
    this.$y = $d.getFullYear();
    this.$M = $d.getMonth();
    this.$D = $d.getDate();
    this.$W = $d.getDay();
    this.$H = $d.getHours();
    this.$m = $d.getMinutes();
    this.$s = $d.getSeconds();
    this.$ms = $d.getMilliseconds();
  }

  // eslint-disable-next-line class-methods-use-this
  $utils() {
    return Utils
  }

  isValid() {
    return !(this.$d.toString() === INVALID_DATE_STRING)
  }

  isSame(that, units) {
    const other = dayjs(that);
    return this.startOf(units) <= other && other <= this.endOf(units)
  }

  isAfter(that, units) {
    return dayjs(that) < this.startOf(units)
  }

  isBefore(that, units) {
    return this.endOf(units) < dayjs(that)
  }

  $g(input, get, set) {
    if (Utils.u(input)) return this[get]
    return this.set(set, input)
  }

  unix() {
    return Math.floor(this.valueOf() / 1000)
  }

  valueOf() {
    // timezone(hour) * 60 * 60 * 1000 => ms
    return this.$d.getTime()
  }

  startOf(units, startOf) { // startOf -> endOf
    const isStartOf = !Utils.u(startOf) ? startOf : true;
    const unit = Utils.p(units);
    const instanceFactory = (d, m) => {
      const ins = Utils.w(this.$u ?
        Date.UTC(this.$y, m, d) : new Date(this.$y, m, d), this);
      return isStartOf ? ins : ins.endOf(D)
    };
    const instanceFactorySet = (method, slice) => {
      const argumentStart = [0, 0, 0, 0];
      const argumentEnd = [23, 59, 59, 999];
      return Utils.w(this.toDate()[method].apply( // eslint-disable-line prefer-spread
        this.toDate('s'),
        (isStartOf ? argumentStart : argumentEnd).slice(slice)
      ), this)
    };
    const { $W, $M, $D } = this;
    const utcPad = `set${this.$u ? 'UTC' : ''}`;
    switch (unit) {
      case Y:
        return isStartOf ? instanceFactory(1, 0) :
          instanceFactory(31, 11)
      case M:
        return isStartOf ? instanceFactory(1, $M) :
          instanceFactory(0, $M + 1)
      case W: {
        const weekStart = this.$locale().weekStart || 0;
        const gap = ($W < weekStart ? $W + 7 : $W) - weekStart;
        return instanceFactory(isStartOf ? $D - gap : $D + (6 - gap), $M)
      }
      case D:
      case DATE:
        return instanceFactorySet(`${utcPad}Hours`, 0)
      case H:
        return instanceFactorySet(`${utcPad}Minutes`, 1)
      case MIN:
        return instanceFactorySet(`${utcPad}Seconds`, 2)
      case S:
        return instanceFactorySet(`${utcPad}Milliseconds`, 3)
      default:
        return this.clone()
    }
  }

  endOf(arg) {
    return this.startOf(arg, false)
  }

  $set(units, int) { // private set
    const unit = Utils.p(units);
    const utcPad = `set${this.$u ? 'UTC' : ''}`;
    const name = {
      [D]: `${utcPad}Date`,
      [DATE]: `${utcPad}Date`,
      [M]: `${utcPad}Month`,
      [Y]: `${utcPad}FullYear`,
      [H]: `${utcPad}Hours`,
      [MIN]: `${utcPad}Minutes`,
      [S]: `${utcPad}Seconds`,
      [MS]: `${utcPad}Milliseconds`
    }[unit];
    const arg = unit === D ? this.$D + (int - this.$W) : int;

    if (unit === M || unit === Y) {
      // clone is for badMutable plugin
      const date = this.clone().set(DATE, 1);
      date.$d[name](arg);
      date.init();
      this.$d = date.set(DATE, Math.min(this.$D, date.daysInMonth())).$d;
    } else if (name) this.$d[name](arg);

    this.init();
    return this
  }

  set(string, int) {
    return this.clone().$set(string, int)
  }

  get(unit) {
    return this[Utils.p(unit)]()
  }

  add(number, units) {
    number = Number(number); // eslint-disable-line no-param-reassign
    const unit = Utils.p(units);
    const instanceFactorySet = (n) => {
      const d = dayjs(this);
      return Utils.w(d.date(d.date() + Math.round(n * number)), this)
    };
    if (unit === M) {
      return this.set(M, this.$M + number)
    }
    if (unit === Y) {
      return this.set(Y, this.$y + number)
    }
    if (unit === D) {
      return instanceFactorySet(1)
    }
    if (unit === W) {
      return instanceFactorySet(7)
    }
    const step = {
      [MIN]: MILLISECONDS_A_MINUTE,
      [H]: MILLISECONDS_A_HOUR,
      [S]: MILLISECONDS_A_SECOND
    }[unit] || 1; // ms

    const nextTimeStamp = this.$d.getTime() + (number * step);
    return Utils.w(nextTimeStamp, this)
  }

  subtract(number, string) {
    return this.add(number * -1, string)
  }

  format(formatStr) {
    const locale = this.$locale();

    if (!this.isValid()) return locale.invalidDate || INVALID_DATE_STRING

    const str = formatStr || FORMAT_DEFAULT;
    const zoneStr = Utils.z(this);
    const { $H, $m, $M } = this;
    const {
      weekdays, months, meridiem
    } = locale;
    const getShort = (arr, index, full, length) => (
      (arr && (arr[index] || arr(this, str))) || full[index].slice(0, length)
    );
    const get$H = num => (
      Utils.s($H % 12 || 12, num, '0')
    );

    const meridiemFunc = meridiem || ((hour, minute, isLowercase) => {
      const m = (hour < 12 ? 'AM' : 'PM');
      return isLowercase ? m.toLowerCase() : m
    });

    const matches = (match) => {
      switch (match) {
        case 'YY':
          return String(this.$y).slice(-2)
        case 'YYYY':
          return Utils.s(this.$y, 4, '0')
        case 'M':
          return $M + 1
        case 'MM':
          return Utils.s($M + 1, 2, '0')
        case 'MMM':
          return getShort(locale.monthsShort, $M, months, 3)
        case 'MMMM':
          return getShort(months, $M)
        case 'D':
          return this.$D
        case 'DD':
          return Utils.s(this.$D, 2, '0')
        case 'd':
          return String(this.$W)
        case 'dd':
          return getShort(locale.weekdaysMin, this.$W, weekdays, 2)
        case 'ddd':
          return getShort(locale.weekdaysShort, this.$W, weekdays, 3)
        case 'dddd':
          return weekdays[this.$W]
        case 'H':
          return String($H)
        case 'HH':
          return Utils.s($H, 2, '0')
        case 'h':
          return get$H(1)
        case 'hh':
          return get$H(2)
        case 'a':
          return meridiemFunc($H, $m, true)
        case 'A':
          return meridiemFunc($H, $m, false)
        case 'm':
          return String($m)
        case 'mm':
          return Utils.s($m, 2, '0')
        case 's':
          return String(this.$s)
        case 'ss':
          return Utils.s(this.$s, 2, '0')
        case 'SSS':
          return Utils.s(this.$ms, 3, '0')
        case 'Z':
          return zoneStr // 'ZZ' logic below
      }
      return null
    };

    return str.replace(REGEX_FORMAT, (match, $1) => $1 || matches(match) || zoneStr.replace(':', '')) // 'ZZ'
  }

  utcOffset() {
    // Because a bug at FF24, we're rounding the timezone offset around 15 minutes
    // https://github.com/moment/moment/pull/1871
    return -Math.round(this.$d.getTimezoneOffset() / 15) * 15
  }

  diff(input, units, float) {
    const unit = Utils.p(units);
    const that = dayjs(input);
    const zoneDelta = (that.utcOffset() - this.utcOffset()) * MILLISECONDS_A_MINUTE;
    const diff = this - that;
    const getMonth = () => Utils.m(this, that);

    let result;
    switch (unit) {
      case Y:
        result = getMonth() / 12;
        break
      case M:
        result = getMonth();
        break
      case Q:
        result = getMonth() / 3;
        break
      case W:
        result = (diff - zoneDelta) / MILLISECONDS_A_WEEK;
        break
      case D:
        result = (diff - zoneDelta) / MILLISECONDS_A_DAY;
        break
      case H:
        result = diff / MILLISECONDS_A_HOUR;
        break
      case MIN:
        result = diff / MILLISECONDS_A_MINUTE;
        break
      case S:
        result = diff / MILLISECONDS_A_SECOND;
        break
      default:
        result = diff; // milliseconds
        break
    }

    return float ? result : Utils.a(result)
  }

  daysInMonth() {
    return this.endOf(M).$D
  }

  $locale() { // get locale object
    return Ls[this.$L]
  }

  locale(preset, object) {
    if (!preset) return this.$L
    const that = this.clone();
    const nextLocaleName = parseLocale(preset, object, true);
    if (nextLocaleName) that.$L = nextLocaleName;
    return that
  }

  clone() {
    return Utils.w(this.$d, this)
  }

  toDate() {
    return new Date(this.valueOf())
  }

  toJSON() {
    return this.isValid() ? this.toISOString() : null
  }

  toISOString() {
    // ie 8 return
    // new Dayjs(this.valueOf() + this.$d.getTimezoneOffset() * 60000)
    // .format('YYYY-MM-DDTHH:mm:ss.SSS[Z]')
    return this.$d.toISOString()
  }

  toString() {
    return this.$d.toUTCString()
  }
}

const proto = Dayjs.prototype;
dayjs.prototype = proto;
[
  ['$ms', MS],
  ['$s', S],
  ['$m', MIN],
  ['$H', H],
  ['$W', D],
  ['$M', M],
  ['$y', Y],
  ['$D', DATE]
].forEach((g) => {
  proto[g[1]] = function (input) {
    return this.$g(input, g[0], g[1])
  };
});

dayjs.extend = (plugin, option) => {
  if (!plugin.$i) { // install plugin only once
    plugin(option, Dayjs, dayjs);
    plugin.$i = true;
  }
  return dayjs
};

dayjs.locale = parseLocale;

dayjs.isDayjs = isDayjs;

dayjs.unix = timestamp => (
  dayjs(timestamp * 1e3)
);

dayjs.en = Ls[L];
dayjs.Ls = Ls;
dayjs.p = {};return dayjs;}));//# sourceMappingURL=dayjs.min.js.map
