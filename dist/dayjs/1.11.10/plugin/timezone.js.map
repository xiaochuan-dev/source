{"version":3,"file":"timezone.js","sources":["../src/constant.js","../src/plugin/timezone/index.js"],"sourcesContent":["export const SECONDS_A_MINUTE = 60\nexport const SECONDS_A_HOUR = SECONDS_A_MINUTE * 60\nexport const SECONDS_A_DAY = SECONDS_A_HOUR * 24\nexport const SECONDS_A_WEEK = SECONDS_A_DAY * 7\n\nexport const MILLISECONDS_A_SECOND = 1e3\nexport const MILLISECONDS_A_MINUTE = SECONDS_A_MINUTE * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_HOUR = SECONDS_A_HOUR * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_DAY = SECONDS_A_DAY * MILLISECONDS_A_SECOND\nexport const MILLISECONDS_A_WEEK = SECONDS_A_WEEK * MILLISECONDS_A_SECOND\n\n// English locales\nexport const MS = 'millisecond'\nexport const S = 'second'\nexport const MIN = 'minute'\nexport const H = 'hour'\nexport const D = 'day'\nexport const W = 'week'\nexport const M = 'month'\nexport const Q = 'quarter'\nexport const Y = 'year'\nexport const DATE = 'date'\n\nexport const FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ssZ'\n\nexport const INVALID_DATE_STRING = 'Invalid Date'\n\n// regex\nexport const REGEX_PARSE = /^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/\nexport const REGEX_FORMAT = /\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g\n","import { MIN, MS } from '../../constant'\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n}\n\n// Cache time-zone lookups from Intl.DateTimeFormat,\n// as it is a *very* slow method.\nconst dtfCache = {}\nconst getDateTimeFormat = (timezone, options = {}) => {\n  const timeZoneName = options.timeZoneName || 'short'\n  const key = `${timezone}|${timeZoneName}`\n  let dtf = dtfCache[key]\n  if (!dtf) {\n    dtf = new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: timezone,\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName\n    })\n    dtfCache[key] = dtf\n  }\n  return dtf\n}\n\nexport default (o, c, d) => {\n  let defaultTimezone\n\n  const makeFormatParts = (timestamp, timezone, options = {}) => {\n    const date = new Date(timestamp)\n    const dtf = getDateTimeFormat(timezone, options)\n    return dtf.formatToParts(date)\n  }\n\n  const tzOffset = (timestamp, timezone) => {\n    const formatResult = makeFormatParts(timestamp, timezone)\n    const filled = []\n    for (let i = 0; i < formatResult.length; i += 1) {\n      const { type, value } = formatResult[i]\n      const pos = typeToPos[type]\n\n      if (pos >= 0) {\n        filled[pos] = parseInt(value, 10)\n      }\n    }\n    const hour = filled[3]\n    // Workaround for the same behavior in different node version\n    // https://github.com/nodejs/node/issues/33027\n    /* istanbul ignore next */\n    const fixedHour = hour === 24 ? 0 : hour\n    const utcString = `${filled[0]}-${filled[1]}-${filled[2]} ${fixedHour}:${filled[4]}:${filled[5]}:000`\n    const utcTs = d.utc(utcString).valueOf()\n    let asTS = +timestamp\n    const over = asTS % 1000\n    asTS -= over\n    return (utcTs - asTS) / (60 * 1000)\n  }\n\n  // find the right offset a given local time. The o input is our guess, which determines which\n  // offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\n  // https://github.com/moment/luxon/blob/master/src/datetime.js#L76\n  const fixOffset = (localTS, o0, tz) => {\n    // Our UTC time is just a guess because our offset is just a guess\n    let utcGuess = localTS - (o0 * 60 * 1000)\n    // Test whether the zone matches the offset for this ts\n    const o2 = tzOffset(utcGuess, tz)\n    // If so, offset didn't change and we're done\n    if (o0 === o2) {\n      return [utcGuess, o0]\n    }\n    // If not, change the ts by the difference in the offset\n    utcGuess -= (o2 - o0) * 60 * 1000\n    // If that gives us the local time we want, we're done\n    const o3 = tzOffset(utcGuess, tz)\n    if (o2 === o3) {\n      return [utcGuess, o2]\n    }\n    // If it's different, we're in a hole time.\n    // The offset has changed, but the we don't adjust the time\n    return [localTS - (Math.min(o2, o3) * 60 * 1000), Math.max(o2, o3)]\n  }\n\n  const proto = c.prototype\n\n  proto.tz = function (timezone = defaultTimezone, keepLocalTime) {\n    const oldOffset = this.utcOffset()\n    const date = this.toDate()\n    const target = date.toLocaleString('en-US', { timeZone: timezone })\n    const diff = Math.round((date - new Date(target)) / 1000 / 60)\n    let ins = d(target, { locale: this.$L }).$set(MS, this.$ms)\n      .utcOffset((-Math.round(date.getTimezoneOffset() / 15) * 15) - diff, true)\n    if (keepLocalTime) {\n      const newOffset = ins.utcOffset()\n      ins = ins.add(oldOffset - newOffset, MIN)\n    }\n    ins.$x.$timezone = timezone\n    return ins\n  }\n\n  proto.offsetName = function (type) {\n    // type: short(default) / long\n    const zone = this.$x.$timezone || d.tz.guess()\n    const result = makeFormatParts(this.valueOf(), zone, { timeZoneName: type }).find(m => m.type.toLowerCase() === 'timezonename')\n    return result && result.value\n  }\n\n  const oldStartOf = proto.startOf\n  proto.startOf = function (units, startOf) {\n    if (!this.$x || !this.$x.$timezone) {\n      return oldStartOf.call(this, units, startOf)\n    }\n\n    const withoutTz = d(this.format('YYYY-MM-DD HH:mm:ss:SSS'), { locale: this.$L })\n    const startOfWithoutTz = oldStartOf.call(withoutTz, units, startOf)\n    return startOfWithoutTz.tz(this.$x.$timezone, true)\n  }\n\n  d.tz = function (input, arg1, arg2) {\n    const parseFormat = arg2 && arg1\n    const timezone = arg2 || arg1 || defaultTimezone\n    const previousOffset = tzOffset(+d(), timezone)\n    if (typeof input !== 'string') {\n      // timestamp number || js Date || Day.js\n      return d(input).tz(timezone)\n    }\n    const localTs = d.utc(input, parseFormat).valueOf()\n    const [targetTs, targetOffset] = fixOffset(localTs, previousOffset, timezone)\n    const ins = d(targetTs).utcOffset(targetOffset)\n    ins.$x.$timezone = timezone\n    return ins\n  }\n\n  d.tz.guess = function () {\n    return Intl.DateTimeFormat().resolvedOptions().timeZone\n  }\n\n  d.tz.setDefault = function (timezone) {\n    defaultTimezone = timezone\n  }\n}\n"],"names":[],"mappings":"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"}