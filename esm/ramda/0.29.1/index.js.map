{
  "version": 3,
  "sources": ["../source/F.js", "../source/T.js", "../source/__.js", "../source/internal/_isPlaceholder.js", "../source/internal/_curry1.js", "../source/internal/_curry2.js", "../source/add.js", "../source/internal/_concat.js", "../source/internal/_arity.js", "../source/internal/_curryN.js", "../source/curryN.js", "../source/addIndex.js", "../source/addIndexRight.js", "../source/internal/_curry3.js", "../source/adjust.js", "../source/internal/_isArray.js", "../source/internal/_isTransformer.js", "../source/internal/_dispatchable.js", "../source/internal/_reduced.js", "../source/internal/_xfBase.js", "../source/internal/_xall.js", "../source/all.js", "../source/internal/_arrayFromIterator.js", "../source/internal/_includesWith.js", "../source/internal/_functionName.js", "../source/internal/_has.js", "../source/internal/_objectIs.js", "../source/internal/_isArguments.js", "../source/keys.js", "../source/type.js", "../source/internal/_equals.js", "../source/equals.js", "../source/internal/_indexOf.js", "../source/internal/_includes.js", "../source/internal/_map.js", "../source/internal/_quote.js", "../source/internal/_toISOString.js", "../source/internal/_complement.js", "../source/internal/_arrayReduce.js", "../source/internal/_filter.js", "../source/internal/_isObject.js", "../source/internal/_xfilter.js", "../source/filter.js", "../source/reject.js", "../source/internal/_toString.js", "../source/toString.js", "../source/max.js", "../source/internal/_xmap.js", "../source/map.js", "../source/internal/_isInteger.js", "../source/internal/_isString.js", "../source/nth.js", "../source/prop.js", "../source/pluck.js", "../source/internal/_isArrayLike.js", "../source/internal/_createReduce.js", "../source/internal/_xArrayReduce.js", "../source/bind.js", "../source/internal/_xReduce.js", "../source/internal/_xwrap.js", "../source/reduce.js", "../source/allPass.js", "../source/always.js", "../source/and.js", "../source/internal/_xany.js", "../source/any.js", "../source/anyPass.js", "../source/internal/_reduce.js", "../source/ap.js", "../source/internal/_aperture.js", "../source/internal/_xaperture.js", "../source/aperture.js", "../source/append.js", "../source/apply.js", "../source/values.js", "../source/applySpec.js", "../source/applyTo.js", "../source/ascend.js", "../source/internal/_assoc.js", "../source/isNil.js", "../source/assocPath.js", "../source/assoc.js", "../source/nAry.js", "../source/binary.js", "../source/internal/_isFunction.js", "../source/liftN.js", "../source/lift.js", "../source/both.js", "../source/call.js", "../source/internal/_makeFlat.js", "../source/internal/_forceReduced.js", "../source/internal/_flatCat.js", "../source/internal/_xchain.js", "../source/chain.js", "../source/clamp.js", "../source/internal/_cloneRegExp.js", "../source/internal/_clone.js", "../source/clone.js", "../source/collectBy.js", "../source/comparator.js", "../source/not.js", "../source/complement.js", "../source/internal/_pipe.js", "../source/internal/_checkForMethod.js", "../source/slice.js", "../source/tail.js", "../source/pipe.js", "../source/reverse.js", "../source/compose.js", "../source/head.js", "../source/internal/_identity.js", "../source/identity.js", "../source/pipeWith.js", "../source/composeWith.js", "../source/concat.js", "../source/cond.js", "../source/curry.js", "../source/constructN.js", "../source/construct.js", "../source/converge.js", "../source/count.js", "../source/internal/_xreduceBy.js", "../source/reduceBy.js", "../source/countBy.js", "../source/dec.js", "../source/defaultTo.js", "../source/descend.js", "../source/internal/_Set.js", "../source/difference.js", "../source/differenceWith.js", "../source/remove.js", "../source/internal/_dissoc.js", "../source/dissocPath.js", "../source/dissoc.js", "../source/divide.js", "../source/internal/_xdrop.js", "../source/drop.js", "../source/internal/_xtake.js", "../source/take.js", "../source/internal/_dropLast.js", "../source/internal/_xdropLast.js", "../source/dropLast.js", "../source/internal/_dropLastWhile.js", "../source/internal/_xdropLastWhile.js", "../source/dropLastWhile.js", "../source/internal/_xdropRepeatsWith.js", "../source/last.js", "../source/dropRepeatsWith.js", "../source/dropRepeats.js", "../source/eqBy.js", "../source/dropRepeatsBy.js", "../source/internal/_xdropWhile.js", "../source/dropWhile.js", "../source/or.js", "../source/either.js", "../source/internal/_isTypedArray.js", "../source/empty.js", "../source/takeLast.js", "../source/endsWith.js", "../source/eqProps.js", "../source/evolve.js", "../source/internal/_xfind.js", "../source/find.js", "../source/internal/_xfindIndex.js", "../source/findIndex.js", "../source/internal/_xfindLast.js", "../source/findLast.js", "../source/internal/_xfindLastIndex.js", "../source/findLastIndex.js", "../source/flatten.js", "../source/flip.js", "../source/forEach.js", "../source/forEachObjIndexed.js", "../source/fromPairs.js", "../source/groupBy.js", "../source/groupWith.js", "../source/gt.js", "../source/gte.js", "../source/hasPath.js", "../source/has.js", "../source/hasIn.js", "../source/identical.js", "../source/ifElse.js", "../source/inc.js", "../source/includes.js", "../source/indexBy.js", "../source/indexOf.js", "../source/init.js", "../source/innerJoin.js", "../source/insert.js", "../source/insertAll.js", "../source/internal/_xuniqBy.js", "../source/uniqBy.js", "../source/uniq.js", "../source/intersection.js", "../source/intersperse.js", "../source/internal/_objectAssign.js", "../source/objOf.js", "../source/internal/_stepCat.js", "../source/into.js", "../source/invert.js", "../source/invertObj.js", "../source/invoker.js", "../source/is.js", "../source/isEmpty.js", "../source/isNotNil.js", "../source/join.js", "../source/juxt.js", "../source/keysIn.js", "../source/lastIndexOf.js", "../source/internal/_isNumber.js", "../source/length.js", "../source/lens.js", "../source/update.js", "../source/lensIndex.js", "../source/paths.js", "../source/path.js", "../source/lensPath.js", "../source/lensProp.js", "../source/lt.js", "../source/lte.js", "../source/mapAccum.js", "../source/mapAccumRight.js", "../source/mapObjIndexed.js", "../source/match.js", "../source/mathMod.js", "../source/maxBy.js", "../source/sum.js", "../source/mean.js", "../source/median.js", "../source/memoizeWith.js", "../source/mergeAll.js", "../source/mergeWithKey.js", "../source/mergeDeepWithKey.js", "../source/mergeDeepLeft.js", "../source/mergeDeepRight.js", "../source/mergeDeepWith.js", "../source/mergeLeft.js", "../source/mergeRight.js", "../source/mergeWith.js", "../source/min.js", "../source/minBy.js", "../source/internal/_modify.js", "../source/modifyPath.js", "../source/modify.js", "../source/modulo.js", "../source/move.js", "../source/multiply.js", "../source/partialObject.js", "../source/negate.js", "../source/none.js", "../source/nthArg.js", "../source/o.js", "../source/of.js", "../source/omit.js", "../source/on.js", "../source/once.js", "../source/internal/_assertPromise.js", "../source/otherwise.js", "../source/over.js", "../source/pair.js", "../source/internal/_createPartialApplicator.js", "../source/partial.js", "../source/partialRight.js", "../source/partition.js", "../source/pathEq.js", "../source/pathOr.js", "../source/pathSatisfies.js", "../source/pick.js", "../source/pickAll.js", "../source/pickBy.js", "../source/prepend.js", "../source/product.js", "../source/useWith.js", "../source/project.js", "../source/internal/_promap.js", "../source/internal/_xpromap.js", "../source/promap.js", "../source/propEq.js", "../source/propIs.js", "../source/propOr.js", "../source/propSatisfies.js", "../source/props.js", "../source/range.js", "../source/reduceRight.js", "../source/reduceWhile.js", "../source/reduced.js", "../source/times.js", "../source/repeat.js", "../source/replace.js", "../source/internal/_xscan.js", "../source/scan.js", "../source/sequence.js", "../source/set.js", "../source/sort.js", "../source/sortBy.js", "../source/sortWith.js", "../source/split.js", "../source/splitAt.js", "../source/splitEvery.js", "../source/splitWhen.js", "../source/splitWhenever.js", "../source/startsWith.js", "../source/subtract.js", "../source/swap.js", "../source/symmetricDifference.js", "../source/symmetricDifferenceWith.js", "../source/takeLastWhile.js", "../source/internal/_xtakeWhile.js", "../source/takeWhile.js", "../source/internal/_xtap.js", "../source/tap.js", "../source/internal/_isRegExp.js", "../source/test.js", "../source/andThen.js", "../source/toLower.js", "../source/toPairs.js", "../source/toPairsIn.js", "../source/toUpper.js", "../source/transduce.js", "../source/transpose.js", "../source/traverse.js", "../source/trim.js", "../source/tryCatch.js", "../source/unapply.js", "../source/unary.js", "../source/uncurryN.js", "../source/unfold.js", "../source/union.js", "../source/internal/_xuniqWith.js", "../source/uniqWith.js", "../source/unionWith.js", "../source/unless.js", "../source/unnest.js", "../source/until.js", "../source/unwind.js", "../source/valuesIn.js", "../source/view.js", "../source/when.js", "../source/where.js", "../source/whereAny.js", "../source/whereEq.js", "../source/without.js", "../source/xor.js", "../source/xprod.js", "../source/zip.js", "../source/zipObj.js", "../source/zipWith.js", "../source/thunkify.js"],
  "sourcesContent": ["\n\n/**\n * A function that always returns `false`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.T\n * @example\n *\n *      R.F(); //=> false\n */\nvar F = function() {return false;};\nexport default F;\n", "\n\n/**\n * A function that always returns `true`. Any passed in parameters are ignored.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig * -> Boolean\n * @param {*}\n * @return {Boolean}\n * @see R.F\n * @example\n *\n *      R.T(); //=> true\n */\nvar T = function() {return true;};\nexport default T;\n", "/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @name __\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      const greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nexport default {'@@functional/placeholder': true};\n", "export default function _isPlaceholder(a) {\n  return a != null &&\n         typeof a === 'object' &&\n         a['@@functional/placeholder'] === true;\n}\n", "import _isPlaceholder from './_isPlaceholder.js';\n\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}\n", "import _curry1 from './_curry1.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a)\n          ? f2\n          : _curry1(function(_b) { return fn(a, _b); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b)\n          ? f2\n          : _isPlaceholder(a)\n            ? _curry1(function(_a) { return fn(_a, b); })\n            : _isPlaceholder(b)\n              ? _curry1(function(_b) { return fn(a, _b); })\n              : fn(a, b);\n    }\n  };\n}\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Adds two values.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @see R.subtract\n * @example\n *\n *      R.add(2, 3);       //=>  5\n *      R.add(7)(10);      //=> 17\n */\nvar add = _curry2(function add(a, b) {\n  return Number(a) + Number(b);\n});\nexport default add;\n", "/**\n * Private `concat` function to merge two array-like objects.\n *\n * @private\n * @param {Array|Arguments} [set1=[]] An array-like object.\n * @param {Array|Arguments} [set2=[]] An array-like object.\n * @return {Array} A new, merged array.\n * @example\n *\n *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n */\nexport default function _concat(set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx;\n  var len1 = set1.length;\n  var len2 = set2.length;\n  var result = [];\n\n  idx = 0;\n  while (idx < len1) {\n    result[result.length] = set1[idx];\n    idx += 1;\n  }\n  idx = 0;\n  while (idx < len2) {\n    result[result.length] = set2[idx];\n    idx += 1;\n  }\n  return result;\n}\n", "export default function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0: return function() { return fn.apply(this, arguments); };\n    case 1: return function(a0) { return fn.apply(this, arguments); };\n    case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n}\n", "import _arity from './_arity.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curryN(length, received, fn) {\n  return function() {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    var hasPlaceholder = false;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length &&\n          (!_isPlaceholder(received[combinedIdx]) ||\n           argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      } else {\n        hasPlaceholder = true;\n      }\n      combinedIdx += 1;\n    }\n\n    return (!hasPlaceholder && left <= 0)\n      ? fn.apply(this, combined)\n      : _arity(Math.max(0, left), _curryN(length, combined, fn));\n  };\n}\n", "import _arity from './internal/_arity.js';\nimport _curry1 from './internal/_curry1.js';\nimport _curry2 from './internal/_curry2.js';\nimport _curryN from './internal/_curryN.js';\n\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      const sumArgs = (...args) => R.sum(args);\n *\n *      const curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n */\nvar curryN = _curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\nexport default curryN;\n", "import _concat from './internal/_concat.js';\nimport _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n\n\n/**\n * Creates a new list iteration function from an existing one by adding two new\n * parameters to its callback function: the current index, and the entire list.\n *\n * This would turn, for instance, [`R.map`](#map) function into one that\n * more closely resembles `Array.prototype.map`. Note that this will only work\n * for functions in which the iteration callback function is the first\n * parameter, and where the list is the last parameter. (This latter might be\n * unimportant if the list parameter is not used.)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Function\n * @category List\n * @sig (((a ...) -> b) ... -> [a] -> *) -> (((a ..., Int, [a]) -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const mapIndexed = R.addIndex(R.map);\n *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n */\nvar addIndex = _curry1(function addIndex(fn) {\n  return curryN(fn.length, function() {\n    var idx = 0;\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function() {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx += 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\nexport default addIndex;\n", "import _concat from './internal/_concat.js';\nimport _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n\n\n/**\n * As with `addIndex`, `addIndexRight` creates a new list iteration function\n * from an existing one by adding two new parameters to its callback function:\n * the current index, and the entire list.\n *\n * Unlike `addIndex`, `addIndexRight` iterates from the right to the left.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category Function\n * @category List\n * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n * @param {Function} fn A list iteration function that does not pass index or list to its callback\n * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n * @example\n *\n *      const revmap = (fn, ary) => R.map(fn, R.reverse(ary));\n *      const revmapIndexed = R.addIndexRight(revmap);\n *      revmapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n *      //=> [ '5-r', '4-a', '3-b', '2-o', '1-o', '0-f' ]\n */\nvar addIndexRight = _curry1(function addIndex(fn) {\n  return curryN(fn.length, function() {\n    var origFn = arguments[0];\n    var list = arguments[arguments.length - 1];\n    var idx = list.length - 1;\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = function() {\n      var result = origFn.apply(this, _concat(arguments, [idx, list]));\n      idx -= 1;\n      return result;\n    };\n    return fn.apply(this, args);\n  });\n});\n\nexport default addIndexRight;\n", "import _curry1 from './_curry1.js';\nimport _curry2 from './_curry2.js';\nimport _isPlaceholder from './_isPlaceholder.js';\n\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a)\n          ? f3\n          : _curry2(function(_b, _c) { return fn(a, _b, _c); });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b)\n          ? f3\n          : _isPlaceholder(a)\n            ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n            : _isPlaceholder(b)\n              ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n              : _curry1(function(_c) { return fn(a, b, _c); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c)\n          ? f3\n          : _isPlaceholder(a) && _isPlaceholder(b)\n            ? _curry2(function(_a, _b) { return fn(_a, _b, c); })\n            : _isPlaceholder(a) && _isPlaceholder(c)\n              ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n              : _isPlaceholder(b) && _isPlaceholder(c)\n                ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n                : _isPlaceholder(a)\n                  ? _curry1(function(_a) { return fn(_a, b, c); })\n                  : _isPlaceholder(b)\n                    ? _curry1(function(_b) { return fn(a, _b, c); })\n                    : _isPlaceholder(c)\n                      ? _curry1(function(_c) { return fn(a, b, _c); })\n                      : fn(a, b, c);\n    }\n  };\n}\n", "import _concat from './internal/_concat.js';\nimport _curry3 from './internal/_curry3.js';\n\n\n/**\n * Applies a function to the value at the given index of an array, returning a\n * new copy of the array with the element at the given index replaced with the\n * result of the function application.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> (a -> a) -> [a] -> [a]\n * @param {Number} idx The index.\n * @param {Function} fn The function to apply.\n * @param {Array|Arguments} list An array-like object whose value\n *        at the supplied index will be replaced.\n * @return {Array} A copy of the supplied array-like object with\n *         the element at index `idx` replaced with the value\n *         returned by applying `fn` to the existing element.\n * @see R.update\n * @example\n *\n *      R.adjust(1, R.toUpper, ['a', 'b', 'c', 'd']);      //=> ['a', 'B', 'c', 'd']\n *      R.adjust(-1, R.toUpper, ['a', 'b', 'c', 'd']);     //=> ['a', 'b', 'c', 'D']\n * @symb R.adjust(-1, f, [a, b]) = [a, f(b)]\n * @symb R.adjust(0, f, [a, b]) = [f(a), b]\n */\nvar adjust = _curry3(function adjust(idx, fn, list) {\n  var len = list.length;\n  if (idx >= len || idx < -len) {\n    return list;\n  }\n  var _idx = (len + idx) % len;\n  var _list = _concat(list);\n  _list[_idx] = fn(list[_idx]);\n  return _list;\n});\nexport default adjust;\n", "/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nexport default Array.isArray || function _isArray(val) {\n  return (val != null &&\n          val.length >= 0 &&\n          Object.prototype.toString.call(val) === '[object Array]');\n};\n", "export default function _isTransformer(obj) {\n  return obj != null && typeof obj['@@transducer/step'] === 'function';\n}\n", "import _isArray from './_isArray.js';\nimport _isTransformer from './_isTransformer.js';\n\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with one of the given method names, it will\n * execute that function (functor case). Otherwise, if it is a transformer,\n * uses transducer created by [transducerCreator] to return a new transformer\n * (transducer case).\n * Otherwise, it will default to executing [fn].\n *\n * @private\n * @param {Array} methodNames properties to check for a custom implementation\n * @param {Function} transducerCreator transducer factory if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nexport default function _dispatchable(methodNames, transducerCreator, fn) {\n  return function() {\n    if (arguments.length === 0) {\n      return fn();\n    }\n    var obj = arguments[arguments.length - 1];\n    if (!_isArray(obj)) {\n      var idx = 0;\n      while (idx < methodNames.length) {\n        if (typeof obj[methodNames[idx]] === 'function') {\n          return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));\n        }\n        idx += 1;\n      }\n      if (_isTransformer(obj)) {\n        var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n}\n", "export default function _reduced(x) {\n  return x && x['@@transducer/reduced'] ? x :\n    {\n      '@@transducer/value': x,\n      '@@transducer/reduced': true\n    };\n}\n", "export default {\n  init: function() {\n    return this.xf['@@transducer/init']();\n  },\n  result: function(result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};\n", "import _reduced from './_reduced.js';\nimport _xfBase from './_xfBase.js';\n\n\nfunction XAll(f, xf) {\n  this.xf = xf;\n  this.f = f;\n  this.all = true;\n}\nXAll.prototype['@@transducer/init'] = _xfBase.init;\nXAll.prototype['@@transducer/result'] = function(result) {\n  if (this.all) {\n    result = this.xf['@@transducer/step'](result, true);\n  }\n  return this.xf['@@transducer/result'](result);\n};\nXAll.prototype['@@transducer/step'] = function(result, input) {\n  if (!this.f(input)) {\n    this.all = false;\n    result = _reduced(this.xf['@@transducer/step'](result, false));\n  }\n  return result;\n};\n\nexport default function _xall(f) {\n  return function(xf) { return new XAll(f, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xall from './internal/_xall.js';\n\n\n/**\n * Returns `true` if all elements of the list match the predicate, `false` if\n * there are any that don't.\n *\n * Dispatches to the `all` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n *         otherwise.\n * @see R.any, R.none, R.transduce\n * @example\n *\n *      const equals3 = R.equals(3);\n *      R.all(equals3)([3, 3, 3, 3]); //=> true\n *      R.all(equals3)([3, 3, 1, 3]); //=> false\n */\nvar all = _curry2(_dispatchable(['all'], _xall, function all(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (!fn(list[idx])) {\n      return false;\n    }\n    idx += 1;\n  }\n  return true;\n}));\nexport default all;\n", "export default function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n}\n", "export default function _includesWith(pred, x, list) {\n  var idx = 0;\n  var len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}\n", "export default function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n}\n", "export default function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n", "// Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\nfunction _objectIs(a, b) {\n  // SameValue algorithm\n  if (a === b) { // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n}\n\nexport default typeof Object.is === 'function' ? Object.is : _objectIs;\n", "import _has from './_has.js';\n\n\nvar toString = Object.prototype.toString;\nvar _isArguments = (function() {\n  return toString.call(arguments) === '[object Arguments]' ?\n    function _isArguments(x) { return toString.call(x) === '[object Arguments]'; } :\n    function _isArguments(x) { return _has('callee', x); };\n}());\n\nexport default _isArguments;\n", "import _curry1 from './internal/_curry1.js';\nimport _has from './internal/_has.js';\nimport _isArguments from './internal/_isArguments.js';\n\n// cover IE < 9 keys issues\nvar hasEnumBug = !({toString: null}).propertyIsEnumerable('toString');\nvar nonEnumerableProps = [\n  'constructor', 'valueOf', 'isPrototypeOf', 'toString',\n  'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'\n];\n// Safari bug\nvar hasArgsEnumBug = (function() {\n  'use strict';\n  return arguments.propertyIsEnumerable('length');\n}());\n\nvar contains = function contains(list, item) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (list[idx] === item) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n};\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @see R.keysIn, R.values, R.toPairs\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nvar keys = typeof Object.keys === 'function' && !hasArgsEnumBug ?\n  _curry1(function keys(obj) {\n    return Object(obj) !== obj ? [] : Object.keys(obj);\n  }) :\n  _curry1(function keys(obj) {\n    if (Object(obj) !== obj) {\n      return [];\n    }\n    var prop, nIdx;\n    var ks = [];\n    var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n    for (prop in obj) {\n      if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n        ks[ks.length] = prop;\n      }\n    }\n    if (hasEnumBug) {\n      nIdx = nonEnumerableProps.length - 1;\n      while (nIdx >= 0) {\n        prop = nonEnumerableProps[nIdx];\n        if (_has(prop, obj) && !contains(ks, prop)) {\n          ks[ks.length] = prop;\n        }\n        nIdx -= 1;\n      }\n    }\n    return ks;\n  });\nexport default keys;\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig * -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(async () => {}); //=> \"AsyncFunction\"\n *      R.type(undefined); //=> \"Undefined\"\n */\nvar type = _curry1(function type(val) {\n  return val === null\n    ? 'Null'\n    : val === undefined\n      ? 'Undefined'\n      : Object.prototype.toString.call(val).slice(8, -1);\n});\nexport default type;\n", "import _arrayFromIterator from './_arrayFromIterator.js';\nimport _includesWith from './_includesWith.js';\nimport _functionName from './_functionName.js';\nimport _has from './_has.js';\nimport _objectIs from './_objectIs.js';\nimport keys from '../keys.js';\nimport type from '../type.js';\n\n/**\n * private _uniqContentEquals function.\n * That function is checking equality of 2 iterator contents with 2 assumptions\n * - iterators lengths are the same\n * - iterators values are unique\n *\n * false-positive result will be returned for comparison of, e.g.\n * - [1,2,3] and [1,2,3,4]\n * - [1,1,1] and [1,2,3]\n * */\n\nfunction _uniqContentEquals(aIterator, bIterator, stackA, stackB) {\n  var a = _arrayFromIterator(aIterator);\n  var b = _arrayFromIterator(bIterator);\n\n  function eq(_a, _b) {\n    return _equals(_a, _b, stackA.slice(), stackB.slice());\n  }\n\n  // if *a* array contains any element that is not included in *b*\n  return !_includesWith(function(b, aItem) {\n    return !_includesWith(eq, aItem, b);\n  }, b, a);\n}\n\nexport default function _equals(a, b, stackA, stackB) {\n  if (_objectIs(a, b)) {\n    return true;\n  }\n\n  var typeA = type(a);\n\n  if (typeA !== type(b)) {\n    return false;\n  }\n\n  if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {\n    return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) &&\n      typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) &&\n      typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (typeA) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' &&\n        _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && _objectIs(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!_objectIs(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source &&\n          a.global === b.global &&\n          a.ignoreCase === b.ignoreCase &&\n          a.multiline === b.multiline &&\n          a.sticky === b.sticky &&\n          a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  switch (typeA) {\n    case 'Map':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));\n    case 'Set':\n      if (a.size !== b.size) {\n        return false;\n      }\n\n      return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n    case 'Date':\n    case 'Error':\n    case 'RegExp':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var extendedStackA = stackA.concat([a]);\n  var extendedStackB = stackB.concat([b]);\n\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  return true;\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _equals from './internal/_equals.js';\n\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      const a = {}; a.v = a;\n *      const b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nvar equals = _curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\nexport default equals;\n", "import equals from '../equals.js';\n\n\nexport default function _indexOf(list, a, idx) {\n  var inf, item;\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n          while (idx < list.length) {\n            item = list[idx];\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(a, idx);\n\n      // all these types can utilise Set\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}\n", "import _indexOf from './_indexOf.js';\n\n\nexport default function _includes(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n}\n", "export default function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n}\n", "export default function _quote(s) {\n  var escaped = s\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/[\\b]/g, '\\\\b')  // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f')\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\r/g, '\\\\r')\n    .replace(/\\t/g, '\\\\t')\n    .replace(/\\v/g, '\\\\v')\n    .replace(/\\0/g, '\\\\0');\n\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n}\n", "/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nvar pad = function pad(n) { return (n < 10 ? '0' : '') + n; };\n\nvar _toISOString = typeof Date.prototype.toISOString === 'function' ?\n  function _toISOString(d) {\n    return d.toISOString();\n  } :\n  function _toISOString(d) {\n    return (\n      d.getUTCFullYear() + '-' +\n      pad(d.getUTCMonth() + 1) + '-' +\n      pad(d.getUTCDate()) + 'T' +\n      pad(d.getUTCHours()) + ':' +\n      pad(d.getUTCMinutes()) + ':' +\n      pad(d.getUTCSeconds()) + '.' +\n      (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z'\n    );\n  };\n\nexport default _toISOString;\n", "export default function _complement(f) {\n  return function() {\n    return !f.apply(this, arguments);\n  };\n}\n", "export default function _arrayReduce(reducer, acc, list) {\n  var index = 0;\n  var length = list.length;\n  while (index < length) {\n    acc = reducer(acc, list[index]);\n    index += 1;\n  }\n  return acc;\n}\n", "export default function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n}\n", "export default function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n}\n", "import _xfBase from './_xfBase.js';\n\n\nfunction XFilter(f, xf) {\n  this.xf = xf;\n  this.f = f;\n}\nXFilter.prototype['@@transducer/init'] = _xfBase.init;\nXFilter.prototype['@@transducer/result'] = _xfBase.result;\nXFilter.prototype['@@transducer/step'] = function(result, input) {\n  return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n};\n\nexport default function _xfilter(f) {\n  return function(xf) { return new XFilter(f, xf); };\n}\n", "import _arrayReduce from './internal/_arrayReduce.js';\nimport _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _filter from './internal/_filter.js';\nimport _isObject from './internal/_isObject.js';\nimport _xfilter from './internal/_xfilter.js';\nimport keys from './keys.js';\n\n\n/**\n * Takes a predicate and a `Filterable`, and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @category Object\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array} Filterable\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      const isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nvar filter = _curry2(_dispatchable(['fantasy-land/filter', 'filter'], _xfilter, function(pred, filterable) {\n  return (\n    _isObject(filterable) ?\n      _arrayReduce(function(acc, key) {\n        if (pred(filterable[key])) {\n          acc[key] = filterable[key];\n        }\n        return acc;\n      }, {}, keys(filterable)) :\n    // else\n      _filter(pred, filterable)\n  );\n}));\nexport default filter;\n", "import _complement from './internal/_complement.js';\nimport _curry2 from './internal/_curry2.js';\nimport filter from './filter.js';\n\n\n/**\n * The complement of [`filter`](#filter).\n *\n * Acts as a transducer if a transformer is given in list position. Filterable\n * objects include plain objects or any object that has a filter method such\n * as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      const isOdd = (n) => n % 2 !== 0;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nvar reject = _curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\nexport default reject;\n", "import _includes from './_includes.js';\nimport _map from './_map.js';\nimport _quote from './_quote.js';\nimport _toISOString from './_toISOString.js';\nimport keys from '../keys.js';\nimport reject from '../reject.js';\n\n\nexport default function _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _includes(y, xs) ? '<Circular>' : _toString(y, xs);\n  };\n\n  //  mapPairs :: (Object, [String]) -> [String]\n  var mapPairs = function(obj, keys) {\n    return _map(function(k) { return _quote(k) + ': ' + recur(obj[k]); }, keys.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function(k) { return /^\\d+$/.test(k); }, keys(x)))).join(', ') + ']';\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n    case '[object Map]':\n      return 'new Map(' + recur(Array.from(x)) + ')';\n    case '[object Null]':\n      return 'null';\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n    case '[object Set]':\n      return 'new Set(' + recur(Array.from(x).sort()) + ')';\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n    case '[object Undefined]':\n      return 'undefined';\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n}\n", "import _curry1 from './internal/_curry1.js';\nimport _toString from './internal/_toString.js';\n\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nvar toString = _curry1(function toString(val) { return _toString(val, []); });\nexport default toString;\n", "import _curry2 from './internal/_curry2.js';\nimport toString from './toString.js';\n\n/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */\nvar max = _curry2(function max(a, b) {\n  if (a === b) { return b; }\n\n  function safeMax(x, y) {\n    if ((x > y) !== (y > x)) { return y > x ? y : x; }\n    return undefined;\n  }\n\n  var maxByValue = safeMax(a, b);\n  if (maxByValue !== undefined) { return maxByValue; }\n\n  var maxByType = safeMax(typeof a, typeof b);\n  if (maxByType !== undefined) { return maxByType === typeof a ? a : b; }\n\n  var stringA = toString(a);\n  var maxByStringValue = safeMax(stringA, toString(b));\n  if (maxByStringValue !== undefined) { return maxByStringValue === stringA ? a : b; }\n\n  return b;\n});\nexport default max;\n", "import _xfBase from './_xfBase.js';\n\n\nfunction XMap(f, xf) {\n  this.xf = xf;\n  this.f = f;\n}\nXMap.prototype['@@transducer/init'] = _xfBase.init;\nXMap.prototype['@@transducer/result'] = _xfBase.result;\nXMap.prototype['@@transducer/step'] = function(result, input) {\n  return this.xf['@@transducer/step'](result, this.f(input));\n};\n\nvar _xmap = function _xmap(f) {\n  return function(xf) { return new XMap(f, xf); };\n};\nexport default _xmap;\n", "import _arrayReduce from './internal/_arrayReduce.js';\nimport _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _map from './internal/_map.js';\nimport _xmap from './internal/_xmap.js';\nimport curryN from './curryN.js';\nimport keys from './keys.js';\n\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex, R.pluck, R.project\n * @example\n *\n *      const double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n * @symb R.map(f, [a, b]) = [f(a), f(b)]\n * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n * @symb R.map(f, functor_o) = functor_o.map(f)\n */\nvar map = _curry2(_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function() {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _arrayReduce(function(acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\nexport default map;\n", "/**\n * Determine if the passed argument is an integer.\n *\n * @private\n * @param {*} n\n * @category Type\n * @return {Boolean}\n */\nexport default Number.isInteger || function _isInteger(n) {\n  return (n << 0) === n;\n};\n", "export default function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _isString from './internal/_isString.js';\n\n\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      const list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n * @symb R.nth(-1, [a, b, c]) = c\n * @symb R.nth(0, [a, b, c]) = a\n * @symb R.nth(1, [a, b, c]) = b\n */\nvar nth = _curry2(function nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return _isString(list) ? list.charAt(idx) : list[idx];\n});\nexport default nth;\n", "import _curry2 from './internal/_curry2.js';\nimport _isInteger from './internal/_isInteger.js';\nimport nth from './nth.js';\n\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx -> {s: a} -> a | Undefined\n * @param {String|Number} p The property name or array index\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path, R.props, R.pluck, R.project, R.nth\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n *      R.prop(0, [100]); //=> 100\n *      R.compose(R.inc, R.prop('x'))({ x: 3 }) //=> 4\n */\n\nvar prop = _curry2(function prop(p, obj) {\n  if (obj == null) {\n    return;\n  }\n  return _isInteger(p) ? nth(p, obj) : obj[p];\n});\nexport default prop;\n", "import _curry2 from './internal/_curry2.js';\nimport map from './map.js';\nimport prop from './prop.js';\n\n\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.project, R.prop, R.props\n * @example\n *\n *      var getAges = R.pluck('age');\n *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]\n *\n *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\nvar pluck = _curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\nexport default pluck;\n", "import _curry1 from './_curry1.js';\nimport _isArray from './_isArray.js';\nimport _isString from './_isString.js';\n\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @private\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      _isArrayLike([]); //=> true\n *      _isArrayLike(true); //=> false\n *      _isArrayLike({}); //=> false\n *      _isArrayLike({length: 10}); //=> false\n *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n *      _isArrayLike({nodeType: 1, length: 1}) // => false\n */\nvar _isArrayLike = _curry1(function isArrayLike(x) {\n  if (_isArray(x)) { return true; }\n  if (!x) { return false; }\n  if (typeof x !== 'object') { return false; }\n  if (_isString(x)) { return false; }\n  if (x.length === 0) { return true; }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\nexport default _isArrayLike;\n", "import _isArrayLike from './_isArrayLike.js';\n\n\nvar symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';\n\nexport default function _createReduce(arrayReduce, methodReduce, iterableReduce) {\n  return function _reduce(xf, acc, list) {\n    if (_isArrayLike(list)) {\n      return arrayReduce(xf, acc, list);\n    }\n    if (list == null) {\n      return acc;\n    }\n    if (typeof list['fantasy-land/reduce'] === 'function') {\n      return methodReduce(xf, acc, list, 'fantasy-land/reduce');\n    }\n    if (list[symIterator] != null) {\n      return iterableReduce(xf, acc, list[symIterator]());\n    }\n    if (typeof list.next === 'function') {\n      return iterableReduce(xf, acc, list);\n    }\n    if (typeof list.reduce === 'function') {\n      return methodReduce(xf, acc, list, 'reduce');\n    }\n\n    throw new TypeError('reduce: list must be array or iterable');\n  };\n}\n", "export default function _xArrayReduce(xf, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    acc = xf['@@transducer/step'](acc, list[idx]);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    idx += 1;\n  }\n  return xf['@@transducer/result'](acc);\n}\n", "import _arity from './internal/_arity.js';\nimport _curry2 from './internal/_curry2.js';\n\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      const log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n * @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n */\nvar bind = _curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function() {\n    return fn.apply(thisObj, arguments);\n  });\n});\nexport default bind;\n", "import _createReduce from './_createReduce.js';\nimport _xArrayReduce from './_xArrayReduce.js';\nimport bind from '../bind.js';\n\n\nfunction _xIterableReduce(xf, acc, iter) {\n  var step = iter.next();\n  while (!step.done) {\n    acc = xf['@@transducer/step'](acc, step.value);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    step = iter.next();\n  }\n  return xf['@@transducer/result'](acc);\n}\n\nfunction _xMethodReduce(xf, acc, obj, methodName) {\n  return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));\n}\n\nvar _xReduce = _createReduce(_xArrayReduce, _xMethodReduce, _xIterableReduce);\nexport default _xReduce;\n", "function XWrap(fn) {\n  this.f = fn;\n}\nXWrap.prototype['@@transducer/init'] = function() {\n  throw new Error('init not implemented on XWrap');\n};\nXWrap.prototype['@@transducer/result'] = function(acc) { return acc; };\nXWrap.prototype['@@transducer/step'] = function(acc, x) {\n  return this.f(acc, x);\n};\n\nexport default function _xwrap(fn) { return new XWrap(fn); }\n", "import _curry3 from './internal/_curry3.js';\nimport _xReduce from './internal/_xReduce.js';\nimport _xwrap from './internal/_xwrap.js';\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to shortcut the iteration.\n *\n * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n * is *(value, acc)*.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Be cautious of mutating and returning the accumulator. If you reuse it across\n * invocations, it will continue to accumulate onto the same value. The general\n * recommendation is to always return a new value. If you can't do so for\n * performance reasons, then be sure to reinitialize the accumulator on each\n * invocation.\n *\n * Dispatches to the `reduce` method of the third argument, if present. When\n * doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n * shortcuting, as this is not implemented by `reduce`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex, R.reduceRight\n * @example\n *\n *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n *      //          -               -10\n *      //         / \\              / \\\n *      //        -   4           -6   4\n *      //       / \\              / \\\n *      //      -   3   ==>     -3   3\n *      //     / \\              / \\\n *      //    -   2           -1   2\n *      //   / \\              / \\\n *      //  0   1            0   1\n *\n * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n */\nvar reduce = _curry3(function(xf, acc, list) {\n  return _xReduce(typeof xf === 'function' ? _xwrap(xf) : xf, acc, list);\n});\nexport default reduce;\n", "import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\nimport max from './max.js';\nimport pluck from './pluck.js';\nimport reduce from './reduce.js';\n\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if every one of the provided predicates is satisfied\n * by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.anyPass, R.both\n * @example\n *\n *      const isQueen = R.propEq('Q', 'rank');\n *      const isSpade = R.propEq('\u2660\uFE0E', 'suit');\n *      const isQueenOfSpades = R.allPass([isQueen, isSpade]);\n *\n *      isQueenOfSpades({rank: 'Q', suit: '\u2663\uFE0E'}); //=> false\n *      isQueenOfSpades({rank: 'Q', suit: '\u2660\uFE0E'}); //=> true\n */\nvar allPass = _curry1(function allPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function() {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (!preds[idx].apply(this, arguments)) {\n        return false;\n      }\n      idx += 1;\n    }\n    return true;\n  });\n});\nexport default allPass;\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * Returns a function that always returns the given value. Note that for\n * non-primitives the value returned is a reference to the original value.\n *\n * This function is known as `const`, `constant`, or `K` (for K combinator) in\n * other languages and libraries.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> (* -> a)\n * @param {*} val The value to wrap in a function\n * @return {Function} A Function :: * -> val.\n * @example\n *\n *      const t = R.always('Tee');\n *      t(); //=> 'Tee'\n */\nvar always = _curry1(function always(val) {\n  return function() {\n    return val;\n  };\n});\nexport default always;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Returns the first argument if it is falsy, otherwise the second argument.\n * Acts as the boolean `and` statement if both inputs are `Boolean`s.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any}\n * @see R.both, R.or\n * @example\n *\n *      R.and(true, true); //=> true\n *      R.and(true, false); //=> false\n *      R.and(false, true); //=> false\n *      R.and(false, false); //=> false\n */\nvar and = _curry2(function and(a, b) {\n  return a && b;\n});\nexport default and;\n", "import _reduced from './_reduced.js';\nimport _xfBase from './_xfBase.js';\n\n\nfunction XAny(f, xf) {\n  this.xf = xf;\n  this.f = f;\n  this.any = false;\n}\nXAny.prototype['@@transducer/init'] = _xfBase.init;\nXAny.prototype['@@transducer/result'] = function(result) {\n  if (!this.any) {\n    result = this.xf['@@transducer/step'](result, false);\n  }\n  return this.xf['@@transducer/result'](result);\n};\nXAny.prototype['@@transducer/step'] = function(result, input) {\n  if (this.f(input)) {\n    this.any = true;\n    result = _reduced(this.xf['@@transducer/step'](result, true));\n  }\n  return result;\n};\n\nexport default function _xany(f) {\n  return function(xf) { return new XAny(f, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xany from './internal/_xany.js';\n\n\n/**\n * Returns `true` if at least one of the elements of the list match the predicate,\n * `false` otherwise.\n *\n * Dispatches to the `any` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n *         otherwise.\n * @see R.all, R.none, R.transduce\n * @example\n *\n *      const lessThan0 = R.flip(R.lt)(0);\n *      const lessThan2 = R.flip(R.lt)(2);\n *      R.any(lessThan0)([1, 2]); //=> false\n *      R.any(lessThan2)([1, 2]); //=> true\n */\nvar any = _curry2(_dispatchable(['any'], _xany, function any(fn, list) {\n  var idx = 0;\n  while (idx < list.length) {\n    if (fn(list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n}));\nexport default any;\n", "import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\nimport max from './max.js';\nimport pluck from './pluck.js';\nimport reduce from './reduce.js';\n\n\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if at least one of the provided predicates is\n * satisfied by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.allPass, R.either\n * @example\n *\n *      const isClub = R.propEq('\u2663', 'suit');\n *      const isSpade = R.propEq('\u2660', 'suit');\n *      const isBlackCard = R.anyPass([isClub, isSpade]);\n *\n *      isBlackCard({rank: '10', suit: '\u2663'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '\u2660'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '\u2666'}); //=> false\n */\nvar anyPass = _curry1(function anyPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function() {\n    var idx = 0;\n    var len = preds.length;\n    while (idx < len) {\n      if (preds[idx].apply(this, arguments)) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  });\n});\nexport default anyPass;\n", "import _arrayReduce from './_arrayReduce.js';\nimport _createReduce from './_createReduce.js';\n\n\nfunction _iterableReduce(reducer, acc, iter) {\n  var step = iter.next();\n  while (!step.done) {\n    acc = reducer(acc, step.value);\n    step = iter.next();\n  }\n  return acc;\n}\n\nfunction _methodReduce(reducer, acc, obj, methodName) {\n  return obj[methodName](reducer, acc);\n}\n\nvar _reduce = _createReduce(_arrayReduce, _methodReduce, _iterableReduce);\nexport default _reduce;\n", "import _concat from './internal/_concat.js';\nimport _curry2 from './internal/_curry2.js';\nimport _reduce from './internal/_reduce.js';\nimport map from './map.js';\n\n\n/**\n * ap applies a list of functions to a list of values.\n *\n * Dispatches to the `ap` method of the first argument, if present. Also\n * treats curried functions as applicatives.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig [a -> b] -> [a] -> [b]\n * @sig Apply f => f (a -> b) -> f a -> f b\n * @sig (r -> a -> b) -> (r -> a) -> (r -> b)\n * @param {*} applyF\n * @param {*} applyX\n * @return {*}\n * @example\n *\n *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n *\n *      // R.ap can also be used as S combinator\n *      // when only two functions are passed\n *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'\n * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n */\nvar ap = _curry2(function ap(applyF, applyX) {\n  return (\n    typeof applyX['fantasy-land/ap'] === 'function'\n      ? applyX['fantasy-land/ap'](applyF)\n      : typeof applyF.ap === 'function'\n        ? applyF.ap(applyX)\n        : typeof applyF === 'function'\n          ? function(x) { return applyF(x)(applyX(x)); }\n          : _reduce(function(acc, f) { return _concat(acc, map(f, applyX)); }, [], applyF)\n  );\n});\nexport default ap;\n", "export default function _aperture(n, list) {\n  var idx = 0;\n  var limit = list.length - (n - 1);\n  var acc = new Array(limit >= 0 ? limit : 0);\n  while (idx < limit) {\n    acc[idx] = Array.prototype.slice.call(list, idx, idx + n);\n    idx += 1;\n  }\n  return acc;\n}\n", "import _concat from './_concat.js';\nimport _xfBase from './_xfBase.js';\n\n\nfunction XAperture(n, xf) {\n  this.xf = xf;\n  this.pos = 0;\n  this.full = false;\n  this.acc = new Array(n);\n}\nXAperture.prototype['@@transducer/init'] = _xfBase.init;\nXAperture.prototype['@@transducer/result'] = function(result) {\n  this.acc = null;\n  return this.xf['@@transducer/result'](result);\n};\nXAperture.prototype['@@transducer/step'] = function(result, input) {\n  this.store(input);\n  return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n};\nXAperture.prototype.store = function(input) {\n  this.acc[this.pos] = input;\n  this.pos += 1;\n  if (this.pos === this.acc.length) {\n    this.pos = 0;\n    this.full = true;\n  }\n};\nXAperture.prototype.getCopy = function() {\n  return _concat(Array.prototype.slice.call(this.acc, this.pos),\n    Array.prototype.slice.call(this.acc, 0, this.pos)\n  );\n};\n\nexport default function _xaperture(n) {\n  return function(xf) { return new XAperture(n, xf); };\n}\n", "import _aperture from './internal/_aperture.js';\nimport _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xaperture from './internal/_xaperture.js';\n\n\n/**\n * Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n * greater than the length of the list, an empty list is returned.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @param {Number} n The size of the tuples to create\n * @param {Array} list The list to split into `n`-length tuples\n * @return {Array} The resulting list of `n`-length tuples\n * @see R.transduce\n * @example\n *\n *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n */\nvar aperture = _curry2(_dispatchable([], _xaperture, _aperture));\nexport default aperture;\n", "import _concat from './internal/_concat.js';\nimport _curry2 from './internal/_curry2.js';\n\n\n/**\n * Returns a new list containing the contents of the given list, followed by\n * the given element.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The element to add to the end of the new list.\n * @param {Array} list The list of elements to add a new item to.\n *        list.\n * @return {Array} A new list containing the elements of the old list followed by `el`.\n * @see R.prepend\n * @example\n *\n *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n *      R.append('tests', []); //=> ['tests']\n *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n */\nvar append = _curry2(function append(el, list) {\n  return _concat(list, [el]);\n});\nexport default append;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Applies function `fn` to the argument list `args`. This is useful for\n * creating a fixed-arity function from a variadic function. `fn` should be a\n * bound function if context is significant.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> a) -> [*] -> a\n * @param {Function} fn The function which will be called with `args`\n * @param {Array} args The arguments to call `fn` with\n * @return {*} result The result, equivalent to `fn(...args)`\n * @see R.call, R.unapply\n * @example\n *\n *      const nums = [1, 2, 3, -99, 42, 6, 7];\n *      R.apply(Math.max, nums); //=> 42\n * @symb R.apply(f, [a, b, c]) = f(a, b, c)\n */\nvar apply = _curry2(function apply(fn, args) {\n  return fn.apply(this, args);\n});\nexport default apply;\n", "import _curry1 from './internal/_curry1.js';\nimport keys from './keys.js';\n\n\n/**\n * Returns a list of all the enumerable own properties of the supplied object.\n * Note that the order of the output array is not guaranteed across different\n * JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own properties.\n * @see R.valuesIn, R.keys, R.toPairs\n * @example\n *\n *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n */\nvar values = _curry1(function values(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var vals = [];\n  var idx = 0;\n  while (idx < len) {\n    vals[idx] = obj[props[idx]];\n    idx += 1;\n  }\n  return vals;\n});\nexport default values;\n", "import _curry1 from './internal/_curry1.js';\nimport _isArray from './internal/_isArray.js';\nimport apply from './apply.js';\nimport curryN from './curryN.js';\nimport max from './max.js';\nimport pluck from './pluck.js';\nimport reduce from './reduce.js';\nimport keys from './keys.js';\nimport values from './values.js';\n\n\n// Use custom mapValues function to avoid issues with specs that include a \"map\" key and R.map\n// delegating calls to .map\nfunction mapValues(fn, obj) {\n  return _isArray(obj)\n    ? obj.map(fn)\n    : keys(obj).reduce(function(acc, key) {\n      acc[key] = fn(obj[key]);\n      return acc;\n    }, {});\n}\n\n/**\n * Given a spec object recursively mapping properties to functions, creates a\n * function producing an object of the same structure, by mapping each property\n * to the result of calling its associated function with the supplied arguments.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n * @param {Object} spec an object recursively mapping properties to functions for\n *        producing the values for these properties.\n * @return {Function} A function that returns an object of the same structure\n * as `spec', with each property set to the value returned by calling its\n * associated function with the supplied arguments.\n * @see R.converge, R.juxt\n * @example\n *\n *      const getMetrics = R.applySpec({\n *        sum: R.add,\n *        nested: { mul: R.multiply }\n *      });\n *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n * @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n */\nvar applySpec = _curry1(function applySpec(spec) {\n  spec = mapValues(\n    function(v) { return typeof v == 'function' ? v : applySpec(v); },\n    spec\n  );\n\n  return curryN(\n    reduce(max, 0, pluck('length', values(spec))),\n    function() {\n      var args = arguments;\n      return mapValues(function(f) { return apply(f, args); }, spec);\n    });\n});\nexport default applySpec;\n", "import _curry2 from './internal/_curry2.js';\n\n/**\n * Takes a value and applies a function to it.\n *\n * This function is also known as the `thrush` combinator.\n *\n * @func\n * @memberOf R\n * @since v0.25.0\n * @category Function\n * @sig a -> (a -> b) -> b\n * @param {*} x The value\n * @param {Function} f The function to apply\n * @return {*} The result of applying `f` to `x`\n * @example\n *\n *      const t42 = R.applyTo(42);\n *      t42(R.identity); //=> 42\n *      t42(R.add(1)); //=> 43\n */\nvar applyTo = _curry2(function applyTo(x, f) { return f(x); });\nexport default applyTo;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * Makes an ascending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`\n * @see R.descend\n * @example\n *\n *      const byAge = R.ascend(R.prop('age'));\n *      const people = [\n *        { name: 'Emma', age: 70 },\n *        { name: 'Peter', age: 78 },\n *        { name: 'Mikhail', age: 62 },\n *      ];\n *      const peopleByYoungestFirst = R.sort(byAge, people);\n *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]\n */\nvar ascend = _curry3(function ascend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa < bb ? -1 : aa > bb ? 1 : 0;\n});\nexport default ascend;\n", "import _isArray from './_isArray.js';\nimport _isInteger from './_isInteger.js';\n\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @private\n * @param {String|Number} prop The property name to set\n * @param {*} val The new value\n * @param {Object|Array} obj The object to clone\n * @return {Object|Array} A new object equivalent to the original except for the changed property.\n */\nexport default function _assoc(prop, val, obj) {\n  if (_isInteger(prop) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[prop] = val;\n    return arr;\n  }\n\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  result[prop] = val;\n  return result;\n}\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */\nvar isNil = _curry1(function isNil(x) { return x == null; });\nexport default isNil;\n", "import _curry3 from './internal/_curry3.js';\nimport _has from './internal/_has.js';\nimport _isInteger from './internal/_isInteger.js';\nimport _assoc from './internal/_assoc.js';\nimport isNil from './isNil.js';\n\n/**\n * Makes a shallow clone of an object, setting or overriding the nodes required\n * to create the given path, and placing the specific value at the tail end of\n * that path. Note that this copies and flattens prototype properties onto the\n * new object as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> a -> {a} -> {a}\n * @param {Array} path the path to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except along the specified path.\n * @see R.dissocPath\n * @example\n *\n *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n *\n *      // Any missing or non-object keys in path will be overridden\n *      R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\n */\nvar assocPath = _curry3(function assocPath(path, val, obj) {\n  if (path.length === 0) {\n    return val;\n  }\n  var idx = path[0];\n  if (path.length > 1) {\n    var nextObj = (!isNil(obj) && _has(idx, obj) && typeof obj[idx] === 'object') ? obj[idx] : _isInteger(path[1]) ? [] : {};\n    val = assocPath(Array.prototype.slice.call(path, 1), val, nextObj);\n  }\n  return _assoc(idx, val, obj);\n});\nexport default assocPath;\n", "import _curry3 from './internal/_curry3.js';\nimport assocPath from './assocPath.js';\n\n/**\n * Makes a shallow clone of an object, setting or overriding the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Idx = String | Int\n * @sig Idx -> a -> {k: v} -> {k: v}\n * @param {String|Number} prop The property name to set\n * @param {*} val The new value\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original except for the changed property.\n * @see R.dissoc, R.pick\n * @example\n *\n *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n */\nvar assoc = _curry3(function assoc(prop, val, obj) { return assocPath([prop], val, obj); });\nexport default assoc;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly `n` parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} n The desired arity of the new function.\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity `n`.\n * @see R.binary, R.unary\n * @example\n *\n *      const takesTwoArgs = (a, b) => [a, b];\n *\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      const takesOneArg = R.nAry(1, takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only `n` arguments are passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.nAry(0, f)(a, b) = f()\n * @symb R.nAry(1, f)(a, b) = f(a)\n * @symb R.nAry(2, f)(a, b) = f(a, b)\n */\nvar nAry = _curry2(function nAry(n, fn) {\n  switch (n) {\n    case 0: return function() {return fn.call(this);};\n    case 1: return function(a0) {return fn.call(this, a0);};\n    case 2: return function(a0, a1) {return fn.call(this, a0, a1);};\n    case 3: return function(a0, a1, a2) {return fn.call(this, a0, a1, a2);};\n    case 4: return function(a0, a1, a2, a3) {return fn.call(this, a0, a1, a2, a3);};\n    case 5: return function(a0, a1, a2, a3, a4) {return fn.call(this, a0, a1, a2, a3, a4);};\n    case 6: return function(a0, a1, a2, a3, a4, a5) {return fn.call(this, a0, a1, a2, a3, a4, a5);};\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6);};\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);};\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);};\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);};\n    default: throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n  }\n});\nexport default nAry;\n", "import _curry1 from './internal/_curry1.js';\nimport nAry from './nAry.js';\n\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 2 parameters. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> ((a, b) -> z)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 2.\n * @see R.nAry, R.unary\n * @example\n *\n *      const takesThreeArgs = function(a, b, c) {\n *        return [a, b, c];\n *      };\n *      takesThreeArgs.length; //=> 3\n *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n *\n *      const takesTwoArgs = R.binary(takesThreeArgs);\n *      takesTwoArgs.length; //=> 2\n *      // Only 2 arguments are passed to the wrapped function\n *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n * @symb R.binary(f)(a, b, c) = f(a, b)\n */\nvar binary = _curry1(function binary(fn) {\n  return nAry(2, fn);\n});\nexport default binary;\n", "export default function _isFunction(x) {\n  var type = Object.prototype.toString.call(x);\n  return type  === '[object Function]' ||\n    type === '[object AsyncFunction]' ||\n    type === '[object GeneratorFunction]' ||\n    type === '[object AsyncGeneratorFunction]';\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _arrayReduce from './internal/_arrayReduce.js';\nimport ap from './ap.js';\nimport curryN from './curryN.js';\nimport map from './map.js';\n\n\n/**\n * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig Number -> (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.lift, R.ap\n * @example\n *\n *      const madd3 = R.liftN(3, (...args) => R.sum(args));\n *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n */\nvar liftN = _curry2(function liftN(arity, fn) {\n  var lifted = curryN(arity, fn);\n  return curryN(arity, function() {\n    return _arrayReduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));\n  });\n});\nexport default liftN;\n", "import _curry1 from './internal/_curry1.js';\nimport liftN from './liftN.js';\n\n\n/**\n * \"lifts\" a function of arity >= 1 so that it may \"map over\" a list, Function or other\n * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Function\n * @sig (*... -> *) -> ([*]... -> [*])\n * @param {Function} fn The function to lift into higher context\n * @return {Function} The lifted function.\n * @see R.liftN\n * @example\n *\n *      const madd3 = R.lift((a, b, c) => a + b + c);\n *\n *      madd3([100, 200], [30, 40], [5, 6, 7]); //=> [135, 136, 137, 145, 146, 147, 235, 236, 237, 245, 246, 247]\n *\n *      const madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n *\n *      madd5([10, 20], [1], [2, 3], [4], [100, 200]); //=> [117, 217, 118, 218, 127, 227, 128, 228]\n */\nvar lift = _curry1(function lift(fn) {\n  return liftN(fn.length, fn);\n});\nexport default lift;\n", "import _curry2 from './internal/_curry2.js';\nimport _isFunction from './internal/_isFunction.js';\nimport and from './and.js';\nimport lift from './lift.js';\n\n\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.either, R.allPass, R.and\n * @example\n *\n *      const gt10 = R.gt(R.__, 10)\n *      const lt20 = R.lt(R.__, 20)\n *      const f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n *\n *      R.both(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(false)\n *      R.both([false, false, 'a'], [11]); //=> [false, false, 11]\n */\nvar both = _curry2(function both(f, g) {\n  return _isFunction(f) ?\n    function _both() {\n      return f.apply(this, arguments) && g.apply(this, arguments);\n    } :\n    lift(and)(f, g);\n});\nexport default both;\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * Returns the result of calling its first argument with the remaining\n * arguments. This is occasionally useful as a converging function for\n * [`R.converge`](#converge): the first branch can produce a function while the\n * remaining branches produce values to be passed to that function as its\n * arguments.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig ((*... -> a), *...) -> a\n * @param {Function} fn The function to apply to the remaining arguments.\n * @param {...*} args Any number of positional arguments.\n * @return {*}\n * @see R.apply\n * @example\n *\n *      R.call(R.add, 1, 2); //=> 3\n *\n *      const indentN = R.pipe(\n *        R.repeat(' '),\n *        R.join(''),\n *        R.replace(/^(?!$)/gm)\n *      );\n *\n *      const format = R.converge(\n *        R.call,\n *        [\n *          R.pipe(R.prop('indent'), indentN),\n *          R.prop('value')\n *        ]\n *      );\n *\n *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n * @symb R.call(f, a, b) = f(a, b)\n */\nvar call = _curry1(function call(fn) {\n  return fn.apply(this, Array.prototype.slice.call(arguments, 1));\n});\nexport default call;\n", "import _isArrayLike from './_isArrayLike.js';\n\n\n/**\n * `_makeFlat` is a helper function that returns a one-level or fully recursive\n * function based on the flag passed in.\n *\n * @private\n */\nexport default function _makeFlat(recursive) {\n  return function flatt(list) {\n    var value, jlen, j;\n    var result = [];\n    var idx = 0;\n    var ilen = list.length;\n\n    while (idx < ilen) {\n      if (_isArrayLike(list[idx])) {\n        value = recursive ? flatt(list[idx]) : list[idx];\n        j = 0;\n        jlen = value.length;\n        while (j < jlen) {\n          result[result.length] = value[j];\n          j += 1;\n        }\n      } else {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n    return result;\n  };\n}\n", "export default function _forceReduced(x) {\n  return {\n    '@@transducer/value': x,\n    '@@transducer/reduced': true\n  };\n}\n", "import _forceReduced from './_forceReduced.js';\nimport _isArrayLike from './_isArrayLike.js';\nimport _xArrayReduce from './_xArrayReduce.js';\nimport _xReduce from './_xReduce.js';\nimport _xfBase from './_xfBase.js';\n\nvar tInit = '@@transducer/init';\nvar tStep = '@@transducer/step';\nvar tResult = '@@transducer/result';\nfunction XPreservingReduced(xf) {\n  this.xf = xf;\n}\nXPreservingReduced.prototype[tInit] = _xfBase.init;\nXPreservingReduced.prototype[tResult] = _xfBase.result;\nXPreservingReduced.prototype[tStep] = function(result, input) {\n  var ret = this.xf[tStep](result, input);\n  return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n};\n\nfunction XFlatCat(xf) {\n  this.xf = new XPreservingReduced(xf);\n}\nXFlatCat.prototype[tInit] = _xfBase.init;\nXFlatCat.prototype[tResult] = _xfBase.result;\nXFlatCat.prototype[tStep] = function(result, input) {\n  return !_isArrayLike(input) ? _xArrayReduce(this.xf, result, [input]) : _xReduce(this.xf, result, input);\n};\nvar _flatCat = function _xcat(xf) { return new XFlatCat(xf); };\n\nexport default _flatCat;\n", "import _flatCat from './_flatCat.js';\nimport _xmap from './_xmap.js';\n\n\nexport default function _xchain(f) {\n  return function(xf) { return _xmap(f)(_flatCat(xf)); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _makeFlat from './internal/_makeFlat.js';\nimport _xchain from './internal/_xchain.js';\nimport map from './map.js';\n\n\n/**\n * `chain` maps a function over a list and concatenates the results. `chain`\n * is also known as `flatMap` in some libraries.\n *\n * Dispatches to the `chain` method of the second argument, if present,\n * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n *\n * If second argument is a function, `chain(f, g)(x)` is equivalent to `f(g(x), x)`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain m => (a -> m b) -> m a -> m b\n * @param {Function} fn The function to map with\n * @param {Array} list The list to map over\n * @return {Array} The result of flat-mapping `list` with `fn`\n * @example\n *\n *      const duplicate = n => [n, n];\n *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n *\n *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n */\nvar chain = _curry2(_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {\n  if (typeof monad === 'function') {\n    return function(x) { return fn(monad(x))(x); };\n  }\n  return _makeFlat(false)(map(fn, monad));\n}));\nexport default chain;\n", "import _curry3 from './internal/_curry3.js';\n\n/**\n * Restricts a number to be within a range.\n *\n * Also works for other ordered types such as Strings and Dates.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Relation\n * @sig Ord a => a -> a -> a -> a\n * @param {Number} minimum The lower limit of the clamp (inclusive)\n * @param {Number} maximum The upper limit of the clamp (inclusive)\n * @param {Number} value Value to be clamped\n * @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise\n * @example\n *\n *      R.clamp(1, 10, -5) // => 1\n *      R.clamp(1, 10, 15) // => 10\n *      R.clamp(1, 10, 4)  // => 4\n */\nvar clamp = _curry3(function clamp(min, max, value) {\n  if (min > max) {\n    throw new Error('min must not be greater than max in clamp(min, max, value)');\n  }\n  return value < min\n    ? min\n    : value > max\n      ? max\n      : value;\n});\nexport default clamp;\n", "export default function _cloneRegExp(pattern) {\n  return new RegExp(pattern.source, (pattern.flags ?  pattern.flags : (pattern.global     ? 'g' : '') +\n                                                                      (pattern.ignoreCase ? 'i' : '') +\n                                                                      (pattern.multiline  ? 'm' : '') +\n                                                                      (pattern.sticky     ? 'y' : '') +\n                                                                      (pattern.unicode    ? 'u' : '') +\n                                                                      (pattern.dotAll     ? 's' : '')));\n}\n", "import _cloneRegExp from './_cloneRegExp.js';\nimport type from '../type.js';\n\n\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\nexport default function _clone(value, deep, map) {\n\n  map || (map = new _ObjectMap());\n\n  // this avoids the slower switch with a quick if decision removing some milliseconds in each run.\n  if (_isPrimitive(value)) {\n    return value;\n  }\n\n  var copy = function copy(copiedValue) {\n    // Check for circular and same references on the object graph and return its corresponding clone.\n    var cachedCopy = map.get(value);\n\n    if (cachedCopy) {\n      return cachedCopy;\n    }\n\n    map.set(value, copiedValue);\n\n    for (var key in value) {\n      if (Object.prototype.hasOwnProperty.call(value, key)) {\n        copiedValue[key] = deep ? _clone(value[key], true, map) : value[key];\n      }\n    }\n    return copiedValue;\n  };\n\n  switch (type(value)) {\n    case 'Object':  return copy(Object.create(Object.getPrototypeOf(value)));\n    case 'Array':   return copy([]);\n    case 'Date':    return new Date(value.valueOf());\n    case 'RegExp': return _cloneRegExp(value);\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'BigInt64Array':\n    case 'BigUint64Array':\n      return value.slice();\n    default:        return value;\n  }\n}\n\nfunction _isPrimitive(param) {\n  var type = typeof param;\n  return param == null || (type != 'object' && type != 'function');\n}\n\nfunction _ObjectMap() {\n  this.map = {};\n  this.length = 0;\n}\n\n_ObjectMap.prototype.set = function(key, value) {\n  const hashedKey = this.hash(key);\n\n  let bucket = this.map[hashedKey];\n  if (!bucket) {\n    this.map[hashedKey] = bucket = [];\n  }\n\n  bucket.push([key, value]);\n  this.length += 1;\n};\n\n_ObjectMap.prototype.hash = function(key) {\n  let hashedKey = [];\n  for (var value in key) {\n    hashedKey.push(Object.prototype.toString.call(key[value]));\n  }\n  return hashedKey.join();\n};\n\n_ObjectMap.prototype.get = function(key) {\n\n  /**\n   * depending on the number of objects to be cloned is faster to just iterate over the items in the map just because the hash function is so costly,\n   * on my tests this number is 180, anything above that using the hash function is faster.\n   */\n  if (this.length <= 180) {\n\n    for (const p in this.map) {\n      const bucket = this.map[p];\n\n      for (let i = 0; i < bucket.length; i += 1) {\n        const element = bucket[i];\n        if (element[0] === key) {return element[1];}\n      }\n\n    }\n    return;\n  }\n\n  const hashedKey = this.hash(key);\n  const bucket = this.map[hashedKey];\n\n  if (!bucket) {return;}\n\n  for (let i = 0; i < bucket.length; i += 1) {\n    const element = bucket[i];\n    if (element[0] === key) {return element[1];}\n  }\n\n};\n\n", "import _clone from './internal/_clone.js';\nimport _curry1 from './internal/_curry1.js';\n\n\n/**\n * Creates a deep copy of the source that can be used in place of the source\n * object without retaining any references to it.\n * The source object may contain (nested) `Array`s and `Object`s,\n * `Number`s, `String`s, `Boolean`s and `Date`s.\n * `Function`s are assigned by reference rather than copied.\n *\n * Dispatches to a `clone` method if present.\n *\n * Note that if the source object has multiple nodes that share a reference,\n * the returned object will have the same structure, but the references will\n * be pointed to the location within the cloned value.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {*} -> {*}\n * @param {*} value The object or array to clone\n * @return {*} A deeply cloned copy of `val`\n * @example\n *\n *      const objects = [{}, {}, {}];\n *      const objectsClone = R.clone(objects);\n *      objects === objectsClone; //=> false\n *      objects[0] === objectsClone[0]; //=> false\n */\nvar clone = _curry1(function clone(value) {\n  return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, true);\n});\nexport default clone;\n", "import _curry2 from './internal/_curry2.js';\nimport _reduce from './internal/_reduce.js';\n\n/**\n * Splits a list into sub-lists, based on the result of calling a key-returning function on each element,\n * and grouping the results according to values returned.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx a => (b -> a) -> [b] -> [[b]]\n * @param {Function} fn Function :: a -> Idx\n * @param {Array} list The array to group\n * @return {Array}\n *    An array of arrays where each sub-array contains items for which\n *    the String-returning function has returned the same value.\n * @see R.groupBy, R.partition\n * @example\n *      R.collectBy(R.prop('type'), [\n *        {type: 'breakfast', item: '\u2615\uFE0F'},\n *        {type: 'lunch', item: '\uD83C\uDF2F'},\n *        {type: 'dinner', item: '\uD83C\uDF5D'},\n *        {type: 'breakfast', item: '\uD83E\uDD50'},\n *        {type: 'lunch', item: '\uD83C\uDF55'}\n *      ]);\n *\n *      // [ [ {type: 'breakfast', item: '\u2615\uFE0F'},\n *      //     {type: 'breakfast', item: '\uD83E\uDD50'} ],\n *      //   [ {type: 'lunch', item: '\uD83C\uDF2F'},\n *      //     {type: 'lunch', item: '\uD83C\uDF55'} ],\n *      //   [ {type: 'dinner', item: '\uD83C\uDF5D'} ] ]\n */\nvar collectBy = _curry2(function collectBy(fn, list) {\n  var group = _reduce(function(o, x) {\n    var tag = fn(x);\n    if (o[tag] === undefined) { o[tag] = []; }\n    o[tag].push(x);\n    return o;\n  }, {}, list);\n  var newList = [];\n  for (var tag in group) { newList.push(group[tag]); }\n  return newList;\n});\nexport default collectBy;\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * Makes a comparator function out of a function that reports whether the first\n * element is less than the second.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b) -> Boolean) -> ((a, b) -> Number)\n * @param {Function} pred A predicate function of arity two which will return `true` if the first argument\n * is less than the second, `false` otherwise\n * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`\n * @example\n *\n *      const byAge = R.comparator((a, b) => a.age < b.age);\n *      const people = [\n *        { name: 'Emma', age: 70 },\n *        { name: 'Peter', age: 78 },\n *        { name: 'Mikhail', age: 62 },\n *      ];\n *      const peopleByIncreasingAge = R.sort(byAge, people);\n *        //=> [{ name: 'Mikhail', age: 62 },{ name: 'Emma', age: 70 }, { name: 'Peter', age: 78 }]\n */\nvar comparator = _curry1(function comparator(pred) {\n  return function(a, b) {\n    return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n  };\n});\nexport default comparator;\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nvar not = _curry1(function not(a) {\n  return !a;\n});\nexport default not;\n", "import lift from './lift.js';\nimport not from './not.js';\n\n\n/**\n * Takes a function `f` and returns a function `g` such that if called with the same arguments\n * when `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.\n *\n * `R.complement` may be applied to any functor\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> *) -> (*... -> Boolean)\n * @param {Function} f\n * @return {Function}\n * @see R.not\n * @example\n *\n *      const isNotNil = R.complement(R.isNil);\n *      R.isNil(null); //=> true\n *      isNotNil(null); //=> false\n *      R.isNil(7); //=> false\n *      isNotNil(7); //=> true\n */\nvar complement = lift(not);\nexport default complement;\n", "export default function _pipe(f, g) {\n  return function() {\n    return g.call(this, f.apply(this, arguments));\n  };\n}\n", "import _isArray from './_isArray.js';\n\n\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implementation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nexport default function _checkForMethod(methodname, fn) {\n  return function() {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return (_isArray(obj) || typeof obj[methodname] !== 'function') ?\n      fn.apply(this, arguments) :\n      obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}\n", "import _checkForMethod from './internal/_checkForMethod.js';\nimport _curry3 from './internal/_curry3.js';\n\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nvar slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\nexport default slice;\n", "import _checkForMethod from './internal/_checkForMethod.js';\nimport _curry1 from './internal/_curry1.js';\nimport slice from './slice.js';\n\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nvar tail = _curry1(_checkForMethod('tail', slice(1, Infinity)));\nexport default tail;\n", "import _arity from './internal/_arity.js';\nimport _pipe from './internal/_pipe.js';\nimport reduce from './reduce.js';\nimport tail from './tail.js';\n\n\n/**\n * Performs left-to-right function composition. The first argument may have\n * any arity; the remaining arguments must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      const f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n * @symb R.pipe(f, g, h)(a)(b) = h(g(f(a)))(b)\n */\nexport default function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(\n    arguments[0].length,\n    reduce(_pipe, arguments[0], tail(arguments))\n  );\n}\n", "import _curry1 from './internal/_curry1.js';\nimport _isString from './internal/_isString.js';\n\n\n/**\n * Returns a new list or string with the elements or characters in reverse\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {Array|String} list\n * @return {Array|String}\n * @example\n *\n *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n *      R.reverse([1, 2]);     //=> [2, 1]\n *      R.reverse([1]);        //=> [1]\n *      R.reverse([]);         //=> []\n *\n *      R.reverse('abc');      //=> 'cba'\n *      R.reverse('ab');       //=> 'ba'\n *      R.reverse('a');        //=> 'a'\n *      R.reverse('');         //=> ''\n */\nvar reverse = _curry1(function reverse(list) {\n  return _isString(list)\n    ? list.split('').reverse().join('')\n    : Array.prototype.slice.call(list, 0).reverse();\n});\nexport default reverse;\n", "import pipe from './pipe.js';\nimport reverse from './reverse.js';\n\n\n/**\n * Performs right-to-left function composition. The last argument may have\n * any arity; the remaining arguments must be unary.\n *\n * **Note:** The result of compose is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n * @param {...Function} ...functions The functions to compose\n * @return {Function}\n * @see R.pipe\n * @example\n *\n *      const classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n *      const yellGreeting = R.compose(R.toUpper, classyGreeting);\n *      yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n *\n * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n * @symb R.compose(f, g, h)(a)(b) = f(g(h(a)))(b)\n */\nexport default function compose() {\n  if (arguments.length === 0) {\n    throw new Error('compose requires at least one argument');\n  }\n  return pipe.apply(this, reverse(arguments));\n}\n", "import nth from './nth.js';\n\n\n/**\n * Returns the first element of the given list or string. In some libraries\n * this function is named `first`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {Array|String} list\n * @return {*}\n * @see R.tail, R.init, R.last\n * @example\n *\n *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n *      R.head([]); //=> undefined\n *\n *      R.head('abc'); //=> 'a'\n *      R.head(''); //=> ''\n */\nvar head = nth(0);\nexport default head;\n", "export default function _identity(x) { return x; }\n", "import _curry1 from './internal/_curry1.js';\nimport _identity from './internal/_identity.js';\n\n\n/**\n * A function that does nothing but return the parameter supplied to it. Good\n * as a default or placeholder function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig a -> a\n * @param {*} x The value to return.\n * @return {*} The input value, `x`.\n * @example\n *\n *      R.identity(1); //=> 1\n *\n *      const obj = {};\n *      R.identity(obj) === obj; //=> true\n * @symb R.identity(a) = a\n */\nvar identity = _curry1(_identity);\nexport default identity;\n", "import _arity from './internal/_arity.js';\nimport _curry2 from './internal/_curry2.js';\nimport head from './head.js';\nimport _reduce from './internal/_reduce.js';\nimport tail from './tail.js';\nimport identity from './identity.js';\n\n\n/**\n * Performs left-to-right function composition using transforming function. The first function may have\n * any arity; the remaining functions must be unary.\n *\n * **Note:** The result of pipeWith is not automatically curried. Transforming function is not used on the\n * first argument.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig ((* -> *), [((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)]) -> ((a, b, ..., n) -> z)\n * @param {Function} transformer The transforming function\n * @param {Array} functions The functions to pipe\n * @return {Function}\n * @see R.composeWith, R.pipe\n * @example\n *\n *      const pipeWhileNotNil = R.pipeWith((f, res) => R.isNil(res) ? res : f(res));\n *      const f = pipeWhileNotNil([Math.pow, R.negate, R.inc])\n *\n *      f(3, 4); // -(3^4) + 1\n * @symb R.pipeWith(f)([g, h, i])(...args) = f(i, f(h, g(...args)))\n */\nvar pipeWith = _curry2(function pipeWith(xf, list) {\n  if (list.length <= 0) {\n    return identity;\n  }\n\n  var headList = head(list);\n  var tailList = tail(list);\n\n  return _arity(headList.length, function() {\n    return _reduce(\n      function(result, f) {\n        return xf.call(this, f, result);\n      },\n      headList.apply(this, arguments),\n      tailList\n    );\n  });\n});\nexport default pipeWith;\n", "import _curry2 from './internal/_curry2.js';\nimport pipeWith from './pipeWith.js';\nimport reverse from './reverse.js';\n\n\n/**\n * Performs right-to-left function composition using transforming function. The last function may have\n * any arity; the remaining functions must be unary. Unlike `compose`, functions are passed in an array.\n *\n * **Note:** The result of composeWith is not automatically curried. Transforming function is not used\n * on the last argument.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig ((* -> *), [(y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)]) -> ((a, b, ..., n) -> z)\n * @param {Function} transformer The transforming function\n * @param {Array} functions The functions to compose\n * @return {Function}\n * @see R.compose, R.pipeWith\n * @example\n *\n *      const composeWhileNotNil = R.composeWith((f, res) => R.isNil(res) ? res : f(res));\n *\n *      composeWhileNotNil([R.inc, R.prop('age')])({age: 1}) //=> 2\n *      composeWhileNotNil([R.inc, R.prop('age')])({}) //=> undefined\n *\n * @symb R.composeWith(f)([g, h, i])(...args) = f(g, f(h, i(...args)))\n */\nvar composeWith = _curry2(function composeWith(xf, list) {\n  return pipeWith.apply(this, [xf, reverse(list)]);\n});\nexport default composeWith;\n", "import _curry2 from './internal/_curry2.js';\nimport _isArray from './internal/_isArray.js';\nimport _isFunction from './internal/_isFunction.js';\nimport _isString from './internal/_isString.js';\nimport toString from './toString.js';\n\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n * Can also concatenate two members of a [fantasy-land\n * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} firstList The first list\n * @param {Array|String} secondList The second list\n * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n * `secondList`.\n *\n * @example\n *\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat([], []); //=> []\n */\nvar concat = _curry2(function concat(a, b) {\n  if (_isArray(a)) {\n    if (_isArray(b)) {\n      return a.concat(b);\n    }\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n  if (_isString(a)) {\n    if (_isString(b)) {\n      return a + b;\n    }\n    throw new TypeError(toString(b) + ' is not a string');\n  }\n  if (a != null && _isFunction(a['fantasy-land/concat'])) {\n    return a['fantasy-land/concat'](b);\n  }\n  if (a != null && _isFunction(a.concat)) {\n    return a.concat(b);\n  }\n  throw new TypeError(toString(a) + ' does not have a method named \"concat\" or \"fantasy-land/concat\"');\n});\nexport default concat;\n", "import _arity from './internal/_arity.js';\nimport _curry1 from './internal/_curry1.js';\nimport map from './map.js';\nimport max from './max.js';\nimport reduce from './reduce.js';\n\n\n/**\n * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n * to `fn` are applied to each of the predicates in turn until one returns a\n * \"truthy\" value, at which point `fn` returns the result of applying its\n * arguments to the corresponding transformer. If none of the predicates\n * matches, `fn` returns undefined.\n *\n * **Please note**: This is not a direct substitute for a `switch` statement.\n * Remember that both elements of every pair passed to `cond` are *functions*,\n * and `cond` returns a function.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Logic\n * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n * @param {Array} pairs A list of [predicate, transformer]\n * @return {Function}\n * @see R.ifElse, R.unless, R.when\n * @example\n *\n *      const fn = R.cond([\n *        [R.equals(0),   R.always('water freezes at 0\u00B0C')],\n *        [R.equals(100), R.always('water boils at 100\u00B0C')],\n *        [R.T,           temp => 'nothing special happens at ' + temp + '\u00B0C']\n *      ]);\n *      fn(0); //=> 'water freezes at 0\u00B0C'\n *      fn(50); //=> 'nothing special happens at 50\u00B0C'\n *      fn(100); //=> 'water boils at 100\u00B0C'\n */\nvar cond = _curry1(function cond(pairs) {\n  var arity = reduce(\n    max,\n    0,\n    map(function(pair) { return pair[0].length; }, pairs)\n  );\n  return _arity(arity, function() {\n    var idx = 0;\n    while (idx < pairs.length) {\n      if (pairs[idx][0].apply(this, arguments)) {\n        return pairs[idx][1].apply(this, arguments);\n      }\n      idx += 1;\n    }\n  });\n});\nexport default cond;\n", "import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n * the following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * Please note that default parameters don't count towards a [function arity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length)\n * and therefore `curry` won't work well with those.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN, R.partial\n * @example\n *\n *      const addFourNumbers = (a, b, c, d) => a + b + c + d;\n *      const curriedAddFourNumbers = R.curry(addFourNumbers);\n *      const f = curriedAddFourNumbers(1, 2);\n *      const g = f(3);\n *      g(4); //=> 10\n *\n *      // R.curry not working well with default parameters\n *      const h = R.curry((a, b, c = 2) => a + b + c);\n *      h(1)(2)(7); //=> Error! (`3` is not a function!)\n */\nvar curry = _curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\nexport default curry;\n", "import _curry2 from './internal/_curry2.js';\nimport curry from './curry.js';\nimport nAry from './nAry.js';\n\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type. The arity of the function\n * returned is specified to allow using variadic constructor functions.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Function\n * @sig Number -> (* -> {*}) -> (* -> {*})\n * @param {Number} n The arity of the constructor function.\n * @param {Function} Fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @example\n *\n *      // Variadic Constructor function\n *      function Salad() {\n *        this.ingredients = arguments;\n *      }\n *\n *      Salad.prototype.recipe = function() {\n *        const instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);\n *        return R.join('\\n', instructions);\n *      };\n *\n *      const ThreeLayerSalad = R.constructN(3, Salad);\n *\n *      // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\n *      const salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');\n *\n *      console.log(salad.recipe());\n *      // Add a dollop of Mayonnaise\n *      // Add a dollop of Potato Chips\n *      // Add a dollop of Ketchup\n */\nvar constructN = _curry2(function constructN(n, Fn) {\n  if (n > 10) {\n    throw new Error('Constructor with greater than ten arguments');\n  }\n  if (n === 0) {\n    return function() { return new Fn(); };\n  }\n  return curry(nAry(n, function($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n    switch (n) {\n      case  1: return new Fn($0);\n      case  2: return new Fn($0, $1);\n      case  3: return new Fn($0, $1, $2);\n      case  4: return new Fn($0, $1, $2, $3);\n      case  5: return new Fn($0, $1, $2, $3, $4);\n      case  6: return new Fn($0, $1, $2, $3, $4, $5);\n      case  7: return new Fn($0, $1, $2, $3, $4, $5, $6);\n      case  8: return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n      case  9: return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n      case 10: return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n    }\n  }));\n});\nexport default constructN;\n", "import _curry1 from './internal/_curry1.js';\nimport constructN from './constructN.js';\n\n\n/**\n * Wraps a constructor function inside a curried function that can be called\n * with the same arguments and returns the same type.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> {*}) -> (* -> {*})\n * @param {Function} fn The constructor function to wrap.\n * @return {Function} A wrapped, curried constructor function.\n * @see R.invoker\n * @example\n *\n *      // Constructor function\n *      function Animal(kind) {\n *        this.kind = kind;\n *      };\n *      Animal.prototype.sighting = function() {\n *        return \"It's a \" + this.kind + \"!\";\n *      }\n *\n *      const AnimalConstructor = R.construct(Animal)\n *\n *      // Notice we no longer need the 'new' keyword:\n *      AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n *\n *      const animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n *      const animalSighting = R.invoker(0, 'sighting');\n *      const sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n *      R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\n */\nvar construct = _curry1(function construct(Fn) {\n  return constructN(Fn.length, Fn);\n});\nexport default construct;\n", "import _curry2 from './internal/_curry2.js';\nimport _map from './internal/_map.js';\nimport curryN from './curryN.js';\nimport max from './max.js';\nimport pluck from './pluck.js';\nimport reduce from './reduce.js';\n\n\n/**\n * Accepts a converging function and a list of branching functions and returns\n * a new function. The arity of the new function is the same as the arity of\n * the longest branching function. When invoked, this new function is applied\n * to some arguments, and each branching function is applied to those same\n * arguments. The results of each branching function are passed as arguments\n * to the converging function to produce the return value.\n *\n * @func\n * @memberOf R\n * @since v0.4.2\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} after A function. `after` will be invoked with the return values of\n *        `fn1` and `fn2` as its arguments.\n * @param {Array} functions A list of functions.\n * @return {Function} A new function.\n * @see R.useWith\n * @example\n *\n *      const average = R.converge(R.divide, [R.sum, R.length])\n *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n *\n *      const strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n *      strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n *\n * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n */\nvar converge = _curry2(function converge(after, fns) {\n  return curryN(reduce(max, 0, pluck('length', fns)), function() {\n    var args = arguments;\n    var context = this;\n    return after.apply(context, _map(function(fn) {\n      return fn.apply(context, args);\n    }, fns));\n  });\n});\nexport default converge;\n", "import _reduce from './internal/_reduce.js';\nimport curry from './curry.js';\n\n\n/**\n * Returns the number of items in a given `list` matching the predicate `f`\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} predicate to match items against\n * @return {Array} list of items to count in\n * @example\n *\n *      const even = x => x % 2 == 0;\n *\n *      R.count(even, [1, 2, 3, 4, 5]); // => 2\n *      R.map(R.count(even), [[1, 1, 1], [2, 3, 4, 5], [6]]); // => [0, 2, 1]\n */\nvar count = curry(function(pred, list) {\n  return _reduce(function(a, e) { return pred(e) ? a + 1 : a; }, 0, list);\n});\n\nexport default count;\n", "import _clone from './_clone.js';\nimport _has from './_has.js';\nimport _xfBase from './_xfBase.js';\n\n\nfunction XReduceBy(valueFn, valueAcc, keyFn, xf) {\n  this.valueFn = valueFn;\n  this.valueAcc = valueAcc;\n  this.keyFn = keyFn;\n  this.xf = xf;\n  this.inputs = {};\n}\nXReduceBy.prototype['@@transducer/init'] = _xfBase.init;\nXReduceBy.prototype['@@transducer/result'] = function(result) {\n  var key;\n  for (key in this.inputs) {\n    if (_has(key, this.inputs)) {\n      result = this.xf['@@transducer/step'](result, this.inputs[key]);\n      if (result['@@transducer/reduced']) {\n        result = result['@@transducer/value'];\n        break;\n      }\n    }\n  }\n  this.inputs = null;\n  return this.xf['@@transducer/result'](result);\n};\nXReduceBy.prototype['@@transducer/step'] = function(result, input) {\n  var key = this.keyFn(input);\n  this.inputs[key] = this.inputs[key] || [key, _clone(this.valueAcc, false)];\n  this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n  return result;\n};\n\nexport default function _xreduceBy(valueFn, valueAcc, keyFn) {\n  return function(xf) {\n    return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n  };\n}\n", "import _clone from './internal/_clone.js';\nimport _curryN from './internal/_curryN.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _has from './internal/_has.js';\nimport _reduced from './internal/_reduced.js';\nimport _xReduce from './internal/_xReduce.js';\nimport _xreduceBy from './internal/_xreduceBy.js';\nimport _xwrap from './internal/_xwrap.js';\n\n\n/**\n * Groups the elements of the list according to the result of calling\n * the String-returning function `keyFn` on each element and reduces the elements\n * of each group to a single value via the reducer function `valueFn`.\n *\n * The value function receives two values: *(acc, value)*. It may use\n * [`R.reduced`](#reduced) to short circuit the iteration.\n *\n * This function is basically a more general [`groupBy`](#groupBy) function.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category List\n * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n * @param {Function} valueFn The function that reduces the elements of each group to a single\n *        value. Receives two values, accumulator for a particular group and the current element.\n * @param {*} acc The (initial) accumulator value for each group.\n * @param {Function} keyFn The function that maps the list's element into a key.\n * @param {Array} list The array to group.\n * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n *         `valueFn` for elements which produced that key when passed to `keyFn`.\n * @see R.groupBy, R.reduce, R.reduced\n * @example\n *\n *      const groupNames = (acc, {name}) => acc.concat(name)\n *      const toGrade = ({score}) =>\n *        score < 65 ? 'F' :\n *        score < 70 ? 'D' :\n *        score < 80 ? 'C' :\n *        score < 90 ? 'B' : 'A'\n *\n *      var students = [\n *        {name: 'Abby', score: 83},\n *        {name: 'Bart', score: 62},\n *        {name: 'Curt', score: 88},\n *        {name: 'Dora', score: 92},\n *      ]\n *\n *      reduceBy(groupNames, [], toGrade, students)\n *      //=> {\"A\": [\"Dora\"], \"B\": [\"Abby\", \"Curt\"], \"F\": [\"Bart\"]}\n */\nvar reduceBy = _curryN(4, [], _dispatchable([], _xreduceBy,\n  function reduceBy(valueFn, valueAcc, keyFn, list) {\n    var xf = _xwrap(function(acc, elt) {\n      var key = keyFn(elt);\n      var value = valueFn(_has(key, acc) ? acc[key] : _clone(valueAcc, false), elt);\n\n      if (value && value['@@transducer/reduced']) {\n        return _reduced(acc);\n      }\n\n      acc[key] = value;\n      return acc;\n    });\n    return _xReduce(xf, {}, list);\n  }));\nexport default reduceBy;\n", "import reduceBy from './reduceBy.js';\n\n\n/**\n * Counts the elements of a list according to how many match each value of a\n * key generated by the supplied function. Returns an object mapping the keys\n * produced by `fn` to the number of occurrences in the list. Note that all\n * keys are coerced to strings because of how JavaScript objects work.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig (a -> String) -> [a] -> {*}\n * @param {Function} fn The function used to map values to keys.\n * @param {Array} list The list to count elements from.\n * @return {Object} An object mapping keys to number of occurrences in the list.\n * @example\n *\n *      const numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n *\n *      const letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n */\nvar countBy = reduceBy(function(acc, elem) { return acc + 1; }, 0);\nexport default countBy;\n", "import add from './add.js';\n\n\n/**\n * Decrements its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n - 1\n * @see R.inc\n * @example\n *\n *      R.dec(42); //=> 41\n */\nvar dec = add(-1);\nexport default dec;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`;\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} default The default value.\n * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n * @example\n *\n *      const defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42(false);  //=> false\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      // parseInt('string') results in NaN\n *      defaultTo42(parseInt('string')); //=> 42\n */\nvar defaultTo = _curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\nexport default defaultTo;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * Makes a descending comparator function out of a function that returns a value\n * that can be compared with `<` and `>`.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Function\n * @sig Ord b => (a -> b) -> a -> a -> Number\n * @param {Function} fn A function of arity one that returns a value that can be compared\n * @param {*} a The first item to be compared.\n * @param {*} b The second item to be compared.\n * @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`\n * @see R.ascend\n * @example\n *\n *      const byAge = R.descend(R.prop('age'));\n *      const people = [\n *        { name: 'Emma', age: 70 },\n *        { name: 'Peter', age: 78 },\n *        { name: 'Mikhail', age: 62 },\n *      ];\n *      const peopleByOldestFirst = R.sort(byAge, people);\n *        //=> [{ name: 'Peter', age: 78 }, { name: 'Emma', age: 70 }, { name: 'Mikhail', age: 62 }]\n */\nvar descend = _curry3(function descend(fn, a, b) {\n  var aa = fn(a);\n  var bb = fn(b);\n  return aa > bb ? -1 : aa < bb ? 1 : 0;\n});\nexport default descend;\n", "import _includes from './_includes.js';\n\n\nfunction _Set() {\n  /* globals Set */\n  this._nativeSet = typeof Set === 'function' ? new Set() : null;\n  this._items = {};\n}\n\n// until we figure out why jsdoc chokes on this\n// @param item The item to add to the Set\n// @returns {boolean} true if the item did not exist prior, otherwise false\n//\n_Set.prototype.add = function(item) {\n  return !hasOrAdd(item, true, this);\n};\n\n//\n// @param item The item to check for existence in the Set\n// @returns {boolean} true if the item exists in the Set, otherwise false\n//\n_Set.prototype.has = function(item) {\n  return hasOrAdd(item, false, this);\n};\n\n//\n// Combines the logic for checking whether an item is a member of the set and\n// for adding a new item to the set.\n//\n// @param item       The item to check or add to the Set instance.\n// @param shouldAdd  If true, the item will be added to the set if it doesn't\n//                   already exist.\n// @param set        The set instance to check or add to.\n// @return {boolean} true if the item already existed, otherwise false.\n//\nfunction hasOrAdd(item, shouldAdd, set) {\n  var type = typeof item;\n  var prevSize, newSize;\n  switch (type) {\n    case 'string':\n    case 'number':\n      // distinguish between +0 and -0\n      if (item === 0 && 1 / item === -Infinity) {\n        if (set._items['-0']) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items['-0'] = true;\n          }\n          return false;\n        }\n      }\n      // these types can all utilise the native Set\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n          set._nativeSet.add(item);\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = {};\n            set._items[type][item] = true;\n          }\n          return false;\n        } else if (item in set._items[type]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][item] = true;\n          }\n          return false;\n        }\n      }\n\n    case 'boolean':\n      // set._items['boolean'] holds a two element array\n      // representing [ falseExists, trueExists ]\n      if (type in set._items) {\n        var bIdx = item ? 1 : 0;\n        if (set._items[type][bIdx]) {\n          return true;\n        } else {\n          if (shouldAdd) {\n            set._items[type][bIdx] = true;\n          }\n          return false;\n        }\n      } else {\n        if (shouldAdd) {\n          set._items[type] = item ? [false, true] : [true, false];\n        }\n        return false;\n      }\n\n    case 'function':\n      // compare functions for reference equality\n      if (set._nativeSet !== null) {\n        if (shouldAdd) {\n          prevSize = set._nativeSet.size;\n          set._nativeSet.add(item);\n          newSize = set._nativeSet.size;\n          return newSize === prevSize;\n        } else {\n          return set._nativeSet.has(item);\n        }\n      } else {\n        if (!(type in set._items)) {\n          if (shouldAdd) {\n            set._items[type] = [item];\n          }\n          return false;\n        }\n        if (!_includes(item, set._items[type])) {\n          if (shouldAdd) {\n            set._items[type].push(item);\n          }\n          return false;\n        }\n        return true;\n      }\n\n    case 'undefined':\n      if (set._items[type]) {\n        return true;\n      } else {\n        if (shouldAdd) {\n          set._items[type] = true;\n        }\n        return false;\n      }\n\n    case 'object':\n      if (item === null) {\n        if (!set._items['null']) {\n          if (shouldAdd) {\n            set._items['null'] = true;\n          }\n          return false;\n        }\n        return true;\n      }\n    /* falls through */\n    default:\n      // reduce the search size of heterogeneous sets by creating buckets\n      // for each type.\n      type = Object.prototype.toString.call(item);\n      if (!(type in set._items)) {\n        if (shouldAdd) {\n          set._items[type] = [item];\n        }\n        return false;\n      }\n      // scan through all previously applied items\n      if (!_includes(item, set._items[type])) {\n        if (shouldAdd) {\n          set._items[type].push(item);\n        }\n        return false;\n      }\n      return true;\n  }\n}\n\n// A simple Set type that honours R.equals semantics\nexport default _Set;\n", "import _curry2 from './internal/_curry2.js';\nimport _Set from './internal/_Set.js';\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Objects and Arrays are compared in terms of\n * value equality, not reference equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n * @example\n *\n *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n *      R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n */\nvar difference = _curry2(function difference(first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  var secondLen = second.length;\n  var toFilterOut = new _Set();\n\n  for (var i = 0; i < secondLen; i += 1) {\n    toFilterOut.add(second[i]);\n  }\n\n  while (idx < firstLen) {\n    if (toFilterOut.add(first[idx])) {\n      out[out.length] = first[idx];\n    }\n    idx += 1;\n  }\n  return out;\n});\nexport default difference;\n", "import _includesWith from './internal/_includesWith.js';\nimport _curry3 from './internal/_curry3.js';\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements in the first list not\n * contained in the second list. Duplication is determined according to the\n * value returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` that are not in `list2`.\n * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n * @example\n *\n *      const cmp = (x, y) => x.a === y.a;\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}];\n *      const l2 = [{a: 3}, {a: 4}];\n *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n *\n *      R.differenceWith(R.equals, [1, 2, 3, 3, 3], []); //=> [1, 2, 3]\n *      R.differenceWith(R.equals, [1, 2, 3, 3, 3], [1]); //=> [2, 3]\n */\nvar differenceWith = _curry3(function differenceWith(pred, first, second) {\n  var out = [];\n  var idx = 0;\n  var firstLen = first.length;\n  while (idx < firstLen) {\n    if (!_includesWith(pred, first[idx], second) &&\n        !_includesWith(pred, first[idx], out)) {\n      out.push(first[idx]);\n    }\n    idx += 1;\n  }\n  return out;\n});\nexport default differenceWith;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * Removes the sub-list of `list` starting at index `start` and containing\n * `count` elements. _Note that this is not destructive_: it returns a copy of\n * the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} start The position to start removing elements\n * @param {Number} count The number of elements to remove\n * @param {Array} list The list to remove from\n * @return {Array} A new Array with `count` elements from `start` removed.\n * @see R.without\n * @example\n *\n *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n */\nvar remove = _curry3(function remove(start, count, list) {\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(start, count);\n  return result;\n});\nexport default remove;\n", "import _isInteger from './_isInteger.js';\nimport _isArray from './_isArray.js';\nimport remove from '../remove.js';\n\n/**\n * Returns a new object that does not contain a `prop` property.\n *\n * @private\n * @param {String|Number} prop The name of the property to dissociate\n * @param {Object|Array} obj The object to clone\n * @return {Object} A new object equivalent to the original but without the specified property\n */\nexport default function _dissoc(prop, obj) {\n  if (obj == null) {\n    return obj;\n  }\n\n  if (_isInteger(prop) && _isArray(obj)) {\n    return remove(prop, 1, obj);\n  }\n\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  delete result[prop];\n  return result;\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dissoc from './internal/_dissoc.js';\nimport _isInteger from './internal/_isInteger.js';\nimport _isArray from './internal/_isArray.js';\nimport assoc from './assoc.js';\n\n/**\n * Makes a shallow clone of an object. Note that this copies and flattens\n * prototype properties onto the new object as well. All non-primitive\n * properties are copied by reference.\n *\n * @private\n * @param {String|Integer} prop The prop operating\n * @param {Object|Array} obj The object to clone\n * @return {Object|Array} A new object equivalent to the original.\n */\nfunction _shallowCloneObject(prop, obj) {\n  if (_isInteger(prop) && _isArray(obj)) {\n    return [].concat(obj);\n  }\n\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  return result;\n}\n\n/**\n * Makes a shallow clone of an object, omitting the property at the given path.\n * Note that this copies and flattens prototype properties onto the new object\n * as well. All non-primitive properties are copied by reference.\n *\n * @func\n * @memberOf R\n * @since v0.11.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> {k: v} -> {k: v}\n * @param {Array} path The path to the value to omit\n * @param {Object} obj The object to clone\n * @return {Object} A new object without the property at path\n * @see R.assocPath\n * @example\n *\n *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n */\nvar dissocPath = _curry2(function dissocPath(path, obj) {\n  if (obj == null) {\n    return obj;\n  }\n\n  switch (path.length) {\n    case 0:\n      return obj;\n    case 1:\n      return _dissoc(path[0], obj);\n    default:\n      var head = path[0];\n      var tail = Array.prototype.slice.call(path, 1);\n      if (obj[head] == null) {\n        return _shallowCloneObject(head, obj);\n      } else {\n        return assoc(head, dissocPath(tail, obj[head]), obj);\n      }\n  }\n});\nexport default dissocPath;\n", "import _curry2 from './internal/_curry2.js';\nimport dissocPath from './dissocPath.js';\n\n/**\n * Returns a new object that does not contain a `prop` property.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Object\n * @sig String -> {k: v} -> {k: v}\n * @param {String} prop The name of the property to dissociate\n * @param {Object} obj The object to clone\n * @return {Object} A new object equivalent to the original but without the specified property\n * @see R.assoc, R.omit\n * @example\n *\n *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n */\nvar dissoc = _curry2(function dissoc(prop, obj) { return dissocPath([prop], obj); });\nexport default dissoc;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Divides two numbers. Equivalent to `a / b`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a / b`.\n * @see R.multiply\n * @example\n *\n *      R.divide(71, 100); //=> 0.71\n *\n *      const half = R.divide(R.__, 2);\n *      half(42); //=> 21\n *\n *      const reciprocal = R.divide(1);\n *      reciprocal(4);   //=> 0.25\n */\nvar divide = _curry2(function divide(a, b) { return a / b; });\nexport default divide;\n", "import _xfBase from './_xfBase.js';\n\n\nfunction XDrop(n, xf) {\n  this.xf = xf;\n  this.n = n;\n}\nXDrop.prototype['@@transducer/init'] = _xfBase.init;\nXDrop.prototype['@@transducer/result'] = _xfBase.result;\nXDrop.prototype['@@transducer/step'] = function(result, input) {\n  if (this.n > 0) {\n    this.n -= 1;\n    return result;\n  }\n  return this.xf['@@transducer/step'](result, input);\n};\n\nexport default function _xdrop(n) {\n  return function(xf) { return new XDrop(n, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xdrop from './internal/_xdrop.js';\nimport slice from './slice.js';\n\n\n/**\n * Returns all but the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `drop` method).\n *\n * Dispatches to the `drop` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*} A copy of list without the first `n` elements\n * @see R.take, R.transduce, R.dropLast, R.dropWhile\n * @example\n *\n *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n *      R.drop(3, 'ramda');               //=> 'da'\n */\nvar drop = _curry2(_dispatchable(['drop'], _xdrop, function drop(n, xs) {\n  return slice(Math.max(0, n), Infinity, xs);\n}));\nexport default drop;\n", "import _reduced from './_reduced.js';\nimport _xfBase from './_xfBase.js';\n\n\nfunction XTake(n, xf) {\n  this.xf = xf;\n  this.n = n;\n  this.i = 0;\n}\nXTake.prototype['@@transducer/init'] = _xfBase.init;\nXTake.prototype['@@transducer/result'] = _xfBase.result;\nXTake.prototype['@@transducer/step'] = function(result, input) {\n  this.i += 1;\n  var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n  return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;\n};\n\nexport default function _xtake(n) {\n  return function(xf) {return new XTake(n, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xtake from './internal/_xtake.js';\nimport slice from './slice.js';\n\n\n/**\n * Returns the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `take` method).\n *\n * Dispatches to the `take` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*}\n * @see R.drop\n * @example\n *\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(3, 'ramda');               //=> 'ram'\n *\n *      const personnel = [\n *        'Dave Brubeck',\n *        'Paul Desmond',\n *        'Eugene Wright',\n *        'Joe Morello',\n *        'Gerry Mulligan',\n *        'Bob Bates',\n *        'Joe Dodge',\n *        'Ron Crotty'\n *      ];\n *\n *      const takeFive = R.take(5);\n *      takeFive(personnel);\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n * @symb R.take(-1, [a, b]) = [a, b]\n * @symb R.take(0, [a, b]) = []\n * @symb R.take(1, [a, b]) = [a]\n * @symb R.take(2, [a, b]) = [a, b]\n */\nvar take = _curry2(_dispatchable(['take'], _xtake, function take(n, xs) {\n  return slice(0, n < 0 ? Infinity : n, xs);\n}));\nexport default take;\n", "import take from '../take.js';\n\nexport default function dropLast(n, xs) {\n  return take(n < xs.length ? xs.length - n : 0, xs);\n}\n", "import _xfBase from './_xfBase.js';\n\n\nfunction XDropLast(n, xf) {\n  if (n <= 0) {\n    return xf;\n  }\n  this.xf = xf;\n  this.pos = 0;\n  this.full = false;\n  this.acc = new Array(n);\n}\nXDropLast.prototype['@@transducer/init'] = _xfBase.init;\nXDropLast.prototype['@@transducer/result'] =  function(result) {\n  this.acc = null;\n  return this.xf['@@transducer/result'](result);\n};\nXDropLast.prototype['@@transducer/step'] = function(result, input) {\n  if (this.full) {\n    result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n  }\n  this.store(input);\n  return result;\n};\nXDropLast.prototype.store = function(input) {\n  this.acc[this.pos] = input;\n  this.pos += 1;\n  if (this.pos === this.acc.length) {\n    this.pos = 0;\n    this.full = true;\n  }\n};\n\nexport default function _xdropLast(n) {\n  return function(xf) { return new XDropLast(n, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _dropLast from './internal/_dropLast.js';\nimport _xdropLast from './internal/_xdropLast.js';\n\n\n/**\n * Returns a list containing all but the last `n` elements of the given `list`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements of `list` to skip.\n * @param {Array} list The list of elements to consider.\n * @return {Array} A copy of the list with only the first `list.length - n` elements\n * @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile\n * @example\n *\n *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n *      R.dropLast(3, 'ramda');               //=> 'ra'\n */\nvar dropLast = _curry2(_dispatchable([], _xdropLast, _dropLast));\nexport default dropLast;\n", "import slice from '../slice.js';\n\nexport default function dropLastWhile(pred, xs) {\n  var idx = xs.length - 1;\n  while (idx >= 0 && pred(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(0, idx + 1, xs);\n}\n", "import _xfBase from './_xfBase.js';\nimport _xReduce from './_xReduce.js';\n\n\nfunction XDropLastWhile(fn, xf) {\n  this.f = fn;\n  this.retained = [];\n  this.xf = xf;\n}\nXDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\nXDropLastWhile.prototype['@@transducer/result'] = function(result) {\n  this.retained = null;\n  return this.xf['@@transducer/result'](result);\n};\nXDropLastWhile.prototype['@@transducer/step'] = function(result, input) {\n  return this.f(input)\n    ? this.retain(result, input)\n    : this.flush(result, input);\n};\nXDropLastWhile.prototype.flush = function(result, input) {\n  result = _xReduce(\n    this.xf,\n    result,\n    this.retained\n  );\n  this.retained = [];\n  return this.xf['@@transducer/step'](result, input);\n};\nXDropLastWhile.prototype.retain = function(result, input) {\n  this.retained.push(input);\n  return result;\n};\n\nexport default function _xdropLastWhile(fn) {\n  return function(xf) { return new XDropLastWhile(fn, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _dropLastWhile from './internal/_dropLastWhile.js';\nimport _xdropLastWhile from './internal/_xdropLastWhile.js';\n\n\n/**\n * Returns a new list excluding all the tailing elements of a given list which\n * satisfy the supplied predicate function. It passes each value from the right\n * to the supplied predicate function, skipping elements until the predicate\n * function returns a `falsy` value. The predicate function is applied to one argument:\n * *(value)*.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} predicate The function to be called on each element\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.\n * @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile\n * @example\n *\n *      const lteThree = x => x <= 3;\n *\n *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n *\n *      R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'\n */\nvar dropLastWhile = _curry2(_dispatchable([], _xdropLastWhile, _dropLastWhile));\nexport default dropLastWhile;\n", "import _xfBase from './_xfBase.js';\n\n\nfunction XDropRepeatsWith(pred, xf) {\n  this.xf = xf;\n  this.pred = pred;\n  this.lastValue = undefined;\n  this.seenFirstValue = false;\n}\n\nXDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;\nXDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;\nXDropRepeatsWith.prototype['@@transducer/step'] = function(result, input) {\n  var sameAsLast = false;\n  if (!this.seenFirstValue) {\n    this.seenFirstValue = true;\n  } else if (this.pred(this.lastValue, input)) {\n    sameAsLast = true;\n  }\n  this.lastValue = input;\n  return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n};\n\nexport default function _xdropRepeatsWith(pred) {\n  return function(xf) { return new XDropRepeatsWith(pred, xf); };\n}\n", "import nth from './nth.js';\n\n\n/**\n * Returns the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.init, R.head, R.tail\n * @example\n *\n *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n *      R.last([]); //=> undefined\n *\n *      R.last('abc'); //=> 'c'\n *      R.last(''); //=> ''\n */\nvar last = nth(-1);\nexport default last;\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xdropRepeatsWith from './internal/_xdropRepeatsWith.js';\nimport last from './last.js';\n\n\n/**\n * Returns a new list without any consecutively repeating elements. Equality is\n * determined by applying the supplied predicate to each pair of consecutive elements. The\n * first element in a series of equal elements will be preserved.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *      const l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n */\nvar dropRepeatsWith = _curry2(_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n  var result = [];\n  var idx = 1;\n  var len = list.length;\n  if (len !== 0) {\n    result[0] = list[0];\n    while (idx < len) {\n      if (!pred(last(result), list[idx])) {\n        result[result.length] = list[idx];\n      }\n      idx += 1;\n    }\n  }\n  return result;\n}));\nexport default dropRepeatsWith;\n", "import _curry1 from './internal/_curry1.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xdropRepeatsWith from './internal/_xdropRepeatsWith.js';\nimport dropRepeatsWith from './dropRepeatsWith.js';\nimport equals from './equals.js';\n\n\n/**\n * Returns a new list without any consecutively repeating elements.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n */\nvar dropRepeats = _curry1(\n  _dispatchable([], function() {\n    return _xdropRepeatsWith(equals);\n  }, dropRepeatsWith(equals))\n);\nexport default dropRepeats;\n", "import _curry3 from './internal/_curry3.js';\nimport equals from './equals.js';\n\n\n/**\n * Takes a function and two values in its domain and returns `true` if the\n * values map to the same value in the codomain; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Relation\n * @sig (a -> b) -> a -> a -> Boolean\n * @param {Function} f\n * @param {*} x\n * @param {*} y\n * @return {Boolean}\n * @example\n *\n *      R.eqBy(Math.abs, 5, -5); //=> true\n */\nvar eqBy = _curry3(function eqBy(f, x, y) {\n  return equals(f(x), f(y));\n});\nexport default eqBy;\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xdropRepeatsWith from './internal/_xdropRepeatsWith.js';\nimport dropRepeatsWith from './dropRepeatsWith.js';\nimport eqBy from './eqBy.js';\n\n\n/**\n * Returns a new list without any consecutively repeating elements,\n * based upon the value returned by applying the supplied function to\n * each list element. [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} `list` without repeating elements.\n * @see R.transduce\n * @example\n *\n *     R.dropRepeatsBy(Math.abs, [1, -1, -1, 2, 3, -4, 4, 2, 2]); //=> [1, 2, 3, -4, 2]\n */\nvar dropRepeatsBy = _curry2(function(fn, list) {\n  return _dispatchable([], function() {\n    return _xdropRepeatsWith(eqBy(fn));\n  }, dropRepeatsWith(eqBy(fn)))(list);\n});\nexport default dropRepeatsBy;\n", "import _xfBase from './_xfBase.js';\n\n\nfunction XDropWhile(f, xf) {\n  this.xf = xf;\n  this.f = f;\n}\nXDropWhile.prototype['@@transducer/init'] = _xfBase.init;\nXDropWhile.prototype['@@transducer/result'] = _xfBase.result;\nXDropWhile.prototype['@@transducer/step'] = function(result, input) {\n  if (this.f) {\n    if (this.f(input)) {\n      return result;\n    }\n    this.f = null;\n  }\n  return this.xf['@@transducer/step'](result, input);\n};\n\nexport default function _xdropWhile(f) {\n  return function(xf) { return new XDropWhile(f, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xdropWhile from './internal/_xdropWhile.js';\nimport slice from './slice.js';\n\n\n/**\n * Returns a new list excluding the leading elements of a given list which\n * satisfy the supplied predicate function. It passes each value to the supplied\n * predicate function, skipping elements while the predicate function returns\n * `true`. The predicate function is applied to one argument: *(value)*.\n *\n * Dispatches to the `dropWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.takeWhile, R.transduce, R.addIndex\n * @example\n *\n *      const lteTwo = x => x <= 2;\n *\n *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n *\n *      R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'\n */\nvar dropWhile = _curry2(_dispatchable(['dropWhile'], _xdropWhile, function dropWhile(pred, xs) {\n  var idx = 0;\n  var len = xs.length;\n  while (idx < len && pred(xs[idx])) {\n    idx += 1;\n  }\n  return slice(idx, Infinity, xs);\n}));\nexport default dropWhile;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Returns the first argument if it is truthy, otherwise the second argument.\n * Acts as the boolean `or` statement if both inputs are `Boolean`s.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any}\n * @see R.either, R.and\n * @example\n *\n *      R.or(true, true); //=> true\n *      R.or(true, false); //=> true\n *      R.or(false, true); //=> true\n *      R.or(false, false); //=> false\n */\nvar or = _curry2(function or(a, b) {\n  return a || b;\n});\nexport default or;\n", "import _curry2 from './internal/_curry2.js';\nimport _isFunction from './internal/_isFunction.js';\nimport lift from './lift.js';\nimport or from './or.js';\n\n\n/**\n * A function wrapping calls to the two functions in an `||` operation,\n * returning the result of the first function if it is truth-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * truth-y value.\n *\n * In addition to functions, `R.either` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f a predicate\n * @param {Function} g another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n * @see R.both, R.anyPass, R.or\n * @example\n *\n *      const gt10 = x => x > 10;\n *      const even = x => x % 2 === 0;\n *      const f = R.either(gt10, even);\n *      f(101); //=> true\n *      f(8); //=> true\n *\n *      R.either(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(55)\n *      R.either([false, false, 'a'], [11]) // => [11, 11, \"a\"]\n */\nvar either = _curry2(function either(f, g) {\n  return _isFunction(f) ?\n    function _either() {\n      return f.apply(this, arguments) || g.apply(this, arguments);\n    } :\n    lift(or)(f, g);\n});\nexport default either;\n", "/**\n * Tests whether or not an object is a typed array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is a typed array, `false` otherwise.\n * @example\n *\n *      _isTypedArray(new Uint8Array([])); //=> true\n *      _isTypedArray(new Float32Array([])); //=> true\n *      _isTypedArray([]); //=> false\n *      _isTypedArray(null); //=> false\n *      _isTypedArray({}); //=> false\n */\nexport default function _isTypedArray(val) {\n  var type = Object.prototype.toString.call(val);\n  return type === '[object Uint8ClampedArray]' ||\n    type === '[object Int8Array]' || type === '[object Uint8Array]' ||\n    type === '[object Int16Array]' || type === '[object Uint16Array]' ||\n    type === '[object Int32Array]' || type === '[object Uint32Array]' ||\n    type === '[object Float32Array]' || type === '[object Float64Array]' ||\n    type === '[object BigInt64Array]' || type === '[object BigUint64Array]';\n}\n", "import _curry1 from './internal/_curry1.js';\nimport _isArguments from './internal/_isArguments.js';\nimport _isArray from './internal/_isArray.js';\nimport _isObject from './internal/_isObject.js';\nimport _isString from './internal/_isString.js';\nimport _isTypedArray from './internal/_isTypedArray.js';\n\n\n/**\n * Returns the empty value of its argument's type. Ramda defines the empty\n * value of Array (`[]`), Object (`{}`), String (`''`),\n * TypedArray (`Uint8Array []`, `Float32Array []`, etc), and Arguments. Other\n * types are supported if they define `<Type>.empty`,\n * `<Type>.prototype.empty` or implement the\n * [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).\n *\n * Dispatches to the `empty` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig a -> a\n * @param {*} x\n * @return {*}\n * @example\n *\n *      R.empty(Just(42));               //=> Nothing()\n *      R.empty([1, 2, 3]);              //=> []\n *      R.empty('unicorns');             //=> ''\n *      R.empty({x: 1, y: 2});           //=> {}\n *      R.empty(Uint8Array.from('123')); //=> Uint8Array []\n */\nvar empty = _curry1(function empty(x) {\n  return (\n    (x != null && typeof x['fantasy-land/empty'] === 'function')\n      ? x['fantasy-land/empty']()\n      : (x != null && x.constructor != null && typeof x.constructor['fantasy-land/empty'] === 'function')\n        ? x.constructor['fantasy-land/empty']()\n        : (x != null && typeof x.empty === 'function')\n          ? x.empty()\n          : (x != null && x.constructor != null && typeof x.constructor.empty === 'function')\n            ? x.constructor.empty()\n            : _isArray(x)\n              ? []\n              : _isString(x)\n                ? ''\n                : _isObject(x)\n                  ? {}\n                  : _isArguments(x)\n                    ? (function() { return arguments; }())\n                    : _isTypedArray(x)\n                      ? x.constructor.from('')\n                      : void 0  // else\n  );\n});\nexport default empty;\n", "import _curry2 from './internal/_curry2.js';\nimport drop from './drop.js';\n\n\n/**\n * Returns a new list containing the last `n` elements of the given list.\n * If `n > list.length`, returns a list of `list.length` elements.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n The number of elements to return.\n * @param {Array} xs The collection to consider.\n * @return {Array}\n * @see R.dropLast\n * @example\n *\n *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.takeLast(3, 'ramda');               //=> 'mda'\n */\nvar takeLast = _curry2(function takeLast(n, xs) {\n  return drop(n >= 0 ? xs.length - n : 0, xs);\n});\nexport default takeLast;\n", "import _curry2 from './internal/_curry2.js';\nimport equals from './equals.js';\nimport takeLast from './takeLast.js';\n\n/**\n * Checks if a list ends with the provided sublist.\n *\n * Similarly, checks if a string ends with the provided substring.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> [a] -> Boolean\n * @sig String -> String -> Boolean\n * @param {*} suffix\n * @param {*} list\n * @return {Boolean}\n * @see R.startsWith\n * @example\n *\n *      R.endsWith('c', 'abc')                //=> true\n *      R.endsWith('b', 'abc')                //=> false\n *      R.endsWith(['c'], ['a', 'b', 'c'])    //=> true\n *      R.endsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nvar endsWith = _curry2(function(suffix, list) {\n  return equals(takeLast(suffix.length, list), suffix);\n});\nexport default endsWith;\n", "import _curry3 from './internal/_curry3.js';\nimport equals from './equals.js';\n\n\n/**\n * Reports whether two objects have the same value, in [`R.equals`](#equals)\n * terms, for the specified property. Useful as a curried predicate.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig k -> {k: v} -> {k: v} -> Boolean\n * @param {String} prop The name of the property to compare\n * @param {Object} obj1\n * @param {Object} obj2\n * @return {Boolean}\n *\n * @example\n *\n *      const o1 = { a: 1, b: 2, c: 3, d: 4 };\n *      const o2 = { a: 10, b: 20, c: 3, d: 40 };\n *      R.eqProps('a', o1, o2); //=> false\n *      R.eqProps('c', o1, o2); //=> true\n */\nvar eqProps = _curry3(function eqProps(prop, obj1, obj2) {\n  return equals(obj1[prop], obj2[prop]);\n});\nexport default eqProps;\n", "import _curry2 from './internal/_curry2.js';\nimport _isArray from './internal/_isArray.js';\nimport _isObject from './internal/_isObject.js';\n\n\n/**\n * Creates a new object by recursively evolving a shallow copy of `object`,\n * according to the `transformation` functions. All non-primitive properties\n * are copied by reference.\n *\n * A `transformation` function will not be invoked if its corresponding key\n * does not exist in the evolved object.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n * @param {Object} transformations The object specifying transformation functions to apply\n *        to the object.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const tomato = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n *      const transformations = {\n *        firstName: R.trim,\n *        lastName: R.trim, // Will not get invoked.\n *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n *      };\n *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n */\nvar evolve = _curry2(function evolve(transformations, object) {\n  if (!_isObject(object) && !_isArray(object)) {\n    return object;\n  }\n  var result = object instanceof Array ? [] : {};\n  var transformation, key, type;\n  for (key in object) {\n    transformation = transformations[key];\n    type = typeof transformation;\n    result[key] = type === 'function'\n      ? transformation(object[key])\n      : transformation && type === 'object'\n        ? evolve(transformation, object[key])\n        : object[key];\n  }\n  return result;\n});\nexport default evolve;\n", "import _reduced from './_reduced.js';\nimport _xfBase from './_xfBase.js';\n\n\nfunction XFind(f, xf) {\n  this.xf = xf;\n  this.f = f;\n  this.found = false;\n}\nXFind.prototype['@@transducer/init'] = _xfBase.init;\nXFind.prototype['@@transducer/result'] = function(result) {\n  if (!this.found) {\n    result = this.xf['@@transducer/step'](result, void 0);\n  }\n  return this.xf['@@transducer/result'](result);\n};\nXFind.prototype['@@transducer/step'] = function(result, input) {\n  if (this.f(input)) {\n    this.found = true;\n    result = _reduced(this.xf['@@transducer/step'](result, input));\n  }\n  return result;\n};\n\nexport default function _xfind(f) {\n  return function(xf) { return new XFind(f, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xfind from './internal/_xfind.js';\n\n\n/**\n * Returns the first element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Dispatches to the `find` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      const xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.find(R.propEq(2, 'a'))(xs); //=> {a: 2}\n *      R.find(R.propEq(4, 'a'))(xs); //=> undefined\n */\nvar find = _curry2(_dispatchable(['find'], _xfind, function find(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx += 1;\n  }\n}));\nexport default find;\n", "import _reduced from './_reduced.js';\nimport _xfBase from './_xfBase.js';\n\n\nfunction XFindIndex(f, xf) {\n  this.xf = xf;\n  this.f = f;\n  this.idx = -1;\n  this.found = false;\n}\nXFindIndex.prototype['@@transducer/init'] = _xfBase.init;\nXFindIndex.prototype['@@transducer/result'] = function(result) {\n  if (!this.found) {\n    result = this.xf['@@transducer/step'](result, -1);\n  }\n  return this.xf['@@transducer/result'](result);\n};\nXFindIndex.prototype['@@transducer/step'] = function(result, input) {\n  this.idx += 1;\n  if (this.f(input)) {\n    this.found = true;\n    result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n  }\n  return result;\n};\n\nexport default function _xfindIndex(f) {\n  return function(xf) { return new XFindIndex(f, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xfindIndex from './internal/_xfindIndex.js';\n\n\n/**\n * Returns the index of the first element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce, R.indexOf\n * @example\n *\n *      const xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.findIndex(R.propEq(2, 'a'))(xs); //=> 1\n *      R.findIndex(R.propEq(4, 'a'))(xs); //=> -1\n */\nvar findIndex = _curry2(_dispatchable([], _xfindIndex, function findIndex(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n}));\nexport default findIndex;\n", "import _xfBase from './_xfBase.js';\n\n\nfunction XFindLast(f, xf) {\n  this.xf = xf;\n  this.f = f;\n}\nXFindLast.prototype['@@transducer/init'] = _xfBase.init;\nXFindLast.prototype['@@transducer/result'] = function(result) {\n  return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n};\nXFindLast.prototype['@@transducer/step'] = function(result, input) {\n  if (this.f(input)) {\n    this.last = input;\n  }\n  return result;\n};\n\nexport default function _xfindLast(f) {\n  return function(xf) { return new XFindLast(f, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xfindLast from './internal/_xfindLast.js';\n\n\n/**\n * Returns the last element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLast(R.propEq(1, 'a'))(xs); //=> {a: 1, b: 1}\n *      R.findLast(R.propEq(4, 'a'))(xs); //=> undefined\n */\nvar findLast = _curry2(_dispatchable([], _xfindLast, function findLast(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx -= 1;\n  }\n}));\nexport default findLast;\n", "import _xfBase from './_xfBase.js';\n\n\nfunction XFindLastIndex(f, xf) {\n  this.xf = xf;\n  this.f = f;\n  this.idx = -1;\n  this.lastIdx = -1;\n}\nXFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\nXFindLastIndex.prototype['@@transducer/result'] = function(result) {\n  return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n};\nXFindLastIndex.prototype['@@transducer/step'] = function(result, input) {\n  this.idx += 1;\n  if (this.f(input)) {\n    this.lastIdx = this.idx;\n  }\n  return result;\n};\n\nexport default function _xfindLastIndex(f) {\n  return function(xf) { return new XFindLastIndex(f, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xfindLastIndex from './internal/_xfindLastIndex.js';\n\n\n/**\n * Returns the index of the last element of the list which matches the\n * predicate, or `-1` if no element matches.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> Number\n * @param {Function} fn The predicate function used to determine if the element is the\n * desired one.\n * @param {Array} list The array to consider.\n * @return {Number} The index of the element found, or `-1`.\n * @see R.transduce, R.lastIndexOf\n * @example\n *\n *      const xs = [{a: 1, b: 0}, {a:1, b: 1}];\n *      R.findLastIndex(R.propEq(1, 'a'))(xs); //=> 1\n *      R.findLastIndex(R.propEq(4, 'a'))(xs); //=> -1\n */\nvar findLastIndex = _curry2(_dispatchable([], _xfindLastIndex, function findLastIndex(fn, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    if (fn(list[idx])) {\n      return idx;\n    }\n    idx -= 1;\n  }\n  return -1;\n}));\nexport default findLastIndex;\n", "import _curry1 from './internal/_curry1.js';\nimport _makeFlat from './internal/_makeFlat.js';\n\n\n/**\n * Returns a new list by pulling every item out of it (and all its sub-arrays)\n * and putting them in a new array, depth-first.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b]\n * @param {Array} list The array to consider.\n * @return {Array} The flattened list.\n * @see R.unnest\n * @example\n *\n *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n */\nvar flatten = _curry1(_makeFlat(true));\nexport default flatten;\n", "import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\n\n\n/**\n * Returns a new function much like the supplied one, except that the first two\n * arguments' order is reversed.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)\n * @param {Function} fn The function to invoke with its first two parameters reversed.\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n * @example\n *\n *      const mergeThree = (a, b, c) => [].concat(a, b, c);\n *\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n *\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\n */\nvar flip = _curry1(function flip(fn) {\n  return curryN(fn.length, function(a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\nexport default flip;\n", "import _checkForMethod from './internal/_checkForMethod.js';\nimport _curry2 from './internal/_curry2.js';\n\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      const printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nvar forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n  return list;\n}));\nexport default forEach;\n", "import _curry2 from './internal/_curry2.js';\nimport keys from './keys.js';\n\n\n/**\n * Iterate over an input `object`, calling a provided function `fn` for each\n * key and value in the object.\n *\n * `fn` receives three argument: *(value, key, obj)*.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Object\n * @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a\n * @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.\n * @param {Object} obj The object to iterate over.\n * @return {Object} The original object.\n * @example\n *\n *      const printKeyConcatValue = (value, key) => console.log(key + ':' + value);\n *      R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\n *      // logs x:1\n *      // logs y:2\n * @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}\n */\nvar forEachObjIndexed = _curry2(function forEachObjIndexed(fn, obj) {\n  var keyList = keys(obj);\n  var idx = 0;\n  while (idx < keyList.length) {\n    var key = keyList[idx];\n    fn(obj[key], key, obj);\n    idx += 1;\n  }\n  return obj;\n});\nexport default forEachObjIndexed;\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\nvar fromPairs = _curry1(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n  return result;\n});\nexport default fromPairs;\n", "import _checkForMethod from './internal/_checkForMethod.js';\nimport _curry2 from './internal/_curry2.js';\nimport reduceBy from './reduceBy.js';\n\n/**\n * Splits a list into sub-lists stored in an object, based on the result of\n * calling a key-returning function on each element, and grouping the\n * results according to values returned.\n *\n * Dispatches to the `groupBy` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx a => (b -> a) -> [b] -> {a: [b]}\n * @param {Function} fn Function :: a -> Idx\n * @param {Array} list The array to group\n * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n *         that produced that key when passed to `fn`.\n * @see R.reduceBy, R.transduce, R.indexBy, R.collectBy\n * @example\n *\n *      const byGrade = R.groupBy(function(student) {\n *        const score = student.score;\n *        return score < 65 ? 'F' :\n *               score < 70 ? 'D' :\n *               score < 80 ? 'C' :\n *               score < 90 ? 'B' : 'A';\n *      });\n *      const students = [{name: 'Abby', score: 84},\n *                      {name: 'Eddy', score: 58},\n *                      // ...\n *                      {name: 'Jack', score: 69}];\n *      byGrade(students);\n *      // {\n *      //   'A': [{name: 'Dianne', score: 99}],\n *      //   'B': [{name: 'Abby', score: 84}]\n *      //   // ...,\n *      //   'F': [{name: 'Eddy', score: 58}]\n *      // }\n */\nvar groupBy = _curry2(_checkForMethod('groupBy', reduceBy(function(acc, item) {\n  acc.push(item);\n  return acc;\n}, [])));\nexport default groupBy;\n", "import _curry2 from './internal/_curry2.js';\n\n/**\n * Takes a list and returns a list of lists where each sublist's elements are\n * all satisfied pairwise comparison according to the provided function.\n * Only adjacent elements are passed to the comparison function.\n *\n * @func\n * @memberOf R\n * @since v0.21.0\n * @category List\n * @sig ((a, a) \u2192 Boolean) \u2192 [a] \u2192 [[a]]\n * @param {Function} fn Function for determining whether two given (adjacent)\n *        elements should be in the same group\n * @param {Array} list The array to group. Also accepts a string, which will be\n *        treated as a list of characters.\n * @return {List} A list that contains sublists of elements,\n *         whose concatenations are equal to the original list.\n * @example\n *\n * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]\n *\n * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n *\n * const isVowel = R.test(/^[aeiou]$/i);\n * R.groupWith(R.eqBy(isVowel), 'aestiou')\n * //=> ['ae', 'st', 'iou']\n */\nvar groupWith = _curry2(function(fn, list) {\n  var res = [];\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    var nextidx = idx + 1;\n    while (nextidx < len && fn(list[nextidx - 1], list[nextidx])) {\n      nextidx += 1;\n    }\n    res.push(list.slice(idx, nextidx));\n    idx = nextidx;\n  }\n  return res;\n});\nexport default groupWith;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Returns `true` if the first argument is greater than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.lt\n * @example\n *\n *      R.gt(2, 1); //=> true\n *      R.gt(2, 2); //=> false\n *      R.gt(2, 3); //=> false\n *      R.gt('a', 'z'); //=> false\n *      R.gt('z', 'a'); //=> true\n */\nvar gt = _curry2(function gt(a, b) { return a > b; });\nexport default gt;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Returns `true` if the first argument is greater than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.lte\n * @example\n *\n *      R.gte(2, 1); //=> true\n *      R.gte(2, 2); //=> true\n *      R.gte(2, 3); //=> false\n *      R.gte('a', 'z'); //=> false\n *      R.gte('z', 'a'); //=> true\n */\nvar gte = _curry2(function gte(a, b) { return a >= b; });\nexport default gte;\n", "import _curry2 from './internal/_curry2.js';\nimport _has from './internal/_has.js';\n\nimport isNil from './isNil.js';\n\n\n/**\n * Returns whether or not a path exists in an object. Only the object's\n * own properties are checked.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> {a} -> Boolean\n * @param {Array} path The path to use.\n * @param {Object} obj The object to check the path in.\n * @return {Boolean} Whether the path exists.\n * @see R.has\n * @example\n *\n *      R.hasPath(['a', 'b'], {a: {b: 2}});         // => true\n *      R.hasPath(['a', 'b'], {a: {b: undefined}}); // => true\n *      R.hasPath(['a', 'b'], {a: {c: 2}});         // => false\n *      R.hasPath(['a', 'b'], {});                  // => false\n */\nvar hasPath = _curry2(function hasPath(_path, obj) {\n  if (_path.length === 0 || isNil(obj)) {\n    return false;\n  }\n  var val = obj;\n  var idx = 0;\n  while (idx < _path.length) {\n    if (!isNil(val) && _has(_path[idx], val)) {\n      val = val[_path[idx]];\n      idx += 1;\n    } else {\n      return false;\n    }\n  }\n  return true;\n});\nexport default hasPath;\n", "import _curry2 from './internal/_curry2.js';\nimport hasPath from './hasPath.js';\n\n\n/**\n * Returns whether or not an object has an own property with the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      const hasName = R.has('name');\n *      hasName({name: 'alice'});   //=> true\n *      hasName({name: 'bob'});     //=> true\n *      hasName({});                //=> false\n *\n *      const point = {x: 0, y: 0};\n *      const pointHas = R.has(R.__, point);\n *      pointHas('x');  //=> true\n *      pointHas('y');  //=> true\n *      pointHas('z');  //=> false\n */\nvar has = _curry2(function has(prop, obj) {\n  return hasPath([prop], obj);\n});\nexport default has;\n", "import _curry2 from './internal/_curry2.js';\nimport isNil from './isNil.js';\n\n\n/**\n * Returns whether or not an object or its prototype chain has a property with\n * the specified name\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Object\n * @sig s -> {s: x} -> Boolean\n * @param {String} prop The name of the property to check for.\n * @param {Object} obj The object to query.\n * @return {Boolean} Whether the property exists.\n * @example\n *\n *      function Rectangle(width, height) {\n *        this.width = width;\n *        this.height = height;\n *      }\n *      Rectangle.prototype.area = function() {\n *        return this.width * this.height;\n *      };\n *\n *      const square = new Rectangle(2, 2);\n *      R.hasIn('width', square);  //=> true\n *      R.hasIn('area', square);  //=> true\n */\nvar hasIn = _curry2(function hasIn(prop, obj) {\n  if (isNil(obj)) {\n    return false;\n  }\n  return prop in obj;\n});\nexport default hasIn;\n", "import _objectIs from './internal/_objectIs.js';\n\n\n/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * Note this is merely a curried version of ES6 `Object.is`.\n *\n * `identical` does not support the `__` placeholder.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      const o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */\nvar identical = function(a, b) {\n  switch (arguments.length) {\n    case 0:\n      return identical;\n    case 1:\n      return (function() {\n        return function unaryIdentical(_b) {\n          switch (arguments.length) {\n            case 0:\n              return unaryIdentical;\n            default:\n              return _objectIs(a, _b);\n          }\n        };\n      }());\n    default:\n      return _objectIs(a, b);\n  }\n};\n\n// In order to support Cross-origin Window objects as arguments to identical,\n// it cannot be implemented as _curry2(_objectIs).\n// The reason is that _curry2 checks if a function argument is the placeholder __\n// by accessing a paritcular property. However, across URL origins access\n// to most properties of Window is forbidden.\nexport default identical;\n", "import _curry3 from './internal/_curry3.js';\nimport curryN from './curryN.js';\n\n\n/**\n * Creates a function that will process either the `onTrue` or the `onFalse`\n * function depending upon the result of the `condition` predicate.\n *\n * Note that `ifElse` takes its arity from the longest of the three functions passed to it.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n * @param {Function} condition A predicate function\n * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n * @return {Function} A new function that will process either the `onTrue` or the `onFalse`\n *                    function depending upon the result of the `condition` predicate.\n * @see R.unless, R.when, R.cond\n * @example\n *\n *      const incCount = R.ifElse(\n *        R.has('count'),\n *        R.over(R.lensProp('count'), R.inc),\n *        R.assoc('count', 1)\n *      );\n *      incCount({ count: 1 }); //=> { count: 2 }\n *      incCount({});           //=> { count: 1 }\n */\nvar ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {\n  return curryN(Math.max(condition.length, onTrue.length, onFalse.length),\n    function _ifElse() {\n      return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n    }\n  );\n});\nexport default ifElse;\n", "import add from './add.js';\n\n\n/**\n * Increments its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number} n + 1\n * @see R.dec\n * @example\n *\n *      R.inc(42); //=> 43\n */\nvar inc = add(1);\nexport default inc;\n", "import _includes from './internal/_includes.js';\nimport _curry2 from './internal/_curry2.js';\n\n/**\n * Returns `true` if the specified value is equal, in [`R.equals`](#equals)\n * terms, to at least one element of the given list; `false` otherwise.\n * Also works with strings.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category List\n * @sig a -> [a] -> Boolean\n * @param {Object} a The item to compare against.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.\n * @see R.any\n * @example\n *\n *      R.includes(3, [1, 2, 3]); //=> true\n *      R.includes(4, [1, 2, 3]); //=> false\n *      R.includes({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true\n *      R.includes([42], [[42]]); //=> true\n *      R.includes('ba', 'banana'); //=>true\n */\nvar includes = _curry2(_includes);\nexport default includes;\n", "import reduceBy from './reduceBy.js';\n\n\n/**\n * Given a function that generates a key, turns a list of objects into an\n * object indexing the objects by the given key. Note that if multiple\n * objects generate the same value for the indexing key only the last value\n * will be included in the generated object.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @typedefn Idx = String | Int | Symbol\n * @sig Idx a => (b -> a) -> [b] -> {a: b}\n * @param {Function} fn Function :: a -> Idx\n * @param {Array} array The array of objects to index\n * @return {Object} An object indexing each array element by the given property.\n * @see R.groupBy\n * @example\n *\n *      const list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n *      R.indexBy(R.prop('id'), list);\n *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n */\nvar indexBy = reduceBy(function(acc, elem) { return elem; }, null);\nexport default indexBy;\n", "import _curry2 from './internal/_curry2.js';\nimport _indexOf from './internal/_indexOf.js';\nimport _isArray from './internal/_isArray.js';\n\n\n/**\n * Returns the position of the first occurrence of an item in an array, or -1\n * if the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.lastIndexOf, R.findIndex\n * @example\n *\n *      R.indexOf(3, [1,2,3,4]); //=> 2\n *      R.indexOf(10, [1,2,3,4]); //=> -1\n */\nvar indexOf = _curry2(function indexOf(target, xs) {\n  return typeof xs.indexOf === 'function' && !_isArray(xs) ?\n    xs.indexOf(target) :\n    _indexOf(xs, target, 0);\n});\nexport default indexOf;\n", "import slice from './slice.js';\n\n\n/**\n * Returns all but the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.last, R.head, R.tail\n * @example\n *\n *      R.init([1, 2, 3]);  //=> [1, 2]\n *      R.init([1, 2]);     //=> [1]\n *      R.init([1]);        //=> []\n *      R.init([]);         //=> []\n *\n *      R.init('abc');  //=> 'ab'\n *      R.init('ab');   //=> 'a'\n *      R.init('a');    //=> ''\n *      R.init('');     //=> ''\n */\nvar init = slice(0, -1);\nexport default init;\n", "import _includesWith from './internal/_includesWith.js';\nimport _curry3 from './internal/_curry3.js';\nimport _filter from './internal/_filter.js';\n\n\n/**\n * Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n * `xs'` comprising each of the elements of `xs` which is equal to one or more\n * elements of `ys` according to `pred`.\n *\n * `pred` must be a binary function expecting an element from each list.\n *\n * `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n * not be significant, but since `xs'` is ordered the implementation guarantees\n * that its values are in the same order as they appear in `xs`. Duplicates are\n * not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Relation\n * @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n * @param {Function} pred\n * @param {Array} xs\n * @param {Array} ys\n * @return {Array}\n * @see R.intersection\n * @example\n *\n *      R.innerJoin(\n *        (record, id) => record.id === id,\n *        [{id: 824, name: 'Richie Furay'},\n *         {id: 956, name: 'Dewey Martin'},\n *         {id: 313, name: 'Bruce Palmer'},\n *         {id: 456, name: 'Stephen Stills'},\n *         {id: 177, name: 'Neil Young'}],\n *        [177, 456, 999]\n *      );\n *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n */\nvar innerJoin = _curry3(function innerJoin(pred, xs, ys) {\n  return _filter(function(x) { return _includesWith(pred, x, ys); }, xs);\n});\nexport default innerJoin;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * Inserts the supplied element into the list, at the specified `index`. _Note that\n\n * this is not destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.2.2\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} index The position to insert the element\n * @param {*} elt The element to insert into the Array\n * @param {Array} list The list to insert into\n * @return {Array} A new Array with `elt` inserted at `index`.\n * @example\n *\n *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n */\nvar insert = _curry3(function insert(idx, elt, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  var result = Array.prototype.slice.call(list, 0);\n  result.splice(idx, 0, elt);\n  return result;\n});\nexport default insert;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * Inserts the sub-list into the list, at the specified `index`. _Note that this is not\n * destructive_: it returns a copy of the list with the changes.\n * <small>No lists have been harmed in the application of this function.</small>\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig Number -> [a] -> [a] -> [a]\n * @param {Number} index The position to insert the sub-list\n * @param {Array} elts The sub-list to insert into the Array\n * @param {Array} list The list to insert the sub-list into\n * @return {Array} A new Array with `elts` inserted starting at `index`.\n * @example\n *\n *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n */\nvar insertAll = _curry3(function insertAll(idx, elts, list) {\n  idx = idx < list.length && idx >= 0 ? idx : list.length;\n  return [].concat(\n    Array.prototype.slice.call(list, 0, idx),\n    elts,\n    Array.prototype.slice.call(list, idx)\n  );\n});\nexport default insertAll;\n", "import _Set from './_Set.js';\nimport _xfBase from './_xfBase.js';\n\n\nfunction XUniqBy(f, xf) {\n  this.xf = xf;\n  this.f = f;\n  this.set = new _Set();\n}\nXUniqBy.prototype['@@transducer/init'] = _xfBase.init;\nXUniqBy.prototype['@@transducer/result'] = _xfBase.result;\nXUniqBy.prototype['@@transducer/step'] = function(result, input) {\n  return this.set.add(this.f(input)) ? this.xf['@@transducer/step'](result, input) : result;\n};\n\nexport default function _xuniqBy(f) {\n  return function(xf) { return new XUniqBy(f, xf); };\n}\n", "import _Set from './internal/_Set.js';\nimport _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xuniqBy from './internal/_xuniqBy.js';\n\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied function to\n * each list element. Prefers the first item if the supplied function produces\n * the same value on two items. [`R.equals`](#equals) is used for comparison.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> b) -> [a] -> [a]\n * @param {Function} fn A function used to produce a value to use during comparisons.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n */\nvar uniqBy = _curry2(_dispatchable([], _xuniqBy, function(fn, list) {\n  var set = new _Set();\n  var result = [];\n  var idx = 0;\n  var appliedItem, item;\n\n  while (idx < list.length) {\n    item = list[idx];\n    appliedItem = fn(item);\n    if (set.add(appliedItem)) {\n      result.push(item);\n    }\n    idx += 1;\n  }\n  return result;\n}));\nexport default uniqBy;\n", "import identity from './identity.js';\nimport uniqBy from './uniqBy.js';\n\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list. [`R.equals`](#equals) is used to determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n *      R.uniq([1, '1']);     //=> [1, '1']\n *      R.uniq([[42], [42]]); //=> [[42]]\n */\nvar uniq = uniqBy(identity);\nexport default uniq;\n", "import _curry2 from './internal/_curry2.js';\nimport _filter from './internal/_filter.js';\nimport _Set from './internal/_Set.js';\nimport uniq from './uniq.js';\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of those\n * elements common to both lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The list of elements found in both `list1` and `list2`.\n * @see R.innerJoin\n * @example\n *\n *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n */\nvar intersection = _curry2(function intersection(list1, list2) {\n  var toKeep = new _Set();\n\n  for (var i = 0; i < list1.length; i += 1) {\n    toKeep.add(list1[i]);\n  }\n\n  return uniq(_filter(toKeep.has.bind(toKeep), list2));\n});\nexport default intersection;\n", "import _checkForMethod from './internal/_checkForMethod.js';\nimport _curry2 from './internal/_curry2.js';\n\n\n/**\n * Creates a new list with the separator interposed between elements.\n *\n * Dispatches to the `intersperse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} separator The element to add to the list.\n * @param {Array} list The list to be interposed.\n * @return {Array} The new list.\n * @example\n *\n *      R.intersperse('a', ['b', 'n', 'n', 's']); //=> ['b', 'a', 'n', 'a', 'n', 'a', 's']\n */\nvar intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n  var out = [];\n  var idx = 0;\n  var length = list.length;\n  while (idx < length) {\n    if (idx === length - 1) {\n      out.push(list[idx]);\n    } else {\n      out.push(list[idx], separator);\n    }\n    idx += 1;\n  }\n  return out;\n}));\nexport default intersperse;\n", "import _has from './_has.js';\n\n// Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nfunction _objectAssign(target) {\n  if (target == null) {\n    throw new TypeError('Cannot convert undefined or null to object');\n  }\n\n  var output = Object(target);\n  var idx = 1;\n  var length = arguments.length;\n  while (idx < length) {\n    var source = arguments[idx];\n    if (source != null) {\n      for (var nextKey in source) {\n        if (_has(nextKey, source)) {\n          output[nextKey] = source[nextKey];\n        }\n      }\n    }\n    idx += 1;\n  }\n  return output;\n}\n\nexport default typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Creates an object containing a single key:value pair.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @sig String -> a -> {String:a}\n * @param {String} key\n * @param {*} val\n * @return {Object}\n * @see R.pair\n * @example\n *\n *      const matchPhrases = R.compose(\n *        R.objOf('must'),\n *        R.map(R.objOf('match_phrase'))\n *      );\n *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n */\nvar objOf = _curry2(function objOf(key, val) {\n  var obj = {};\n  obj[key] = val;\n  return obj;\n});\nexport default objOf;\n", "import _objectAssign from './_objectAssign.js';\nimport _identity from './_identity.js';\nimport _isArrayLike from './_isArrayLike.js';\nimport _isTransformer from './_isTransformer.js';\nimport objOf from '../objOf.js';\n\n\nvar _stepCatArray = {\n  '@@transducer/init': Array,\n  '@@transducer/step': function(xs, x) {\n    xs.push(x);\n    return xs;\n  },\n  '@@transducer/result': _identity\n};\nvar _stepCatString = {\n  '@@transducer/init': String,\n  '@@transducer/step': function(a, b) { return a + b; },\n  '@@transducer/result': _identity\n};\nvar _stepCatObject = {\n  '@@transducer/init': Object,\n  '@@transducer/step': function(result, input) {\n    return _objectAssign(\n      result,\n      _isArrayLike(input) ? objOf(input[0], input[1]) : input\n    );\n  },\n  '@@transducer/result': _identity\n};\n\nexport default function _stepCat(obj) {\n  if (_isTransformer(obj)) {\n    return obj;\n  }\n  if (_isArrayLike(obj)) {\n    return _stepCatArray;\n  }\n  if (typeof obj === 'string') {\n    return _stepCatString;\n  }\n  if (typeof obj === 'object') {\n    return _stepCatObject;\n  }\n  throw new Error('Cannot create transformer for ' + obj);\n}\n", "import _curry3 from './internal/_curry3.js';\nimport _isTransformer from './internal/_isTransformer.js';\nimport _xReduce from './internal/_xReduce.js';\nimport _stepCat from './internal/_stepCat.js';\n\n\n/**\n * Transforms the items of the list with the transducer and appends the\n * transformed items to the accumulator using an appropriate iterator function\n * based on the accumulator type.\n *\n * The accumulator can be an array, string, object or a transformer. Iterated\n * items will be appended to arrays and concatenated to strings. Objects will\n * be merged directly or 2-item arrays will be merged as key, value pairs.\n *\n * The accumulator can also be a transformer object that provides a 2-arity\n * reducing iterator function, step, 0-arity initial value function, init, and\n * 1-arity result extraction function result. The step function is used as the\n * iterator function in reduce. The result function is used to convert the\n * final accumulator into the return type and in most cases is R.identity. The\n * init function is used to provide the initial accumulator.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the\n * transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig a -> (b -> b) -> [c] -> a\n * @param {*} acc The initial accumulator value.\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.transduce\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const transducer = R.compose(R.map(R.add(1)), R.take(2));\n *\n *      R.into([], transducer, numbers); //=> [2, 3]\n *\n *      const intoArray = R.into([]);\n *      intoArray(transducer, numbers); //=> [2, 3]\n */\nvar into = _curry3(function into(acc, transducer, list) {\n  var xf = transducer(_isTransformer(acc) ? acc : _stepCat(acc));\n  return _xReduce(xf, xf['@@transducer/init'](), list);\n});\nexport default into;\n", "import _curry1 from './internal/_curry1.js';\nimport _has from './internal/_has.js';\nimport keys from './keys.js';\n\n\n/**\n * Same as [`R.invertObj`](#invertObj), however this accounts for objects with\n * duplicate values by putting the values into an array.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: [ s, ... ]}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object with keys in an array.\n * @see R.invertObj\n * @example\n *\n *      const raceResultsByFirstName = {\n *        first: 'alice',\n *        second: 'jake',\n *        third: 'alice',\n *      };\n *      R.invert(raceResultsByFirstName);\n *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n */\nvar invert = _curry1(function invert(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    var val = obj[key];\n    var list = _has(val, out) ? out[val] : (out[val] = []);\n    list[list.length] = key;\n    idx += 1;\n  }\n  return out;\n});\nexport default invert;\n", "import _curry1 from './internal/_curry1.js';\nimport keys from './keys.js';\n\n\n/**\n * Returns a new object with the keys of the given object as values, and the\n * values of the given object, which are coerced to strings, as keys. Note\n * that the last key found is preferred when handling the same value.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig {s: x} -> {x: s}\n * @param {Object} obj The object or array to invert\n * @return {Object} out A new object\n * @see R.invert\n * @example\n *\n *      const raceResults = {\n *        first: 'alice',\n *        second: 'jake'\n *      };\n *      R.invertObj(raceResults);\n *      //=> { 'alice': 'first', 'jake':'second' }\n *\n *      // Alternatively:\n *      const raceResults = ['alice', 'jake'];\n *      R.invertObj(raceResults);\n *      //=> { 'alice': '0', 'jake':'1' }\n */\nvar invertObj = _curry1(function invertObj(obj) {\n  var props = keys(obj);\n  var len = props.length;\n  var idx = 0;\n  var out = {};\n\n  while (idx < len) {\n    var key = props[idx];\n    out[obj[key]] = key;\n    idx += 1;\n  }\n  return out;\n});\nexport default invertObj;\n", "import _curry2 from './internal/_curry2.js';\nimport _isFunction from './internal/_isFunction.js';\nimport curryN from './curryN.js';\nimport toString from './toString.js';\n\n\n/**\n * Given an `arity` (Number) and a `name` (String) the `invoker` function\n * returns a curried function that takes `arity` arguments and a `context`\n * object. It will \"invoke\" the `name`'d function (a method) on the `context`\n * object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of any of the target object's methods to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *      // A function with no arguments\n *      const asJson = invoker(0, \"json\")\n *      // Just like calling .then((response) => response.json())\n *      fetch(\"http://example.com/index.json\").then(asJson)\n *\n *      // A function with one argument\n *      const sliceFrom = invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *\n *      // A function with two arguments\n *      const sliceFrom6 = invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n *\n *      // NOTE: You can't simply pass some of the arguments to the initial invoker function.\n *      const firstCreditCardSection = invoker(2, \"slice\", 0, 4)\n *      firstCreditCardSection(\"4242 4242 4242 4242\") // => Function<...>\n *\n *      // Since invoker returns a curried function, you may partially apply it to create the function you need.\n *      const firstCreditCardSection = invoker(2, \"slice\")(0, 4)\n *      firstCreditCardSection(\"4242 4242 4242 4242\") // => \"4242\"\n *\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\nvar invoker = _curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function() {\n    var target = arguments[arity];\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\nexport default invoker;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * See if an object (i.e. `val`) is an instance of the supplied constructor. This\n * function will check up the inheritance chain, if any.\n * If `val` was created using `Object.create`, `R.is(Object, val) === true`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Type\n * @sig (* -> {*}) -> a -> Boolean\n * @param {Object} ctor A constructor\n * @param {*} val The value to test\n * @return {Boolean}\n * @example\n *\n *      R.is(Object, {}); //=> true\n *      R.is(Number, 1); //=> true\n *      R.is(Object, 1); //=> false\n *      R.is(String, 's'); //=> true\n *      R.is(String, new String('')); //=> true\n *      R.is(Object, new String('')); //=> true\n *      R.is(Object, 's'); //=> false\n *      R.is(Number, {}); //=> false\n */\nvar is = _curry2(function is(Ctor, val) {\n  return val instanceof Ctor ||\n    val != null && (\n      val.constructor === Ctor ||\n      (Ctor.name === 'Object' && typeof val === 'object'));\n});\nexport default is;\n", "import _curry1 from './internal/_curry1.js';\nimport empty from './empty.js';\nimport equals from './equals.js';\n\n\n/**\n * Returns `true` if the given value is its type's empty value; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> Boolean\n * @param {*} x\n * @return {Boolean}\n * @see R.empty\n * @example\n *\n *      R.isEmpty([1, 2, 3]);           //=> false\n *      R.isEmpty([]);                  //=> true\n *      R.isEmpty('');                  //=> true\n *      R.isEmpty(null);                //=> false\n *      R.isEmpty({});                  //=> true\n *      R.isEmpty({length: 0});         //=> false\n *      R.isEmpty(Uint8Array.from('')); //=> true\n */\nvar isEmpty = _curry1(function isEmpty(x) {\n  return x != null && equals(x, empty(x));\n});\nexport default isEmpty;\n", "import isNil from './isNil.js';\nimport _curry1 from './internal/_curry1.js';\n\n\n/**\n * Checks if the input value is not `null` and not `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is not `undefined` or not `null`, otherwise `false`.\n * @example\n *\n *      R.isNotNil(null); //=> false\n *      R.isNotNil(undefined); //=> false\n *      R.isNotNil(0); //=> true\n *      R.isNotNil([]); //=> true\n */\nvar isNotNil = _curry1(function isNotNil(x) { return !isNil(x); });\nexport default isNotNil;\n", "import invoker from './invoker.js';\n\n\n/**\n * Returns a string made by inserting the `separator` between each element and\n * concatenating all the elements into a single string.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig String -> [a] -> String\n * @param {Number|String} separator The string used to separate the elements.\n * @param {Array} xs The elements to join into a string.\n * @return {String} str The string made by concatenating `xs` with `separator`.\n * @see R.split\n * @example\n *\n *      const spacer = R.join(' ');\n *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n */\nvar join = invoker(1, 'join');\nexport default join;\n", "import _curry1 from './internal/_curry1.js';\nimport converge from './converge.js';\n\n\n/**\n * juxt applies a list of functions to a list of values.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Function\n * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n * @param {Array} fns An array of functions\n * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n * @see R.applySpec\n * @example\n *\n *      const getRange = R.juxt([Math.min, Math.max]);\n *      getRange(3, 4, 9, -3); //=> [-3, 9]\n * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n */\nvar juxt = _curry1(function juxt(fns) {\n  return converge(function() { return Array.prototype.slice.call(arguments, 0); }, fns);\n});\nexport default juxt;\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * Returns a list containing the names of all the properties of the supplied\n * object, including prototype properties.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own and prototype properties.\n * @see R.keys, R.valuesIn\n * @example\n *\n *      const F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      const f = new F();\n *      R.keysIn(f); //=> ['x', 'y']\n */\nvar keysIn = _curry1(function keysIn(obj) {\n  var prop;\n  var ks = [];\n  for (prop in obj) {\n    ks[ks.length] = prop;\n  }\n  return ks;\n});\nexport default keysIn;\n", "import _curry2 from './internal/_curry2.js';\nimport _isArray from './internal/_isArray.js';\nimport equals from './equals.js';\n\n\n/**\n * Returns the position of the last occurrence of an item in an array, or -1 if\n * the item is not included in the array. [`R.equals`](#equals) is used to\n * determine equality.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> Number\n * @param {*} target The item to find.\n * @param {Array} xs The array to search in.\n * @return {Number} the index of the target, or -1 if the target is not found.\n * @see R.indexOf, R.findLastIndex\n * @example\n *\n *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n */\nvar lastIndexOf = _curry2(function lastIndexOf(target, xs) {\n  if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n    return xs.lastIndexOf(target);\n  } else {\n    var idx = xs.length - 1;\n    while (idx >= 0) {\n      if (equals(xs[idx], target)) {\n        return idx;\n      }\n      idx -= 1;\n    }\n    return -1;\n  }\n});\nexport default lastIndexOf;\n", "export default function _isNumber(x) {\n  return Object.prototype.toString.call(x) === '[object Number]';\n}\n", "import _curry1 from './internal/_curry1.js';\nimport _isNumber from './internal/_isNumber.js';\n\n\n/**\n * Returns the number of elements in the array by returning `list.length`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [a] -> Number\n * @param {Array} list The array to inspect.\n * @return {Number} The length of the array.\n * @example\n *\n *      R.length([]); //=> 0\n *      R.length([1, 2, 3]); //=> 3\n */\nvar length = _curry1(function length(list) {\n  return list != null && _isNumber(list.length) ? list.length : NaN;\n});\nexport default length;\n", "import _curry2 from './internal/_curry2.js';\nimport map from './map.js';\n\n\n/**\n * Returns a lens for the given getter and setter functions. The getter \"gets\"\n * the value of the focus; the setter \"sets\" the value of the focus. The setter\n * should not mutate the data structure.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n * @param {Function} getter\n * @param {Function} setter\n * @return {Lens}\n * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n * @example\n *\n *      const xLens = R.lens(R.prop('x'), R.assoc('x'));\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nvar lens = _curry2(function lens(getter, setter) {\n  return function(toFunctorFn) {\n    return function(target) {\n      return map(\n        function(focus) {\n          return setter(focus, target);\n        },\n        toFunctorFn(getter(target))\n      );\n    };\n  };\n});\nexport default lens;\n", "import _curry3 from './internal/_curry3.js';\nimport adjust from './adjust.js';\nimport always from './always.js';\n\n\n/**\n * Returns a new copy of the array with the element at the provided index\n * replaced with the given value.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category List\n * @sig Number -> a -> [a] -> [a]\n * @param {Number} idx The index to update.\n * @param {*} x The value to exist at the given index of the returned array.\n * @param {Array|Arguments} list The source array-like object to be updated.\n * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n * @see R.adjust\n * @example\n *\n *      R.update(1, '_', ['a', 'b', 'c']);      //=> ['a', '_', 'c']\n *      R.update(-1, '_', ['a', 'b', 'c']);     //=> ['a', 'b', '_']\n * @symb R.update(-1, a, [b, c]) = [b, a]\n * @symb R.update(0, a, [b, c]) = [a, c]\n * @symb R.update(1, a, [b, c]) = [b, a]\n */\nvar update = _curry3(function update(idx, x, list) {\n  return adjust(idx, always(x), list);\n});\nexport default update;\n", "import _curry1 from './internal/_curry1.js';\nimport lens from './lens.js';\nimport nth from './nth.js';\nimport update from './update.js';\n\n\n/**\n * Returns a lens whose focus is the specified index.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Number -> Lens s a\n * @param {Number} n\n * @return {Lens}\n * @see R.view, R.set, R.over, R.nth\n * @example\n *\n *      const headLens = R.lensIndex(0);\n *\n *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n */\nvar lensIndex = _curry1(function lensIndex(n) {\n  return lens(nth(n), update(n));\n});\nexport default lensIndex;\n", "import _curry2 from './internal/_curry2.js';\nimport _isInteger from './internal/_isInteger.js';\nimport nth from './nth.js';\n\n/**\n * Retrieves the values at given paths of an object.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category Object\n * @typedefn Idx = [String | Int | Symbol]\n * @sig [Idx] -> {a} -> [a | Undefined]\n * @param {Array} pathsArray The array of paths to be fetched.\n * @param {Object} obj The object to retrieve the nested properties from.\n * @return {Array} A list consisting of values at paths specified by \"pathsArray\".\n * @see R.path\n * @example\n *\n *      R.paths([['a', 'b'], ['p', 0, 'q']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, 3]\n *      R.paths([['a', 'b'], ['p', 'r']], {a: {b: 2}, p: [{q: 3}]}); //=> [2, undefined]\n */\nvar paths = _curry2(function paths(pathsArray, obj) {\n  return pathsArray.map(function(paths) {\n    var val = obj;\n    var idx = 0;\n    var p;\n    while (idx < paths.length) {\n      if (val == null) {\n        return;\n      }\n      p = paths[idx];\n      val = _isInteger(p) ? nth(p, val) : val[p];\n      idx += 1;\n    }\n    return val;\n  });\n});\nexport default paths;\n", "import _curry2 from './internal/_curry2.js';\nimport paths from './paths.js';\n\n/**\n * Retrieves the value at a given path. The nodes of the path can be arbitrary strings or non-negative integers.\n * For anything else, the value is unspecified. Integer paths are meant to index arrays, strings are meant for objects.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> {a} -> a | Undefined\n * @sig Idx = String | NonNegativeInt\n * @param {Array} path The path to use.\n * @param {Object} obj The object or array to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop, R.nth, R.assocPath, R.dissocPath\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n *      R.path(['a', 'b', 0], {a: {b: [1, 2, 3]}}); //=> 1\n *      R.path(['a', 'b', -2], {a: {b: [1, 2, 3]}}); //=> 2\n *      R.path([2], {'2': 2}); //=> 2\n *      R.path([-2], {'-2': 'a'}); //=> undefined\n */\n\nvar path = _curry2(function path(pathAr, obj) {\n  return paths([pathAr], obj)[0];\n});\nexport default path;\n", "import _curry1 from './internal/_curry1.js';\nimport assocPath from './assocPath.js';\nimport lens from './lens.js';\nimport path from './path.js';\n\n\n/**\n * Returns a lens whose focus is the specified path.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig [Idx] -> Lens s a\n * @param {Array} path The path to use.\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      const xHeadYLens = R.lensPath(['x', 0, 'y']);\n *\n *      R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> 2\n *      R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}\n *      R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n *      //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}\n */\nvar lensPath = _curry1(function lensPath(p) {\n  return lens(path(p), assocPath(p));\n});\nexport default lensPath;\n", "import _curry1 from './internal/_curry1.js';\nimport assoc from './assoc.js';\nimport lens from './lens.js';\nimport prop from './prop.js';\n\n\n/**\n * Returns a lens whose focus is the specified property.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig String -> Lens s a\n * @param {String} k\n * @return {Lens}\n * @see R.view, R.set, R.over\n * @example\n *\n *      const xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});            //=> 1\n *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n */\nvar lensProp = _curry1(function lensProp(k) {\n  return lens(prop(k), assoc(k));\n});\nexport default lensProp;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Returns `true` if the first argument is less than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.gt\n * @example\n *\n *      R.lt(2, 1); //=> false\n *      R.lt(2, 2); //=> false\n *      R.lt(2, 3); //=> true\n *      R.lt('a', 'z'); //=> true\n *      R.lt('z', 'a'); //=> false\n */\nvar lt = _curry2(function lt(a, b) { return a < b; });\nexport default lt;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Returns `true` if the first argument is less than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.gte\n * @example\n *\n *      R.lte(2, 1); //=> false\n *      R.lte(2, 2); //=> true\n *      R.lte(2, 3); //=> true\n *      R.lte('a', 'z'); //=> true\n *      R.lte('z', 'a'); //=> false\n */\nvar lte = _curry2(function lte(a, b) { return a <= b; });\nexport default lte;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * The `mapAccum` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from left to right, and returning a final value of this\n * accumulator together with the new list.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.scan, R.addIndex, R.mapAccumRight\n * @example\n *\n *      const digits = ['1', '2', '3', '4'];\n *      const appender = (a, b) => [a + b, a + b];\n *\n *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n * @symb R.mapAccum(f, a, [b, c, d]) = [\n *   f(f(f(a, b)[0], c)[0], d)[0],\n *   [\n *     f(a, b)[1],\n *     f(f(a, b)[0], c)[1],\n *     f(f(f(a, b)[0], c)[0], d)[1]\n *   ]\n * ]\n */\nvar mapAccum = _curry3(function mapAccum(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var tuple = [acc];\n  while (idx < len) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx += 1;\n  }\n  return [tuple[0], result];\n});\nexport default mapAccum;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * The `mapAccumRight` function behaves like a combination of map and reduce; it\n * applies a function to each element of a list, passing an accumulating\n * parameter from right to left, and returning a final value of this\n * accumulator together with the new list.\n *\n * Similar to [`mapAccum`](#mapAccum), except moves through the input list from\n * the right to the left.\n *\n * The iterator function receives two arguments, *acc* and *value*, and should\n * return a tuple *[acc, value]*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.addIndex, R.mapAccum\n * @example\n *\n *      const digits = ['1', '2', '3', '4'];\n *      const appender = (a, b) => [b + a, b + a];\n *\n *      R.mapAccumRight(appender, 5, digits); //=> ['12345', ['12345', '2345', '345', '45']]\n * @symb R.mapAccumRight(f, a, [b, c, d]) = [\n *   f(f(f(a, d)[0], c)[0], b)[0],\n *   [\n *     f(a, d)[1],\n *     f(f(a, d)[0], c)[1],\n *     f(f(f(a, d)[0], c)[0], b)[1]\n *   ]\n * ]\n */\nvar mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {\n  var idx = list.length - 1;\n  var result = [];\n  var tuple = [acc];\n  while (idx >= 0) {\n    tuple = fn(tuple[0], list[idx]);\n    result[idx] = tuple[1];\n    idx -= 1;\n  }\n  return [tuple[0], result];\n});\nexport default mapAccumRight;\n", "import _arrayReduce from './internal/_arrayReduce.js';\nimport _curry2 from './internal/_curry2.js';\nimport keys from './keys.js';\n\n\n/**\n * An Object-specific version of [`map`](#map). The function is applied to three\n * arguments: *(value, key, obj)*. If only the value is significant, use\n * [`map`](#map) instead.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Object\n * @sig ((*, String, Object) -> *) -> Object -> Object\n * @param {Function} fn\n * @param {Object} obj\n * @return {Object}\n * @see R.map\n * @example\n *\n *      const xyz = { x: 1, y: 2, z: 3 };\n *      const prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n *\n *      R.mapObjIndexed(prependKeyAndDouble, xyz); //=> { x: 'x2', y: 'y4', z: 'z6' }\n */\nvar mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {\n  return _arrayReduce(function(acc, key) {\n    acc[key] = fn(obj[key], key, obj);\n    return acc;\n  }, {}, keys(obj));\n});\nexport default mapObjIndexed;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Tests a regular expression against a String. Note that this function will\n * return an empty array when there are no matches. This differs from\n * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n * which returns `null` when there are no matches.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig RegExp -> String -> [String | Undefined]\n * @param {RegExp} rx A regular expression.\n * @param {String} str The string to match against\n * @return {Array} The list of matches or empty array.\n * @see R.test\n * @example\n *\n *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n *      R.match(/a/, 'b'); //=> []\n *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n */\nvar match = _curry2(function match(rx, str) {\n  return str.match(rx) || [];\n});\nexport default match;\n", "import _curry2 from './internal/_curry2.js';\nimport _isInteger from './internal/_isInteger.js';\n\n\n/**\n * `mathMod` behaves like the modulo operator should mathematically, unlike the\n * `%` operator (and by extension, [`R.modulo`](#modulo)). So while\n * `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\n * arguments, and returns NaN when the modulus is zero or negative.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} m The dividend.\n * @param {Number} p the modulus.\n * @return {Number} The result of `b mod a`.\n * @see R.modulo\n * @example\n *\n *      R.mathMod(-17, 5);  //=> 3\n *      R.mathMod(17, 5);   //=> 2\n *      R.mathMod(17, -5);  //=> NaN\n *      R.mathMod(17, 0);   //=> NaN\n *      R.mathMod(17.2, 5); //=> NaN\n *      R.mathMod(17, 5.3); //=> NaN\n *\n *      const clock = R.mathMod(R.__, 12);\n *      clock(15); //=> 3\n *      clock(24); //=> 0\n *\n *      const seventeenMod = R.mathMod(17);\n *      seventeenMod(3);  //=> 2\n *      seventeenMod(4);  //=> 1\n *      seventeenMod(10); //=> 7\n */\nvar mathMod = _curry2(function mathMod(m, p) {\n  if (!_isInteger(m)) { return NaN; }\n  if (!_isInteger(p) || p < 1) { return NaN; }\n  return ((m % p) + p) % p;\n});\nexport default mathMod;\n", "import _curry3 from './internal/_curry3.js';\nimport max from './max.js';\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * larger result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.max, R.minBy\n * @example\n *\n *      //  square :: Number -> Number\n *      const square = n => n * n;\n *\n *      R.maxBy(square, -3, 2); //=> -3\n *\n *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n *      R.reduce(R.maxBy(square), 0, []); //=> 0\n */\nvar maxBy = _curry3(function maxBy(f, a, b) {\n  var resultB = f(b);\n  return max(f(a), resultB) === resultB ? b : a;\n});\n\nexport default maxBy;\n", "import add from './add.js';\nimport reduce from './reduce.js';\n\n\n/**\n * Adds together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The sum of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.sum([2,4,6,8,100,1]); //=> 121\n */\nvar sum = reduce(add, 0);\nexport default sum;\n", "import _curry1 from './internal/_curry1.js';\nimport sum from './sum.js';\n\n\n/**\n * Returns the mean of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.median\n * @example\n *\n *      R.mean([2, 7, 9]); //=> 6\n *      R.mean([]); //=> NaN\n */\nvar mean = _curry1(function mean(list) {\n  return sum(list) / list.length;\n});\nexport default mean;\n", "import _curry1 from './internal/_curry1.js';\nimport mean from './mean.js';\n\n\n/**\n * Returns the median of the given list of numbers.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list\n * @return {Number}\n * @see R.mean\n * @example\n *\n *      R.median([2, 9, 7]); //=> 7\n *      R.median([7, 2, 10, 9]); //=> 8\n *      R.median([]); //=> NaN\n */\nvar median = _curry1(function median(list) {\n  var len = list.length;\n  if (len === 0) {\n    return NaN;\n  }\n  var width = 2 - len % 2;\n  var idx = (len - width) / 2;\n  return mean(Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n  }).slice(idx, idx + width));\n});\nexport default median;\n", "import _arity from './internal/_arity.js';\nimport _curry2 from './internal/_curry2.js';\nimport _has from './internal/_has.js';\n\n\n/**\n * Takes a string-returning function `keyGen` and a function `fn` and returns\n * a new function that returns cached results for subsequent\n * calls with the same arguments.\n *\n * When the function is invoked, `keyGen` is applied to the same arguments\n * and its result becomes the cache key. If the cache contains something\n * under that key, the function simply returns it and does not invoke `fn` at all.\n *\n * Otherwise `fn` is applied to the same arguments and its return value\n * is cached under that key and returned by the function.\n *\n * Care must be taken when implementing `keyGen` to avoid key collision,\n * or if tracking references, memory leaks and mutating arguments.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (*... -> String) -> (*... -> a) -> (*... -> a)\n * @param {Function} keyGen The function to generate the cache key.\n * @param {Function} fn The function to memoize.\n * @return {Function} Memoized version of `fn`.\n * @example\n *      const withAge = memoizeWith(o => `${o.birth}/${o.death}`, ({birth, death}) => {\n *      //                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^^^\n *      //                          keyGen                        fn\n *        console.log(`computing age for ${birth}/${death}`);\n *        return ({birth, death, age: death - birth});\n *      });\n *\n *      withAge({birth: 1921, death: 1999});\n *      //=> LOG: computing age for 1921/1999\n *      //=> {birth: 1921, death: 1999, age: 78} (returned from fn)\n *\n *      withAge({birth: 1921, death: 1999});\n *      //=> {birth: 1921, death: 1999, age: 78} (returned from cache)\n */\nvar memoizeWith = _curry2(function memoizeWith(keyGen, fn) {\n  var cache = {};\n  return _arity(fn.length, function() {\n    var key = keyGen.apply(this, arguments);\n    if (!_has(key, cache)) {\n      cache[key] = fn.apply(this, arguments);\n    }\n    return cache[key];\n  });\n});\nexport default memoizeWith;\n", "import _objectAssign from './internal/_objectAssign.js';\nimport _curry1 from './internal/_curry1.js';\n\n\n/**\n * Creates one new object with the own properties from a list of objects.\n * If a key exists in more than one object, the value from the last\n * object it exists in will be used.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig [{k: v}] -> {k: v}\n * @param {Array} list An array of objects\n * @return {Object} A merged object.\n * @see R.reduce\n * @example\n *\n *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n * @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }\n */\nvar mergeAll = _curry1(function mergeAll(list) {\n  return _objectAssign.apply(null, [{}].concat(list));\n});\nexport default mergeAll;\n", "import _curry3 from './internal/_curry3.js';\nimport _has from './internal/_has.js';\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the key\n * and the values associated with the key in each object, with the result being\n * used as the value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWithKey, R.merge, R.mergeWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeWithKey(concatValues,\n *                     { a: true, thing: 'foo', values: [10, 20] },\n *                     { b: true, thing: 'bar', values: [15, 35] });\n *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n * @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n */\nvar mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {\n  var result = {};\n  var k;\n  l = l || {};\n  r = r || {};\n\n  for (k in l) {\n    if (_has(k, l)) {\n      result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n    }\n  }\n\n  for (k in r) {\n    if (_has(k, r) && !(_has(k, result))) {\n      result[k] = r[k];\n    }\n  }\n\n  return result;\n});\nexport default mergeWithKey;\n", "import _curry3 from './internal/_curry3.js';\nimport _isObject from './internal/_isObject.js';\nimport mergeWithKey from './mergeWithKey.js';\n\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to the key and associated values\n *   using the resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWithKey, R.mergeDeepWith\n * @example\n *\n *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n *      R.mergeDeepWithKey(concatValues,\n *                         { a: true, c: { thing: 'foo', values: [10, 20] }},\n *                         { b: true, c: { thing: 'bar', values: [15, 35] }});\n *      //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}\n */\nvar mergeDeepWithKey = _curry3(function mergeDeepWithKey(fn, lObj, rObj) {\n  return mergeWithKey(function(k, lVal, rVal) {\n    if (_isObject(lVal) && _isObject(rVal)) {\n      return mergeDeepWithKey(fn, lVal, rVal);\n    } else {\n      return fn(k, lVal, rVal);\n    }\n  }, lObj, rObj);\n});\nexport default mergeDeepWithKey;\n", "import _curry2 from './internal/_curry2.js';\nimport mergeDeepWithKey from './mergeDeepWithKey.js';\n\n\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the first object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                      { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}\n */\nvar mergeDeepLeft = _curry2(function mergeDeepLeft(lObj, rObj) {\n  return mergeDeepWithKey(function(k, lVal, rVal) {\n    return lVal;\n  }, lObj, rObj);\n});\nexport default mergeDeepLeft;\n", "import _curry2 from './internal/_curry2.js';\nimport mergeDeepWithKey from './mergeDeepWithKey.js';\n\n\n/**\n * Creates a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects:\n * - and both values are objects, the two values will be recursively merged\n * - otherwise the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig {a} -> {a} -> {a}\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n *                       { age: 40, contact: { email: 'baa@example.com' }});\n *      //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}\n */\nvar mergeDeepRight = _curry2(function mergeDeepRight(lObj, rObj) {\n  return mergeDeepWithKey(function(k, lVal, rVal) {\n    return rVal;\n  }, lObj, rObj);\n});\nexport default mergeDeepRight;\n", "import _curry3 from './internal/_curry3.js';\nimport mergeDeepWithKey from './mergeDeepWithKey.js';\n\n\n/**\n * Creates a new object with the own properties of the two provided objects.\n * If a key exists in both objects:\n * - and both associated values are also objects then the values will be\n *   recursively merged.\n * - otherwise the provided function is applied to associated values using the\n *   resulting value as the new value associated with the key.\n * If a key only exists in one object, the value will be associated with the key\n * of the resulting object.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} lObj\n * @param {Object} rObj\n * @return {Object}\n * @see R.mergeWith, R.mergeDeepWithKey\n * @example\n *\n *      R.mergeDeepWith(R.concat,\n *                      { a: true, c: { values: [10, 20] }},\n *                      { b: true, c: { values: [15, 35] }});\n *      //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}\n */\nvar mergeDeepWith = _curry3(function mergeDeepWith(fn, lObj, rObj) {\n  return mergeDeepWithKey(function(k, lVal, rVal) {\n    return fn(lVal, rVal);\n  }, lObj, rObj);\n});\nexport default mergeDeepWith;\n", "import _objectAssign from './internal/_objectAssign.js';\nimport _curry2 from './internal/_curry2.js';\n\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the first object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeRight, R.mergeDeepLeft, R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.mergeLeft({ 'age': 40 }, { 'name': 'fred', 'age': 10 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      const resetToDefault = R.mergeLeft({x: 0});\n *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n * @symb R.mergeLeft(a, b) = {...b, ...a}\n */\nvar mergeLeft = _curry2(function mergeLeft(l, r) {\n  return _objectAssign({}, r, l);\n});\nexport default mergeLeft;\n", "import _objectAssign from './internal/_objectAssign.js';\nimport _curry2 from './internal/_curry2.js';\n\n\n/**\n * Create a new object with the own properties of the first object merged with\n * the own properties of the second object. If a key exists in both objects,\n * the value from the second object will be used.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Object\n * @sig {k: v} -> {k: v} -> {k: v}\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeLeft, R.mergeDeepRight, R.mergeWith, R.mergeWithKey\n * @example\n *\n *      R.mergeRight({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n *      //=> { 'name': 'fred', 'age': 40 }\n *\n *      const withDefaults = R.mergeRight({x: 0, y: 0});\n *      withDefaults({y: 2}); //=> {x: 0, y: 2}\n * @symb R.mergeRight(a, b) = {...a, ...b}\n */\nvar mergeRight = _curry2(function mergeRight(l, r) {\n  return _objectAssign({}, l, r);\n});\nexport default mergeRight;\n", "import _curry3 from './internal/_curry3.js';\nimport mergeWithKey from './mergeWithKey.js';\n\n\n/**\n * Creates a new object with the own properties of the two provided objects. If\n * a key exists in both objects, the provided function is applied to the values\n * associated with the key in each object, with the result being used as the\n * value associated with the key in the returned object.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Object\n * @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n * @param {Function} fn\n * @param {Object} l\n * @param {Object} r\n * @return {Object}\n * @see R.mergeDeepWith, R.merge, R.mergeWithKey\n * @example\n *\n *      R.mergeWith(R.concat,\n *                  { a: true, values: [10, 20] },\n *                  { b: true, values: [15, 35] });\n *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n */\nvar mergeWith = _curry3(function mergeWith(fn, l, r) {\n  return mergeWithKey(function(_, _l, _r) {\n    return fn(_l, _r);\n  }, l, r);\n});\nexport default mergeWith;\n", "import _curry2 from './internal/_curry2.js';\nimport toString from './toString.js';\n\n/**\n * Returns the smaller of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.minBy, R.max\n * @example\n *\n *      R.min(789, 123); //=> 123\n *      R.min('a', 'b'); //=> 'a'\n */\nvar min = _curry2(function min(a, b) {\n  if (a === b) { return a; }\n\n  function safeMin(x, y) {\n    if ((x < y) !== (y < x)) { return y < x ? y : x; }\n    return undefined;\n  }\n\n  var minByValue = safeMin(a, b);\n  if (minByValue !== undefined) { return minByValue; }\n\n  var minByType = safeMin(typeof a, typeof b);\n  if (minByType !== undefined) { return minByType === typeof a ? a : b; }\n\n  var stringA = toString(a);\n  var minByStringValue = safeMin(stringA, toString(b));\n  if (minByStringValue !== undefined) { return minByStringValue === stringA ? a : b; }\n\n  return a;\n});\nexport default min;\n", "import _curry3 from './internal/_curry3.js';\nimport min from './min.js';\n\n/**\n * Takes a function and two values, and returns whichever value produces the\n * smaller result when passed to the provided function.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Relation\n * @sig Ord b => (a -> b) -> a -> a -> a\n * @param {Function} f\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.min, R.maxBy\n * @example\n *\n *      //  square :: Number -> Number\n *      const square = n => n * n;\n *\n *      R.minBy(square, -3, 2); //=> 2\n *\n *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n */\nvar minBy = _curry3(function minBy(f, a, b) {\n  var resultB = f(b);\n  return min(f(a), resultB) === resultB ? b : a;\n});\nexport default minBy;\n", "import _isArray from './_isArray.js';\nimport _isInteger from './_isInteger.js';\n\n/**\n * Makes a shallow clone of an object, applying the given fn to the specified\n * property with the given value. Note that this copies and flattens prototype\n * properties onto the new object as well. All non-primitive properties are\n * copied by reference.\n *\n * @private\n * @param {String|Number} prop The property name to set\n * @param {Function} fn The function to apply to the property\n * @param {Object|Array} obj The object to clone\n * @return {Object|Array} A new object equivalent to the original except for the changed property.\n */\nexport default function _modify(prop, fn, obj) {\n  if (_isInteger(prop) && _isArray(obj)) {\n    var arr = [].concat(obj);\n    arr[prop] = fn(arr[prop]);\n    return arr;\n  }\n\n  var result = {};\n  for (var p in obj) {\n    result[p] = obj[p];\n  }\n  result[prop] = fn(result[prop]);\n  return result;\n}\n", "import _curry3 from './internal/_curry3.js';\nimport _isArray from './internal/_isArray.js';\nimport _isObject from './internal/_isObject.js';\nimport _has from './internal/_has.js';\nimport _assoc from './internal/_assoc.js';\nimport _modify from './internal/_modify.js';\n\n\n/**\n * Creates a shallow clone of the passed object by applying an `fn` function\n * to the value at the given path.\n *\n * The function will not be invoked, and the object will not change\n * if its corresponding path does not exist in the object.\n * All non-primitive properties are copied to the new object by reference.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig [Idx] -> (v -> v) -> {k: v} -> {k: v}\n * @param {Array} path The path to be modified.\n * @param {Function} fn The function to apply to the path.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const person = {name: 'James', address: { zipCode: '90216' }};\n *      R.modifyPath(['address', 'zipCode'], R.reverse, person); //=> {name: 'James', address: { zipCode: '61209' }}\n *\n *      // Can handle arrays too\n *      const person = {name: 'James', addresses: [{ zipCode: '90216' }]};\n *      R.modifyPath(['addresses', 0, 'zipCode'], R.reverse, person); //=> {name: 'James', addresses: [{ zipCode: '61209' }]}\n */\nvar modifyPath = _curry3(function modifyPath(path, fn, object) {\n  if (!_isObject(object) && !_isArray(object)) {\n    return object;\n  }\n\n  if (path.length === 0) {\n    return fn(object);\n  }\n\n  var idx = path[0];\n  if (!_has(idx, object)) {\n    return object;\n  }\n\n  if (path.length === 1) {\n    return _modify(idx, fn, object);\n  }\n\n  var val = modifyPath(Array.prototype.slice.call(path, 1), fn, object[idx]);\n  if (val === object[idx]) {\n    return object;\n  }\n  return _assoc(idx, val, object);\n\n});\nexport default modifyPath;\n", "import _curry3 from './internal/_curry3.js';\nimport modifyPath from './modifyPath.js';\n\n\n/**\n * Creates a copy of the passed object by applying an `fn` function to the given `prop` property.\n *\n * The function will not be invoked, and the object will not change\n * if its corresponding property does not exist in the object.\n * All non-primitive properties are copied to the new object by reference.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig Idx -> (v -> v) -> {k: v} -> {k: v}\n * @param {String|Number} prop The property to be modified.\n * @param {Function} fn The function to apply to the property.\n * @param {Object} object The object to be transformed.\n * @return {Object} The transformed object.\n * @example\n *\n *      const person = {name: 'James', age: 20, pets: ['dog', 'cat']};\n *      R.modify('age', R.add(1), person); //=> {name: 'James', age: 21, pets: ['dog', 'cat']}\n *      R.modify('pets', R.append('turtle'), person); //=> {name: 'James', age: 20, pets: ['dog', 'cat', 'turtle']}\n */\nvar modify = _curry3(function modify(prop, fn, object) { return modifyPath([prop], fn, object); });\nexport default modify;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Divides the first parameter by the second and returns the remainder. Note\n * that this function preserves the JavaScript-style behavior for modulo. For\n * mathematical modulo see [`mathMod`](#mathMod).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The value to the divide.\n * @param {Number} b The pseudo-modulus\n * @return {Number} The result of `b % a`.\n * @see R.mathMod\n * @example\n *\n *      R.modulo(17, 3); //=> 2\n *      // JS behavior:\n *      R.modulo(-17, 3); //=> -2\n *      R.modulo(17, -3); //=> 2\n *\n *      const isOdd = R.modulo(R.__, 2);\n *      isOdd(42); //=> 0\n *      isOdd(21); //=> 1\n */\nvar modulo = _curry2(function modulo(a, b) { return a % b; });\nexport default modulo;\n", "import _curry3 from './internal/_curry3.js';\n\n/**\n * Move an item, at index `from`, to index `to`, in a list of elements.\n * A new list will be created containing the new elements order.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number} from The source index\n * @param {Number} to The destination index\n * @param {Array} list The list which will serve to realise the move\n * @return {Array} The new list reordered\n * @example\n *\n *      R.move(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['b', 'c', 'a', 'd', 'e', 'f']\n *      R.move(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'a', 'b', 'c', 'd', 'e'] list rotation\n */\nvar move = _curry3(function(from, to, list) {\n  var length = list.length;\n  var result = list.slice();\n  var positiveFrom = from < 0 ? length + from : from;\n  var positiveTo = to < 0 ? length + to : to;\n  var item = result.splice(positiveFrom, 1);\n\n  return positiveFrom < 0 || positiveFrom >= list.length\n      || positiveTo   < 0 || positiveTo   >= list.length\n    ? list\n    : []\n      .concat(result.slice(0, positiveTo))\n      .concat(item)\n      .concat(result.slice(positiveTo, list.length));\n});\n\nexport default move;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Multiplies two numbers. Equivalent to `a * b` but curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a * b`.\n * @see R.divide\n * @example\n *\n *      const double = R.multiply(2);\n *      const triple = R.multiply(3);\n *      double(3);       //=>  6\n *      triple(4);       //=> 12\n *      R.multiply(2, 5);  //=> 10\n */\nvar multiply = _curry2(function multiply(a, b) { return a * b; });\nexport default multiply;\n", "import mergeDeepRight from './mergeDeepRight.js';\nimport _curry2 from './internal/_curry2.js';\n\n/**\n * Takes a function `f` and an object, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the object\n * provided initially merged deeply (right) with the object provided as an argument to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Function\n * @sig (({ a, b, c, ..., n }) -> x) -> { a, b, c, ...} -> ({ d, e, f, ..., n } -> x)\n * @param {Function} f\n * @param {Object} props\n * @return {Function}\n * @see R.partial, R.partialRight, R.curry, R.mergeDeepRight\n * @example\n *\n *      const multiply2 = ({ a, b }) => a * b;\n *      const double = R.partialObject(multiply2, { a: 2 });\n *      double({ b: 2 }); //=> 4\n *\n *      const greet = ({ salutation, title, firstName, lastName }) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const sayHello = R.partialObject(greet, { salutation: 'Hello' });\n *      const sayHelloToMs = R.partialObject(sayHello, { title: 'Ms.' });\n *      sayHelloToMs({ firstName: 'Jane', lastName: 'Jones' }); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialObject(f, { a, b })({ c, d }) = f({ a, b, c, d })\n */\nvar partialObject = _curry2((f, o) => (props) => f.call(this, mergeDeepRight(o, props)));\nexport default partialObject;\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * Negates its argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Math\n * @sig Number -> Number\n * @param {Number} n\n * @return {Number}\n * @example\n *\n *      R.negate(42); //=> -42\n */\nvar negate = _curry1(function negate(n) { return -n; });\nexport default negate;\n", "import _complement from './internal/_complement.js';\nimport _curry2 from './internal/_curry2.js';\nimport all from './all.js';\n\n\n/**\n * Returns `true` if no elements of the list match the predicate, `false`\n * otherwise.\n *\n * Dispatches to the `all` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n * @see R.all, R.any\n * @example\n *\n *      const isEven = n => n % 2 === 0;\n *      const isOdd = n => n % 2 !== 0;\n *\n *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n *      R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false\n */\nvar none = _curry2(function none(fn, input) {\n  return all(_complement(fn), input);\n});\nexport default none;\n", "import _curry1 from './internal/_curry1.js';\nimport curryN from './curryN.js';\nimport nth from './nth.js';\n\n\n/**\n * Returns a function which returns its nth argument.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Function\n * @sig Number -> *... -> *\n * @param {Number} n\n * @return {Function}\n * @example\n *\n *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n * @symb R.nthArg(-1)(a, b, c) = c\n * @symb R.nthArg(0)(a, b, c) = a\n * @symb R.nthArg(1)(a, b, c) = b\n */\nvar nthArg = _curry1(function nthArg(n) {\n  var arity = n < 0 ? 1 : n + 1;\n  return curryN(arity, function() {\n    return nth(n, arguments);\n  });\n});\nexport default nthArg;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * `o` is a curried composition function that returns a unary function.\n * Like [`compose`](#compose), `o` performs right-to-left function composition.\n * Unlike [`compose`](#compose), the rightmost function passed to `o` will be\n * invoked with only one argument. Also, unlike [`compose`](#compose), `o` is\n * limited to accepting only 2 unary functions. The name o was chosen because\n * of its similarity to the mathematical composition operator \u2218.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category Function\n * @sig (b -> c) -> (a -> b) -> a -> c\n * @param {Function} f\n * @param {Function} g\n * @return {Function}\n * @see R.compose, R.pipe\n * @example\n *\n *      const classyGreeting = name => \"The name's \" + name.last + \", \" + name.first + \" \" + name.last\n *      const yellGreeting = R.o(R.toUpper, classyGreeting);\n *      yellGreeting({first: 'James', last: 'Bond'}); //=> \"THE NAME'S BOND, JAMES BOND\"\n *\n *      R.o(R.multiply(10), R.add(10))(-4) //=> 60\n *\n * @symb R.o(f, g, x) = f(g(x))\n */\nvar o = _curry3(function o(f, g, x) {\n  return f(g(x));\n});\nexport default o;\n", "import _curry2 from './internal/_curry2.js';\n\n/**\n * Given a constructor and a value, returns a new instance of that constructor\n * containing the value.\n *\n * Dispatches to the `fantasy-land/of` method of the constructor first (if present)\n * or to the `of` method last (if present). When neither are present, wraps the\n * value in an array.\n *\n * Note this `of` is different from the ES6 `of`; See\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category Function\n * @sig (* -> {*}) -> a -> {a}\n * @param {Object} Ctor A constructor\n * @param {*} val any value\n * @return {*} An instance of the `Ctor` wrapping `val`.\n * @example\n *\n *      R.of(Array, 42);   //=> [42]\n *      R.of(Array, [42]); //=> [[42]]\n *      R.of(Maybe, 42);   //=> Maybe.Just(42)\n */\nvar of = _curry2(function of(Ctor, val) {\n  return (\n    typeof Ctor['fantasy-land/of'] === 'function'\n      ? Ctor['fantasy-land/of'](val)\n      : typeof Ctor.of === 'function'\n        ? Ctor.of(val)\n        : [val]\n  );\n});\n\nexport default of;\n", "import _curry2 from './internal/_curry2.js';\n\n/**\n * Returns a partial copy of an object omitting the keys specified.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [String] -> {String: *} -> {String: *}\n * @param {Array} names an array of String property names to omit from the new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with properties from `names` not on it.\n * @see R.pick\n * @example\n *\n *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n */\nvar omit = _curry2(function omit(names, obj) {\n  var result = {};\n  var index = {};\n  var idx = 0;\n  var len = names.length;\n\n  while (idx < len) {\n    index[names[idx]] = 1;\n    idx += 1;\n  }\n\n  for (var prop in obj) {\n    if (!index.hasOwnProperty(prop)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\nexport default omit;\n", "import curryN from './internal/_curryN.js';\n\n\n/**\n * Takes a binary function `f`, a unary function `g`, and two values.\n * Applies `g` to each value, then applies the result of each to `f`.\n *\n * Also known as the P combinator.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Function\n * @sig ((a, a) -> b) -> (c -> a) -> c -> c -> b\n * @param {Function} f a binary function\n * @param {Function} g a unary function\n * @param {any} a any value\n * @param {any} b any value\n * @return {any} The result of `f`\n * @example\n *\n *      const eqBy = R.on((a, b) => a === b);\n *      eqBy(R.prop('a'), {b:0, a:1}, {a:1}) //=> true;\n *\n *      const containsInsensitive = R.on(R.includes, R.toLower);\n *      containsInsensitive('o', 'FOO'); //=> true\n * @symb R.on(f, g, a, b) = f(g(a), g(b))\n */\nvar on = curryN(4, [], function on(f, g, a, b) {\n  return f(g(a), g(b));\n});\nexport default on;\n", "import _arity from './internal/_arity.js';\nimport _curry1 from './internal/_curry1.js';\n\n\n/**\n * Accepts a function `fn` and returns a function that guards invocation of\n * `fn` such that `fn` can only ever be called once, no matter how many times\n * the returned function is invoked. The first value calculated is returned in\n * subsequent invocations.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a... -> b) -> (a... -> b)\n * @param {Function} fn The function to wrap in a call-only-once wrapper.\n * @return {Function} The wrapped function.\n * @example\n *\n *      const addOneOnce = R.once(x => x + 1);\n *      addOneOnce(10); //=> 11\n *      addOneOnce(addOneOnce(50)); //=> 11\n */\nvar once = _curry1(function once(fn) {\n  var called = false;\n  var result;\n  return _arity(fn.length, function() {\n    if (called) {\n      return result;\n    }\n    called = true;\n    result = fn.apply(this, arguments);\n    return result;\n  });\n});\nexport default once;\n", "import _isFunction from './_isFunction.js';\nimport _toString from './_toString.js';\n\nexport default function _assertPromise(name, p) {\n  if (p == null || !_isFunction(p.then)) {\n    throw new TypeError('`' + name + '` expected a Promise, received ' + _toString(p, []));\n  }\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _assertPromise from './internal/_assertPromise.js';\n\n\n/**\n * Returns the result of applying the onFailure function to the value inside\n * a failed promise. This is useful for handling rejected promises\n * inside function compositions.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig (e -> b) -> (Promise e a) -> (Promise e b)\n * @sig (e -> (Promise f b)) -> (Promise e a) -> (Promise f b)\n * @param {Function} onFailure The function to apply. Can return a value or a promise of a value.\n * @param {Promise} p\n * @return {Promise} The result of calling `p.then(null, onFailure)`\n * @see R.andThen\n * @example\n *\n *      const failedFetch = id => Promise.reject('bad ID');\n *      const useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' });\n *\n *      //recoverFromFailure :: String -> Promise ({ firstName, lastName })\n *      const recoverFromFailure = R.pipe(\n *        failedFetch,\n *        R.otherwise(useDefault),\n *        R.andThen(R.pick(['firstName', 'lastName'])),\n *      );\n *      recoverFromFailure(12345).then(console.log);\n */\nvar otherwise = _curry2(function otherwise(f, p) {\n  _assertPromise('otherwise', p);\n\n  return p.then(null, f);\n});\nexport default otherwise;\n", "import _curry3 from './internal/_curry3.js';\n\n// `Identity` is a functor that holds a single value, where `map` simply\n// transforms the held value with the provided function.\nvar Identity = function(x) {\n  return {value: x, map: function(f) { return Identity(f(x)); }};\n};\n\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the result of applying the given function to\n * the focused value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> (a -> a) -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.view, R.set, R.lens, R.lensIndex, R.lensProp, R.lensPath\n * @example\n *\n *      const headLens = R.lensIndex(0);\n *\n *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n */\nvar over = _curry3(function over(lens, f, x) {\n  // The value returned by the getter function is first transformed with `f`,\n  // then set as the value of an `Identity`. This is then mapped over with the\n  // setter function of the lens.\n  return lens(function(y) { return Identity(f(y)); })(x).value;\n});\nexport default over;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category List\n * @sig a -> b -> (a,b)\n * @param {*} fst\n * @param {*} snd\n * @return {Array}\n * @see R.objOf, R.of\n * @example\n *\n *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n */\nvar pair = _curry2(function pair(fst, snd) { return [fst, snd]; });\nexport default pair;\n", "import _arity from './_arity.js';\nimport _curry2 from './_curry2.js';\n\n\nexport default function _createPartialApplicator(concat) {\n  return _curry2(function(fn, args) {\n    return _arity(Math.max(0, fn.length - args.length), function() {\n      return fn.apply(this, concat(args, arguments));\n    });\n  });\n}\n", "import _concat from './internal/_concat.js';\nimport _createPartialApplicator from './internal/_createPartialApplicator.js';\n\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided initially followed by the arguments provided to `g`.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partialRight, R.curry\n * @example\n *\n *      const multiply2 = (a, b) => a * b;\n *      const double = R.partial(multiply2, [2]);\n *      double(3); //=> 6\n *\n *      const greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const sayHello = R.partial(greet, ['Hello']);\n *      const sayHelloToMs = R.partial(sayHello, ['Ms.']);\n *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\n */\nvar partial = _createPartialApplicator(_concat);\nexport default partial;\n", "import _concat from './internal/_concat.js';\nimport _createPartialApplicator from './internal/_createPartialApplicator.js';\nimport flip from './flip.js';\n\n\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided to `g` followed by the arguments provided initially.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partial\n * @example\n *\n *      const greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n *\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n */\nvar partialRight = _createPartialApplicator(flip(_concat));\nexport default partialRight;\n", "import filter from './filter.js';\nimport juxt from './juxt.js';\nimport reject from './reject.js';\n\n\n/**\n * Takes a predicate and a list or other `Filterable` object and returns the\n * pair of filterable objects of the same type of elements which do and do not\n * satisfy, the predicate, respectively. Filterable objects include plain objects or any object\n * that has a filter method such as `Array`.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n * @param {Function} pred A predicate to determine which side the element belongs to.\n * @param {Array} filterable the list (or other filterable) to partition.\n * @return {Array} An array, containing first the subset of elements that satisfy the\n *         predicate, and second the subset of elements that do not satisfy.\n * @see R.filter, R.reject\n * @example\n *\n *      R.partition(R.includes('s'), ['sss', 'ttt', 'foo', 'bars']);\n *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n *\n *      R.partition(R.includes('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n */\nvar partition = juxt([filter, reject]);\nexport default partition;\n", "import _curry3 from './internal/_curry3.js';\nimport equals from './equals.js';\nimport path from './path.js';\n\n\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int | Symbol\n * @sig a -> [Idx] -> {a} -> Boolean\n * @param {*} val The value to compare the nested property with\n * @param {Array} path The path of the nested property to use\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @see R.whereEq, R.propEq, R.pathSatisfies, R.equals\n * @example\n *\n *      const user1 = { address: { zipCode: 90210 } };\n *      const user2 = { address: { zipCode: 55555 } };\n *      const user3 = { name: 'Bob' };\n *      const users = [ user1, user2, user3 ];\n *      const isFamous = R.pathEq(90210, ['address', 'zipCode']);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\nvar pathEq = _curry3(function pathEq(val, _path, obj) {\n  return equals(path(_path, obj), val);\n});\nexport default pathEq;\n", "import _curry3 from './internal/_curry3.js';\nimport defaultTo from './defaultTo.js';\nimport path from './path.js';\n\n\n/**\n * If the given, non-null object has a value at the given path, returns the\n * value at that path. Otherwise returns the provided default value.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @typedefn Idx = String | Int | Symbol\n * @sig a -> [Idx] -> {a} -> a\n * @param {*} d The default value.\n * @param {Array} p The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */\nvar pathOr = _curry3(function pathOr(d, p, obj) {\n  return defaultTo(d, path(p, obj));\n});\nexport default pathOr;\n", "import _curry3 from './internal/_curry3.js';\nimport path from './path.js';\n\n\n/**\n * Returns `true` if the specified object property at given path satisfies the\n * given predicate; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Logic\n * @typedefn Idx = String | Int | Symbol\n * @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean\n * @param {Function} pred\n * @param {Array} propPath\n * @param {*} obj\n * @return {Boolean}\n * @see R.propSatisfies, R.path\n * @example\n *\n *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n *      R.pathSatisfies(R.is(Object), [], {x: {y: 2}}); //=> true\n */\nvar pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {\n  return pred(path(propPath, obj));\n});\nexport default pathSatisfies;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Returns a partial copy of an object containing only the keys specified. If\n * the key does not exist, the property is ignored.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.omit, R.props\n * @example\n *\n *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n */\nvar pick = _curry2(function pick(names, obj) {\n  var result = {};\n  var idx = 0;\n  while (idx < names.length) {\n    if (names[idx] in obj) {\n      result[names[idx]] = obj[names[idx]];\n    }\n    idx += 1;\n  }\n  return result;\n});\nexport default pick;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Similar to `pick` except that this one includes a `key: undefined` pair for\n * properties that don't exist.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> {k: v}\n * @param {Array} names an array of String property names to copy onto a new object\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties from `names` on it.\n * @see R.pick\n * @example\n *\n *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n */\nvar pickAll = _curry2(function pickAll(names, obj) {\n  var result = {};\n  var idx = 0;\n  var len = names.length;\n  while (idx < len) {\n    var name = names[idx];\n    result[name] = obj[name];\n    idx += 1;\n  }\n  return result;\n});\nexport default pickAll;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Returns a partial copy of an object containing only the keys that satisfy\n * the supplied predicate.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Object\n * @sig ((v, k) -> Boolean) -> {k: v} -> {k: v}\n * @param {Function} pred A predicate to determine whether or not a key\n *        should be included on the output object.\n * @param {Object} obj The object to copy from\n * @return {Object} A new object with only properties that satisfy `pred`\n *         on it.\n * @see R.pick, R.filter\n * @example\n *\n *      const isUpperCase = (val, key) => key.toUpperCase() === key;\n *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n */\nvar pickBy = _curry2(function pickBy(test, obj) {\n  var result = {};\n  for (var prop in obj) {\n    if (test(obj[prop], prop, obj)) {\n      result[prop] = obj[prop];\n    }\n  }\n  return result;\n});\nexport default pickBy;\n", "import _concat from './internal/_concat.js';\nimport _curry2 from './internal/_curry2.js';\n\n\n/**\n * Returns a new list with the given element at the front, followed by the\n * contents of the list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig a -> [a] -> [a]\n * @param {*} el The item to add to the head of the output list.\n * @param {Array} list The array to add to the tail of the output list.\n * @return {Array} A new array.\n * @see R.append\n * @example\n *\n *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n */\nvar prepend = _curry2(function prepend(el, list) {\n  return _concat([el], list);\n});\nexport default prepend;\n", "import multiply from './multiply.js';\nimport reduce from './reduce.js';\n\n\n/**\n * Multiplies together all the elements of a list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig [Number] -> Number\n * @param {Array} list An array of numbers\n * @return {Number} The product of all the numbers in the list.\n * @see R.reduce\n * @example\n *\n *      R.product([2,4,6,8,100,1]); //=> 38400\n */\nvar product = reduce(multiply, 1);\nexport default product;\n", "import _curry2 from './internal/_curry2.js';\nimport curryN from './curryN.js';\n\n\n/**\n * Accepts a function `fn` and a list of transformer functions and returns a\n * new curried function. When the new function is invoked, it calls the\n * function `fn` with parameters consisting of the result of calling each\n * supplied handler on successive arguments to the new function.\n *\n * If more arguments are passed to the returned function than transformer\n * functions, those arguments are passed directly to `fn` as additional\n * parameters. If you expect additional arguments that don't need to be\n * transformed, although you can ignore them, it's best to pass an identity\n * function so that the new function reports the correct arity.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n * @param {Function} fn The function to wrap.\n * @param {Array} transformers A list of transformer functions\n * @return {Function} The wrapped function.\n * @see R.converge\n * @example\n *\n *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\n */\nvar useWith = _curry2(function useWith(fn, transformers) {\n  return curryN(transformers.length, function() {\n    var args = [];\n    var idx = 0;\n    while (idx < transformers.length) {\n      args.push(transformers[idx].call(this, arguments[idx]));\n      idx += 1;\n    }\n    return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));\n  });\n});\nexport default useWith;\n", "import _map from './internal/_map.js';\nimport identity from './identity.js';\nimport pickAll from './pickAll.js';\nimport useWith from './useWith.js';\n\n\n/**\n * Reasonable analog to SQL `select` statement.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @category Relation\n * @sig [k] -> [{k: v}] -> [{k: v}]\n * @param {Array} props The property names to project\n * @param {Array} objs The objects to query\n * @return {Array} An array of objects with just the `props` properties.\n * @see R.pluck, R.props, R.prop\n * @example\n *\n *      const abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n *      const fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n *      const kids = [abby, fred];\n *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n */\nvar project = useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity\nexport default project;\n", "export default function _promap(f, g, profunctor) {\n  return function(x) {\n    return g(profunctor(f(x)));\n  };\n}\n", "import _xfBase from './_xfBase.js';\nimport _promap from './_promap.js';\n\n\nfunction XPromap(f, g, xf) {\n  this.xf = xf;\n  this.f = f;\n  this.g = g;\n}\nXPromap.prototype['@@transducer/init'] = _xfBase.init;\nXPromap.prototype['@@transducer/result'] = _xfBase.result;\nXPromap.prototype['@@transducer/step'] = function(result, input) {\n  return this.xf['@@transducer/step'](result, _promap(this.f, this.g, input));\n};\n\nexport default function _xpromap(f, g) {\n  return function(xf) { return new XPromap(f, g, xf); };\n}\n", "import _curry3 from './internal/_curry3.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _promap from './internal/_promap.js';\nimport _xpromap from './internal/_xpromap.js';\n\n\n/**\n * Takes two functions as pre- and post- processors respectively for a third function,\n * i.e. `promap(f, g, h)(x) === g(h(f(x)))`.\n *\n * Dispatches to the `promap` method of the third argument, if present,\n * according to the [FantasyLand Profunctor spec](https://github.com/fantasyland/fantasy-land#profunctor).\n *\n * Acts as a transducer if a transformer is given in profunctor position.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Function\n * @sig (a -> b) -> (c -> d) -> (b -> c) -> (a -> d)\n * @sig Profunctor p => (a -> b) -> (c -> d) -> p b c -> p a d\n * @param {Function} f The preprocessor function, a -> b\n * @param {Function} g The postprocessor function, c -> d\n * @param {Profunctor} profunctor The profunctor instance to be promapped, e.g. b -> c\n * @return {Profunctor} The new profunctor instance, e.g. a -> d\n * @see R.transduce\n * @example\n *\n *      const decodeChar = R.promap(s => s.charCodeAt(), String.fromCharCode, R.add(-8))\n *      const decodeString = R.promap(R.split(''), R.join(''), R.map(decodeChar))\n *      decodeString(\"ziuli\") //=> \"ramda\"\n *\n * @symb R.promap(f, g, h) = x => g(h(f(x)))\n * @symb R.promap(f, g, profunctor) = profunctor.promap(f, g)\n */\nvar promap = _curry3(_dispatchable(['fantasy-land/promap', 'promap'], _xpromap, _promap));\n\nexport default promap;\n", "import _curry3 from './internal/_curry3.js';\nimport prop from './prop.js';\nimport equals from './equals.js';\n\n\n/**\n * Returns `true` if the specified object property is equal, in\n * [`R.equals`](#equals) terms, to the given value; `false` otherwise.\n * You can test multiple properties with [`R.whereEq`](#whereEq),\n * and test nested path property with [`R.pathEq`](#pathEq).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig a -> String -> Object -> Boolean\n * @param {*} val The value to compare the property with\n * @param {String} name the specified object property's key\n * @param {*} obj The object to check the property in\n * @return {Boolean} `true` if the value equals the specified object property,\n *         `false` otherwise.\n * @see R.whereEq, R.pathEq, R.propSatisfies, R.equals\n * @example\n *\n *      const abby = {name: 'Abby', age: 7, hair: 'blond'};\n *      const fred = {name: 'Fred', age: 12, hair: 'brown'};\n *      const rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n *      const alois = {name: 'Alois', age: 15, disposition: 'surly'};\n *      const kids = [abby, fred, rusty, alois];\n *      const hasBrownHair = R.propEq('brown', 'hair');\n *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n */\nvar propEq = _curry3(function propEq(val, name, obj) {\n  return equals(val, prop(name, obj));\n});\nexport default propEq;\n", "import _curry3 from './internal/_curry3.js';\nimport prop from './prop.js';\nimport is from './is.js';\n\n\n/**\n * Returns `true` if the specified object property is of the given type;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Type\n * @sig Type -> String -> Object -> Boolean\n * @param {Function} type\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.is, R.propSatisfies\n * @example\n *\n *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n *      R.propIs(Number, 'x', {});            //=> false\n */\nvar propIs = _curry3(function propIs(type, name, obj) {\n  return is(type, prop(name, obj));\n});\nexport default propIs;\n", "import _curry3 from './internal/_curry3.js';\nimport defaultTo from './defaultTo.js';\nimport prop from './prop.js';\n\n\n/**\n * Return the specified property of the given non-null object if the property\n * is present and it's value is not `null`, `undefined` or `NaN`.\n *\n * Otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Object\n * @sig a -> String -> Object -> a\n * @param {*} val The default value.\n * @param {String} p The name of the property to return.\n * @param {Object} obj The object to query.\n * @return {*} The value of given property of the supplied object or the default value.\n * @example\n *\n *      const alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      const favorite = R.prop('favoriteLibrary');\n *      const favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n *\n *      favorite(alice);  //=> undefined\n *      favoriteWithDefault(alice);  //=> 'Ramda'\n */\nvar propOr = _curry3(function propOr(val, p, obj) {\n  return defaultTo(val, prop(p, obj));\n});\nexport default propOr;\n", "import _curry3 from './internal/_curry3.js';\nimport prop from './prop.js';\n\n/**\n * Returns `true` if the specified object property satisfies the given\n * predicate; `false` otherwise. You can test multiple properties with\n * [`R.where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Logic\n * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n * @param {Function} pred\n * @param {String} name\n * @param {*} obj\n * @return {Boolean}\n * @see R.where, R.propEq, R.propIs\n * @example\n *\n *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n */\nvar propSatisfies = _curry3(function propSatisfies(pred, name, obj) {\n  return pred(prop(name, obj));\n});\nexport default propSatisfies;\n", "import _curry2 from './internal/_curry2.js';\nimport path from './path.js';\n\n\n/**\n * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n * order.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig [k] -> {k: v} -> [v]\n * @param {Array} ps The property names to fetch\n * @param {Object} obj The object to query\n * @return {Array} The corresponding values or partially applied function.\n * @see R.prop, R.pluck, R.project\n * @example\n *\n *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n *\n *      const fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n */\nvar props = _curry2(function props(ps, obj) {\n  return  ps.map(function(p) {\n    return path([p], obj);\n  });\n});\nexport default props;\n", "import _curry2 from './internal/_curry2.js';\nimport _isNumber from './internal/_isNumber.js';\n\n\n/**\n * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> Number -> [Number]\n * @param {Number} from The first number in the list.\n * @param {Number} to One more than the last number in the list.\n * @return {Array} The list of numbers in the set `[a, b)`.\n * @example\n *\n *      R.range(1, 5);    //=> [1, 2, 3, 4]\n *      R.range(50, 53);  //=> [50, 51, 52]\n */\nvar range = _curry2(function range(from, to) {\n  if (!(_isNumber(from) && _isNumber(to))) {\n    throw new TypeError('Both arguments to range must be numbers');\n  }\n  var result = [];\n  var n = from;\n  while (n < to) {\n    result.push(n);\n    n += 1;\n  }\n  return result;\n});\nexport default range;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * Similar to [`reduce`](#reduce), except moves through the input list from the\n * right to the left.\n *\n * The iterator function receives two values: *(value, acc)*, while the arguments'\n * order of `reduce`'s iterator function is *(acc, value)*. `reduceRight` may use [`reduced`](#reduced)\n * to short circuit the iteration.\n *\n * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n *\n * Be cautious of mutating and returning the accumulator. If you reuse it across\n * invocations, it will continue to accumulate onto the same value. The general\n * recommendation is to always return a new value. If you can't do so for\n * performance reasons, then be sure to reinitialize the accumulator on each\n * invocation.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> b) -> b -> [a] -> b\n * @param {Function} fn The iterator function. Receives two values, the current element from the array\n *        and the accumulator.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.addIndex, R.reduced\n * @example\n *\n *      R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n *      //    -               -2\n *      //   / \\              / \\\n *      //  1   -            1   3\n *      //     / \\              / \\\n *      //    2   -     ==>    2  -1\n *      //       / \\              / \\\n *      //      3   -            3   4\n *      //         / \\              / \\\n *      //        4   0            4   0\n *\n * @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n */\nvar reduceRight = _curry3(function reduceRight(fn, acc, list) {\n  var idx = list.length - 1;\n  while (idx >= 0) {\n    acc = fn(list[idx], acc);\n    if (acc && acc['@@transducer/reduced']) {\n      acc = acc['@@transducer/value'];\n      break;\n    }\n    idx -= 1;\n  }\n  return acc;\n});\nexport default reduceRight;\n", "import _curryN from './internal/_curryN.js';\nimport _xReduce from './internal/_xReduce.js';\nimport _xwrap from './internal/_xwrap.js';\nimport _reduced from './internal/_reduced.js';\n\n\n/**\n * Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\n * through the list, successively calling the iterator function. `reduceWhile`\n * also takes a predicate that is evaluated before each step. If the predicate\n * returns `false`, it \"short-circuits\" the iteration and returns the current\n * value of the accumulator. `reduceWhile` may alternatively be short-circuited\n * via [`reduced`](#reduced).\n *\n * @func\n * @memberOf R\n * @since v0.22.0\n * @category List\n * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} pred The predicate. It is passed the accumulator and the\n *        current element.\n * @param {Function} fn The iterator function. Receives two values, the\n *        accumulator and the current element.\n * @param {*} a The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced\n * @example\n *\n *      const isOdd = (acc, x) => x % 2 !== 0;\n *      const xs = [1, 3, 5, 60, 777, 800];\n *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n *\n *      const ys = [2, 4, 6]\n *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n */\nvar reduceWhile = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n  var xf = _xwrap(function(acc, x) {\n    return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n  });\n  return _xReduce(xf, a, list);\n});\nexport default reduceWhile;\n", "import _curry1 from './internal/_curry1.js';\nimport _reduced from './internal/_reduced.js';\n\n/**\n * Returns a value wrapped to indicate that it is the final value of the reduce\n * and transduce functions. The returned value should be considered a black\n * box: the internal structure is not guaranteed to be stable.\n *\n * This optimization is available to the below functions:\n * - [`reduce`](#reduce)\n * - [`reduceWhile`](#reduceWhile)\n * - [`reduceBy`](#reduceBy)\n * - [`reduceRight`](#reduceRight)\n * - [`transduce`](#transduce)\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category List\n * @sig a -> *\n * @param {*} x The final value of the reduce.\n * @return {*} The wrapped value.\n * @see R.reduce, R.reduceWhile, R.reduceBy, R.reduceRight, R.transduce\n * @example\n *\n *     R.reduce(\n *       (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),\n *       [],\n *       [1, 2, 3, 4, 5]) // [1, 2, 3]\n */\nvar reduced = _curry1(_reduced);\nexport default reduced;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Calls an input function `n` times, returning an array containing the results\n * of those function calls.\n *\n * `fn` is passed one argument: The current value of `n`, which begins at `0`\n * and is gradually incremented to `n - 1`.\n *\n * @func\n * @memberOf R\n * @since v0.2.3\n * @category List\n * @sig (Number -> a) -> Number -> [a]\n * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n * @return {Array} An array containing the return values of all calls to `fn`.\n * @see R.repeat\n * @example\n *\n *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n * @symb R.times(f, 0) = []\n * @symb R.times(f, 1) = [f(0)]\n * @symb R.times(f, 2) = [f(0), f(1)]\n */\nvar times = _curry2(function times(fn, n) {\n  var len = Number(n);\n  var idx = 0;\n  var list;\n\n  if (len < 0 || isNaN(len)) {\n    throw new RangeError('n must be a non-negative number');\n  }\n  list = [];\n  while (idx < len) {\n    list.push(fn(idx));\n    idx += 1;\n  }\n  return list;\n});\nexport default times;\n", "import _curry2 from './internal/_curry2.js';\nimport always from './always.js';\nimport times from './times.js';\n\n\n/**\n * Returns a fixed list of size `n` containing a specified identical value.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig a -> n -> [a]\n * @param {*} value The value to repeat.\n * @param {Number} n The desired size of the output list.\n * @return {Array} A new array containing `n` `value`s.\n * @see R.times\n * @example\n *\n *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n *\n *      const obj = {};\n *      const repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n * @symb R.repeat(a, 0) = []\n * @symb R.repeat(a, 1) = [a]\n * @symb R.repeat(a, 2) = [a, a]\n */\nvar repeat = _curry2(function repeat(value, n) {\n  return times(always(value), n);\n});\nexport default repeat;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * Replace a substring or regex match in a string with a replacement.\n *\n * The first two parameters correspond to the parameters of the\n * `String.prototype.replace()` function, so the second parameter can also be a\n * function.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category String\n * @sig RegExp|String -> String -> String -> String\n * @param {RegExp|String} pattern A regular expression or a substring to match.\n * @param {String} replacement The string to replace the matches with.\n * @param {String} str The String to do the search and replacement in.\n * @return {String} The result.\n * @example\n *\n *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n *\n *      // Use the \"g\" (global) flag to replace all occurrences:\n *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n */\nvar replace = _curry3(function replace(regex, replacement, str) {\n  return str.replace(regex, replacement);\n});\nexport default replace;\n", "import _curry3 from './_curry3.js';\nimport _xfBase from './_xfBase.js';\n\nvar tInit = '@@transducer/init';\nvar tStep = '@@transducer/step';\n\nfunction XScan(reducer, acc, xf) {\n  this.xf = xf;\n  this.f = reducer;\n  this.acc = acc;\n}\nXScan.prototype[tInit] = function() {\n  return this.xf[tStep](this.xf[tInit](), this.acc);\n};\nXScan.prototype['@@transducer/result'] = _xfBase.result;\nXScan.prototype[tStep] = function(result, input) {\n  if (result['@@transducer/reduced']) {\n    return result;\n  }\n  this.acc = this.f(this.acc, input);\n  return this.xf[tStep](result, this.acc);\n};\n\nvar _xscan = _curry3(function _xscan(reducer, acc, xf) {\n  return new XScan(reducer, acc, xf);\n});\nexport default _xscan;\n", "import _curry3 from './internal/_curry3.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xscan from './internal/_xscan.js';\n\n\n/**\n * Scan is similar to [`reduce`](#reduce), but returns a list of successively\n * reduced values from the left.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> [a]\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {Array} A list of all intermediately reduced values.\n * @see R.reduce, R.mapAccum\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n * @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n */\nvar scan = _curry3(_dispatchable([], _xscan, function scan(fn, acc, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [acc];\n  while (idx < len) {\n    acc = fn(acc, list[idx]);\n    result[idx + 1] = acc;\n    idx += 1;\n  }\n  return result;\n}));\nexport default scan;\n", "import _curry2 from './internal/_curry2.js';\nimport ap from './ap.js';\nimport map from './map.js';\nimport prepend from './prepend.js';\nimport reduceRight from './reduceRight.js';\nimport identity from './internal/_identity.js';\n\n\n/**\n * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n * Applicative of Traversable.\n *\n * Dispatches to the `\"fantasy-land/traverse\"` or the `traverse` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig fantasy-land/of :: TypeRep f => f ~> a -> f a\n * @sig (Applicative f, Traversable t) => TypeRep f -> t (f a) -> f (t a)\n * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n * @param {Object|Function} TypeRepresentative with an `of` or `fantasy-land/of` method\n * @param {*} traversable\n * @return {*}\n * @see R.traverse\n * @example\n *\n *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n *\n *      R.sequence(R.of(Array), Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n *      R.sequence(R.of(Array), Nothing());       //=> [Nothing()]\n */\nvar sequence = _curry2(function sequence(F, traversable) {\n  var of = typeof F['fantasy-land/of'] === 'function'\n    ? F['fantasy-land/of']\n    : typeof F.of === 'function'\n      ? F.of\n      : F;\n  var TypeRep = { 'fantasy-land/of': of };\n\n  return (\n    typeof traversable['fantasy-land/traverse'] === 'function'\n      ? traversable['fantasy-land/traverse'](TypeRep, identity)\n      : typeof traversable.traverse === 'function'\n        ? traversable.traverse(TypeRep, identity)\n        : reduceRight(\n          function(x, acc) {\n            return ap(map(prepend, x), acc);\n          },\n          of([]),\n          traversable\n        )\n  );\n});\nexport default sequence;\n", "import _curry3 from './internal/_curry3.js';\nimport always from './always.js';\nimport over from './over.js';\n\n\n/**\n * Returns the result of \"setting\" the portion of the given data structure\n * focused by the given lens to the given value.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> a -> s -> s\n * @param {Lens} lens\n * @param {*} v\n * @param {*} x\n * @return {*}\n * @see R.view, R.over, R.lens, R.lensIndex, R.lensProp, R.lensPath\n * @example\n *\n *      const xLens = R.lensProp('x');\n *\n *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n */\nvar set = _curry3(function set(lens, v, x) {\n  return over(lens, always(v), x);\n});\nexport default set;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Returns a copy of the list, sorted according to the comparator function,\n * which should accept two values at a time and return a negative number if the\n * first value is smaller, a positive number if it's larger, and zero if they\n * are equal. Please note that this is a **copy** of the list. It does not\n * modify the original.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, a) -> Number) -> [a] -> [a]\n * @param {Function} comparator A sorting function :: a -> b -> Int\n * @param {Array} list The list to sort\n * @return {Array} a new array with its elements sorted by the comparator function.\n * @see R.ascend, R.descend\n * @example\n *\n *      const diff = function(a, b) { return a - b; };\n *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n */\nvar sort = _curry2(function sort(comparator, list) {\n  return Array.prototype.slice.call(list, 0).sort(comparator);\n});\nexport default sort;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Sorts the list according to the supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord b => (a -> b) -> [a] -> [a]\n * @param {Function} fn\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted by the keys generated by `fn`.\n * @example\n *\n *      const sortByFirstItem = R.sortBy(R.prop(0));\n *      const pairs = [[-1, 1], [-2, 2], [-3, 3]];\n *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n *\n *      const sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n *      const alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      const bob = {\n *        name: 'Bob',\n *        age: -10\n *      };\n *      const clara = {\n *        name: 'clara',\n *        age: 314.159\n *      };\n *      const people = [clara, bob, alice];\n *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n */\nvar sortBy = _curry2(function sortBy(fn, list) {\n  return Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    var aa = fn(a);\n    var bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n});\nexport default sortBy;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Sorts a list according to a list of comparators.\n *\n * @func\n * @memberOf R\n * @since v0.23.0\n * @category Relation\n * @sig [(a, a) -> Number] -> [a] -> [a]\n * @param {Array} functions A list of comparator functions.\n * @param {Array} list The list to sort.\n * @return {Array} A new list sorted according to the comarator functions.\n * @see R.ascend, R.descend\n * @example\n *\n *      const alice = {\n *        name: 'alice',\n *        age: 40\n *      };\n *      const bob = {\n *        name: 'bob',\n *        age: 30\n *      };\n *      const clara = {\n *        name: 'clara',\n *        age: 40\n *      };\n *      const people = [clara, bob, alice];\n *      const ageNameSort = R.sortWith([\n *        R.descend(R.prop('age')),\n *        R.ascend(R.prop('name'))\n *      ]);\n *      ageNameSort(people); //=> [alice, clara, bob]\n */\nvar sortWith = _curry2(function sortWith(fns, list) {\n  return Array.prototype.slice.call(list, 0).sort(function(a, b) {\n    var result = 0;\n    var i = 0;\n    while (result === 0 && i < fns.length) {\n      result = fns[i](a, b);\n      i += 1;\n    }\n    return result;\n  });\n});\nexport default sortWith;\n", "import invoker from './invoker.js';\n\n\n/**\n * Splits a string into an array of strings based on the given\n * separator.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category String\n * @sig (String | RegExp) -> String -> [String]\n * @param {String|RegExp} sep The pattern.\n * @param {String} str The string to separate into an array.\n * @return {Array} The array of strings from `str` separated by `sep`.\n * @see R.join\n * @example\n *\n *      const pathComponents = R.split('/');\n *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n *\n *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n */\nvar split = invoker(1, 'split');\nexport default split;\n", "import _curry2 from './internal/_curry2.js';\nimport length from './length.js';\nimport slice from './slice.js';\n\n\n/**\n * Splits a given list or string at a given index.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig Number -> [a] -> [[a], [a]]\n * @sig Number -> String -> [String, String]\n * @param {Number} index The index where the array/string is split.\n * @param {Array|String} array The array/string to be split.\n * @return {Array}\n * @example\n *\n *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n */\nvar splitAt = _curry2(function splitAt(index, array) {\n  return [slice(0, index, array), slice(index, length(array), array)];\n});\nexport default splitAt;\n", "import _curry2 from './internal/_curry2.js';\nimport slice from './slice.js';\n\n\n/**\n * Splits a collection into slices of the specified length.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig Number -> [a] -> [[a]]\n * @sig Number -> String -> [String]\n * @param {Number} n\n * @param {Array} list\n * @return {Array}\n * @example\n *\n *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n */\nvar splitEvery = _curry2(function splitEvery(n, list) {\n  if (n <= 0) {\n    throw new Error('First argument to splitEvery must be a positive integer');\n  }\n  var result = [];\n  var idx = 0;\n  while (idx < list.length) {\n    result.push(slice(idx, idx += n, list));\n  }\n  return result;\n});\nexport default splitEvery;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Takes a list and a predicate and returns a pair of lists with the following properties:\n *\n *  - the result of concatenating the two output lists is equivalent to the input list;\n *  - none of the elements of the first output list satisfies the predicate; and\n *  - if the second output list is non-empty, its first element satisfies the predicate.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n */\nvar splitWhen = _curry2(function splitWhen(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var prefix = [];\n\n  while (idx < len && !pred(list[idx])) {\n    prefix.push(list[idx]);\n    idx += 1;\n  }\n\n  return [prefix, Array.prototype.slice.call(list, idx)];\n});\nexport default splitWhen;\n", "import _curryN from './internal/_curryN.js';\n/**\n * Splits an array into slices on every occurrence of a value.\n *\n * @func\n * @memberOf R\n * @since v0.26.1\n * @category List\n * @sig (a -> Boolean) -> [a] -> [[a]]\n * @param {Function} pred The predicate that determines where the array is split.\n * @param {Array} list The array to be split.\n * @return {Array}\n * @example\n *\n *      R.splitWhenever(R.equals(2), [1, 2, 3, 2, 4, 5, 2, 6, 7]); //=> [[1], [3], [4, 5], [6, 7]]\n */\nvar splitWhenever = _curryN(2, [], function splitWhenever(pred, list) {\n  var acc = [];\n  var curr = [];\n  for (var i = 0;i < list.length;i = i + 1) {\n    if (!pred(list[i])) {\n      curr.push(list[i]);\n    }\n    if ((i < list.length - 1 && pred(list[i + 1]) || i === list.length - 1) && curr.length > 0) {\n      acc.push(curr);\n      curr = [];\n    }\n  }\n  return acc;\n});\nexport default splitWhenever;\n", "import _curry2 from './internal/_curry2.js';\nimport equals from './equals.js';\nimport take from './take.js';\n\n/**\n * Checks if a list starts with the provided sublist.\n *\n * Similarly, checks if a string starts with the provided substring.\n *\n * @func\n * @memberOf R\n * @since v0.24.0\n * @category List\n * @sig [a] -> [a] -> Boolean\n * @sig String -> String -> Boolean\n * @param {*} prefix\n * @param {*} list\n * @return {Boolean}\n * @see R.endsWith\n * @example\n *\n *      R.startsWith('a', 'abc')                //=> true\n *      R.startsWith('b', 'abc')                //=> false\n *      R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n *      R.startsWith(['b'], ['a', 'b', 'c'])    //=> false\n */\nvar startsWith = _curry2(function(prefix, list) {\n  return equals(take(prefix.length, list), prefix);\n});\nexport default startsWith;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Subtracts its second argument from its first argument.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a The first value.\n * @param {Number} b The second value.\n * @return {Number} The result of `a - b`.\n * @see R.add\n * @example\n *\n *      R.subtract(10, 8); //=> 2\n *\n *      const minus5 = R.subtract(R.__, 5);\n *      minus5(17); //=> 12\n *\n *      const complementaryAngle = R.subtract(90);\n *      complementaryAngle(30); //=> 60\n *      complementaryAngle(72); //=> 18\n */\nvar subtract = _curry2(function subtract(a, b) {\n  return Number(a) - Number(b);\n});\nexport default subtract;\n", "import _curry3 from './internal/_curry3.js';\nimport _isArray from './internal/_isArray.js';\nimport _isString from './internal/_isString.js';\nimport clone from './clone.js';\n\nvar swapObject = function(indexA, indexB, o) {\n  var copy = clone(o);\n\n  var properties = Object.getOwnPropertyNames(copy);\n  if (properties.includes(indexA) && properties.includes(indexB)) {\n    var tmp = copy[indexA];\n\n    copy[indexA] = copy[indexB];\n    copy[indexB] = tmp;\n  }\n\n  return copy;\n};\n\nvar swapList = function(indexA, indexB, list) {\n  var length = list.length;\n  var result = list.slice();\n\n  var positiveIndexA = indexA < 0 ? length + indexA : indexA;\n  var positiveIndexB = indexB < 0 ? length + indexB : indexB;\n\n  var positiveMin = Math.min(positiveIndexA, positiveIndexB);\n  var positiveMax = Math.max(positiveIndexA, positiveIndexB);\n\n  if (positiveIndexA < 0 || positiveIndexA > length) {return result;}\n  if (positiveIndexB < 0 || positiveIndexB > length) {return result;}\n  if (positiveIndexA === positiveIndexB) {return result;}\n\n  result = []\n    .concat(result.slice(0, positiveMin))\n    .concat([result[positiveMax]])\n    .concat(result.slice(positiveMin + 1, positiveMax))\n    .concat([result[positiveMin]])\n    .concat(result.slice(positiveMax + 1, length));\n\n  return result;\n};\n\nvar swapString = function(indexA, indexB, s) {\n  var result = swapList(indexA, indexB, s);\n  return _isArray(result)\n    ? result.join('')\n    : result;\n};\n\n/**\n * Swap an item, at index `indexA` with another item, at index `indexB`, in an object or a list of elements.\n * A new result will be created containing the new elements order.\n *\n * @func\n * @memberOf R\n * @since v0.29.0\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @param {Number|string|Object} indexA The first index\n * @param {Number|string|Object} indexB The second index\n * @param {Array|Object} o Either the object or list which will serve to realise the swap\n * @return {Array|Object} The new object or list reordered\n * @example\n *\n *      R.swap(0, 2, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['c', 'b', 'a', 'd', 'e', 'f']\n *      R.swap(-1, 0, ['a', 'b', 'c', 'd', 'e', 'f']); //=> ['f', 'b', 'c', 'd', 'e', 'a']\n *      R.swap('a', 'b', {a: 1, b: 2}); //=> {a: 2, b: 1}\n *      R.swap(0, 2, 'foo'); //=> 'oof'\n */\nvar swap = _curry3(function(indexA, indexB, o) {\n  if (_isArray(o)) {\n    return swapList(indexA, indexB, o);\n  } else if (_isString(o)) {\n    return swapString(indexA, indexB, o);\n  } else {\n    return swapObject(indexA, indexB, o);\n  }\n});\n\nexport default swap;\n", "import _curry2 from './internal/_curry2.js';\nimport concat from './concat.js';\nimport difference from './difference.js';\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n * @example\n *\n *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n */\nvar symmetricDifference = _curry2(function symmetricDifference(list1, list2) {\n  return concat(difference(list1, list2), difference(list2, list1));\n});\nexport default symmetricDifference;\n", "import _curry3 from './internal/_curry3.js';\nimport concat from './concat.js';\nimport differenceWith from './differenceWith.js';\n\n\n/**\n * Finds the set (i.e. no duplicates) of all elements contained in the first or\n * second list, but not both. Duplication is determined according to the value\n * returned by applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The elements in `list1` or `list2`, but not both.\n * @see R.symmetricDifference, R.difference, R.differenceWith\n * @example\n *\n *      const eqA = R.eqBy(R.prop('a'));\n *      const l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n *      const l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n */\nvar symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n  return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n});\nexport default symmetricDifferenceWith;\n", "import _curry2 from './internal/_curry2.js';\nimport slice from './slice.js';\n\n\n/**\n * Returns a new list containing the last `n` elements of a given list, passing\n * each value to the supplied predicate function, and terminating when the\n * predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropLastWhile, R.addIndex\n * @example\n *\n *      const isNotOne = x => x !== 1;\n *\n *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n *\n *      R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'\n */\nvar takeLastWhile = _curry2(function takeLastWhile(fn, xs) {\n  var idx = xs.length - 1;\n  while (idx >= 0 && fn(xs[idx])) {\n    idx -= 1;\n  }\n  return slice(idx + 1, Infinity, xs);\n});\nexport default takeLastWhile;\n", "import _reduced from './_reduced.js';\nimport _xfBase from './_xfBase.js';\n\n\nfunction XTakeWhile(f, xf) {\n  this.xf = xf;\n  this.f = f;\n}\nXTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\nXTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\nXTakeWhile.prototype['@@transducer/step'] = function(result, input) {\n  return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n};\n\nexport default function _xtakeWhile(f) {\n  return function(xf) { return new XTakeWhile(f, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xtakeWhile from './internal/_xtakeWhile.js';\nimport slice from './slice.js';\n\n\n/**\n * Returns a new list containing the first `n` elements of a given list,\n * passing each value to the supplied predicate function, and terminating when\n * the predicate function returns `false`. Excludes the element that caused the\n * predicate function to fail. The predicate function is passed one argument:\n * *(value)*.\n *\n * Dispatches to the `takeWhile` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> [a]\n * @sig (a -> Boolean) -> String -> String\n * @param {Function} fn The function called per iteration.\n * @param {Array} xs The collection to iterate over.\n * @return {Array} A new array.\n * @see R.dropWhile, R.transduce, R.addIndex\n * @example\n *\n *      const isNotFour = x => x !== 4;\n *\n *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n *\n *      R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'\n */\nvar takeWhile = _curry2(_dispatchable(['takeWhile'], _xtakeWhile, function takeWhile(fn, xs) {\n  var idx = 0;\n  var len = xs.length;\n  while (idx < len && fn(xs[idx])) {\n    idx += 1;\n  }\n  return slice(0, idx, xs);\n}));\nexport default takeWhile;\n", "import _xfBase from './_xfBase.js';\n\n\nfunction XTap(f, xf) {\n  this.xf = xf;\n  this.f = f;\n}\nXTap.prototype['@@transducer/init'] = _xfBase.init;\nXTap.prototype['@@transducer/result'] = _xfBase.result;\nXTap.prototype['@@transducer/step'] = function(result, input) {\n  this.f(input);\n  return this.xf['@@transducer/step'](result, input);\n};\n\nexport default function _xtap(f) {\n  return function(xf) { return new XTap(f, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _xtap from './internal/_xtap.js';\n\n\n/**\n * Runs the given function with the supplied object, then returns the object.\n *\n * Acts as a transducer if a transformer is given as second parameter.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (a -> *) -> a -> a\n * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n * @param {*} x\n * @return {*} `x`.\n * @example\n *\n *      const sayX = x => console.log('x is ' + x);\n *      R.tap(sayX, 100); //=> 100\n *      // logs 'x is 100'\n * @symb R.tap(f, a) = (f(a), a)\n */\nvar tap = _curry2(_dispatchable([], _xtap, function tap(fn, x) {\n  fn(x);\n  return x;\n}));\nexport default tap;\n", "export default function _isRegExp(x) {\n  return Object.prototype.toString.call(x) === '[object RegExp]';\n}\n", "import _cloneRegExp from './internal/_cloneRegExp.js';\nimport _curry2 from './internal/_curry2.js';\nimport _isRegExp from './internal/_isRegExp.js';\nimport toString from './toString.js';\n\n\n/**\n * Determines whether a given string matches a given regular expression.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category String\n * @sig RegExp -> String -> Boolean\n * @param {RegExp} pattern\n * @param {String} str\n * @return {Boolean}\n * @see R.match\n * @example\n *\n *      R.test(/^x/, 'xyz'); //=> true\n *      R.test(/^y/, 'xyz'); //=> false\n */\nvar test = _curry2(function test(pattern, str) {\n  if (!_isRegExp(pattern)) {\n    throw new TypeError('\u2018test\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));\n  }\n  return _cloneRegExp(pattern).test(str);\n});\nexport default test;\n", "import _curry2 from './internal/_curry2.js';\nimport _assertPromise from './internal/_assertPromise.js';\n\n\n/**\n * Returns the result of applying the onSuccess function to the value inside\n * a successfully resolved promise. This is useful for working with promises\n * inside function compositions.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category Function\n * @sig (a -> b) -> (Promise e a) -> (Promise e b)\n * @sig (a -> (Promise e b)) -> (Promise e a) -> (Promise e b)\n * @param {Function} onSuccess The function to apply. Can return a value or a promise of a value.\n * @param {Promise} p\n * @return {Promise} The result of calling `p.then(onSuccess)`\n * @see R.otherwise\n * @example\n *\n *      const makeQuery = email => ({ query: { email }});\n *      const fetchMember = request =>\n *        Promise.resolve({ firstName: 'Bob', lastName: 'Loblaw', id: 42 });\n *\n *      //getMemberName :: String -> Promise ({ firstName, lastName })\n *      const getMemberName = R.pipe(\n *        makeQuery,\n *        fetchMember,\n *        R.andThen(R.pick(['firstName', 'lastName']))\n *      );\n *\n *      getMemberName('bob@gmail.com').then(console.log);\n */\nvar andThen = _curry2(function andThen(f, p) {\n  _assertPromise('andThen', p);\n\n  return p.then(f);\n});\nexport default andThen;\n", "import invoker from './invoker.js';\n\n\n/**\n * The lower case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to lower case.\n * @return {String} The lower case version of `str`.\n * @see R.toUpper\n * @example\n *\n *      R.toLower('XYZ'); //=> 'xyz'\n */\nvar toLower = invoker(0, 'toLowerCase');\nexport default toLower;\n", "import _curry1 from './internal/_curry1.js';\nimport _has from './internal/_has.js';\n\n\n/**\n * Converts an object into an array of key, value arrays. Only the object's\n * own properties are used.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own properties.\n * @see R.fromPairs, R.keys, R.values\n * @example\n *\n *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n */\nvar toPairs = _curry1(function toPairs(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    if (_has(prop, obj)) {\n      pairs[pairs.length] = [prop, obj[prop]];\n    }\n  }\n  return pairs;\n});\nexport default toPairs;\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * Converts an object into an array of key, value arrays. The object's own\n * properties and prototype properties are used. Note that the order of the\n * output array is not guaranteed to be consistent across different JS\n * platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own\n *         and prototype properties.\n * @example\n *\n *      const F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      const f = new F();\n *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n */\nvar toPairsIn = _curry1(function toPairsIn(obj) {\n  var pairs = [];\n  for (var prop in obj) {\n    pairs[pairs.length] = [prop, obj[prop]];\n  }\n  return pairs;\n});\nexport default toPairsIn;\n", "import invoker from './invoker.js';\n\n\n/**\n * The upper case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @see R.toLower\n * @example\n *\n *      R.toUpper('abc'); //=> 'ABC'\n */\nvar toUpper = invoker(0, 'toUpperCase');\nexport default toUpper;\n", "import _xReduce from './internal/_xReduce.js';\nimport _xwrap from './internal/_xwrap.js';\nimport curryN from './curryN.js';\n\n\n/**\n * Initializes a transducer using supplied iterator function. Returns a single\n * item by iterating through the list, successively calling the transformed\n * iterator function and passing it an accumulator value and the current value\n * from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It will be\n * wrapped as a transformer to initialize the transducer. A transformer can be\n * passed directly in place of an iterator function. In both cases, iteration\n * may be stopped early with the [`R.reduced`](#reduced) function.\n *\n * A transducer is a function that accepts a transformer and returns a\n * transformer and can be composed directly.\n *\n * A transformer is an object that provides a 2-arity reducing iterator\n * function, step, 0-arity initial value function, init, and 1-arity result\n * extraction function, result. The step function is used as the iterator\n * function in reduce. The result function is used to convert the final\n * accumulator into the return type and in most cases is\n * [`R.identity`](#identity). The init function can be used to provide an\n * initial accumulator, but is ignored by transduce.\n *\n * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category List\n * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array. Wrapped as transformer, if necessary, and used to\n *        initialize the transducer\n * @param {*} acc The initial accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduce, R.reduced, R.into\n * @example\n *\n *      const numbers = [1, 2, 3, 4];\n *      const transducer = R.compose(R.map(R.add(1)), R.take(2));\n *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n *\n *      const isOdd = (x) => x % 2 !== 0;\n *      const firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\n */\nvar transduce = curryN(4, function transduce(xf, fn, acc, list) {\n  return _xReduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n});\nexport default transduce;\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * Transposes the rows and columns of a 2D list.\n * When passed a list of `n` lists of length `x`,\n * returns a list of `x` lists of length `n`.\n *\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [[a]] -> [[a]]\n * @param {Array} list A 2D list\n * @return {Array} A 2D list\n * @example\n *\n *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n *\n *      // If some of the rows are shorter than the following rows, their elements are skipped:\n *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n * @symb R.transpose([[a], [b], [c]]) = [a, b, c]\n * @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]\n * @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]\n */\nvar transpose = _curry1(function transpose(outerlist) {\n  var i = 0;\n  var result = [];\n  while (i < outerlist.length) {\n    var innerlist = outerlist[i];\n    var j = 0;\n    while (j < innerlist.length) {\n      if (typeof result[j] === 'undefined') {\n        result[j] = [];\n      }\n      result[j].push(innerlist[j]);\n      j += 1;\n    }\n    i += 1;\n  }\n  return result;\n});\nexport default transpose;\n", "import _curry3 from './internal/_curry3.js';\nimport map from './map.js';\nimport sequence from './sequence.js';\n\n\n/**\n * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n * into an Applicative of Traversable.\n *\n * Dispatches to the `traverse` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig fantasy-land/of :: TypeRep f => f ~> a -> f a\n * @sig (Applicative f, Traversable t) => TypeRep f -> (a -> f b) -> t a -> f (t b)\n * @sig (Applicative f, Traversable t) => (b -> f b) -> (a -> f b) -> t a -> f (t b)\n * @param {Object|Function} TypeRepresentative with an `of` or `fantasy-land/of` method\n * @param {Function} f\n * @param {*} traversable\n * @return {*}\n * @see R.sequence\n * @example\n *\n *      // Returns `Maybe.Nothing` if the given divisor is `0`\n *      const safeDiv = n => d => d === 0 ? Maybe.Nothing() : Maybe.Just(n / d)\n *\n *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Maybe.Just([5, 2.5, 2])\n *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Maybe.Nothing\n *\n *      // Using a Type Representative\n *      R.traverse(Maybe, safeDiv(10), Right(4)); //=> Just(Right(2.5))\n *      R.traverse(Maybe, safeDiv(10), Right(0)); //=> Nothing\n *      R.traverse(Maybe, safeDiv(10), Left(\"X\")); //=> Just(Left(\"X\"))\n */\nvar traverse = _curry3(function traverse(F, f, traversable) {\n  var of = typeof F['fantasy-land/of'] === 'function'\n    ? F['fantasy-land/of']\n    : typeof F.of === 'function'\n      ? F.of\n      : F;\n  var TypeRep = { 'fantasy-land/of': of };\n\n  return (\n    typeof traversable['fantasy-land/traverse'] === 'function'\n      ? traversable['fantasy-land/traverse'](TypeRep, f)\n      : typeof traversable.traverse === 'function'\n        ? traversable.traverse(TypeRep, f)\n        : sequence(TypeRep, map(f, traversable))\n  );\n});\nexport default traverse;\n", "import _curry1 from './internal/_curry1.js';\n\n\nvar ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u2000\\u2001\\u2002\\u2003' +\n         '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' +\n         '\\u2029\\uFEFF';\nvar zeroWidth = '\\u200b';\nvar hasProtoTrim = (typeof String.prototype.trim === 'function');\n/**\n * Removes (strips) whitespace from both ends of the string.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to trim.\n * @return {String} Trimmed version of `str`.\n * @example\n *\n *      R.trim('   xyz  '); //=> 'xyz'\n *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n */\nvar trim = !hasProtoTrim || ws.trim() || !zeroWidth.trim() ?\n  _curry1(function trim(str) {\n    var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n    var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n    return str.replace(beginRx, '').replace(endRx, '');\n  }) :\n  _curry1(function trim(str) {\n    return str.trim();\n  });\nexport default trim;\n", "import _arity from './internal/_arity.js';\nimport _concat from './internal/_concat.js';\nimport _curry2 from './internal/_curry2.js';\n\n/**\n * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n * function evaluates the `tryer`; if it does not throw, it simply returns the\n * result. If the `tryer` *does* throw, the returned function evaluates the\n * `catcher` function and returns its result. Note that for effective\n * composition with this function, both the `tryer` and `catcher` functions\n * must return the same type of results.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Function\n * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n * @param {Function} tryer The function that may throw.\n * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n * @return {Function} A new function that will catch exceptions and send them to the catcher.\n * @example\n *\n *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n *      R.tryCatch(() => { throw 'foo'}, R.always('caught'))('bar') // =>\n *      'caught'\n *      R.tryCatch(R.times(R.identity), R.always([]))('s') // => []\n *      R.tryCatch(() => { throw 'this is not a valid value'}, (err, value)=>({error : err,  value }))('bar') // => {'error': 'this is not a valid value', 'value': 'bar'}\n */\nvar tryCatch = _curry2(function _tryCatch(tryer, catcher) {\n  return _arity(tryer.length, function() {\n    try {\n      return tryer.apply(this, arguments);\n    } catch (e) {\n      return catcher.apply(this, _concat([e], arguments));\n    }\n  });\n});\nexport default tryCatch;\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * Takes a function `fn`, which takes a single array argument, and returns a\n * function which:\n *\n *   - takes any number of positional arguments;\n *   - passes these arguments to `fn` as an array; and\n *   - returns the result.\n *\n * In other words, `R.unapply` derives a variadic function from a function which\n * takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Function\n * @sig ([*...] -> a) -> (*... -> a)\n * @param {Function} fn\n * @return {Function}\n * @see R.apply\n * @example\n *\n *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n * @symb R.unapply(f)(a, b) = f([a, b])\n */\nvar unapply = _curry1(function unapply(fn) {\n  return function() {\n    return fn(Array.prototype.slice.call(arguments, 0));\n  };\n});\nexport default unapply;\n", "import _curry1 from './internal/_curry1.js';\nimport nAry from './nAry.js';\n\n\n/**\n * Wraps a function of any arity (including nullary) in a function that accepts\n * exactly 1 parameter. Any extraneous parameters will not be passed to the\n * supplied function.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Function\n * @sig (a -> b -> c -> ... -> z) -> (a -> z)\n * @param {Function} fn The function to wrap.\n * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n *         arity 1.\n * @see R.binary, R.nAry\n * @example\n *\n *      const takesTwoArgs = function(a, b) {\n *        return [a, b];\n *      };\n *      takesTwoArgs.length; //=> 2\n *      takesTwoArgs(1, 2); //=> [1, 2]\n *\n *      const takesOneArg = R.unary(takesTwoArgs);\n *      takesOneArg.length; //=> 1\n *      // Only 1 argument is passed to the wrapped function\n *      takesOneArg(1, 2); //=> [1, undefined]\n * @symb R.unary(f)(a, b, c) = f(a)\n */\nvar unary = _curry1(function unary(fn) {\n  return nAry(1, fn);\n});\nexport default unary;\n", "import _curry2 from './internal/_curry2.js';\nimport curryN from './curryN.js';\n\n\n/**\n * Returns a function of arity `n` from a (manually) curried function.\n * Note that, the returned function is actually a ramda style\n * curryied function, which can accept one or more arguments in each\n * function calling.\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Function\n * @sig Number -> (a -> b -> c ... -> z) -> ((a -> b -> c ...) -> z)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to uncurry.\n * @return {Function} A new function.\n * @see R.curry, R.curryN\n * @example\n *\n *      const addFour = a => b => c => d => a + b + c + d;\n *\n *      const uncurriedAddFour = R.uncurryN(4, addFour);\n *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n */\nvar uncurryN = _curry2(function uncurryN(depth, fn) {\n  return curryN(depth, function() {\n    var currentDepth = 1;\n    var value = fn;\n    var idx = 0;\n    var endIdx;\n    while (currentDepth <= depth && typeof value === 'function') {\n      endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n      value = value.apply(this, Array.prototype.slice.call(arguments, idx, endIdx));\n      currentDepth += 1;\n      idx = endIdx;\n    }\n    return value;\n  });\n});\nexport default uncurryN;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      const f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */\nvar unfold = _curry2(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n  return result;\n});\nexport default unfold;\n", "import _concat from './internal/_concat.js';\nimport _curry2 from './internal/_curry2.js';\nimport compose from './compose.js';\nimport uniq from './uniq.js';\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @example\n *\n *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n */\nvar union = _curry2(compose(uniq, _concat));\nexport default union;\n", "import _includesWith from './_includesWith.js';\nimport _xfBase from './_xfBase.js';\n\n\nfunction XUniqWith(pred, xf) {\n  this.xf = xf;\n  this.pred = pred;\n  this.items = [];\n}\nXUniqWith.prototype['@@transducer/init'] = _xfBase.init;\nXUniqWith.prototype['@@transducer/result'] = _xfBase.result;\nXUniqWith.prototype['@@transducer/step'] = function(result, input) {\n  if (_includesWith(this.pred, input, this.items)) {\n    return result;\n  } else {\n    this.items.push(input);\n    return this.xf['@@transducer/step'](result, input);\n  }\n};\n\nexport default function _xuniqWith(pred) {\n  return function(xf) { return new XUniqWith(pred, xf); };\n}\n", "import _curry2 from './internal/_curry2.js';\nimport _dispatchable from './internal/_dispatchable.js';\nimport _includesWith from './internal/_includesWith.js';\nimport _xuniqWith from './internal/_xuniqWith.js';\n\n\n/**\n * Returns a new list containing only one copy of each element in the original\n * list, based upon the value returned by applying the supplied predicate to\n * two list elements. Prefers the first item if two items compare equal based\n * on the predicate.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category List\n * @sig ((a, a) -> Boolean) -> [a] -> [a]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list The array to consider.\n * @return {Array} The list of unique items.\n * @example\n *\n *      const strEq = R.eqBy(String);\n *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n */\nvar uniqWith = _curry2(_dispatchable([], _xuniqWith, function(pred, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n  var item;\n  while (idx < len) {\n    item = list[idx];\n    if (!_includesWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n    idx += 1;\n  }\n  return result;\n}));\nexport default uniqWith;\n", "import _concat from './internal/_concat.js';\nimport _curry3 from './internal/_curry3.js';\nimport uniqWith from './uniqWith.js';\n\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements. If an element exists\n * in both lists, the first element from the first list will be used.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      const l1 = [{a: 1}, {a: 2}];\n *      const l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nvar unionWith = _curry3(function unionWith(pred, list1, list2) {\n  return uniqWith(pred, _concat(list1, list2));\n});\nexport default unionWith;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is not satisfied, the function will return the result of\n * calling the `whenFalseFn` function with the same argument. If the predicate\n * is satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> b) -> a -> a | b\n * @param {Function} pred        A predicate function\n * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n *                               to a falsy value.\n * @param {*}        x           An object to test with the `pred` function and\n *                               pass to `whenFalseFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n * @see R.ifElse, R.when, R.cond\n * @example\n *\n *      let safeInc = R.unless(R.isNil, R.inc);\n *      safeInc(null); //=> null\n *      safeInc(1); //=> 2\n */\nvar unless = _curry3(function unless(pred, whenFalseFn, x) {\n  return pred(x) ? x : whenFalseFn(x);\n});\nexport default unless;\n", "import _identity from './internal/_identity.js';\nimport chain from './chain.js';\n\n\n/**\n * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig Chain c => c (c a) -> c a\n * @param {*} list\n * @return {*}\n * @see R.flatten, R.chain\n * @example\n *\n *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n */\nvar unnest = chain(_identity);\nexport default unnest;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * Takes a predicate, a transformation function, and an initial value,\n * and returns a value of the same type as the initial value.\n * It does so by applying the transformation until the predicate is satisfied,\n * at which point it returns the satisfactory value.\n *\n * @func\n * @memberOf R\n * @since v0.20.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> a) -> a -> a\n * @param {Function} pred A predicate function\n * @param {Function} fn The iterator function\n * @param {*} init Initial value\n * @return {*} Final value that satisfies predicate\n * @example\n *\n *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n */\nvar until = _curry3(function until(pred, fn, init) {\n  var val = init;\n  while (!pred(val)) {\n    val = fn(val);\n  }\n  return val;\n});\nexport default until;\n", "import _curry2 from './internal/_curry2.js';\nimport _isArray from './internal/_isArray.js';\nimport _map from './internal/_map.js';\nimport _assoc from './internal/_assoc.js';\n\n/**\n *\n * Deconstructs an array field from the input documents to output a document for each element.\n * Each output document is the input document with the value of the array field replaced by the element.\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig String -> {k: [v]} -> [{k: v}]\n * @param {String} key The key to determine which property of the object should be unwind\n * @param {Object} object The object containing list under property named as key which is to unwind\n * @return {List} A new list of object containing the value of input key having list replaced by each element in the object.\n * @example\n *\n * R.unwind('hobbies', {\n *   name: 'alice',\n *   hobbies: ['Golf', 'Hacking'],\n *   colors: ['red', 'green'],\n * });\n * // [\n * //   { name: 'alice', hobbies: 'Golf', colors: ['red', 'green'] },\n * //   { name: 'alice', hobbies: 'Hacking', colors: ['red', 'green'] }\n * // ]\n */\n\nvar unwind = _curry2(function(key, object) {\n  // If key is not in object or key is not as a list in object\n  if (!(key in object && _isArray(object[key]))) {\n    return [object];\n  }\n  // Map over object[key] which is a list and assoc each element with key\n  return _map(function(item) {\n    return _assoc(key, item, object);\n  }, object[key]);\n});\n\nexport default unwind;\n", "import _curry1 from './internal/_curry1.js';\n\n\n/**\n * Returns a list of all the properties, including prototype properties, of the\n * supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig {k: v} -> [v]\n * @param {Object} obj The object to extract values from\n * @return {Array} An array of the values of the object's own and prototype properties.\n * @see R.values, R.keysIn\n * @example\n *\n *      const F = function() { this.x = 'X'; };\n *      F.prototype.y = 'Y';\n *      const f = new F();\n *      R.valuesIn(f); //=> ['X', 'Y']\n */\nvar valuesIn = _curry1(function valuesIn(obj) {\n  var prop;\n  var vs = [];\n  for (prop in obj) {\n    vs[vs.length] = obj[prop];\n  }\n  return vs;\n});\nexport default valuesIn;\n", "import _curry2 from './internal/_curry2.js';\n\n\n// `Const` is a functor that effectively ignores the function given to `map`.\nvar Const = function(x) {\n  return {value: x, 'fantasy-land/map': function() { return this; }};\n};\n\n/**\n * Returns a \"view\" of the given data structure, determined by the given lens.\n * The lens's focus determines which portion of the data structure is visible.\n *\n * @func\n * @memberOf R\n * @since v0.16.0\n * @category Object\n * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n * @sig Lens s a -> s -> a\n * @param {Lens} lens\n * @param {*} x\n * @return {*}\n * @see R.set, R.over, R.lens, R.lensIndex, R.lensProp, R.lensPath\n * @example\n *\n *      const xLens = R.lensProp('x');\n *\n *      R.view(xLens, {x: 1, y: 2});  //=> 1\n *      R.view(xLens, {x: 4, y: 2});  //=> 4\n */\nvar view = _curry2(function view(lens, x) {\n  // Using `Const` effectively ignores the setter function of the `lens`,\n  // leaving the value returned by the getter function unmodified.\n  return lens(Const)(x).value;\n});\nexport default view;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * Tests the final argument by passing it to the given predicate function. If\n * the predicate is satisfied, the function will return the result of calling\n * the `whenTrueFn` function with the same argument. If the predicate is not\n * satisfied, the argument is returned as is.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Logic\n * @sig (a -> Boolean) -> (a -> b) -> a -> a | b\n * @param {Function} pred       A predicate function\n * @param {Function} whenTrueFn A function to invoke when the `condition`\n *                              evaluates to a truthy value.\n * @param {*}        x          An object to test with the `pred` function and\n *                              pass to `whenTrueFn` if necessary.\n * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n * @see R.ifElse, R.unless, R.cond\n * @example\n *\n *      // truncate :: String -> String\n *      const truncate = R.when(\n *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n *        R.pipe(R.take(10), R.append('\u2026'), R.join(''))\n *      );\n *      truncate('12345');         //=> '12345'\n *      truncate('0123456789ABC'); //=> '0123456789\u2026'\n */\nvar when = _curry3(function when(pred, whenTrueFn, x) {\n  return pred(x) ? whenTrueFn(x) : x;\n});\nexport default when;\n", "import _curry2 from './internal/_curry2.js';\nimport _has from './internal/_has.js';\n\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec. Each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `where` returns true if all the predicates return true, false\n * otherwise.\n *\n * `where` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propSatisfies, R.whereEq\n * @example\n *\n *      // pred :: Object -> Boolean\n *      const pred = R.where({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('bar')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n */\nvar where = _curry2(function where(spec, testObj) {\n  for (var prop in spec) {\n    if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n      return false;\n    }\n  }\n  return true;\n});\nexport default where;\n", "import _curry2 from './internal/_curry2.js';\nimport _has from './internal/_has.js';\n\n\n/**\n * Takes a spec object and a test object; each of the spec's own properties must be a predicate function.\n * Each predicate is applied to the value of the corresponding property of the\n * test object. `whereAny` returns true if at least one of the predicates return true,\n * false otherwise.\n *\n * `whereAny` is well suited to declaratively expressing constraints for other\n * functions such as [`filter`](#filter) and [`find`](#find).\n *\n * @func\n * @memberOf R\n * @since v0.28.0\n * @category Object\n * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propSatisfies, R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      const pred = R.whereAny({\n *        a: R.equals('foo'),\n *        b: R.complement(R.equals('xxx')),\n *        x: R.gt(R.__, 10),\n *        y: R.lt(R.__, 20)\n *      });\n *\n *      pred({a: 'foo', b: 'xxx', x: 8, y: 34}); //=> true\n *      pred({a: 'xxx', b: 'xxx', x: 9, y: 21}); //=> false\n *      pred({a: 'bar', b: 'xxx', x: 10, y: 20}); //=> false\n *      pred({a: 'foo', b: 'bar', x: 10, y: 20}); //=> true\n *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> true\n */\nvar whereAny = _curry2(function whereAny(spec, testObj) {\n  for (var prop in spec) {\n    if (_has(prop, spec) && spec[prop](testObj[prop])) {\n      return true;\n    }\n  }\n  return false;\n});\nexport default whereAny;\n", "import _curry2 from './internal/_curry2.js';\nimport equals from './equals.js';\nimport map from './map.js';\nimport where from './where.js';\n\n\n/**\n * Takes a spec object and a test object; returns true if the test satisfies\n * the spec, false otherwise. An object satisfies the spec if, for each of the\n * spec's own properties, accessing that property of the object gives the same\n * value (in [`R.equals`](#equals) terms) as accessing that property of the\n * spec.\n *\n * `whereEq` is a specialization of [`where`](#where).\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category Object\n * @sig {String: *} -> {String: *} -> Boolean\n * @param {Object} spec\n * @param {Object} testObj\n * @return {Boolean}\n * @see R.propEq, R.where\n * @example\n *\n *      // pred :: Object -> Boolean\n *      const pred = R.whereEq({a: 1, b: 2});\n *\n *      pred({a: 1});              //=> false\n *      pred({a: 1, b: 2});        //=> true\n *      pred({a: 1, b: 2, c: 3});  //=> true\n *      pred({a: 1, b: 1});        //=> false\n */\nvar whereEq = _curry2(function whereEq(spec, testObj) {\n  return where(map(equals, spec), testObj);\n});\nexport default whereEq;\n", "import _curry2 from './internal/_curry2.js';\nimport _Set from './internal/_Set.js';\nimport reject from './reject.js';\n\n\n/**\n * Returns a new list without values in the first argument.\n * [`R.equals`](#equals) is used to determine equality.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.19.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @param {Array} list1 The values to be removed from `list2`.\n * @param {Array} list2 The array to remove values from.\n * @return {Array} The new array without values in `list1`.\n * @see R.transduce, R.difference, R.remove\n * @example\n *\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n */\nvar without = _curry2(function without(xs, list) {\n  var toRemove = new _Set();\n\n  for (var i = 0; i < xs.length; i += 1) {\n    toRemove.add(xs[i]);\n  }\n\n  return reject(toRemove.has.bind(toRemove), list);\n});\nexport default without;\n", "import _curry2 from './internal/_curry2.js';\n\n/**\n * Exclusive disjunction logical operation.\n * Returns `true` if one of the arguments is truthy and the other is falsy.\n * Otherwise, it returns `false`.\n *\n * @func\n * @memberOf R\n * @since v0.27.1\n * @category Logic\n * @sig a -> b -> Boolean\n * @param {Any} a\n * @param {Any} b\n * @return {Boolean} true if one of the arguments is truthy and the other is falsy\n * @see R.or, R.and\n * @example\n *\n *      R.xor(true, true); //=> false\n *      R.xor(true, false); //=> true\n *      R.xor(false, true); //=> true\n *      R.xor(false, false); //=> false\n */\nvar xor = _curry2(function xor(a, b) {\n  return Boolean(!a ^ !b);\n});\nexport default xor;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Creates a new list out of the two supplied by creating each possible pair\n * from the lists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The list made by combining each possible pair from\n *         `as` and `bs` into pairs (`[a, b]`).\n * @example\n *\n *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n * @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]\n */\nvar xprod = _curry2(function xprod(a, b) { // = xprodWith(prepend); (takes about 3 times as long...)\n  var idx = 0;\n  var ilen = a.length;\n  var j;\n  var jlen = b.length;\n  var result = [];\n  while (idx < ilen) {\n    j = 0;\n    while (j < jlen) {\n      result[result.length] = [a[idx], b[j]];\n      j += 1;\n    }\n    idx += 1;\n  }\n  return result;\n});\nexport default xprod;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Creates a new list out of the two supplied by pairing up equally-positioned\n * items from both lists. The returned list is truncated to the length of the\n * shorter of the two input lists.\n * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [b] -> [[a,b]]\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n * @example\n *\n *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n * @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]\n */\nvar zip = _curry2(function zip(a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = [a[idx], b[idx]];\n    idx += 1;\n  }\n  return rv;\n});\nexport default zip;\n", "import _curry2 from './internal/_curry2.js';\n\n\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\nvar zipObj = _curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n  return out;\n});\nexport default zipObj;\n", "import _curry3 from './internal/_curry3.js';\n\n\n/**\n * Creates a new list out of the two supplied by applying the function to each\n * equally-positioned pair in the lists. The returned list is truncated to the\n * length of the shorter of the two input lists.\n *\n * @function\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> c) -> [a] -> [b] -> [c]\n * @param {Function} fn The function used to combine the two elements into one value.\n * @param {Array} list1 The first array to consider.\n * @param {Array} list2 The second array to consider.\n * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n *         using `fn`.\n * @example\n *\n *      const f = (x, y) => {\n *        // ...\n *      };\n *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n * @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]\n */\nvar zipWith = _curry3(function zipWith(fn, a, b) {\n  var rv = [];\n  var idx = 0;\n  var len = Math.min(a.length, b.length);\n  while (idx < len) {\n    rv[idx] = fn(a[idx], b[idx]);\n    idx += 1;\n  }\n  return rv;\n});\nexport default zipWith;\n", "import curryN from './curryN.js';\nimport _curry1 from './internal/_curry1.js';\n\n/**\n * Creates a thunk out of a function. A thunk delays a calculation until\n * its result is needed, providing lazy evaluation of arguments.\n *\n * @func\n * @memberOf R\n * @since v0.26.0\n * @category Function\n * @sig ((a, b, ..., j) -> k) -> (a, b, ..., j) -> (() -> k)\n * @param {Function} fn A function to wrap in a thunk\n * @return {Function} Expects arguments for `fn` and returns a new function\n *  that, when called, applies those arguments to `fn`.\n * @see R.partial, R.partialRight\n * @example\n *\n *      R.thunkify(R.identity)(42)(); //=> 42\n *      R.thunkify((a, b) => a + b)(25, 17)(); //=> 42\n */\nvar thunkify = _curry1(function thunkify(fn) {\n  return curryN(fn.length, function createThunk() {\n    var fnArgs = arguments;\n    return function invokeThunk() {\n      return fn.apply(this, fnArgs);\n    };\n  });\n});\n\nexport default thunkify;\n"],
  "mappings": "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",
  "names": ["add", "set2", "length", "curryN", "length", "addIndex", "addIndex", "adjust", "all", "match", "prop", "_isArguments", "contains", "keys", "prop", "type", "b", "equals", "pad", "_toISOString", "length", "reject", "recur", "keys", "toString", "max", "_xmap", "map", "nth", "prop", "pluck", "_reduce", "bind", "allPass", "always", "and", "any", "anyPass", "reduce_default", "ap", "reduce_default", "append", "apply", "values", "props", "applySpec", "applyTo", "ascend", "prop", "isNil", "assocPath", "path", "assoc", "prop", "nAry", "binary", "type", "liftN", "lift", "both", "call", "chain", "clamp", "min", "max", "map", "copy", "type", "bucket", "clone", "collectBy", "reduce_default", "o", "tag", "comparator", "not", "length", "slice", "reverse", "pipeWith", "reduce_default", "composeWith", "concat", "cond", "pair", "curry", "constructN", "construct", "converge", "reduce_default", "reduceBy", "defaultTo", "descend", "set", "type", "difference", "differenceWith", "remove", "count", "prop", "prop", "dissocPath", "path", "head", "tail", "dissoc", "prop", "divide", "drop", "take", "dropLast", "dropLastWhile", "dropRepeatsWith", "eqBy", "dropWhile", "or", "either", "type", "empty", "takeLast", "eqProps", "prop", "evolve", "type", "find", "findIndex", "findLast", "findLastIndex", "flip", "forEach", "forEachObjIndexed", "fromPairs", "gt", "gte", "hasPath", "has", "prop", "hasIn", "prop", "ifElse", "indexOf", "innerJoin", "insert", "insertAll", "set", "intersection", "intersperse", "length", "length", "objOf", "into", "invert", "props", "invertObj", "props", "invoker", "is", "isEmpty", "isNotNil", "juxt", "keysIn", "prop", "lastIndexOf", "length", "lens", "update", "lensIndex", "paths", "path", "lensPath", "lensProp", "lt", "lte", "mapAccum", "mapAccumRight", "mapObjIndexed", "match", "mathMod", "maxBy", "mean", "median", "memoizeWith", "mergeAll", "mergeWithKey", "mergeDeepWithKey", "mergeDeepLeft", "mergeDeepRight", "mergeDeepWith", "mergeLeft", "mergeRight", "mergeWith", "min", "minBy", "prop", "modifyPath", "path", "modify", "prop", "modulo", "length", "multiply", "o", "props", "negate", "none", "nthArg", "o", "of", "omit", "prop", "on", "once", "otherwise", "over", "lens", "pair", "concat", "pathEq", "pathOr", "pathSatisfies", "pick", "pickAll", "pickBy", "test", "prop", "prepend", "useWith", "propEq", "propIs", "type", "propOr", "propSatisfies", "props", "range", "reduceRight", "times", "repeat", "replace", "tInit", "tStep", "_xscan", "scan", "sequence", "F", "of", "set", "lens", "sort", "comparator", "sortBy", "sortWith", "splitAt", "splitEvery", "splitWhen", "splitWhenever", "subtract", "o", "length", "symmetricDifference", "symmetricDifferenceWith", "takeLastWhile", "takeWhile", "tap", "test", "andThen", "toPairs", "prop", "toPairsIn", "prop", "transduce", "transpose", "traverse", "F", "of", "trim", "unapply", "unary", "uncurryN", "unfold", "pair", "unionWith", "unless", "until", "init", "valuesIn", "prop", "view", "lens", "when", "where", "prop", "whereAny", "prop", "whereEq", "without", "xor", "xprod", "zip", "zipObj", "keys", "values", "zipWith", "thunkify"]
}
