{
  "version": 3,
  "sources": ["../../../../packages/shared/ReactVersion.js", "../../../../packages/shared/ReactSymbols.js", "../../../../packages/react/src/ReactNoopUpdateQueue.js", "../../../../packages/shared/assign.js", "../../../../packages/react/src/ReactBaseClasses.js", "../../../../packages/react/src/ReactCreateRef.js", "../../../../packages/shared/isArray.js", "../../../../packages/shared/hasOwnProperty.js", "../../../../packages/react/src/ReactCurrentOwner.js", "../../../../packages/react/src/ReactElement.js", "../../../../packages/react/src/ReactChildren.js", "../../../../packages/react/src/ReactContext.js", "../../../../packages/react/src/ReactLazy.js", "../../../../packages/react/src/ReactForwardRef.js", "../../../../packages/react/src/ReactMemo.js", "../../../../packages/react/src/ReactCurrentDispatcher.js", "../../../../packages/react/src/ReactHooks.js", "../../../../packages/react/src/ReactCurrentBatchConfig.js", "../../../../packages/react/src/ReactServerContextRegistry.js", "../../../../packages/react/src/ReactSharedInternals.js", "../../../../packages/react/src/ReactServerContext.js", "../../../../packages/react/src/ReactStartTransition.js", "../../../../packages/react/src/ReactAct.js", "../../../../packages/react/src/React.js", "../src/react.mjs"],
  "sourcesContent": ["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\n//\n// TODO: 18.0.0 has not been released to NPM;\n// It exists as a placeholder so that DevTools can support work tag changes between releases.\n// When we next publish a release, update the matching TODO in backend/renderer.js\n// TODO: This module is used both by the release scripts and to expose a version\n// at runtime. We should instead inject the version number as part of the build\n// process, and use the ReactVersions.js module as the single source of truth.\nexport default '18.3.1';\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types.\nexport const REACT_ELEMENT_TYPE = Symbol.for('react.element');\nexport const REACT_PORTAL_TYPE = Symbol.for('react.portal');\nexport const REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nexport const REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nexport const REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nexport const REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nexport const REACT_CONTEXT_TYPE = Symbol.for('react.context');\nexport const REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');\nexport const REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nexport const REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nexport const REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nexport const REACT_MEMO_TYPE = Symbol.for('react.memo');\nexport const REACT_LAZY_TYPE = Symbol.for('react.lazy');\nexport const REACT_SCOPE_TYPE = Symbol.for('react.scope');\nexport const REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\n  'react.debug_trace_mode',\n);\nexport const REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nexport const REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nexport const REACT_CACHE_TYPE = Symbol.for('react.cache');\nexport const REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\nexport const REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\n  'react.default_value',\n);\n\nconst MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  if (__DEV__) {\n    const constructor = publicInstance.constructor;\n    const componentName =\n      (constructor && (constructor.displayName || constructor.name)) ||\n      'ReactClass';\n    const warningKey = `${componentName}.${callerName}`;\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n    console.error(\n      \"Can't call %s on a component that is not yet mounted. \" +\n        'This is a no-op, but it might indicate a bug in your application. ' +\n        'Instead, assign to `this.state` directly or define a `state = {};` ' +\n        'class property with the desired state in the %s component.',\n      callerName,\n      componentName,\n    );\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n\n/**\n * This is the abstract API for an update queue.\n */\nconst ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function(publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function(publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function(\n    publicInstance,\n    completeState,\n    callback,\n    callerName,\n  ) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function(\n    publicInstance,\n    partialState,\n    callback,\n    callerName,\n  ) {\n    warnNoop(publicInstance, 'setState');\n  },\n};\n\nexport default ReactNoopUpdateQueue;\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst assign = Object.assign;\n\nexport default assign;\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport ReactNoopUpdateQueue from './ReactNoopUpdateQueue';\nimport assign from 'shared/assign';\n\nconst emptyObject = {};\nif (__DEV__) {\n  Object.freeze(emptyObject);\n}\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  // If a component has string refs, we will assign a different object later.\n  this.refs = emptyObject;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nComponent.prototype.setState = function(partialState, callback) {\n  if (\n    typeof partialState !== 'object' &&\n    typeof partialState !== 'function' &&\n    partialState != null\n  ) {\n    throw new Error(\n      'setState(...): takes an object of state variables to update or a ' +\n        'function which returns an object of state variables.',\n    );\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nComponent.prototype.forceUpdate = function(callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (__DEV__) {\n  const deprecatedAPIs = {\n    isMounted: [\n      'isMounted',\n      'Instead, make sure to clean up subscriptions and pending requests in ' +\n        'componentWillUnmount to prevent memory leaks.',\n    ],\n    replaceState: [\n      'replaceState',\n      'Refactor your code to use setState instead (see ' +\n        'https://github.com/facebook/react/issues/3236).',\n    ],\n  };\n  const defineDeprecationWarning = function(methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function() {\n        console.warn(\n          '%s(...) is deprecated in plain JavaScript React classes. %s',\n          info[0],\n          info[1],\n        );\n        return undefined;\n      },\n    });\n  };\n  for (const fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\nComponentDummy.prototype = Component.prototype;\n\n/**\n * Convenience component with default shallow equality check for sCU.\n */\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  // If a component has string refs, we will assign a different object later.\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nconst pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());\npureComponentPrototype.constructor = PureComponent;\n// Avoid an extra prototype jump for these methods.\nassign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\n\nexport {Component, PureComponent};\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * @flow\n */\n\nimport type {RefObject} from 'shared/ReactTypes';\n\n// an immutable object with a single mutable value\nexport function createRef(): RefObject {\n  const refObject = {\n    current: null,\n  };\n  if (__DEV__) {\n    Object.seal(refObject);\n  }\n  return refObject;\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\ndeclare function isArray(a: mixed): boolean %checks(Array.isArray(a));\n\nconst isArrayImpl = Array.isArray;\n\n// eslint-disable-next-line no-redeclare\nfunction isArray(a: mixed): boolean {\n  return isArrayImpl(a);\n}\n\nexport default isArray;\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default hasOwnProperty;\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nconst ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: (null: null | Fiber),\n};\n\nexport default ReactCurrentOwner;\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {REACT_ELEMENT_TYPE} from 'shared/ReactSymbols';\nimport assign from 'shared/assign';\nimport hasOwnProperty from 'shared/hasOwnProperty';\nimport {checkKeyStringCoercion} from 'shared/CheckStringCoercion';\n\nimport ReactCurrentOwner from './ReactCurrentOwner';\n\nconst RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true,\n};\n\nlet specialPropKeyWarningShown,\n  specialPropRefWarningShown,\n  didWarnAboutStringRefs;\n\nif (__DEV__) {\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'ref')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'key')) {\n      const getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  const warnAboutAccessingKey = function() {\n    if (__DEV__) {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n        console.error(\n          '%s: `key` is not a prop. Trying to access it will result ' +\n            'in `undefined` being returned. If you need to access the same ' +\n            'value within the child component, you should pass it as a different ' +\n            'prop. (https://reactjs.org/link/special-props)',\n          displayName,\n        );\n      }\n    }\n  };\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true,\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  const warnAboutAccessingRef = function() {\n    if (__DEV__) {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n        console.error(\n          '%s: `ref` is not a prop. Trying to access it will result ' +\n            'in `undefined` being returned. If you need to access the same ' +\n            'value within the child component, you should pass it as a different ' +\n            'prop. (https://reactjs.org/link/special-props)',\n          displayName,\n        );\n      }\n    }\n  };\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true,\n  });\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config) {\n  if (__DEV__) {\n    if (\n      typeof config.ref === 'string' &&\n      ReactCurrentOwner.current &&\n      config.__self &&\n      ReactCurrentOwner.current.stateNode !== config.__self\n    ) {\n      const componentName = getComponentNameFromType(\n        ReactCurrentOwner.current.type,\n      );\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        console.error(\n          'Component \"%s\" contains the string ref \"%s\". ' +\n            'Support for string refs will be removed in a future major release. ' +\n            'This case cannot be automatically converted to an arrow function. ' +\n            'We ask you to manually fix this case by using useRef() or createRef() instead. ' +\n            'Learn more about using refs safely here: ' +\n            'https://reactjs.org/link/strict-mode-string-ref',\n          componentName,\n          config.ref,\n        );\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\nconst ReactElement = function(type, key, ref, self, source, owner, props) {\n  const element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner,\n  };\n\n  if (__DEV__) {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {};\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false,\n    });\n    // self and source are DEV only properties.\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self,\n    });\n    // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source,\n    });\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\nexport function jsx(type, config, maybeKey) {\n  let propName;\n\n  // Reserved names are extracted\n  const props = {};\n\n  let key = null;\n  let ref = null;\n\n  // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n  if (maybeKey !== undefined) {\n    if (__DEV__) {\n      checkKeyStringCoercion(maybeKey);\n    }\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    if (__DEV__) {\n      checkKeyStringCoercion(config.key);\n    }\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n  }\n\n  // Remaining properties are added to a new props object\n  for (propName in config) {\n    if (\n      hasOwnProperty.call(config, propName) &&\n      !RESERVED_PROPS.hasOwnProperty(propName)\n    ) {\n      props[propName] = config[propName];\n    }\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  return ReactElement(\n    type,\n    key,\n    ref,\n    undefined,\n    undefined,\n    ReactCurrentOwner.current,\n    props,\n  );\n}\n\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\nexport function jsxDEV(type, config, maybeKey, source, self) {\n  let propName;\n\n  // Reserved names are extracted\n  const props = {};\n\n  let key = null;\n  let ref = null;\n\n  // Currently, key can be spread in as a prop. This causes a potential\n  // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n  // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n  // but as an intermediary step, we will use jsxDEV for everything except\n  // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n  // key is explicitly declared to be undefined or not.\n  if (maybeKey !== undefined) {\n    if (__DEV__) {\n      checkKeyStringCoercion(maybeKey);\n    }\n    key = '' + maybeKey;\n  }\n\n  if (hasValidKey(config)) {\n    if (__DEV__) {\n      checkKeyStringCoercion(config.key);\n    }\n    key = '' + config.key;\n  }\n\n  if (hasValidRef(config)) {\n    ref = config.ref;\n    warnIfStringRefCannotBeAutoConverted(config);\n  }\n\n  // Remaining properties are added to a new props object\n  for (propName in config) {\n    if (\n      hasOwnProperty.call(config, propName) &&\n      !RESERVED_PROPS.hasOwnProperty(propName)\n    ) {\n      props[propName] = config[propName];\n    }\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  if (key || ref) {\n    const displayName =\n      typeof type === 'function'\n        ? type.displayName || type.name || 'Unknown'\n        : type;\n    if (key) {\n      defineKeyPropWarningGetter(props, displayName);\n    }\n    if (ref) {\n      defineRefPropWarningGetter(props, displayName);\n    }\n  }\n\n  return ReactElement(\n    type,\n    key,\n    ref,\n    self,\n    source,\n    ReactCurrentOwner.current,\n    props,\n  );\n}\n\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\nexport function createElement(type, config, children) {\n  let propName;\n\n  // Reserved names are extracted\n  const props = {};\n\n  let key = null;\n  let ref = null;\n  let self = null;\n  let source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n\n      if (__DEV__) {\n        warnIfStringRefCannotBeAutoConverted(config);\n      }\n    }\n    if (hasValidKey(config)) {\n      if (__DEV__) {\n        checkKeyStringCoercion(config.key);\n      }\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (\n        hasOwnProperty.call(config, propName) &&\n        !RESERVED_PROPS.hasOwnProperty(propName)\n      ) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  const childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    if (__DEV__) {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n  if (__DEV__) {\n    if (key || ref) {\n      const displayName =\n        typeof type === 'function'\n          ? type.displayName || type.name || 'Unknown'\n          : type;\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n  return ReactElement(\n    type,\n    key,\n    ref,\n    self,\n    source,\n    ReactCurrentOwner.current,\n    props,\n  );\n}\n\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://reactjs.org/docs/react-api.html#createfactory\n */\nexport function createFactory(type) {\n  const factory = createElement.bind(null, type);\n  // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  // Legacy hook: remove it\n  factory.type = type;\n  return factory;\n}\n\nexport function cloneAndReplaceKey(oldElement, newKey) {\n  const newElement = ReactElement(\n    oldElement.type,\n    newKey,\n    oldElement.ref,\n    oldElement._self,\n    oldElement._source,\n    oldElement._owner,\n    oldElement.props,\n  );\n\n  return newElement;\n}\n\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\nexport function cloneElement(element, config, children) {\n  if (element === null || element === undefined) {\n    throw new Error(\n      `React.cloneElement(...): The argument must be a React element, but you passed ${element}.`,\n    );\n  }\n\n  let propName;\n\n  // Original props are copied\n  const props = assign({}, element.props);\n\n  // Reserved names are extracted\n  let key = element.key;\n  let ref = element.ref;\n  // Self is preserved since the owner is preserved.\n  const self = element._self;\n  // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n  const source = element._source;\n\n  // Owner will be preserved, unless ref is overridden\n  let owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n    if (hasValidKey(config)) {\n      if (__DEV__) {\n        checkKeyStringCoercion(config.key);\n      }\n      key = '' + config.key;\n    }\n\n    // Remaining properties override existing props\n    let defaultProps;\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n    for (propName in config) {\n      if (\n        hasOwnProperty.call(config, propName) &&\n        !RESERVED_PROPS.hasOwnProperty(propName)\n      ) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  const childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\nexport function isValidElement(object) {\n  return (\n    typeof object === 'object' &&\n    object !== null &&\n    object.$$typeof === REACT_ELEMENT_TYPE\n  );\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList} from 'shared/ReactTypes';\n\nimport isArray from 'shared/isArray';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_PORTAL_TYPE,\n} from 'shared/ReactSymbols';\nimport {checkKeyStringCoercion} from 'shared/CheckStringCoercion';\n\nimport {isValidElement, cloneAndReplaceKey} from './ReactElement';\n\nconst SEPARATOR = '.';\nconst SUBSEPARATOR = ':';\n\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\nfunction escape(key: string): string {\n  const escapeRegex = /[=:]/g;\n  const escaperLookup = {\n    '=': '=0',\n    ':': '=2',\n  };\n  const escapedString = key.replace(escapeRegex, function(match) {\n    return escaperLookup[match];\n  });\n\n  return '$' + escapedString;\n}\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nlet didWarnAboutMaps = false;\n\nconst userProvidedKeyEscapeRegex = /\\/+/g;\nfunction escapeUserProvidedKey(text: string): string {\n  return text.replace(userProvidedKeyEscapeRegex, '$&/');\n}\n\n/**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getElementKey(element: any, index: number): string {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof element === 'object' && element !== null && element.key != null) {\n    // Explicit key\n    if (__DEV__) {\n      checkKeyStringCoercion(element.key);\n    }\n    return escape('' + element.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\nfunction mapIntoArray(\n  children: ?ReactNodeList,\n  array: Array<React$Node>,\n  escapedPrefix: string,\n  nameSoFar: string,\n  callback: (?React$Node) => ?ReactNodeList,\n): number {\n  const type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  let invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n      case 'object':\n        switch ((children: any).$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n    }\n  }\n\n  if (invokeCallback) {\n    const child = children;\n    let mappedChild = callback(child);\n    // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows:\n    const childKey =\n      nameSoFar === '' ? SEPARATOR + getElementKey(child, 0) : nameSoFar;\n    if (isArray(mappedChild)) {\n      let escapedChildKey = '';\n      if (childKey != null) {\n        escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n      }\n      mapIntoArray(mappedChild, array, escapedChildKey, '', c => c);\n    } else if (mappedChild != null) {\n      if (isValidElement(mappedChild)) {\n        if (__DEV__) {\n          // The `if` statement here prevents auto-disabling of the safe\n          // coercion ESLint rule, so we must manually disable it below.\n          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n          if (mappedChild.key && (!child || child.key !== mappedChild.key)) {\n            checkKeyStringCoercion(mappedChild.key);\n          }\n        }\n        mappedChild = cloneAndReplaceKey(\n          mappedChild,\n          // Keep both the (mapped) and old keys if they differ, just as\n          // traverseAllChildren used to do for objects as children\n          escapedPrefix +\n            // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n            (mappedChild.key && (!child || child.key !== mappedChild.key)\n              ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number\n                // eslint-disable-next-line react-internal/safe-string-coercion\n                escapeUserProvidedKey('' + mappedChild.key) + '/'\n              : '') +\n            childKey,\n        );\n      }\n      array.push(mappedChild);\n    }\n    return 1;\n  }\n\n  let child;\n  let nextName;\n  let subtreeCount = 0; // Count of children found in the current subtree.\n  const nextNamePrefix =\n    nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (isArray(children)) {\n    for (let i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getElementKey(child, i);\n      subtreeCount += mapIntoArray(\n        child,\n        array,\n        escapedPrefix,\n        nextName,\n        callback,\n      );\n    }\n  } else {\n    const iteratorFn = getIteratorFn(children);\n    if (typeof iteratorFn === 'function') {\n      const iterableChildren: Iterable<React$Node> & {\n        entries: any,\n      } = (children: any);\n\n      if (__DEV__) {\n        // Warn about using Maps as children\n        if (iteratorFn === iterableChildren.entries) {\n          if (!didWarnAboutMaps) {\n            console.warn(\n              'Using Maps as children is not supported. ' +\n                'Use an array of keyed ReactElements instead.',\n            );\n          }\n          didWarnAboutMaps = true;\n        }\n      }\n\n      const iterator = iteratorFn.call(iterableChildren);\n      let step;\n      let ii = 0;\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getElementKey(child, ii++);\n        subtreeCount += mapIntoArray(\n          child,\n          array,\n          escapedPrefix,\n          nextName,\n          callback,\n        );\n      }\n    } else if (type === 'object') {\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      const childrenString = String((children: any));\n\n      throw new Error(\n        `Objects are not valid as a React child (found: ${\n          childrenString === '[object Object]'\n            ? 'object with keys {' +\n              Object.keys((children: any)).join(', ') +\n              '}'\n            : childrenString\n        }). ` +\n          'If you meant to render a collection of children, use an array ' +\n          'instead.',\n      );\n    }\n  }\n\n  return subtreeCount;\n}\n\ntype MapFunc = (child: ?React$Node) => ?ReactNodeList;\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(\n  children: ?ReactNodeList,\n  func: MapFunc,\n  context: mixed,\n): ?Array<React$Node> {\n  if (children == null) {\n    return children;\n  }\n  const result = [];\n  let count = 0;\n  mapIntoArray(children, result, '', '', function(child) {\n    return func.call(context, child, count++);\n  });\n  return result;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children: ?ReactNodeList): number {\n  let n = 0;\n  mapChildren(children, () => {\n    n++;\n    // Don't return anything\n  });\n  return n;\n}\n\ntype ForEachFunc = (child: ?React$Node) => void;\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(\n  children: ?ReactNodeList,\n  forEachFunc: ForEachFunc,\n  forEachContext: mixed,\n): void {\n  mapChildren(\n    children,\n    function() {\n      forEachFunc.apply(this, arguments);\n      // Don't return anything.\n    },\n    forEachContext,\n  );\n}\n\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\nfunction toArray(children: ?ReactNodeList): Array<React$Node> {\n  return mapChildren(children, child => child) || [];\n}\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\nfunction onlyChild<T>(children: T): T {\n  if (!isValidElement(children)) {\n    throw new Error(\n      'React.Children.only expected to receive a single React element child.',\n    );\n  }\n\n  return children;\n}\n\nexport {\n  forEachChildren as forEach,\n  mapChildren as map,\n  countChildren as count,\n  onlyChild as only,\n  toArray,\n};\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {REACT_PROVIDER_TYPE, REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\n\nimport type {ReactContext} from 'shared/ReactTypes';\n\nexport function createContext<T>(defaultValue: T): ReactContext<T> {\n  // TODO: Second argument used to be an optional `calculateChangedBits`\n  // function. Warn to reserve for future use?\n\n  const context: ReactContext<T> = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: (null: any),\n    Consumer: (null: any),\n\n    // Add these to use same hidden class in VM as ServerContext\n    _defaultValue: (null: any),\n    _globalName: (null: any),\n  };\n\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context,\n  };\n\n  let hasWarnedAboutUsingNestedContextConsumers = false;\n  let hasWarnedAboutUsingConsumerProvider = false;\n  let hasWarnedAboutDisplayNameOnConsumer = false;\n\n  if (__DEV__) {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    const Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n    };\n    // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get() {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n            console.error(\n              'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' +\n                'a future major release. Did you mean to render <Context.Provider> instead?',\n            );\n          }\n          return context.Provider;\n        },\n        set(_Provider) {\n          context.Provider = _Provider;\n        },\n      },\n      _currentValue: {\n        get() {\n          return context._currentValue;\n        },\n        set(_currentValue) {\n          context._currentValue = _currentValue;\n        },\n      },\n      _currentValue2: {\n        get() {\n          return context._currentValue2;\n        },\n        set(_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        },\n      },\n      _threadCount: {\n        get() {\n          return context._threadCount;\n        },\n        set(_threadCount) {\n          context._threadCount = _threadCount;\n        },\n      },\n      Consumer: {\n        get() {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n            console.error(\n              'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' +\n                'a future major release. Did you mean to render <Context.Consumer> instead?',\n            );\n          }\n          return context.Consumer;\n        },\n      },\n      displayName: {\n        get() {\n          return context.displayName;\n        },\n        set(displayName) {\n          if (!hasWarnedAboutDisplayNameOnConsumer) {\n            console.warn(\n              'Setting `displayName` on Context.Consumer has no effect. ' +\n                \"You should set it directly on the context with Context.displayName = '%s'.\",\n              displayName,\n            );\n            hasWarnedAboutDisplayNameOnConsumer = true;\n          }\n        },\n      },\n    });\n    // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n    context.Consumer = Consumer;\n  } else {\n    context.Consumer = context;\n  }\n\n  if (__DEV__) {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Wakeable, Thenable} from 'shared/ReactTypes';\n\nimport {REACT_LAZY_TYPE} from 'shared/ReactSymbols';\n\nconst Uninitialized = -1;\nconst Pending = 0;\nconst Resolved = 1;\nconst Rejected = 2;\n\ntype UninitializedPayload<T> = {\n  _status: -1,\n  _result: () => Thenable<{default: T, ...}>,\n};\n\ntype PendingPayload = {\n  _status: 0,\n  _result: Wakeable,\n};\n\ntype ResolvedPayload<T> = {\n  _status: 1,\n  _result: {default: T},\n};\n\ntype RejectedPayload = {\n  _status: 2,\n  _result: mixed,\n};\n\ntype Payload<T> =\n  | UninitializedPayload<T>\n  | PendingPayload\n  | ResolvedPayload<T>\n  | RejectedPayload;\n\nexport type LazyComponent<T, P> = {\n  $$typeof: Symbol | number,\n  _payload: P,\n  _init: (payload: P) => T,\n};\n\nfunction lazyInitializer<T>(payload: Payload<T>): T {\n  if (payload._status === Uninitialized) {\n    const ctor = payload._result;\n    const thenable = ctor();\n    // Transition to the next state.\n    // This might throw either because it's missing or throws. If so, we treat it\n    // as still uninitialized and try again next time. Which is the same as what\n    // happens if the ctor or any wrappers processing the ctor throws. This might\n    // end up fixing it if the resolution was a concurrency bug.\n    thenable.then(\n      moduleObject => {\n        if (payload._status === Pending || payload._status === Uninitialized) {\n          // Transition to the next state.\n          const resolved: ResolvedPayload<T> = (payload: any);\n          resolved._status = Resolved;\n          resolved._result = moduleObject;\n        }\n      },\n      error => {\n        if (payload._status === Pending || payload._status === Uninitialized) {\n          // Transition to the next state.\n          const rejected: RejectedPayload = (payload: any);\n          rejected._status = Rejected;\n          rejected._result = error;\n        }\n      },\n    );\n    if (payload._status === Uninitialized) {\n      // In case, we're still uninitialized, then we're waiting for the thenable\n      // to resolve. Set it as pending in the meantime.\n      const pending: PendingPayload = (payload: any);\n      pending._status = Pending;\n      pending._result = thenable;\n    }\n  }\n  if (payload._status === Resolved) {\n    const moduleObject = payload._result;\n    if (__DEV__) {\n      if (moduleObject === undefined) {\n        console.error(\n          'lazy: Expected the result of a dynamic imp' +\n            'ort() call. ' +\n            'Instead received: %s\\n\\nYour code should look like: \\n  ' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' +\n            \"ort('./MyComponent'))\\n\\n\" +\n            'Did you accidentally put curly braces around the import?',\n          moduleObject,\n        );\n      }\n    }\n    if (__DEV__) {\n      if (!('default' in moduleObject)) {\n        console.error(\n          'lazy: Expected the result of a dynamic imp' +\n            'ort() call. ' +\n            'Instead received: %s\\n\\nYour code should look like: \\n  ' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' +\n            \"ort('./MyComponent'))\",\n          moduleObject,\n        );\n      }\n    }\n    return moduleObject.default;\n  } else {\n    throw payload._result;\n  }\n}\n\nexport function lazy<T>(\n  ctor: () => Thenable<{default: T, ...}>,\n): LazyComponent<T, Payload<T>> {\n  const payload: Payload<T> = {\n    // We use these fields to store the result.\n    _status: Uninitialized,\n    _result: ctor,\n  };\n\n  const lazyType: LazyComponent<T, Payload<T>> = {\n    $$typeof: REACT_LAZY_TYPE,\n    _payload: payload,\n    _init: lazyInitializer,\n  };\n\n  if (__DEV__) {\n    // In production, this would just set it on the object.\n    let defaultProps;\n    let propTypes;\n    // $FlowFixMe\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get() {\n          return defaultProps;\n        },\n        set(newDefaultProps) {\n          console.error(\n            'React.lazy(...): It is not supported to assign `defaultProps` to ' +\n              'a lazy component import. Either specify them where the component ' +\n              'is defined, or create a wrapping component around it.',\n          );\n          defaultProps = newDefaultProps;\n          // Match production behavior more closely:\n          // $FlowFixMe\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true,\n          });\n        },\n      },\n      propTypes: {\n        configurable: true,\n        get() {\n          return propTypes;\n        },\n        set(newPropTypes) {\n          console.error(\n            'React.lazy(...): It is not supported to assign `propTypes` to ' +\n              'a lazy component import. Either specify them where the component ' +\n              'is defined, or create a wrapping component around it.',\n          );\n          propTypes = newPropTypes;\n          // Match production behavior more closely:\n          // $FlowFixMe\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true,\n          });\n        },\n      },\n    });\n  }\n\n  return lazyType;\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {REACT_FORWARD_REF_TYPE, REACT_MEMO_TYPE} from 'shared/ReactSymbols';\n\nexport function forwardRef<Props, ElementType: React$ElementType>(\n  render: (props: Props, ref: React$Ref<ElementType>) => React$Node,\n) {\n  if (__DEV__) {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      console.error(\n        'forwardRef requires a render function but received a `memo` ' +\n          'component. Instead of forwardRef(memo(...)), use ' +\n          'memo(forwardRef(...)).',\n      );\n    } else if (typeof render !== 'function') {\n      console.error(\n        'forwardRef requires a render function but was given %s.',\n        render === null ? 'null' : typeof render,\n      );\n    } else {\n      if (render.length !== 0 && render.length !== 2) {\n        console.error(\n          'forwardRef render functions accept exactly two parameters: props and ref. %s',\n          render.length === 1\n            ? 'Did you forget to use the ref parameter?'\n            : 'Any additional parameter will be undefined.',\n        );\n      }\n    }\n\n    if (render != null) {\n      if (render.defaultProps != null || render.propTypes != null) {\n        console.error(\n          'forwardRef render functions do not support propTypes or defaultProps. ' +\n            'Did you accidentally pass a React component?',\n        );\n      }\n    }\n  }\n\n  const elementType = {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render,\n  };\n  if (__DEV__) {\n    let ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function() {\n        return ownName;\n      },\n      set: function(name) {\n        ownName = name;\n\n        // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.forwardRef((props, ref) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n        if (!render.name && !render.displayName) {\n          render.displayName = name;\n        }\n      },\n    });\n  }\n  return elementType;\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {REACT_MEMO_TYPE} from 'shared/ReactSymbols';\n\nimport isValidElementType from 'shared/isValidElementType';\n\nexport function memo<Props>(\n  type: React$ElementType,\n  compare?: (oldProps: Props, newProps: Props) => boolean,\n) {\n  if (__DEV__) {\n    if (!isValidElementType(type)) {\n      console.error(\n        'memo: The first argument must be a component. Instead ' +\n          'received: %s',\n        type === null ? 'null' : typeof type,\n      );\n    }\n  }\n  const elementType = {\n    $$typeof: REACT_MEMO_TYPE,\n    type,\n    compare: compare === undefined ? null : compare,\n  };\n  if (__DEV__) {\n    let ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function() {\n        return ownName;\n      },\n      set: function(name) {\n        ownName = name;\n\n        // The inner component shouldn't inherit this display name in most cases,\n        // because the component may be used elsewhere.\n        // But it's nice for anonymous functions to inherit the name,\n        // so that our component-stack generation logic will display their frames.\n        // An anonymous function generally suggests a pattern like:\n        //   React.memo((props) => {...});\n        // This kind of inner function is not used elsewhere so the side effect is okay.\n        if (!type.name && !type.displayName) {\n          type.displayName = name;\n        }\n      },\n    });\n  }\n  return elementType;\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Dispatcher} from 'react-reconciler/src/ReactInternalTypes';\n\n/**\n * Keeps track of the current dispatcher.\n */\nconst ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: (null: null | Dispatcher),\n};\n\nexport default ReactCurrentDispatcher;\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Dispatcher} from 'react-reconciler/src/ReactInternalTypes';\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n  StartTransitionOptions,\n} from 'shared/ReactTypes';\n\nimport ReactCurrentDispatcher from './ReactCurrentDispatcher';\n\ntype BasicStateAction<S> = (S => S) | S;\ntype Dispatch<A> = A => void;\n\nfunction resolveDispatcher() {\n  const dispatcher = ReactCurrentDispatcher.current;\n  if (__DEV__) {\n    if (dispatcher === null) {\n      console.error(\n        'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n          ' one of the following reasons:\\n' +\n          '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n          '2. You might be breaking the Rules of Hooks\\n' +\n          '3. You might have more than one copy of React in the same app\\n' +\n          'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n      );\n    }\n  }\n  // Will result in a null access error if accessed outside render phase. We\n  // intentionally don't throw our own error because this is in a hot path.\n  // Also helps ensure this is inlined.\n  return ((dispatcher: any): Dispatcher);\n}\n\nexport function getCacheSignal(): AbortSignal {\n  const dispatcher = resolveDispatcher();\n  // $FlowFixMe This is unstable, thus optional\n  return dispatcher.getCacheSignal();\n}\n\nexport function getCacheForType<T>(resourceType: () => T): T {\n  const dispatcher = resolveDispatcher();\n  // $FlowFixMe This is unstable, thus optional\n  return dispatcher.getCacheForType(resourceType);\n}\n\nexport function useContext<T>(Context: ReactContext<T>): T {\n  const dispatcher = resolveDispatcher();\n  if (__DEV__) {\n    // TODO: add a more generic warning for invalid values.\n    if ((Context: any)._context !== undefined) {\n      const realContext = (Context: any)._context;\n      // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n      if (realContext.Consumer === Context) {\n        console.error(\n          'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' +\n            'removed in a future major release. Did you mean to call useContext(Context) instead?',\n        );\n      } else if (realContext.Provider === Context) {\n        console.error(\n          'Calling useContext(Context.Provider) is not supported. ' +\n            'Did you mean to call useContext(Context) instead?',\n        );\n      }\n    }\n  }\n  return dispatcher.useContext(Context);\n}\n\nexport function useState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\n\nexport function useReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\n\nexport function useRef<T>(initialValue: T): {|current: T|} {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\n\nexport function useEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, deps);\n}\n\nexport function useInsertionEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useInsertionEffect(create, deps);\n}\n\nexport function useLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, deps);\n}\n\nexport function useCallback<T>(\n  callback: T,\n  deps: Array<mixed> | void | null,\n): T {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, deps);\n}\n\nexport function useMemo<T>(\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, deps);\n}\n\nexport function useImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, deps);\n}\n\nexport function useDebugValue<T>(\n  value: T,\n  formatterFn: ?(value: T) => mixed,\n): void {\n  if (__DEV__) {\n    const dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\n\nexport const emptyObject = {};\n\nexport function useTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useTransition();\n}\n\nexport function useDeferredValue<T>(value: T): T {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useDeferredValue(value);\n}\n\nexport function useId(): string {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useId();\n}\n\nexport function useMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useMutableSource(source, getSnapshot, subscribe);\n}\n\nexport function useSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T,\n): T {\n  const dispatcher = resolveDispatcher();\n  return dispatcher.useSyncExternalStore(\n    subscribe,\n    getSnapshot,\n    getServerSnapshot,\n  );\n}\n\nexport function useCacheRefresh(): <T>(?() => T, ?T) => void {\n  const dispatcher = resolveDispatcher();\n  // $FlowFixMe This is unstable, thus optional\n  return dispatcher.useCacheRefresh();\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {BatchConfigTransition} from 'react-reconciler/src/ReactFiberTracingMarkerComponent.new';\n\ntype BatchConfig = {\n  transition: BatchConfigTransition | null,\n};\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nconst ReactCurrentBatchConfig: BatchConfig = {\n  transition: null,\n};\n\nexport default ReactCurrentBatchConfig;\n", "import type {ReactServerContext} from 'shared/ReactTypes';\n\nexport const ContextRegistry: {\n  [globalName: string]: ReactServerContext<any>,\n} = {};\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport ReactCurrentDispatcher from './ReactCurrentDispatcher';\nimport ReactCurrentBatchConfig from './ReactCurrentBatchConfig';\nimport ReactCurrentActQueue from './ReactCurrentActQueue';\nimport ReactCurrentOwner from './ReactCurrentOwner';\nimport ReactDebugCurrentFrame from './ReactDebugCurrentFrame';\nimport {enableServerContext} from 'shared/ReactFeatureFlags';\nimport {ContextRegistry} from './ReactServerContextRegistry';\n\nconst ReactSharedInternals = {\n  ReactCurrentDispatcher,\n  ReactCurrentBatchConfig,\n  ReactCurrentOwner,\n};\n\nif (__DEV__) {\n  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;\n  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;\n}\n\nif (enableServerContext) {\n  ReactSharedInternals.ContextRegistry = ContextRegistry;\n}\n\nexport default ReactSharedInternals;\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {\n  REACT_PROVIDER_TYPE,\n  REACT_SERVER_CONTEXT_TYPE,\n  REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED,\n} from 'shared/ReactSymbols';\n\nimport type {\n  ReactServerContext,\n  ServerContextJSONValue,\n} from 'shared/ReactTypes';\n\nimport {enableServerContext} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst ContextRegistry = ReactSharedInternals.ContextRegistry;\n\nexport function createServerContext<T: ServerContextJSONValue>(\n  globalName: string,\n  defaultValue: T,\n): ReactServerContext<T> {\n  if (!enableServerContext) {\n    throw new Error('Not implemented.');\n  }\n  let wasDefined = true;\n  if (!ContextRegistry[globalName]) {\n    wasDefined = false;\n    const context: ReactServerContext<T> = {\n      $$typeof: REACT_SERVER_CONTEXT_TYPE,\n\n      // As a workaround to support multiple concurrent renderers, we categorize\n      // some renderers as primary and others as secondary. We only expect\n      // there to be two concurrent renderers at most: React Native (primary) and\n      // Fabric (secondary); React DOM (primary) and React ART (secondary).\n      // Secondary renderers store their context values on separate fields.\n      _currentValue: defaultValue,\n      _currentValue2: defaultValue,\n\n      _defaultValue: defaultValue,\n\n      // Used to track how many concurrent renderers this context currently\n      // supports within in a single renderer. Such as parallel server rendering.\n      _threadCount: 0,\n      // These are circular\n      Provider: (null: any),\n      Consumer: (null: any),\n      _globalName: globalName,\n    };\n\n    context.Provider = {\n      $$typeof: REACT_PROVIDER_TYPE,\n      _context: context,\n    };\n\n    if (__DEV__) {\n      let hasWarnedAboutUsingConsumer;\n      context._currentRenderer = null;\n      context._currentRenderer2 = null;\n      Object.defineProperties(\n        context,\n        ({\n          Consumer: {\n            get() {\n              if (!hasWarnedAboutUsingConsumer) {\n                console.error(\n                  'Consumer pattern is not supported by ReactServerContext',\n                );\n                hasWarnedAboutUsingConsumer = true;\n              }\n              return null;\n            },\n          },\n        }: any),\n      );\n    }\n    ContextRegistry[globalName] = context;\n  }\n\n  const context = ContextRegistry[globalName];\n  if (context._defaultValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {\n    context._defaultValue = defaultValue;\n    if (\n      context._currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue = defaultValue;\n    }\n    if (\n      context._currentValue2 === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue2 = defaultValue;\n    }\n  } else if (wasDefined) {\n    throw new Error(`ServerContext: ${globalName} already defined`);\n  }\n  return context;\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport type {StartTransitionOptions} from 'shared/ReactTypes';\n\nimport ReactCurrentBatchConfig from './ReactCurrentBatchConfig';\nimport {enableTransitionTracing} from 'shared/ReactFeatureFlags';\n\nexport function startTransition(\n  scope: () => void,\n  options?: StartTransitionOptions,\n) {\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = {};\n  const currentTransition = ReactCurrentBatchConfig.transition;\n\n  if (__DEV__) {\n    ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n  }\n\n  if (enableTransitionTracing) {\n    if (options !== undefined && options.name !== undefined) {\n      ReactCurrentBatchConfig.transition.name = options.name;\n      ReactCurrentBatchConfig.transition.startTime = -1;\n    }\n  }\n\n  try {\n    scope();\n  } finally {\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    if (__DEV__) {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        const updatedFibersCount = currentTransition._updatedFibers.size;\n        if (updatedFibersCount > 10) {\n          console.warn(\n            'Detected a large number of updates inside startTransition. ' +\n              'If this is due to a subscription please re-write it to use React provided hooks. ' +\n              'Otherwise concurrent mode guarantees are off the table.',\n          );\n        }\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Thenable} from 'shared/ReactTypes';\nimport ReactCurrentActQueue from './ReactCurrentActQueue';\nimport enqueueTask from 'shared/enqueueTask';\n\nlet actScopeDepth = 0;\nlet didWarnNoAwaitAct = false;\n\nexport function act<T>(callback: () => T | Thenable<T>): Thenable<T> {\n  if (__DEV__) {\n    // `act` calls can be nested, so we track the depth. This represents the\n    // number of `act` scopes on the stack.\n    const prevActScopeDepth = actScopeDepth;\n    actScopeDepth++;\n\n    if (ReactCurrentActQueue.current === null) {\n      // This is the outermost `act` scope. Initialize the queue. The reconciler\n      // will detect the queue and use it instead of Scheduler.\n      ReactCurrentActQueue.current = [];\n    }\n\n    const prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;\n    let result;\n    try {\n      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only\n      // set to `true` while the given callback is executed, not for updates\n      // triggered during an async event, because this is how the legacy\n      // implementation of `act` behaved.\n      ReactCurrentActQueue.isBatchingLegacy = true;\n      result = callback();\n\n      // Replicate behavior of original `act` implementation in legacy mode,\n      // which flushed updates immediately after the scope function exits, even\n      // if it's an async function.\n      if (\n        !prevIsBatchingLegacy &&\n        ReactCurrentActQueue.didScheduleLegacyUpdate\n      ) {\n        const queue = ReactCurrentActQueue.current;\n        if (queue !== null) {\n          ReactCurrentActQueue.didScheduleLegacyUpdate = false;\n          flushActQueue(queue);\n        }\n      }\n    } catch (error) {\n      popActScope(prevActScopeDepth);\n      throw error;\n    } finally {\n      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;\n    }\n\n    if (\n      result !== null &&\n      typeof result === 'object' &&\n      typeof result.then === 'function'\n    ) {\n      const thenableResult: Thenable<T> = (result: any);\n      // The callback is an async function (i.e. returned a promise). Wait\n      // for it to resolve before exiting the current scope.\n      let wasAwaited = false;\n      const thenable: Thenable<T> = {\n        then(resolve, reject) {\n          wasAwaited = true;\n          thenableResult.then(\n            returnValue => {\n              popActScope(prevActScopeDepth);\n              if (actScopeDepth === 0) {\n                // We've exited the outermost act scope. Recursively flush the\n                // queue until there's no remaining work.\n                recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n              } else {\n                resolve(returnValue);\n              }\n            },\n            error => {\n              // The callback threw an error.\n              popActScope(prevActScopeDepth);\n              reject(error);\n            },\n          );\n        },\n      };\n\n      if (__DEV__) {\n        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {\n          // eslint-disable-next-line no-undef\n          Promise.resolve()\n            .then(() => {})\n            .then(() => {\n              if (!wasAwaited) {\n                didWarnNoAwaitAct = true;\n                console.error(\n                  'You called act(async () => ...) without await. ' +\n                    'This could lead to unexpected testing behaviour, ' +\n                    'interleaving multiple act calls and mixing their ' +\n                    'scopes. ' +\n                    'You should - await act(async () => ...);',\n                );\n              }\n            });\n        }\n      }\n      return thenable;\n    } else {\n      const returnValue: T = (result: any);\n      // The callback is not an async function. Exit the current scope\n      // immediately, without awaiting.\n      popActScope(prevActScopeDepth);\n      if (actScopeDepth === 0) {\n        // Exiting the outermost act scope. Flush the queue.\n        const queue = ReactCurrentActQueue.current;\n        if (queue !== null) {\n          flushActQueue(queue);\n          ReactCurrentActQueue.current = null;\n        }\n        // Return a thenable. If the user awaits it, we'll flush again in\n        // case additional work was scheduled by a microtask.\n        const thenable: Thenable<T> = {\n          then(resolve, reject) {\n            // Confirm we haven't re-entered another `act` scope, in case\n            // the user does something weird like await the thenable\n            // multiple times.\n            if (ReactCurrentActQueue.current === null) {\n              // Recursively flush the queue until there's no remaining work.\n              ReactCurrentActQueue.current = [];\n              recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n            } else {\n              resolve(returnValue);\n            }\n          },\n        };\n        return thenable;\n      } else {\n        // Since we're inside a nested `act` scope, the returned thenable\n        // immediately resolves. The outer scope will flush the queue.\n        const thenable: Thenable<T> = {\n          then(resolve, reject) {\n            resolve(returnValue);\n          },\n        };\n        return thenable;\n      }\n    }\n  } else {\n    throw new Error('act(...) is not supported in production builds of React.');\n  }\n}\n\nfunction popActScope(prevActScopeDepth) {\n  if (__DEV__) {\n    if (prevActScopeDepth !== actScopeDepth - 1) {\n      console.error(\n        'You seem to have overlapping act() calls, this is not supported. ' +\n          'Be sure to await previous act() calls before making a new one. ',\n      );\n    }\n    actScopeDepth = prevActScopeDepth;\n  }\n}\n\nfunction recursivelyFlushAsyncActWork<T>(\n  returnValue: T,\n  resolve: T => mixed,\n  reject: mixed => mixed,\n) {\n  if (__DEV__) {\n    const queue = ReactCurrentActQueue.current;\n    if (queue !== null) {\n      try {\n        flushActQueue(queue);\n        enqueueTask(() => {\n          if (queue.length === 0) {\n            // No additional work was scheduled. Finish.\n            ReactCurrentActQueue.current = null;\n            resolve(returnValue);\n          } else {\n            // Keep flushing work until there's none left.\n            recursivelyFlushAsyncActWork(returnValue, resolve, reject);\n          }\n        });\n      } catch (error) {\n        reject(error);\n      }\n    } else {\n      resolve(returnValue);\n    }\n  }\n}\n\nlet isFlushing = false;\nfunction flushActQueue(queue) {\n  if (__DEV__) {\n    if (!isFlushing) {\n      // Prevent re-entrance.\n      isFlushing = true;\n      let i = 0;\n      try {\n        for (; i < queue.length; i++) {\n          let callback = queue[i];\n          do {\n            callback = callback(true);\n          } while (callback !== null);\n        }\n        queue.length = 0;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        queue = queue.slice(i + 1);\n        throw error;\n      } finally {\n        isFlushing = false;\n      }\n    }\n  }\n}\n", "/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactVersion from 'shared/ReactVersion';\nimport {\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_CACHE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {Component, PureComponent} from './ReactBaseClasses';\nimport {createRef} from './ReactCreateRef';\nimport {forEach, map, count, toArray, only} from './ReactChildren';\nimport {\n  createElement as createElementProd,\n  createFactory as createFactoryProd,\n  cloneElement as cloneElementProd,\n  isValidElement,\n} from './ReactElement';\nimport {createContext} from './ReactContext';\nimport {lazy} from './ReactLazy';\nimport {forwardRef} from './ReactForwardRef';\nimport {memo} from './ReactMemo';\nimport {\n  getCacheSignal,\n  getCacheForType,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useDebugValue,\n  useInsertionEffect,\n  useLayoutEffect,\n  useMemo,\n  useMutableSource,\n  useSyncExternalStore,\n  useReducer,\n  useRef,\n  useState,\n  useTransition,\n  useDeferredValue,\n  useId,\n  useCacheRefresh,\n} from './ReactHooks';\nimport {\n  createElementWithValidation,\n  createFactoryWithValidation,\n  cloneElementWithValidation,\n} from './ReactElementValidator';\nimport {createServerContext} from './ReactServerContext';\nimport {createMutableSource} from './ReactMutableSource';\nimport ReactSharedInternals from './ReactSharedInternals';\nimport {startTransition} from './ReactStartTransition';\nimport {act} from './ReactAct';\n\n// TODO: Move this branching into the other module instead and just re-export.\nconst createElement = __DEV__ ? createElementWithValidation : createElementProd;\nconst cloneElement = __DEV__ ? cloneElementWithValidation : cloneElementProd;\nconst createFactory = __DEV__ ? createFactoryWithValidation : createFactoryProd;\n\nconst Children = {\n  map,\n  forEach,\n  count,\n  toArray,\n  only,\n};\n\nexport {\n  Children,\n  createMutableSource,\n  createRef,\n  Component,\n  PureComponent,\n  createContext,\n  createServerContext,\n  forwardRef,\n  lazy,\n  memo,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useDebugValue,\n  useInsertionEffect,\n  useLayoutEffect,\n  useMemo,\n  useMutableSource,\n  useSyncExternalStore,\n  useReducer,\n  useRef,\n  useState,\n  REACT_FRAGMENT_TYPE as Fragment,\n  REACT_PROFILER_TYPE as Profiler,\n  REACT_STRICT_MODE_TYPE as StrictMode,\n  REACT_DEBUG_TRACING_MODE_TYPE as unstable_DebugTracingMode,\n  REACT_SUSPENSE_TYPE as Suspense,\n  createElement,\n  cloneElement,\n  isValidElement,\n  ReactVersion as version,\n  ReactSharedInternals as __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,\n  // Deprecated behind disableCreateFactory\n  createFactory,\n  // Concurrent Mode\n  useTransition,\n  startTransition,\n  useDeferredValue,\n  REACT_SUSPENSE_LIST_TYPE as SuspenseList,\n  REACT_LEGACY_HIDDEN_TYPE as unstable_LegacyHidden,\n  REACT_OFFSCREEN_TYPE as unstable_Offscreen,\n  getCacheSignal as unstable_getCacheSignal,\n  getCacheForType as unstable_getCacheForType,\n  useCacheRefresh as unstable_useCacheRefresh,\n  REACT_CACHE_TYPE as unstable_Cache,\n  // enableScopeAPI\n  REACT_SCOPE_TYPE as unstable_Scope,\n  // enableTransitionTracing\n  REACT_TRACING_MARKER_TYPE as unstable_TracingMarker,\n  useId,\n  act,\n};\n", "import * as React from './react.esm.js';\n\nexport * from './react.esm.js';\nexport default React;\n"],
  "mappings": ";;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA,IAAA,eAAe;ACDR,IAAMA,qBAAqBC,OAAOC,IAAI,eAAX;AAC3B,IAAMC,oBAAoBF,OAAOC,IAAI,cAAX;AACjC,IAAaE,sBAAsBH,OAAOC,IAAI,gBAAX;AACnC,IAAaG,yBAAyBJ,OAAOC,IAAI,mBAAX;AACtC,IAAaI,sBAAsBL,OAAOC,IAAI,gBAAX;AAC5B,IAAMK,sBAAsBN,OAAOC,IAAI,gBAAX;AAC5B,IAAMM,qBAAqBP,OAAOC,IAAI,eAAX;AAC3B,IAAMO,4BAA4BR,OAAOC,IAAI,sBAAX;AAClC,IAAMQ,yBAAyBT,OAAOC,IAAI,mBAAX;AACtC,IAAaS,sBAAsBV,OAAOC,IAAI,gBAAX;AACnC,IAAaU,2BAA2BX,OAAOC,IAAI,qBAAX;AACjC,IAAMW,kBAAkBZ,OAAOC,IAAI,YAAX;AACxB,IAAMY,kBAAkBb,OAAOC,IAAI,YAAX;AAC/B,IACaa,gCAAgCd,OAAOC,IAClD,wBAD2C;AAG7C,IAAac,uBAAuBf,OAAOC,IAAI,iBAAX;AACpC,IACae,mBAAmBhB,OAAOC,IAAI,aAAX;AAEzB,IAAMgB,gDAAgDjB,OAAOC,IAClE,qBAD2D;AAI7D,IAAMiB,wBAAwBlB,OAAOmB;AACrC,IAAMC,uBAAuB;AAEtB,SAASC,cAAcC,eAA0C;AACtE,MAAIA,kBAAkB,QAAQ,OAAOA,kBAAkB,UAAU;AAC/D,WAAO;EACR;AACD,QAAMC,gBACHL,yBAAyBI,cAAcJ,qBAAD,KACvCI,cAAcF,oBAAD;AACf,MAAI,OAAOG,kBAAkB,YAAY;AACvC,WAAOA;EACR;AACD,SAAO;AACR;AAXeF;ACRhB,IAAMG,uBAAuB;;;;;;;;EAQ3BC,WAAW,SAASC,gBAAgB;AAClC,WAAO;EACR;;;;;;;;;;;;;;;;EAiBDC,oBAAoB,SAASD,gBAAgBE,UAAUC,YAAY;EAElE;;;;;;;;;;;;;;EAeDC,qBAAqB,SACnBJ,gBACAK,eACAH,UACAC,YACA;EAED;;;;;;;;;;;;;EAcDG,iBAAiB,SACfN,gBACAO,cACAL,UACAC,YACA;EAED;AAxE0B;ACzB7B,IAAMK,SAASC,OAAOD;ACCtB,IAAME,cAAc,CAAA;AAQpB,SAASC,UAAUC,OAAOC,SAASC,SAAS;AAC1C,OAAKF,QAAQA;AACb,OAAKC,UAAUA;AAEf,OAAKE,OAAOL;AAGZ,OAAKI,UAAUA,WAAWhB;AAC3B;AARQa;AAUTA,UAAUK,UAAUC,mBAAmB,CAAA;AA2BvCN,UAAUK,UAAUE,WAAW,SAASX,cAAcL,UAAU;AAC9D,MACE,OAAOK,iBAAiB,YACxB,OAAOA,iBAAiB,cACxBA,gBAAgB,MAChB;AACA,UAAM,IAAIY,MACR,uHADI;EAIP;AAED,OAAKL,QAAQR,gBAAgB,MAAMC,cAAcL,UAAU,UAA3D;AACD;AAgBDS,UAAUK,UAAUI,cAAc,SAASlB,UAAU;AACnD,OAAKY,QAAQb,mBAAmB,MAAMC,UAAU,aAAhD;AACD;AAuCD,SAASmB,iBAAiB;AAAA;AAAjBA;AACTA,eAAeL,YAAYL,UAAUK;AAKrC,SAASM,cAAcV,OAAOC,SAASC,SAAS;AAC9C,OAAKF,QAAQA;AACb,OAAKC,UAAUA;AAEf,OAAKE,OAAOL;AACZ,OAAKI,UAAUA,WAAWhB;AAC3B;AANQwB;AAQT,IAAMC,yBAA0BD,cAAcN,YAAY,IAAIK,eAAJ;AAC1DE,uBAAuBC,cAAcF;AAErCd,OAAOe,wBAAwBZ,UAAUK,SAAnC;AACNO,uBAAuBE,uBAAuB;ACpIvC,SAASC,YAAuB;AACrC,QAAMC,YAAY;IAChBC,SAAS;EADO;AAMlB,SAAOD;AACR;AAReD;ACAhB,IAAMG,cAAcC,MAAMC;AAG1B,SAASA,QAAQC,GAAmB;AAClC,SAAOH,YAAYG,CAAD;AACnB;AAFQD;ACLT,IAAME,iBAAiBxB,OAAOO,UAAUiB;ACQxC,IAAMC,oBAAoB;;;;;EAKxBN,SAAU;AALc;ACF1B,IAAMO,iBAAiB;EACrBC,KAAK;EACLC,KAAK;EACLC,QAAQ;EACRC,UAAU;AAJW;AAevB,SAASC,YAAYC,QAAQ;AAS3B,SAAOA,OAAOJ,QAAQK;AACvB;AAVQF;AAYT,SAASG,YAAYF,QAAQ;AAS3B,SAAOA,OAAOL,QAAQM;AACvB;AAVQC;AAyGT,IAAMC,eAAe,gCAASC,MAAMT,KAAKC,KAAKS,MAAMC,QAAQC,OAAOpC,OAAO;AACxE,QAAMqC,UAAU;;IAEdC,UAAU7E;;IAGVwE;IACAT;IACAC;IACAzB;;IAGAuC,QAAQH;EAXM;AAoDhB,SAAOC;AACR,GAtDoB;AAsNd,SAASG,cAAcP,MAAMJ,QAAQY,UAAU;AACpD,MAAIC;AAGJ,QAAM1C,QAAQ,CAAA;AAEd,MAAIwB,MAAM;AACV,MAAIC,MAAM;AACV,MAAIS,OAAO;AACX,MAAIC,SAAS;AAEb,MAAIN,UAAU,MAAM;AAClB,QAAID,YAAYC,MAAD,GAAU;AACvBJ,YAAMI,OAAOJ;IAKd;AACD,QAAIM,YAAYF,MAAD,GAAU;AAIvBL,YAAM,KAAKK,OAAOL;IACnB;AAEDU,WAAOL,OAAOH,WAAWI,SAAY,OAAOD,OAAOH;AACnDS,aAASN,OAAOF,aAAaG,SAAY,OAAOD,OAAOF;AAEvD,SAAKe,YAAYb,QAAQ;AACvB,UACER,eAAesB,KAAKd,QAAQa,QAA5B,KACA,CAACnB,eAAeF,eAAeqB,QAA9B,GACD;AACA1C,cAAM0C,QAAD,IAAab,OAAOa,QAAD;MACzB;IACF;EACF;AAID,QAAME,iBAAiBC,UAAUC,SAAS;AAC1C,MAAIF,mBAAmB,GAAG;AACxB5C,UAAMyC,WAAWA;EAClB,WAAUG,iBAAiB,GAAG;AAC7B,UAAMG,aAAa7B,MAAM0B,cAAD;AACxB,aAASI,IAAI,GAAGA,IAAIJ,gBAAgBI,KAAK;AACvCD,iBAAWC,CAAD,IAAMH,UAAUG,IAAI,CAAL;IAC1B;AAMDhD,UAAMyC,WAAWM;EAClB;AAGD,MAAId,QAAQA,KAAKgB,cAAc;AAC7B,UAAMA,eAAehB,KAAKgB;AAC1B,SAAKP,YAAYO,cAAc;AAC7B,UAAIjD,MAAM0C,QAAD,MAAeZ,QAAW;AACjC9B,cAAM0C,QAAD,IAAaO,aAAaP,QAAD;MAC/B;IACF;EACF;AAeD,SAAOV,aACLC,MACAT,KACAC,KACAS,MACAC,QACAb,kBAAkBN,SAClBhB,KAPiB;AASpB;AAzFewC;AA+FT,SAASU,cAAcjB,MAAM;AAClC,QAAMkB,UAAUX,cAAcY,KAAK,MAAMnB,IAAzB;AAMhBkB,UAAQlB,OAAOA;AACf,SAAOkB;AACR;AATeD;AAWT,SAASG,mBAAmBC,YAAYC,QAAQ;AACrD,QAAMC,aAAaxB,aACjBsB,WAAWrB,MACXsB,QACAD,WAAW7B,KACX6B,WAAWG,OACXH,WAAWI,SACXJ,WAAWf,QACXe,WAAWtD,KAPkB;AAU/B,SAAOwD;AACR;AAZeH;AAkBT,SAASM,aAAatB,SAASR,QAAQY,UAAU;AACtD,MAAIJ,YAAY,QAAQA,YAAYP,QAAW;AAC7C,UAAM,IAAIvB,MAAJ,mFAC6E8B,UAD7E,GAAA;EAGP;AAED,MAAIK;AAGJ,QAAM1C,QAAQJ,OAAO,CAAA,GAAIyC,QAAQrC,KAAb;AAGpB,MAAIwB,MAAMa,QAAQb;AAClB,MAAIC,MAAMY,QAAQZ;AAElB,QAAMS,OAAOG,QAAQoB;AAIrB,QAAMtB,SAASE,QAAQqB;AAGvB,MAAItB,QAAQC,QAAQE;AAEpB,MAAIV,UAAU,MAAM;AAClB,QAAID,YAAYC,MAAD,GAAU;AAEvBJ,YAAMI,OAAOJ;AACbW,cAAQd,kBAAkBN;IAC3B;AACD,QAAIe,YAAYF,MAAD,GAAU;AAIvBL,YAAM,KAAKK,OAAOL;IACnB;AAGD,QAAIyB;AACJ,QAAIZ,QAAQJ,QAAQI,QAAQJ,KAAKgB,cAAc;AAC7CA,qBAAeZ,QAAQJ,KAAKgB;IAC7B;AACD,SAAKP,YAAYb,QAAQ;AACvB,UACER,eAAesB,KAAKd,QAAQa,QAA5B,KACA,CAACnB,eAAeF,eAAeqB,QAA9B,GACD;AACA,YAAIb,OAAOa,QAAD,MAAeZ,UAAamB,iBAAiBnB,QAAW;AAEhE9B,gBAAM0C,QAAD,IAAaO,aAAaP,QAAD;QAC/B,OAAM;AACL1C,gBAAM0C,QAAD,IAAab,OAAOa,QAAD;QACzB;MACF;IACF;EACF;AAID,QAAME,iBAAiBC,UAAUC,SAAS;AAC1C,MAAIF,mBAAmB,GAAG;AACxB5C,UAAMyC,WAAWA;EAClB,WAAUG,iBAAiB,GAAG;AAC7B,UAAMG,aAAa7B,MAAM0B,cAAD;AACxB,aAASI,IAAI,GAAGA,IAAIJ,gBAAgBI,KAAK;AACvCD,iBAAWC,CAAD,IAAMH,UAAUG,IAAI,CAAL;IAC1B;AACDhD,UAAMyC,WAAWM;EAClB;AAED,SAAOf,aAAaK,QAAQJ,MAAMT,KAAKC,KAAKS,MAAMC,QAAQC,OAAOpC,KAA9C;AACpB;AAxEe2D;AAiFT,SAASC,eAAeC,QAAQ;AACrC,SACE,OAAOA,WAAW,YAClBA,WAAW,QACXA,OAAOvB,aAAa7E;AAEvB;AANemG;ACjiBhB,IAAME,YAAY;AAClB,IAAMC,eAAe;AAQrB,SAASC,OAAOxC,KAAqB;AACnC,QAAMyC,cAAc;AACpB,QAAMC,gBAAgB;IACpB,KAAK;IACL,KAAK;EAFe;AAItB,QAAMC,gBAAgB3C,IAAI4C,QAAQH,aAAa,SAASI,OAAO;AAC7D,WAAOH,cAAcG,KAAD;EACrB,CAFqB;AAItB,SAAO,MAAMF;AACd;AAXQH;AAoBT,IAAMM,6BAA6B;AACnC,SAASC,sBAAsBC,MAAsB;AACnD,SAAOA,KAAKJ,QAAQE,4BAA4B,KAAzC;AACR;AAFQC;AAWT,SAASE,cAAcpC,SAAcqC,OAAuB;AAG1D,MAAI,OAAOrC,YAAY,YAAYA,YAAY,QAAQA,QAAQb,OAAO,MAAM;AAK1E,WAAOwC,OAAO,KAAK3B,QAAQb,GAAd;EACd;AAED,SAAOkD,MAAMC,SAAS,EAAf;AACR;AAZQF;AAcT,SAASG,aACPnC,UACAoC,OACAC,eACAC,WACAzF,UACQ;AACR,QAAM2C,OAAO,OAAOQ;AAEpB,MAAIR,SAAS,eAAeA,SAAS,WAAW;AAE9CQ,eAAW;EACZ;AAED,MAAIuC,iBAAiB;AAErB,MAAIvC,aAAa,MAAM;AACrBuC,qBAAiB;EAClB,OAAM;AACL,YAAQ/C,MAAR;MACE,KAAK;MACL,KAAK;AACH+C,yBAAiB;AACjB;MACF,KAAK;AACH,gBAASvC,SAAeH,UAAxB;UACE,KAAK7E;UACL,KAAKG;AACHoH,6BAAiB;QAHrB;IANJ;EAYD;AAED,MAAIA,gBAAgB;AAClB,UAAMC,SAAQxC;AACd,QAAIyC,cAAc5F,SAAS2F,MAAD;AAG1B,UAAME,WACJJ,cAAc,KAAKjB,YAAYW,cAAcQ,QAAO,CAAR,IAAaF;AAC3D,QAAI5D,QAAQ+D,WAAD,GAAe;AACxB,UAAIE,kBAAkB;AACtB,UAAID,YAAY,MAAM;AACpBC,0BAAkBb,sBAAsBY,QAAD,IAAa;MACrD;AACDP,mBAAaM,aAAaL,OAAOO,iBAAiB,IAAIC,OAAKA,CAA/C;IACb,WAAUH,eAAe,MAAM;AAC9B,UAAItB,eAAesB,WAAD,GAAe;AAS/BA,sBAAc7B;UACZ6B;;;UAGAJ;WAEGI,YAAY1D,QAAQ,CAACyD,UAASA,OAAMzD,QAAQ0D,YAAY1D;;;YAGrD+C,sBAAsB,KAAKW,YAAY1D,GAAlB,IAAyB;cAC9C,MACJ2D;QAX4B;MAajC;AACDN,YAAMS,KAAKJ,WAAX;IACD;AACD,WAAO;EACR;AAED,MAAID;AACJ,MAAIM;AACJ,MAAIC,eAAe;AACnB,QAAMC,iBACJV,cAAc,KAAKjB,YAAYiB,YAAYhB;AAE7C,MAAI5C,QAAQsB,QAAD,GAAY;AACrB,aAASO,IAAI,GAAGA,IAAIP,SAASK,QAAQE,KAAK;AACxCiC,cAAQxC,SAASO,CAAD;AAChBuC,iBAAWE,iBAAiBhB,cAAcQ,OAAOjC,CAAR;AACzCwC,sBAAgBZ,aACdK,OACAJ,OACAC,eACAS,UACAjG,QAL0B;IAO7B;EACF,OAAM;AACL,UAAMoG,aAAa3G,cAAc0D,QAAD;AAChC,QAAI,OAAOiD,eAAe,YAAY;AACpC,YAAMC,mBAEDlD;AAeL,YAAM5D,WAAW6G,WAAW/C,KAAKgD,gBAAhB;AACjB,UAAIC;AACJ,UAAIC,KAAK;AACT,aAAO,EAAED,OAAO/G,SAASiH,KAAT,GAAiBC,MAAM;AACrCd,gBAAQW,KAAKI;AACbT,mBAAWE,iBAAiBhB,cAAcQ,OAAOY,IAAR;AACzCL,wBAAgBZ,aACdK,OACAJ,OACAC,eACAS,UACAjG,QAL0B;MAO7B;IACF,WAAU2C,SAAS,UAAU;AAE5B,YAAMgE,iBAAiBC,OAAQzD,QAAF;AAE7B,YAAM,IAAIlC,MACR,qDACE0F,mBAAmB,oBACf,uBACApG,OAAOsG,KAAM1D,QAAb,EAA6B2D,KAAK,IAAlC,IACA,MACAH,kBALN,2EADI;IAWP;EACF;AAED,SAAOT;AACR;AAlJQZ;AAmKT,SAASyB,YACP5D,UACA6D,MACArG,SACoB;AACpB,MAAIwC,YAAY,MAAM;AACpB,WAAOA;EACR;AACD,QAAM8D,SAAS,CAAA;AACf,MAAIC,QAAQ;AACZ5B,eAAanC,UAAU8D,QAAQ,IAAI,IAAI,SAAStB,OAAO;AACrD,WAAOqB,KAAK3D,KAAK1C,SAASgF,OAAOuB,OAA1B;EACR,CAFW;AAGZ,SAAOD;AACR;AAdQF;AAyBT,SAASI,cAAchE,UAAkC;AACvD,MAAIiE,IAAI;AACRL,cAAY5D,UAAU,MAAM;AAC1BiE;EAED,CAHU;AAIX,SAAOA;AACR;AAPQD;AAuBT,SAASE,gBACPlE,UACAmE,aACAC,gBACM;AACNR,cACE5D,UACA,WAAW;AACTmE,gBAAYE,MAAM,MAAMjE,SAAxB;EAED,GACDgE,cANS;AAQZ;AAbQF;AAqBT,SAASI,QAAQtE,UAA6C;AAC5D,SAAO4D,YAAY5D,UAAUwC,WAASA,KAApB,KAA8B,CAAA;AACjD;AAFQ8B;AAkBT,SAASC,UAAavE,UAAgB;AACpC,MAAI,CAACmB,eAAenB,QAAD,GAAY;AAC7B,UAAM,IAAIlC,MACR,uEADI;EAGP;AAED,SAAOkC;AACR;AARQuE;ACzTF,SAASC,cAAiBC,cAAkC;AAIjE,QAAMjH,UAA2B;IAC/BqC,UAAUrE;;;;;;IAMVkJ,eAAeD;IACfE,gBAAgBF;;;IAGhBG,cAAc;;IAEdC,UAAW;IACXC,UAAW;;IAGXC,eAAgB;IAChBC,aAAc;EAlBiB;AAqBjCxH,UAAQqH,WAAW;IACjBhF,UAAUtE;IACV0J,UAAUzH;EAFO;AAwFZ;AACLA,YAAQsH,WAAWtH;EACpB;AAOD,SAAOA;AACR;AA3HegH;ACAhB,IAAMU,gBAAgB;AACtB,IAAMC,UAAU;AAChB,IAAMC,WAAW;AACjB,IAAMC,WAAW;AAkCjB,SAASC,gBAAmBC,SAAwB;AAClD,MAAIA,QAAQC,YAAYN,eAAe;AACrC,UAAMO,OAAOF,QAAQG;AACrB,UAAMC,WAAWF,KAAI;AAMrBE,aAASC,KACPC,kBAAgB;AACd,UAAIN,QAAQC,YAAYL,WAAWI,QAAQC,YAAYN,eAAe;AAEpE,cAAMY,WAAgCP;AACtCO,iBAASN,UAAUJ;AACnBU,iBAASJ,UAAUG;MACpB;IACF,GACDE,WAAS;AACP,UAAIR,QAAQC,YAAYL,WAAWI,QAAQC,YAAYN,eAAe;AAEpE,cAAMc,WAA6BT;AACnCS,iBAASR,UAAUH;AACnBW,iBAASN,UAAUK;MACpB;IACF,CAhBH;AAkBA,QAAIR,QAAQC,YAAYN,eAAe;AAGrC,YAAMe,UAA2BV;AACjCU,cAAQT,UAAUL;AAClBc,cAAQP,UAAUC;IACnB;EACF;AACD,MAAIJ,QAAQC,YAAYJ,UAAU;AAChC,UAAMS,eAAeN,QAAQG;AA4B7B,WAAOG,aAAaK;EACrB,OAAM;AACL,UAAMX,QAAQG;EACf;AACF;AApEQJ;AAsEF,SAASa,KACdV,MAC8B;AAC9B,QAAMF,UAAsB;;IAE1BC,SAASN;IACTQ,SAASD;EAHiB;AAM5B,QAAMW,WAAyC;IAC7CvG,UAAU/D;IACVuK,UAAUd;IACVe,OAAOhB;EAHsC;AAqD/C,SAAOc;AACR;AA/DeD;AC/GT,SAASI,WACdC,QACA;AAkCA,QAAMC,cAAc;IAClB5G,UAAUnE;IACV8K;EAFkB;AA4BpB,SAAOC;AACR;AAjEeF;ACET,SAASG,KACdlH,MACAmH,SACA;AAUA,QAAMF,cAAc;IAClB5G,UAAUhE;IACV2D;IACAmH,SAASA,YAAYtH,SAAY,OAAOsH;EAHtB;AA6BpB,SAAOF;AACR;AA3CeC;ACGhB,IAAME,yBAAyB;;;;;EAK7BrI,SAAU;AALmB;ACS/B,SAASsI,oBAAoB;AAC3B,QAAMC,aAAaF,uBAAuBrI;AAgB1C,SAASuI;AACV;AAlBQD;AAoBF,SAASE,iBAA8B;AAC5C,QAAMD,aAAaD,kBAAiB;AAEpC,SAAOC,WAAWC,eAAX;AACR;AAJeA;AAMT,SAASC,gBAAmBC,cAA0B;AAC3D,QAAMH,aAAaD,kBAAiB;AAEpC,SAAOC,WAAWE,gBAAgBC,YAA3B;AACR;AAJeD;AAMT,SAASE,WAAcC,SAA6B;AACzD,QAAML,aAAaD,kBAAiB;AAoBpC,SAAOC,WAAWI,WAAWC,OAAtB;AACR;AAtBeD;AAwBT,SAASE,SACdC,cACoC;AACpC,QAAMP,aAAaD,kBAAiB;AACpC,SAAOC,WAAWM,SAASC,YAApB;AACR;AALeD;AAOT,SAASE,WACdC,SACAC,YACAC,MACkB;AAClB,QAAMX,aAAaD,kBAAiB;AACpC,SAAOC,WAAWQ,WAAWC,SAASC,YAAYC,IAA3C;AACR;AAPeH;AAST,SAASI,OAAUC,cAAiC;AACzD,QAAMb,aAAaD,kBAAiB;AACpC,SAAOC,WAAWY,OAAOC,YAAlB;AACR;AAHeD;AAKT,SAASE,UACdC,QACAC,MACM;AACN,QAAMhB,aAAaD,kBAAiB;AACpC,SAAOC,WAAWc,UAAUC,QAAQC,IAA7B;AACR;AANeF;AAQT,SAASG,mBACdF,QACAC,MACM;AACN,QAAMhB,aAAaD,kBAAiB;AACpC,SAAOC,WAAWiB,mBAAmBF,QAAQC,IAAtC;AACR;AANeC;AAQT,SAASC,gBACdH,QACAC,MACM;AACN,QAAMhB,aAAaD,kBAAiB;AACpC,SAAOC,WAAWkB,gBAAgBH,QAAQC,IAAnC;AACR;AANeE;AAQT,SAASC,YACdpL,UACAiL,MACG;AACH,QAAMhB,aAAaD,kBAAiB;AACpC,SAAOC,WAAWmB,YAAYpL,UAAUiL,IAAjC;AACR;AANeG;AAQT,SAASC,QACdL,QACAC,MACG;AACH,QAAMhB,aAAaD,kBAAiB;AACpC,SAAOC,WAAWoB,QAAQL,QAAQC,IAA3B;AACR;AANeI;AAQT,SAASC,oBACdnJ,KACA6I,QACAC,MACM;AACN,QAAMhB,aAAaD,kBAAiB;AACpC,SAAOC,WAAWqB,oBAAoBnJ,KAAK6I,QAAQC,IAA5C;AACR;AAPeK;AAST,SAASC,cACd7E,OACA8E,aACM;AAKP;AAReD;AAYT,SAASE,gBAGd;AACA,QAAMxB,aAAaD,kBAAiB;AACpC,SAAOC,WAAWwB,cAAX;AACR;AANeA;AAQT,SAASC,iBAAoBhF,OAAa;AAC/C,QAAMuD,aAAaD,kBAAiB;AACpC,SAAOC,WAAWyB,iBAAiBhF,KAA5B;AACR;AAHegF;AAKT,SAASC,QAAgB;AAC9B,QAAM1B,aAAaD,kBAAiB;AACpC,SAAOC,WAAW0B,MAAX;AACR;AAHeA;AAcT,SAASC,qBACdC,WACAC,aACAC,mBACG;AACH,QAAM9B,aAAaD,kBAAiB;AACpC,SAAOC,WAAW2B,qBAChBC,WACAC,aACAC,iBAHK;AAKR;AAXeH;AAaT,SAASI,kBAA6C;AAC3D,QAAM/B,aAAaD,kBAAiB;AAEpC,SAAOC,WAAW+B,gBAAX;AACR;AAJeA;ACvLhB,IAAMC,0BAAuC;EAC3CC,YAAY;AAD+B;AChBtC,IAAMC,kBAET,CAAA;ACWJ,IAAMC,uBAAuB;EAC3BrC;EACAkC;EACAjK;AAH2B;AAWJ;AACvBoK,uBAAqBD,kBAAkBA;AACxC;ACLD,IAAMA,oBAAkBC,qBAAqBD;AAEtC,SAASE,oBACdC,YACA1E,cACuB;AAIvB,MAAI2E,aAAa;AACjB,MAAI,CAACJ,kBAAgBG,UAAD,GAAc;AAChCC,iBAAa;AACb,UAAM5L,WAAiC;MACrCqC,UAAUpE;;;;;;MAOViJ,eAAeD;MACfE,gBAAgBF;MAEhBM,eAAeN;;;MAIfG,cAAc;;MAEdC,UAAW;MACXC,UAAW;MACXE,aAAamE;IAnBwB;AAsBvC3L,IAAAA,SAAQqH,WAAW;MACjBhF,UAAUtE;MACV0J,UAAUzH;IAFO;AA0BnBwL,sBAAgBG,UAAD,IAAe3L;EAC/B;AAED,QAAMA,UAAUwL,kBAAgBG,UAAD;AAC/B,MAAI3L,QAAQuH,kBAAkB7I,+CAA+C;AAC3EsB,YAAQuH,gBAAgBN;AACxB,QACEjH,QAAQkH,kBAAkBxI,+CAC1B;AACAsB,cAAQkH,gBAAgBD;IACzB;AACD,QACEjH,QAAQmH,mBAAmBzI,+CAC3B;AACAsB,cAAQmH,iBAAiBF;IAC1B;EACF,WAAU2E,YAAY;AACrB,UAAM,IAAItL,MAAJ,oBAA4BqL,aAA5B,kBAAA;EACP;AACD,SAAO3L;AACR;AA9Ee0L;ACZT,SAASG,gBACdC,OACAC,SACA;AACA,QAAMC,iBAAiBV,wBAAwBC;AAC/CD,0BAAwBC,aAAa,CAAA;AAcrC,MAAI;AACFO,UAAK;EACN,UAFD;AAGER,4BAAwBC,aAAaS;EAetC;AACF;AAtCeH;ACGT,SAASI,IAAO5M,UAA8C;AAuI5D;AACL,UAAM,IAAIiB,MAAM,0DAAV;EACP;AACF;AA1Ie2L;ACsDhB,IAAM1J,kBAAwD2J;AAC9D,IAAMxI,iBAAsDyI;AAC5D,IAAMlJ,kBAAwDmJ;AAE9D,IAAMC,WAAW;EACfC,KAAAA;EACAC,SAAAA;EACAhG,OAAAA;EACAO;EACA0F,MAAAA;AALe;;;ACvEjB,IAAO,gBAAQ;",
  "names": ["REACT_ELEMENT_TYPE", "Symbol", "for", "REACT_PORTAL_TYPE", "REACT_FRAGMENT_TYPE", "REACT_STRICT_MODE_TYPE", "REACT_PROFILER_TYPE", "REACT_PROVIDER_TYPE", "REACT_CONTEXT_TYPE", "REACT_SERVER_CONTEXT_TYPE", "REACT_FORWARD_REF_TYPE", "REACT_SUSPENSE_TYPE", "REACT_SUSPENSE_LIST_TYPE", "REACT_MEMO_TYPE", "REACT_LAZY_TYPE", "REACT_DEBUG_TRACING_MODE_TYPE", "REACT_OFFSCREEN_TYPE", "REACT_CACHE_TYPE", "REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED", "MAYBE_ITERATOR_SYMBOL", "iterator", "FAUX_ITERATOR_SYMBOL", "getIteratorFn", "maybeIterable", "maybeIterator", "ReactNoopUpdateQueue", "isMounted", "publicInstance", "enqueueForceUpdate", "callback", "callerName", "enqueueReplaceState", "completeState", "enqueueSetState", "partialState", "assign", "Object", "emptyObject", "Component", "props", "context", "updater", "refs", "prototype", "isReactComponent", "setState", "Error", "forceUpdate", "ComponentDummy", "PureComponent", "pureComponentPrototype", "constructor", "isPureReactComponent", "createRef", "refObject", "current", "isArrayImpl", "Array", "isArray", "a", "hasOwnProperty", "ReactCurrentOwner", "RESERVED_PROPS", "key", "ref", "__self", "__source", "hasValidRef", "config", "undefined", "hasValidKey", "ReactElement", "type", "self", "source", "owner", "element", "$$typeof", "_owner", "createElement", "children", "propName", "call", "childrenLength", "arguments", "length", "childArray", "i", "defaultProps", "createFactory", "factory", "bind", "cloneAndReplaceKey", "oldElement", "newKey", "newElement", "_self", "_source", "cloneElement", "isValidElement", "object", "SEPARATOR", "SUBSEPARATOR", "escape", "escapeRegex", "escaperLookup", "escapedString", "replace", "match", "userProvidedKeyEscapeRegex", "escapeUserProvidedKey", "text", "getElementKey", "index", "toString", "mapIntoArray", "array", "escapedPrefix", "nameSoFar", "invokeCallback", "child", "mappedChild", "childKey", "escapedChildKey", "c", "push", "nextName", "subtreeCount", "nextNamePrefix", "iteratorFn", "iterableChildren", "step", "ii", "next", "done", "value", "childrenString", "String", "keys", "join", "mapChildren", "func", "result", "count", "countChildren", "n", "forEachChildren", "forEachFunc", "forEachContext", "apply", "toArray", "onlyChild", "createContext", "defaultValue", "_currentValue", "_currentValue2", "_threadCount", "Provider", "Consumer", "_defaultValue", "_globalName", "_context", "Uninitialized", "Pending", "Resolved", "Rejected", "lazyInitializer", "payload", "_status", "ctor", "_result", "thenable", "then", "moduleObject", "resolved", "error", "rejected", "pending", "default", "lazy", "lazyType", "_payload", "_init", "forwardRef", "render", "elementType", "memo", "compare", "ReactCurrentDispatcher", "resolveDispatcher", "dispatcher", "getCacheSignal", "getCacheForType", "resourceType", "useContext", "Context", "useState", "initialState", "useReducer", "reducer", "initialArg", "init", "useRef", "initialValue", "useEffect", "create", "deps", "useInsertionEffect", "useLayoutEffect", "useCallback", "useMemo", "useImperativeHandle", "useDebugValue", "formatterFn", "useTransition", "useDeferredValue", "useId", "useSyncExternalStore", "subscribe", "getSnapshot", "getServerSnapshot", "useCacheRefresh", "ReactCurrentBatchConfig", "transition", "ContextRegistry", "ReactSharedInternals", "createServerContext", "globalName", "wasDefined", "startTransition", "scope", "options", "prevTransition", "act", "createElementProd", "cloneElementProd", "createFactoryProd", "Children", "map", "forEach", "only"]
}
