{
  "version": 3,
  "sources": ["../src/size.ts", "../src/device-pixel-ratio.ts", "../src/canvas-element-bitmap-size.ts", "../src/canvas-rendering-target.ts"],
  "sourcesContent": ["export type Size = Readonly<{\n\twidth: number;\n\theight: number;\n}> & { __brand: 'Size' };\n\nexport function size({ width, height }: { width: number, height: number }): Size {\n\tif (width < 0) {\n\t\tthrow new Error('Negative width is not allowed for Size');\n\t}\n\n\tif (height < 0) {\n\t\tthrow new Error('Negative height is not allowed for Size');\n\t}\n\n\treturn {\n\t\twidth,\n\t\theight,\n\t} as Size;\n}\n\nexport function equalSizes(first: { width: number, height: number }, second: { width: number, height: number }): boolean {\n\treturn (first.width === second.width) &&\n\t\t(first.height === second.height);\n}\n", "import Disposable from './disposable.js';\nimport { NextObserver, Unsubscribable, BehaviorSubject } from './rx.js';\n\nclass Observable implements BehaviorSubject<number>, Disposable {\n\tprivate _window: Window;\n\tprivate readonly _resolutionListener = () => this._onResolutionChanged();\n\tprivate _resolutionMediaQueryList: MediaQueryList | null = null;\n\tprivate _observers: NextObserver<number>[] = [];\n\n\tpublic constructor(win: Window) {\n\t\tthis._window = win;\n\t\tthis._installResolutionListener();\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._uninstallResolutionListener();\n\t\t(this._window as unknown as null) = null;\n\t}\n\n\tpublic get value(): number {\n\t\treturn this._window.devicePixelRatio;\n\t}\n\n\tpublic subscribe(next: (value: number) => void): Unsubscribable {\n\t\tconst observer: NextObserver<number> = { next };\n\t\tthis._observers.push(observer);\n\t\treturn {\n\t\t\tunsubscribe: () => {\n\t\t\t\tthis._observers = this._observers.filter(o => o !== observer);\n\t\t\t},\n\t\t};\n\t}\n\n\tprivate _installResolutionListener(): void {\n\t\tif (this._resolutionMediaQueryList !== null) {\n\t\t\tthrow new Error('Resolution listener is already installed');\n\t\t}\n\n\t\tconst dppx = this._window.devicePixelRatio;\n\t\tthis._resolutionMediaQueryList = this._window.matchMedia(`all and (resolution: ${dppx}dppx)`);\n\t\t// IE and some versions of Edge do not support addEventListener/removeEventListener, and we are going to use the deprecated addListener/removeListener\n\t\tthis._resolutionMediaQueryList.addListener(this._resolutionListener);\n\t}\n\n\tprivate _uninstallResolutionListener(): void {\n\t\tif (this._resolutionMediaQueryList !== null) {\n\t\t\t// IE and some versions of Edge do not support addEventListener/removeEventListener, and we are going to use the deprecated addListener/removeListener\n\t\t\tthis._resolutionMediaQueryList.removeListener(this._resolutionListener);\n\t\t\tthis._resolutionMediaQueryList = null;\n\t\t}\n\t}\n\n\tprivate _reinstallResolutionListener(): void {\n\t\tthis._uninstallResolutionListener();\n\t\tthis._installResolutionListener();\n\t}\n\n\tprivate _onResolutionChanged(): void {\n\t\tthis._observers.forEach(observer => observer.next(this._window.devicePixelRatio));\n\t\tthis._reinstallResolutionListener();\n\t}\n}\n\nexport function createObservable(win: Window): BehaviorSubject<number> & Disposable {\n\treturn new Observable(win);\n}\n", "import Disposable from './disposable.js';\nimport { equalSizes, Size, size } from './size.js';\nimport { BehaviorSubject } from './rx.js';\nimport { createObservable as createDevicePixelRatioObservable } from './device-pixel-ratio.js';\n\nexport type BitmapSizeChangedListener = (this: Binding, oldSize: Size, newSize: Size) => void;\nexport type BitmapSizeTransformer = (bitmapSize: Size, canvasElementClientSize: Size) => { width: number, height: number };\nexport type SuggestedBitmapSizeChangedListener = (this: Binding, oldSize: Size | null, newSize: Size | null) => void;\n\nexport interface Binding extends Disposable {\n\treadonly canvasElement: HTMLCanvasElement;\n\t/**\n\t * Canvas element client size in CSS pixels\n\t */\n\treadonly canvasElementClientSize: Size;\n\tresizeCanvasElement(clientSize: { width: number, height: number }): void;\n\n\treadonly bitmapSize: Size;\n\tsubscribeBitmapSizeChanged(listener: BitmapSizeChangedListener): void;\n\tunsubscribeBitmapSizeChanged(listener: BitmapSizeChangedListener): void;\n\n\treadonly suggestedBitmapSize: Size | null;\n\tsubscribeSuggestedBitmapSizeChanged(listener: SuggestedBitmapSizeChangedListener): void;\n\tunsubscribeSuggestedBitmapSizeChanged(listener: SuggestedBitmapSizeChangedListener): void;\n\tapplySuggestedBitmapSize(): void;\n}\n\nexport interface DevicePixelContentBoxBindingTargetOptions {\n\tallowResizeObserver?: boolean;\n}\n\nclass DevicePixelContentBoxBinding implements Binding, Disposable {\n\tprivate readonly _transformBitmapSize: BitmapSizeTransformer;\n\tprivate readonly _allowResizeObserver: boolean;\n\n\tprivate _canvasElement: HTMLCanvasElement | null = null;\n\tprivate _canvasElementClientSize: Size;\n\tprivate _bitmapSizeChangedListeners: BitmapSizeChangedListener[] = [];\n\tprivate _suggestedBitmapSize: Size | null = null;\n\tprivate _suggestedBitmapSizeChangedListeners: SuggestedBitmapSizeChangedListener[] = [];\n\t// devicePixelRatio approach\n\tprivate _devicePixelRatioObservable: BehaviorSubject<number> & Disposable | null = null;\n\t// ResizeObserver approach\n\tprivate _canvasElementResizeObserver: ResizeObserver | null = null;\n\n\tpublic constructor(canvasElement: HTMLCanvasElement, transformBitmapSize?: BitmapSizeTransformer, options?: DevicePixelContentBoxBindingTargetOptions) {\n\t\tthis._canvasElement = canvasElement;\n\t\tthis._canvasElementClientSize = size({\n\t\t\twidth: this._canvasElement.clientWidth,\n\t\t\theight: this._canvasElement.clientHeight,\n\t\t});\n\t\tthis._transformBitmapSize = transformBitmapSize ?? (size => size);\n\t\tthis._allowResizeObserver = options?.allowResizeObserver ?? true;\n\n\t\tthis._chooseAndInitObserver();\n\t\t// we MAY leave the constuctor without any bitmap size observation mechanics initialized\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._canvasElement === null) {\n\t\t\tthrow new Error('Object is disposed');\n\t\t}\n\t\tthis._canvasElementResizeObserver?.disconnect();\n\t\tthis._canvasElementResizeObserver = null;\n\t\tthis._devicePixelRatioObservable?.dispose();\n\t\tthis._devicePixelRatioObservable = null;\n\t\tthis._suggestedBitmapSizeChangedListeners.length = 0;\n\t\tthis._bitmapSizeChangedListeners.length = 0;\n\t\tthis._canvasElement = null;\n\t}\n\n\tpublic get canvasElement(): HTMLCanvasElement {\n\t\tif (this._canvasElement === null) {\n\t\t\tthrow new Error('Object is disposed');\n\t\t}\n\t\treturn this._canvasElement;\n\t}\n\n\tpublic get canvasElementClientSize(): Size {\n\t\treturn this._canvasElementClientSize;\n\t}\n\n\tpublic get bitmapSize(): Size {\n\t\treturn size({\n\t\t\twidth: this.canvasElement.width,\n\t\t\theight: this.canvasElement.height,\n\t\t});\n\t}\n\n\t/**\n\t * Use this function to change canvas element client size until binding is disposed\n\t * @param clientSize New client size for bound HTMLCanvasElement\n\t */\n\tpublic resizeCanvasElement(clientSize: { width: number, height: number }): void {\n\t\tthis._canvasElementClientSize = size(clientSize);\n\t\tthis.canvasElement.style.width = `${this._canvasElementClientSize.width}px`;\n\t\tthis.canvasElement.style.height = `${this._canvasElementClientSize.height}px`;\n\n\t\tthis._invalidateBitmapSize();\n\t}\n\n\tpublic subscribeBitmapSizeChanged(listener: BitmapSizeChangedListener): void {\n\t\tthis._bitmapSizeChangedListeners.push(listener);\n\t}\n\n\tpublic unsubscribeBitmapSizeChanged(listener: BitmapSizeChangedListener): void {\n\t\tthis._bitmapSizeChangedListeners = this._bitmapSizeChangedListeners.filter(l => l !== listener);\n\t}\n\n\tpublic get suggestedBitmapSize(): Size | null {\n\t\treturn this._suggestedBitmapSize;\n\t}\n\n\tpublic subscribeSuggestedBitmapSizeChanged(listener: SuggestedBitmapSizeChangedListener): void {\n\t\tthis._suggestedBitmapSizeChangedListeners.push(listener);\n\t}\n\n\tpublic unsubscribeSuggestedBitmapSizeChanged(listener: SuggestedBitmapSizeChangedListener): void {\n\t\tthis._suggestedBitmapSizeChangedListeners = this._suggestedBitmapSizeChangedListeners.filter(l => l !== listener);\n\t}\n\n\tpublic applySuggestedBitmapSize(): void {\n\t\tif (this._suggestedBitmapSize === null) {\n\t\t\t// nothing to apply\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldSuggestedSize = this._suggestedBitmapSize;\n\t\tthis._suggestedBitmapSize = null;\n\t\tthis._resizeBitmap(oldSuggestedSize);\n\t\tthis._emitSuggestedBitmapSizeChanged(oldSuggestedSize, this._suggestedBitmapSize);\n\t}\n\n\tprivate _resizeBitmap(newSize: Size): void {\n\t\tconst oldSize = this.bitmapSize;\n\t\tif (equalSizes(oldSize, newSize)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.canvasElement.width = newSize.width;\n\t\tthis.canvasElement.height = newSize.height;\n\t\tthis._emitBitmapSizeChanged(oldSize, newSize);\n\t}\n\n\tprivate _emitBitmapSizeChanged(oldSize: Size, newSize: Size): void {\n\t\tthis._bitmapSizeChangedListeners.forEach(listener => listener.call(this, oldSize, newSize));\n\t}\n\n\tprivate _suggestNewBitmapSize(newSize: Size): void {\n\t\tconst oldSuggestedSize = this._suggestedBitmapSize;\n\t\tconst finalNewSize = size(this._transformBitmapSize(newSize, this._canvasElementClientSize));\n\t\tconst newSuggestedSize = equalSizes(this.bitmapSize, finalNewSize) ? null : finalNewSize;\n\n\t\tif (oldSuggestedSize === null && newSuggestedSize === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (oldSuggestedSize !== null && newSuggestedSize !== null\n\t\t\t&& equalSizes(oldSuggestedSize, newSuggestedSize)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._suggestedBitmapSize = newSuggestedSize;\n\t\tthis._emitSuggestedBitmapSizeChanged(oldSuggestedSize, newSuggestedSize);\n\t}\n\n\tprivate _emitSuggestedBitmapSizeChanged(oldSize: Size | null, newSize: Size | null): void {\n\t\tthis._suggestedBitmapSizeChangedListeners.forEach(listener => listener.call(this, oldSize, newSize));\n\t}\n\n\tprivate _chooseAndInitObserver(): void {\n\t\tif (!this._allowResizeObserver) {\n\t\t\tthis._initDevicePixelRatioObservable();\n\t\t\treturn;\n\t\t}\n\n\t\tisDevicePixelContentBoxSupported()\n\t\t\t.then(isSupported =>\n\t\t\t\tisSupported?\n\t\t\t\t\tthis._initResizeObserver() :\n\t\t\t\t\tthis._initDevicePixelRatioObservable()\n\t\t\t);\n\t}\n\n\t// devicePixelRatio approach\n\tprivate _initDevicePixelRatioObservable(): void {\n\t\tif (this._canvasElement === null) {\n\t\t\t// it looks like we are already dead\n\t\t\treturn;\n\t\t}\n\n\t\tconst win = canvasElementWindow(this._canvasElement);\n\t\tif (win === null) {\n\t\t\tthrow new Error('No window is associated with the canvas');\n\t\t}\n\n\t\tthis._devicePixelRatioObservable = createDevicePixelRatioObservable(win);\n\t\tthis._devicePixelRatioObservable.subscribe(() => this._invalidateBitmapSize());\n\t\tthis._invalidateBitmapSize();\n\t}\n\n\tprivate _invalidateBitmapSize(): void {\n\t\tif (this._canvasElement === null) {\n\t\t\t// it looks like we are already dead\n\t\t\treturn;\n\t\t}\n\n\t\tconst win = canvasElementWindow(this._canvasElement);\n\t\tif (win === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ratio = this._devicePixelRatioObservable?.value ?? win.devicePixelRatio;\n\n\t\tconst canvasRects = this._canvasElement.getClientRects();\n\t\tconst newSize =\n\t\t\t// eslint-disable-next-line no-negated-condition\n\t\t\tcanvasRects[0] !== undefined ?\n\t\t\t\tpredictedBitmapSize(canvasRects[0], ratio) :\n\t\t\t\tsize({\n\t\t\t\t\twidth: this._canvasElementClientSize.width * ratio,\n\t\t\t\t\theight: this._canvasElementClientSize.height * ratio,\n\t\t\t\t});\n\t\tthis._suggestNewBitmapSize(newSize);\n\t}\n\n\t// ResizeObserver approach\n\tprivate _initResizeObserver(): void {\n\t\tif (this._canvasElement === null) {\n\t\t\t// it looks like we are already dead\n\t\t\treturn;\n\t\t}\n\n\t\tthis._canvasElementResizeObserver = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n\t\t\tconst entry = entries.find((entry: ResizeObserverEntry) => entry.target === this._canvasElement);\n\t\t\tif (!entry || !entry.devicePixelContentBoxSize || !entry.devicePixelContentBoxSize[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst entrySize = entry.devicePixelContentBoxSize[0];\n\t\t\tconst newSize = size({\n\t\t\t\twidth: entrySize.inlineSize,\n\t\t\t\theight: entrySize.blockSize,\n\t\t\t});\n\t\t\tthis._suggestNewBitmapSize(newSize);\n\t\t});\n\t\tthis._canvasElementResizeObserver.observe(this._canvasElement, { box: 'device-pixel-content-box' });\n\t}\n}\n\nexport type BindingTarget = {\n\ttype: 'device-pixel-content-box';\n\ttransform?: BitmapSizeTransformer;\n\toptions?: DevicePixelContentBoxBindingTargetOptions;\n};\n\nexport function bindTo(canvasElement: HTMLCanvasElement, target: BindingTarget): Binding {\n\tif (target.type === 'device-pixel-content-box') {\n\t\treturn new DevicePixelContentBoxBinding(canvasElement, target.transform, target.options);\n\t}\n\n\tthrow new Error('Unsupported binding target');\n}\n\nfunction canvasElementWindow(canvasElement: HTMLCanvasElement): Window | null {\n\t// According to DOM Level 2 Core specification, ownerDocument should never be null for HTMLCanvasElement\n\t// see https://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#node-ownerDoc\n\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\treturn canvasElement.ownerDocument!.defaultView;\n}\n\nfunction isDevicePixelContentBoxSupported(): Promise<boolean> {\n\treturn new Promise((resolve: (val: boolean) => void) => {\n\t\tconst ro = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n\t\t\tresolve(entries.every(entry => 'devicePixelContentBoxSize' in entry));\n\t\t\tro.disconnect();\n\t\t});\n\t\tro.observe(document.body, { box: 'device-pixel-content-box' });\n\t})\n\t\t.catch(() => false);\n}\n\nfunction predictedBitmapSize(canvasRect: DOMRect, ratio: number): Size {\n\treturn size({\n\t\twidth:\n\t\t\tMath.round(canvasRect.left * ratio + canvasRect.width * ratio) -\n\t\t\tMath.round(canvasRect.left * ratio),\n\t\theight:\n\t\t\tMath.round(canvasRect.top * ratio + canvasRect.height * ratio) -\n\t\t\tMath.round(canvasRect.top * ratio),\n\t});\n}\n", "import { Size } from './size.js';\nimport { Binding as CanvasElementBitmapSizeBinding } from './canvas-element-bitmap-size.js';\n\n/**\n * @experimental\n */\nexport interface MediaCoordinatesRenderingScope {\n\treadonly context: CanvasRenderingContext2D;\n\treadonly mediaSize: Size;\n}\n\n/**\n * @experimental\n */\nexport interface BitmapCoordinatesRenderingScope {\n\treadonly context: CanvasRenderingContext2D;\n\treadonly mediaSize: Size;\n\treadonly bitmapSize: Size;\n\treadonly horizontalPixelRatio: number;\n\treadonly verticalPixelRatio: number;\n}\n\n/**\n * @experimental\n */\nexport class CanvasRenderingTarget2D {\n\tprivate readonly _context: CanvasRenderingContext2D;\n\tprivate readonly _mediaSize: Size;\n\tprivate readonly _bitmapSize: Size;\n\n\tpublic constructor(context: CanvasRenderingContext2D, mediaSize: Size, bitmapSize: Size) {\n\t\tif (mediaSize.width === 0 || mediaSize.height === 0) {\n\t\t\tthrow new TypeError('Rendering target could only be created on a media with positive width and height');\n\t\t}\n\t\tthis._mediaSize = mediaSize;\n\n\t\t// !Number.isInteger(bitmapSize.width) || !Number.isInteger(bitmapSize.height)\n\t\tif (bitmapSize.width === 0 || bitmapSize.height === 0) {\n\t\t\tthrow new TypeError('Rendering target could only be created using a bitmap with positive integer width and height');\n\t\t}\n\t\tthis._bitmapSize = bitmapSize;\n\n\t\tthis._context = context;\n\t}\n\n\tpublic useMediaCoordinateSpace<T>(f: (scope: MediaCoordinatesRenderingScope) => T): T {\n\t\ttry {\n\t\t\tthis._context.save();\n\t\t\t// do not use resetTransform to support old versions of Edge\n\t\t\tthis._context.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\tthis._context.scale(this._horizontalPixelRatio, this._verticalPixelRatio);\n\t\t\treturn f({\n\t\t\t\tcontext: this._context,\n\t\t\t\tmediaSize: this._mediaSize,\n\t\t\t});\n\t\t} finally {\n\t\t\tthis._context.restore();\n\t\t}\n\t}\n\n\tpublic useBitmapCoordinateSpace<T>(f: (scope: BitmapCoordinatesRenderingScope) => T): T {\n\t\ttry {\n\t\t\tthis._context.save();\n\t\t\t// do not use resetTransform to support old versions of Edge\n\t\t\tthis._context.setTransform(1, 0, 0, 1, 0, 0);\n\t\t\treturn f({\n\t\t\t\tcontext: this._context,\n\t\t\t\tmediaSize: this._mediaSize,\n\t\t\t\tbitmapSize: this._bitmapSize,\n\t\t\t\thorizontalPixelRatio: this._horizontalPixelRatio,\n\t\t\t\tverticalPixelRatio: this._verticalPixelRatio,\n\t\t\t});\n\t\t} finally {\n\t\t\tthis._context.restore();\n\t\t}\n\t}\n\n\tprivate get _horizontalPixelRatio(): number {\n\t\treturn this._bitmapSize.width / this._mediaSize.width;\n\t}\n\n\tprivate get _verticalPixelRatio(): number {\n\t\treturn this._bitmapSize.height / this._mediaSize.height;\n\t}\n}\n\n/**\n * @experimental\n */\nexport function createCanvasRenderingTarget2D(\n\tbinding: CanvasElementBitmapSizeBinding,\n\tcontextOptions?: CanvasRenderingContext2DSettings\n): CanvasRenderingTarget2D {\n\tconst mediaSize = binding.canvasElementClientSize;\n\tconst bitmapSize = binding.bitmapSize;\n\tconst context = binding.canvasElement.getContext('2d', contextOptions);\n\tif (context === null) {\n\t\tthrow new Error('Could not get 2d drawing context from bound canvas element. Has the canvas already been set to a different context mode?');\n\t}\n\n\treturn new CanvasRenderingTarget2D(context, mediaSize, bitmapSize);\n}\n\n/**\n * @experimental\n */\nexport function tryCreateCanvasRenderingTarget2D(\n\tbinding: CanvasElementBitmapSizeBinding,\n\tcontextOptions?: CanvasRenderingContext2DSettings\n): CanvasRenderingTarget2D | null {\n\tconst mediaSize = binding.canvasElementClientSize;\n\tif (mediaSize.width === 0 || mediaSize.height === 0) {\n\t\treturn null;\n\t}\n\n\tconst bitmapSize = binding.bitmapSize;\n\tif (bitmapSize.width === 0 || bitmapSize.height === 0) {\n\t\treturn null;\n\t}\n\n\tconst context = binding.canvasElement.getContext('2d', contextOptions);\n\tif (context === null) {\n\t\treturn null;\n\t}\n\n\treturn new CanvasRenderingTarget2D(context, mediaSize, bitmapSize);\n}\n"],
  "mappings": "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",
  "names": ["size", "entry"]
}
